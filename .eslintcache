[{"/Users/kirk/Downloads/GrapeArt/src/index.js":"1","/Users/kirk/Downloads/GrapeArt/src/reportWebVitals.js":"2","/Users/kirk/Downloads/GrapeArt/src/App.tsx":"3","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/constants.ts":"4","/Users/kirk/Downloads/GrapeArt/src/Profile/Profile.tsx":"5","/Users/kirk/Downloads/GrapeArt/src/Featured/Featured.tsx":"6","/Users/kirk/Downloads/GrapeArt/src/Preview/Preview.tsx":"7","/Users/kirk/Downloads/GrapeArt/src/Header/Header.tsx":"8","/Users/kirk/Downloads/GrapeArt/src/utils/config/theme.tsx":"9","/Users/kirk/Downloads/GrapeArt/src/components/ConfirmDialog/ConfirmDialog.tsx":"10","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/utils.ts":"11","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/safe-math.ts":"12","/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/query.ts":"13","/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/types.ts":"14","/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/helper.ts":"15","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/schema.ts":"16","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/mintverification.ts":"17","/Users/kirk/Downloads/GrapeArt/src/utils/name-service.tsx":"18","/Users/kirk/Downloads/GrapeArt/src/Profile/FeedView.tsx":"19","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/WalletAddress.tsx":"20","/Users/kirk/Downloads/GrapeArt/src/Profile/SocialView.tsx":"21","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/ShareUrl.tsx":"22","/Users/kirk/Downloads/GrapeArt/src/Profile/OffersView.tsx":"23","/Users/kirk/Downloads/GrapeArt/src/components/static/SolCurrencyIcon.tsx":"24","/Users/kirk/Downloads/GrapeArt/src/Preview/ItemOffers.tsx":"25","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/withdrawOffer.ts":"26","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/various.ts":"27","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/createDAOProposal.ts":"28","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/depositInGrapeVine.ts":"29","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/buyNowListing.ts":"30","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelWithdrawOffer.ts":"31","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/sellNowListing.ts":"32","/Users/kirk/Downloads/GrapeArt/src/utils/web3/name-service.tsx":"33","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/acceptOffer.ts":"34","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelListing.ts":"35","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/submitOffer.ts":"36","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/constants.ts":"37","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/accounts.ts":"38","/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelOffer.ts":"39","/Users/kirk/Downloads/GrapeArt/src/components/static/GrapeIcon.tsx":"40","/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/RegexTextField.jsx":"41","/Users/kirk/Downloads/GrapeArt/src/utils/cache.tsx":"42","/Users/kirk/Downloads/GrapeArt/src/utils/web3/program-address.tsx":"43","/Users/kirk/Downloads/GrapeArt/src/utils/web3/name-auctioning.tsx":"44","/Users/kirk/Downloads/GrapeArt/src/i18n.js":"45","/Users/kirk/Downloads/GrapeArt/src/Identity/Identity.tsx":"46","/Users/kirk/Downloads/GrapeArt/src/Preview/Social.tsx":"47","/Users/kirk/Downloads/GrapeArt/src/Profile/GalleryView.tsx":"48","/Users/kirk/Downloads/GrapeArt/src/Profile/CurationView.tsx":"49","/Users/kirk/Downloads/GrapeArt/src/Profile/GalleryItem.tsx":"50","/Users/kirk/Downloads/GrapeArt/src/components/static/SolIcon.tsx":"51","/Users/kirk/Development/grape-art/src/index.js":"52","/Users/kirk/Development/grape-art/src/i18n.js":"53","/Users/kirk/Development/grape-art/src/reportWebVitals.js":"54","/Users/kirk/Development/grape-art/src/App.tsx":"55","/Users/kirk/Development/grape-art/src/utils/grapeTools/constants.ts":"56","/Users/kirk/Development/grape-art/src/Profile/Profile.tsx":"57","/Users/kirk/Development/grape-art/src/Featured/Featured.tsx":"58","/Users/kirk/Development/grape-art/src/Identity/Identity.tsx":"59","/Users/kirk/Development/grape-art/src/Header/Header.tsx":"60","/Users/kirk/Development/grape-art/src/Preview/Preview.tsx":"61","/Users/kirk/Development/grape-art/src/utils/config/theme.tsx":"62","/Users/kirk/Development/grape-art/src/components/ConfirmDialog/ConfirmDialog.tsx":"63","/Users/kirk/Development/grape-art/src/utils/grapeTools/utils.ts":"64","/Users/kirk/Development/grape-art/src/utils/grapeTools/safe-math.ts":"65","/Users/kirk/Development/grape-art/src/utils/cyberConnect/types.ts":"66","/Users/kirk/Development/grape-art/src/utils/cyberConnect/helper.ts":"67","/Users/kirk/Development/grape-art/src/utils/cyberConnect/query.ts":"68","/Users/kirk/Development/grape-art/src/utils/grapeTools/mintverification.ts":"69","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/constants.ts":"70","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/schema.ts":"71","/Users/kirk/Development/grape-art/src/Profile/FeedView.tsx":"72","/Users/kirk/Development/grape-art/src/utils/name-service.tsx":"73","/Users/kirk/Development/grape-art/src/utils/grapeTools/ShareUrl.tsx":"74","/Users/kirk/Development/grape-art/src/utils/grapeTools/WalletAddress.tsx":"75","/Users/kirk/Development/grape-art/src/Profile/CurationView.tsx":"76","/Users/kirk/Development/grape-art/src/Profile/GalleryView.tsx":"77","/Users/kirk/Development/grape-art/src/Profile/SocialView.tsx":"78","/Users/kirk/Development/grape-art/src/Profile/OffersView.tsx":"79","/Users/kirk/Development/grape-art/src/components/static/SolCurrencyIcon.tsx":"80","/Users/kirk/Development/grape-art/src/components/static/SolIcon.tsx":"81","/Users/kirk/Development/grape-art/src/Preview/Social.tsx":"82","/Users/kirk/Development/grape-art/src/Preview/ItemOffers.tsx":"83","/Users/kirk/Development/grape-art/src/utils/auctionHouse/withdrawOffer.ts":"84","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/various.ts":"85","/Users/kirk/Development/grape-art/src/utils/auctionHouse/createDAOProposal.ts":"86","/Users/kirk/Development/grape-art/src/utils/auctionHouse/depositInGrapeVine.ts":"87","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelWithdrawOffer.ts":"88","/Users/kirk/Development/grape-art/src/utils/auctionHouse/buyNowListing.ts":"89","/Users/kirk/Development/grape-art/src/utils/auctionHouse/sellNowListing.ts":"90","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelListing.ts":"91","/Users/kirk/Development/grape-art/src/Profile/GalleryItem.tsx":"92","/Users/kirk/Development/grape-art/src/utils/auctionHouse/acceptOffer.ts":"93","/Users/kirk/Development/grape-art/src/utils/web3/name-service.tsx":"94","/Users/kirk/Development/grape-art/src/components/static/GrapeIcon.tsx":"95","/Users/kirk/Development/grape-art/src/utils/auctionHouse/submitOffer.ts":"96","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/accounts.ts":"97","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelOffer.ts":"98","/Users/kirk/Development/grape-art/src/utils/grapeTools/RegexTextField.jsx":"99","/Users/kirk/Development/grape-art/src/utils/cache.tsx":"100","/Users/kirk/Development/grape-art/src/utils/web3/program-address.tsx":"101","/Users/kirk/Development/grape-art/src/utils/web3/name-auctioning.tsx":"102"},{"size":570,"mtime":1648056751537,"results":"103","hashOfConfig":"104"},{"size":362,"mtime":1648056751537,"results":"105","hashOfConfig":"104"},{"size":8199,"mtime":1648056751528,"results":"106","hashOfConfig":"104"},{"size":5163,"mtime":1648056751545,"results":"107","hashOfConfig":"104"},{"size":69211,"mtime":1648056874030,"results":"108","hashOfConfig":"104"},{"size":3801,"mtime":1648056751528,"results":"109","hashOfConfig":"104"},{"size":100435,"mtime":1648056751531,"results":"110","hashOfConfig":"104"},{"size":10417,"mtime":1648056751529,"results":"111","hashOfConfig":"104"},{"size":1270,"mtime":1648056751543,"results":"112","hashOfConfig":"104"},{"size":1764,"mtime":1648056751534,"results":"113","hashOfConfig":"104"},{"size":10549,"mtime":1648056751546,"results":"114","hashOfConfig":"104"},{"size":1902,"mtime":1648056751545,"results":"115","hashOfConfig":"104"},{"size":5681,"mtime":1648056751543,"results":"116","hashOfConfig":"104"},{"size":1650,"mtime":1648056751544,"results":"117","hashOfConfig":"104"},{"size":503,"mtime":1648056751543,"results":"118","hashOfConfig":"104"},{"size":7093,"mtime":1648056751540,"results":"119","hashOfConfig":"104"},{"size":491,"mtime":1648056751545,"results":"120","hashOfConfig":"104"},{"size":3920,"mtime":1648056751546,"results":"121","hashOfConfig":"104"},{"size":28039,"mtime":1648056751532,"results":"122","hashOfConfig":"104"},{"size":7266,"mtime":1648056751545,"results":"123","hashOfConfig":"104"},{"size":12736,"mtime":1648056751533,"results":"124","hashOfConfig":"104"},{"size":10610,"mtime":1648056751545,"results":"125","hashOfConfig":"104"},{"size":74193,"mtime":1648056751533,"results":"126","hashOfConfig":"104"},{"size":4145,"mtime":1648056751535,"results":"127","hashOfConfig":"104"},{"size":107442,"mtime":1648056751530,"results":"128","hashOfConfig":"104"},{"size":4810,"mtime":1648056751542,"results":"129","hashOfConfig":"104"},{"size":7501,"mtime":1648056751540,"results":"130","hashOfConfig":"104"},{"size":6365,"mtime":1648056751539,"results":"131","hashOfConfig":"104"},{"size":3618,"mtime":1648056751539,"results":"132","hashOfConfig":"104"},{"size":9933,"mtime":1648056751538,"results":"133","hashOfConfig":"104"},{"size":6701,"mtime":1648056751539,"results":"134","hashOfConfig":"104"},{"size":5189,"mtime":1648056751540,"results":"135","hashOfConfig":"104"},{"size":2163,"mtime":1648056751547,"results":"136","hashOfConfig":"104"},{"size":9021,"mtime":1648056751538,"results":"137","hashOfConfig":"104"},{"size":4512,"mtime":1648056751538,"results":"138","hashOfConfig":"104"},{"size":8756,"mtime":1648056751541,"results":"139","hashOfConfig":"104"},{"size":2509,"mtime":1648056751539,"results":"140","hashOfConfig":"104"},{"size":17832,"mtime":1648056751539,"results":"141","hashOfConfig":"104"},{"size":4422,"mtime":1648056751538,"results":"142","hashOfConfig":"104"},{"size":9419,"mtime":1648056751535,"results":"143","hashOfConfig":"104"},{"size":689,"mtime":1648056751544,"results":"144","hashOfConfig":"104"},{"size":2035,"mtime":1648056751542,"results":"145","hashOfConfig":"104"},{"size":4074,"mtime":1648056751547,"results":"146","hashOfConfig":"104"},{"size":2356,"mtime":1648056751546,"results":"147","hashOfConfig":"104"},{"size":1184,"mtime":1648056751536,"results":"148","hashOfConfig":"104"},{"size":31699,"mtime":1648056751530,"results":"149","hashOfConfig":"104"},{"size":28243,"mtime":1648056751531,"results":"150","hashOfConfig":"104"},{"size":3232,"mtime":1648056751532,"results":"151","hashOfConfig":"104"},{"size":8507,"mtime":1648056751532,"results":"152","hashOfConfig":"104"},{"size":6659,"mtime":1648056751532,"results":"153","hashOfConfig":"104"},{"size":1411,"mtime":1648056751535,"results":"154","hashOfConfig":"104"},{"size":570,"mtime":1648511006354,"results":"155","hashOfConfig":"156"},{"size":1184,"mtime":1648511006354,"results":"157","hashOfConfig":"156"},{"size":362,"mtime":1648511006354,"results":"158","hashOfConfig":"156"},{"size":8199,"mtime":1648511006349,"results":"159","hashOfConfig":"156"},{"size":5264,"mtime":1648511006356,"results":"160","hashOfConfig":"156"},{"size":69947,"mtime":1648516595991,"results":"161","hashOfConfig":"156"},{"size":3801,"mtime":1648511006349,"results":"162","hashOfConfig":"156"},{"size":31699,"mtime":1648511006350,"results":"163","hashOfConfig":"156"},{"size":10417,"mtime":1648511006350,"results":"164","hashOfConfig":"156"},{"size":100435,"mtime":1648511006351,"results":"165","hashOfConfig":"156"},{"size":1270,"mtime":1648511006356,"results":"166","hashOfConfig":"156"},{"size":1764,"mtime":1648511006352,"results":"167","hashOfConfig":"156"},{"size":10549,"mtime":1648511006357,"results":"168","hashOfConfig":"156"},{"size":1902,"mtime":1648511006356,"results":"169","hashOfConfig":"156"},{"size":1650,"mtime":1648511006356,"results":"170","hashOfConfig":"156"},{"size":503,"mtime":1648511006356,"results":"171","hashOfConfig":"156"},{"size":5681,"mtime":1648511006356,"results":"172","hashOfConfig":"156"},{"size":491,"mtime":1648511006356,"results":"173","hashOfConfig":"156"},{"size":2509,"mtime":1648511006355,"results":"174","hashOfConfig":"156"},{"size":7093,"mtime":1648511006355,"results":"175","hashOfConfig":"156"},{"size":28355,"mtime":1648514847072,"results":"176","hashOfConfig":"156"},{"size":3920,"mtime":1648511006357,"results":"177","hashOfConfig":"156"},{"size":10610,"mtime":1648511006356,"results":"178","hashOfConfig":"156"},{"size":7764,"mtime":1648513440218,"results":"179","hashOfConfig":"156"},{"size":8507,"mtime":1648511006351,"results":"180","hashOfConfig":"156"},{"size":3199,"mtime":1648513800531,"results":"181","hashOfConfig":"156"},{"size":12736,"mtime":1648511006352,"results":"182","hashOfConfig":"156"},{"size":74193,"mtime":1648511006352,"results":"183","hashOfConfig":"156"},{"size":4145,"mtime":1648511006352,"results":"184","hashOfConfig":"156"},{"size":1411,"mtime":1648511006352,"results":"185","hashOfConfig":"156"},{"size":28243,"mtime":1648511006351,"results":"186","hashOfConfig":"156"},{"size":109714,"mtime":1648512276202,"results":"187","hashOfConfig":"156"},{"size":4810,"mtime":1648511006355,"results":"188","hashOfConfig":"156"},{"size":7501,"mtime":1648511006355,"results":"189","hashOfConfig":"156"},{"size":6365,"mtime":1648511006354,"results":"190","hashOfConfig":"156"},{"size":3618,"mtime":1648511006355,"results":"191","hashOfConfig":"156"},{"size":6701,"mtime":1648511006354,"results":"192","hashOfConfig":"156"},{"size":9933,"mtime":1648511006354,"results":"193","hashOfConfig":"156"},{"size":5189,"mtime":1648511006355,"results":"194","hashOfConfig":"156"},{"size":4512,"mtime":1648511006354,"results":"195","hashOfConfig":"156"},{"size":6986,"mtime":1648513771903,"results":"196","hashOfConfig":"156"},{"size":9021,"mtime":1648511006354,"results":"197","hashOfConfig":"156"},{"size":2163,"mtime":1648511006357,"results":"198","hashOfConfig":"156"},{"size":9419,"mtime":1648511006352,"results":"199","hashOfConfig":"156"},{"size":8756,"mtime":1648511006355,"results":"200","hashOfConfig":"156"},{"size":17832,"mtime":1648511006355,"results":"201","hashOfConfig":"156"},{"size":4422,"mtime":1648511006354,"results":"202","hashOfConfig":"156"},{"size":689,"mtime":1648511006356,"results":"203","hashOfConfig":"156"},{"size":2035,"mtime":1648511006356,"results":"204","hashOfConfig":"156"},{"size":4074,"mtime":1648511006357,"results":"205","hashOfConfig":"156"},{"size":2356,"mtime":1648511006357,"results":"206","hashOfConfig":"156"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x0oi42",{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"312"},"2k4ri8",{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"320"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"323","usedDeprecatedRules":"320"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"320"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"320"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"320"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"320"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"320"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"320"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"320"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":1,"source":"363","usedDeprecatedRules":"320"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"320"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"320"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"320"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":1,"source":"375","usedDeprecatedRules":"320"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"320"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"320"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"320"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"320"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"320"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"320"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"320"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"320"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"320"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"320"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"320"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"320"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"320"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"320"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"320"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"320"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"320"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"320"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"320"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"320"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},"/Users/kirk/Downloads/GrapeArt/src/index.js",["448"],"/Users/kirk/Downloads/GrapeArt/src/reportWebVitals.js",[],"/Users/kirk/Downloads/GrapeArt/src/App.tsx",["449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467"],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/constants.ts",["468"],"/Users/kirk/Downloads/GrapeArt/src/Profile/Profile.tsx",["469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553"],"/Users/kirk/Downloads/GrapeArt/src/Featured/Featured.tsx",["554","555","556","557","558","559","560","561","562"],"/Users/kirk/Downloads/GrapeArt/src/Preview/Preview.tsx",["563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635"],"/Users/kirk/Downloads/GrapeArt/src/Header/Header.tsx",["636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668"],"/Users/kirk/Downloads/GrapeArt/src/utils/config/theme.tsx",["669","670"],"/Users/kirk/Downloads/GrapeArt/src/components/ConfirmDialog/ConfirmDialog.tsx",["671"],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/utils.ts",["672"],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/safe-math.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/query.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/types.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/cyberConnect/helper.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/schema.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/mintverification.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/name-service.tsx",["673","674","675","676"],"/Users/kirk/Downloads/GrapeArt/src/Profile/FeedView.tsx",["677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713"],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/WalletAddress.tsx",["714","715"],"/Users/kirk/Downloads/GrapeArt/src/Profile/SocialView.tsx",["716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739"],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/ShareUrl.tsx",["740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760"],"/Users/kirk/Downloads/GrapeArt/src/Profile/OffersView.tsx",["761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804"],"/Users/kirk/Downloads/GrapeArt/src/components/static/SolCurrencyIcon.tsx",[],"/Users/kirk/Downloads/GrapeArt/src/Preview/ItemOffers.tsx",["805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/withdrawOffer.ts",["850","851","852"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/various.ts",["853","854","855"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/createDAOProposal.ts",["856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/depositInGrapeVine.ts",["877","878","879","880"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/buyNowListing.ts",["881","882","883"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelWithdrawOffer.ts",["884","885","886","887"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/sellNowListing.ts",["888","889"],"/Users/kirk/Downloads/GrapeArt/src/utils/web3/name-service.tsx",[],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/acceptOffer.ts",["890","891","892"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelListing.ts",["893"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/submitOffer.ts",["894","895"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/constants.ts",[],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/helpers/accounts.ts",["896","897","898","899","900"],"/Users/kirk/Downloads/GrapeArt/src/utils/auctionHouse/cancelOffer.ts",["901"],"/Users/kirk/Downloads/GrapeArt/src/components/static/GrapeIcon.tsx",[],"/Users/kirk/Downloads/GrapeArt/src/utils/grapeTools/RegexTextField.jsx",[],"/Users/kirk/Downloads/GrapeArt/src/utils/cache.tsx",["902"],"/Users/kirk/Downloads/GrapeArt/src/utils/web3/program-address.tsx",["903"],"/Users/kirk/Downloads/GrapeArt/src/utils/web3/name-auctioning.tsx",[],"/Users/kirk/Downloads/GrapeArt/src/i18n.js",[],"/Users/kirk/Downloads/GrapeArt/src/Identity/Identity.tsx",["904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923"],"/Users/kirk/Downloads/GrapeArt/src/Preview/Social.tsx",["924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955"],"/Users/kirk/Downloads/GrapeArt/src/Profile/GalleryView.tsx",["956","957","958","959","960","961","962","963","964","965","966"],"/Users/kirk/Downloads/GrapeArt/src/Profile/CurationView.tsx",["967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003"],"/Users/kirk/Downloads/GrapeArt/src/Profile/GalleryItem.tsx",["1004","1005","1006","1007","1008","1009"],"/Users/kirk/Downloads/GrapeArt/src/components/static/SolIcon.tsx",[],"/Users/kirk/Development/grape-art/src/index.js",["1010"],"import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import i18n (needs to be bundled) \nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["1011","1012"],"/Users/kirk/Development/grape-art/src/i18n.js",[],"/Users/kirk/Development/grape-art/src/reportWebVitals.js",[],"/Users/kirk/Development/grape-art/src/App.tsx",["1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import React, { FC, ReactNode, useCallback, useMemo, Suspense } from 'react';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n//import { LogView } from \"./Log/Log\";\nimport { ProfileView } from \"./Profile/Profile\";\nimport { PreviewView } from \"./Preview/Preview\";\nimport { FeaturedView } from \"./Featured/Featured\";\nimport { IdentityView } from \"./Identity/Identity\";\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport {\n  Box,\n  Grid,\n  Paper,\n  Container,\n  Typography,\n  AppBar,\n} from '@mui/material';\n\nimport Header from './Header/Header';\nimport { SnackbarProvider } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Connection, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\nimport { Helmet } from 'react-helmet';\n\nimport { useSnackbar } from 'notistack';\n\nimport ConfirmDialog from './components/ConfirmDialog/ConfirmDialog';\n\nimport { useTranslation } from 'react-i18next';\n\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n\n/*\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n*/\n\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    //getTorusWallet,\n  } from '@solana/wallet-adapter-wallets';\n\n\n//import { mainListItems, secondaryListItems } from './components/SidebarList/SidebarList';\nimport grapeTheme from  './utils/config/theme'\nimport \"./App.less\";\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from './utils/grapeTools/constants';\n\nfunction Copyright(props: any): JSX.Element {\n  const { t, i18n } = useTranslation();\n    return (\n    <Typography sx={{background:'transparent'}} variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {t('Powered by Grape and Metaplex on Solana')}\n      {/*\n      <Link color=\"inherit\" href=\"https://verify.grapes.network\">\n        Grape Network | Dashboard v1.1.5\n      </Link>\n      */}\n    </Typography>\n  );\n}\n\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  //const endpoint =  useMemo(() => clusterApiUrl(network), [network]); // GRAPE_RPC_ENDPOINT;\n  //const endpoint =  GRAPE_RPC_ENDPOINT;\n  const endpoint =  FREE_RPC_ENDPOINT;\n  const wallets = useMemo(() => [\n  \n    getPhantomWallet(),\n    getSolflareWallet(),\n    getSlopeWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n    getLedgerWallet(),\n  \n    //getTorusWallet({\n    //  options: { clientId: 'BCX2hQWDez2_qJhmSuQC7DXD4OG0VfGEFjCZfLar2EA5NvKyudCxOOlOcQ4YZbPGQhdwLonSXZr3i_siIJVhtwI' }\n    //}),\n  /*  \n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n  */  \n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n  \n  /*\n  const { enqueueSnackbar } = useSnackbar();\n  const onError = useCallback(\n      (error) => {\n          enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n          console.error(error);\n      },\n      [enqueueSnackbar]\n  );\n  */\n\n  return (\n    <>\n      <Suspense fallback=\"loading\">\n          <ThemeProvider theme={grapeTheme}>\n              <div className=\"grape-gradient-background\">\n              <SnackbarProvider>\n                  <ConnectionProvider endpoint={endpoint}>\n                      <WalletProvider wallets={wallets} autoConnect>\n                      \n                      <Grid \n                          //color={grapeTheme.palette.primary.light}\n                          sx={{ \n                            flex: 1\n                          }}>\n                          <CssBaseline />\n                          <Router>\n                          <AppBar position=\"fixed\" color=\"primary\" style={{ background: 'rgba(0,0,0,0.5)' }}>\n                              <Header\n                                  open={open} \n                                  toggleDrawer={toggleDrawer}\n                              />\n                          </AppBar>\n                              \n                            <Grid\n                              component=\"main\"\n                              sx={{\n                                  mt: 6,\n                                  display: 'flex',\n                                  flexGrow: 1\n                              }}\n                              >\n                              <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4}}>\n                                  <ConfirmDialog />\n                                  <Routes>\n\n                                    <Route path=\"/featured\" element={<FeaturedView/>} />\n\n                                    <Route path=\"/\" element={<ProfileView/>}>\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                    </Route>\n                                    <Route index element={<ProfileView/>} />\n                                    \n                                    <Route path=\"profile/*\" element={<ProfileView />} >\n                                        <Route path=\":handlekey\" element={<ProfileView />} />\n                                    </Route>\n\n                                    <Route path=\"collection/*\" element={<ProfileView />} >\n                                        <Route path=\":handlekey\" element={<ProfileView />} />\n                                    </Route>\n                                    \n                                    <Route path=\"preview/*\" element={<PreviewView />}>\n                                        <Route path=\":handlekey\" element={<PreviewView />} />\n                                    </Route>\n\n                                    <Route path=\"identity/*\" element={<IdentityView />}>\n                                        <Route path=\":handlekey\" element={<IdentityView />} />\n                                    </Route>\n\n                                    <Route path=\"*\" element={<NotFound />} />\n                                  </Routes>\n                                  \n                                  <Copyright sx={{ mt: 4 }} />\n                              </Container>\n                            </Grid>\n                          </Router>\n                      </Grid>\n                      \n                      </WalletProvider>\n                  </ConnectionProvider>\n              </SnackbarProvider>\n              </div>\n          </ThemeProvider>\n        </Suspense>\n    </>\n  );\n}\n\nexport const NotFound = () => {\n  return (\n    <div style={{ height: \"100%\", overflow: \"auto\" }}>\n      <Paper className=\"grape-paper-background\">\n        <Grid \n          className=\"grape-paper\" \n          container\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\">\n          <Grid item>\n            <Typography \n              align=\"center\"\n              variant=\"h3\">\n              {'No Grapes Here...'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n  </div>\n  )\n}\n\n//export const Dashboard: FC<{ children: ReactNode }> = ({ children }) => {\nexport default function Dashboard() {\n  return <DashboardContent />;\n}",["1032","1033"],"/Users/kirk/Development/grape-art/src/utils/grapeTools/constants.ts",["1034"],"\nexport const FREE_RPC_ENDPOINT = process.env.REACT_APP_API_FREE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\nexport const GRAPE_RPC_ENDPOINT = process.env.REACT_APP_API_GRAPE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\n\n//export const GRAPE_PREVIEW = '/preview/';\n//export const GRAPE_PROFILE = '/profile/';\n//export const GRAPE_IDENTITY = '/identity/';\n\nexport const GRAPE_PREVIEW = '/preview?pkey=';\nexport const GRAPE_PROFILE = '/profile?pkey=';\nexport const GRAPE_IDENTITY = '/identity?pkey=';\n\nexport const GRAPE_RPC_REFRESH = 25000;\nexport const GRAPE_TREASURY = 'GrapevviL94JZRiZwn2LjpWtmDacXU8QhAJvzpUMMFdL';\n\nexport const TOKEN_VERIFICATION_ADDRESS = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\nexport const TOKEN_VERIFICATION_NAME = 'Grape';\nexport const TOKEN_VERIFICATION_AMOUNT = 1000;\nexport const TOKEN_REPORT_AMOUNT = 10;\nexport const REPORT_ALERT_THRESHOLD = 1;\nexport const TOKEN_REALM_ID = 'By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip';\nexport const TOKEN_REALM_PROGRAM_ID = 'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw';\n\nexport const VERIFIED_DAO_ARRAY = [{\n    address:'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK',\n}]\n\nexport const FEATURED_DAO_ARRAY = [{\n    address:'66pJhhESDjdeBBDdkKmxYYd7q6GUggYPWjxpMKNX39KV',\n    daourl:'https://realms.today/dao/Ukraine',\n    img:'/solana4ukraine.png',\n    title:'Solana for Ukraine',\n    text:'NFT Artists come together in the DAO made exlusively to help out Ukraine, all proceeds of these NFT\\'s will be donated to help the Ukrainian people'\n}]\n\nexport const OTHER_MARKETPLACES = new Array(\n    {\n        name: 'Magic Eden',\n        logo: 'https://magiceden.io/static/media/logo.ca418d75.svg',\n        //logo: 'https://magiceden.io/img/logo.png',\n        address: 'GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp',\n        previewUrl: 'https://www.magiceden.io/item-details/',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'SolanArt',\n        logo: 'https://solanart.io/static/media/logo.0054f7e7.png',\n        address: '3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK',\n        previewUrl: 'https://solanart.io/search/?token=',\n        url: 'https://solanart.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/favicon-32x32.png',\n        address: 'F4ghBzHFNgJxV4wEQDchU5i7n4XWWMBSaq7CuswGiVsr',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/favicon-32x32.png',\n        address: 'BweTPKW9QsWZTJnfbLz88ekKaWw7HrBJsStrduHryPgk',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Alph Art',\n        //logo: 'https://alpha.art/icon-root.svg',\n        logo: 'https://alpha.art/logo_192.png',\n        address: '4pUQS4Jo2dsfWzt3VgHXy3H6RYnEDd11oWPiaM2rdAPw',\n        previewUrl: 'https://alpha.art/t/',\n        url: 'https://www.alpha.art'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: '73tF8uN3BwVzUzwETv59WNAafuEBct2zTgYbYXLggQiU',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HHvnfyY7vNWhjeHqCVyMPr4UjDp3ptqu3QbuFoCkrm8r',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HznNaC2cz1iXMtHMG3HAgMH2xkrt2iTXfUKz6wwAAVPB',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'G6xptnrkj4bxg9H9ZyPzmAnNsGghSxZ7oBCL1KNKJUza',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: '7Ppgch9d4XRAygVNJP4bDkc7V6htYXGfghX4zzG9r4cH',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'EQEpTS8SiVPUxyqRgT2Jdx9dHEwbpcbSZ2sotiAUZ7i7',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'CPo76cw52gKMTyvCS9GpnnZfvmkQQxovLwQFxonZrCRU',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    }\n);","/Users/kirk/Development/grape-art/src/Profile/Profile.tsx",["1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119"],"/Users/kirk/Development/grape-art/src/Featured/Featured.tsx",["1120","1121","1122","1123","1124","1125","1126","1127","1128"],"import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\n\nimport { GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\n\nimport {\n    Grid,\n    Button,\n    ButtonGroup,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Typography,\n} from '@mui/material';\n\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { CardActionArea } from '@mui/material';\n\nimport { useTranslation } from 'react-i18next';\n\nexport function FeaturedView(props: any) {\n\nconst { t, i18n } = useTranslation();\n    \n  return (\n        <>\n            {FEATURED_DAO_ARRAY.map((featured: any, key: number) => (\n            <Card sx={{borderRadius:'26px',mb:2}}>\n                <CardActionArea\n                    component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                >\n                    \n                    <CardMedia\n                        component=\"img\"\n                        image={featured.img}\n                        alt={featured.title}\n                            sx={{\n                                maxHeight: '250',\n                                background: 'rgba(0, 0, 0, 1)',\n                                m:0,\n                                p:0,\n                            }} \n                        />\n                        \n                    <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {featured.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.primary\">\n                        {featured.text}\n                    </Typography>\n                        <img\n                            src={featured.img}\n                            alt=\"\"\n                            style={{\n                                opacity: '0.025',\n                                position: 'absolute',\n                                marginTop:2,\n                                marginBottom:2,\n                                padding:1,\n                                top:'-20%',\n                                left:'-20%',\n                                width:'150%'\n                            }}\n                        />\n                    </CardContent>\n                \n                </CardActionArea>\n                <CardActions>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justifyContent='flex-end'\n                        alignContent='flex-end'\n                        sx={{\n                            p:1,pr:1.25\n                        }}\n                    >\n                        <ButtonGroup variant=\"text\">\n                            <Button size=\"small\" \n                                component=\"a\" href={`${featured.daourl}`} target=\"_blank\"\n                                sx={{borderRadius:'24px', color:'white'}}>\n                                {t('View DAO')}</Button>\n                            <Button size=\"small\"    \n                                component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                                sx={{borderRadius:'24px', color:'white'}}\n                            >{t('View Collection')}</Button>\n                            <ShareSocialURL url={'https://grape.art'+GRAPE_PROFILE+featured.address} title={'Grape Profile | '+trimAddress(featured.address,4)} />\n                        </ButtonGroup>\n                    </Grid>\n                </CardActions>\n            </Card> \n            ))}\n        </>\n  );\n}","/Users/kirk/Development/grape-art/src/Identity/Identity.tsx",["1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148"],"\nimport React, { useEffect, Suspense } from \"react\";\nimport { Global } from '@emotion/react';\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils';\n// @ts-ignore\nimport { PublicKey, Connection, Commitment } from '@solana/web3.js';\n\nimport { styled } from '@mui/material/styles';\nimport { grey } from '@mui/material/colors';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport {\n    Button,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Container,\n    Skeleton,\n    Avatar,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemText,\n    ListItemButton,\n    Tooltip,\n    SwipeableDrawer,\n    CssBaseline,\n    Tab,\n} from '@mui/material';\n\nimport {\n    TabContext,\n    TabList,\n    TabPanel,\n} from '@mui/lab';\n\nimport PortraitIcon from '@mui/icons-material/Portrait';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport PublicIcon from '@mui/icons-material/Public';\nimport QrCode2Icon from '@mui/icons-material/QrCode2';\n\nimport SolIcon from '../components/static/SolIcon';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\n\nimport { ValidateAddress, trimAddress, timeAgo, formatBlockTime } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PROFILE, GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { ConstructionOutlined, JavascriptRounded } from \"@mui/icons-material\";\n\nimport { useTranslation } from 'react-i18next';\n\nexport function IdentityView(props: any){\n    const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [solanaHoldings, setSolanaHoldings] = React.useState(null);\n    const [solanaBalance, setSolanaBalance] = React.useState(null);\n    const [solanaTransactions, setSolanaTransactions] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingTransactions, setLoadingTransactions] = React.useState(false);\n    const { publicKey } = useWallet();\n    const [pubkey, setPubkey] = React.useState(props.pubkey || null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"address\") || handlekey;\n    const [value, setValue] = React.useState('1');\n\n    const { t, i18n } = useTranslation();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const fetchSolanaBalance = async () => {\n        const response = await ggoconnection.getBalance(new PublicKey(pubkey));\n        setSolanaBalance(response);\n    }\n\n    const fetchSolanaTransactions = async () => {\n        setLoadingTransactions(true);\n        const response = await ggoconnection.getSignaturesForAddress(new PublicKey(pubkey));\n\n        let memos: any[] = [];\n        let signatures: any[] = [];\n        let counter = 0;\n        // get last 100\n        for (var value of response){\n            if (counter<100){\n                signatures.push(value.signature);\n                memos.push(value.memo);\n            }\n            counter++;\n        }\n        const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n\n        let cnt=0;\n        let tx: any[] = [];\n        for (var tvalue of getTransactionAccountInputs2){\n\n            //if (cnt===0)\n            //    console.log(signatures[cnt]+': '+JSON.stringify(tvalue));\n            \n            let txtype = \"\";\n            if (tvalue.meta?.logMessages){\n                for (var logvalue of tvalue.meta.logMessages){\n                    //console.log(\"txvalue: \"+JSON.stringify(logvalue));\n                    if (logvalue.includes(\"Program log: Instruction: \")){\n                        if (txtype.length > 0)\n                            txtype += \", \";\n                        txtype += logvalue.substring(26,logvalue.length);\n                        \n                    }\n                }\n            }\n\n            tx.push({\n                signature:signatures[cnt],\n                blockTime:tvalue.blockTime,\n                //amount:tx_cost,\n                //owner:owner,\n                memo:memos[cnt],\n                source:null,\n                type:txtype,\n            });\n            \n            cnt++;\n        }\n\n        //setSolanaTransactions(response);\n        setSolanaTransactions(tx);\n        setLoadingTransactions(false);\n    }\n\n    const fetchSolanaTokens = async () => {\n        //const response = await ggoconnection.getTokenAccountsByOwner(new PublicKey(pubkey), {programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\")});\n        /*\n            let meta_final = JSON.parse(item.account.data);\n            let buf = Buffer.from(JSON.stringify(item.account.data), 'base64');\n        */\n        // Use JSONParse for now until we decode \n        const body = {\n            method: \"getTokenAccountsByOwner\",\n            jsonrpc: \"2.0\",\n            params: [\n              pubkey,\n              { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n              { encoding: \"jsonParsed\", commitment: \"processed\" },\n            ],\n            id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n        const resp = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n        })\n        const json = await resp.json();\n        const resultValues = json.result.value\n        //return resultValues;\n\n        let holdings: any[] = [];\n        for (var item of resultValues){\n            //let buf = Buffer.from(item.account, 'base64');\n            //console.log(\"item: \"+JSON.stringify(item));\n            if (item.account.data.parsed.info.tokenAmount.amount > 0)\n                holdings.push(item);\n            // consider using https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json to view more details on the tokens held\n        }\n\n        let sortedholdings = JSON.parse(JSON.stringify(holdings));\n        sortedholdings.sort((a:any,b:any) => (b.account.data.parsed.info.tokenAmount.amount - a.account.data.parsed.info.tokenAmount.amount));\n\n        setSolanaHoldings(sortedholdings);\n    } \n\n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n\n        const solcdn = 'https://solana-cdn.com/cdn-cgi/image/width=256/';\n        if (img_url.indexOf(solcdn) > -1){\n                img_url = img_url.slice(solcdn.length, img_url.length);\n        }\n\n        setProfilePictureUrl(img_url);\n    }\n    \n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            if (domain.toString()!==pubkey)\n                setSolanaDomain(domain)\n        }\n    }\n\n    React.useEffect(() => {\n        if (urlParams){\n            if (!pubkey){\n                if (ValidateAddress(urlParams))\n                    setPubkey(urlParams);\n            }\n        } else if (publicKey) {\n            setPubkey(publicKey.toBase58());\n        }\n    }, [urlParams, publicKey]);\n\n\n    React.useEffect(() => {\n        if (pubkey){\n            setLoading(true);\n                fetchProfilePicture();\n                fetchSolanaDomain();\n                fetchSolanaTokens();\n                fetchSolanaBalance();\n                fetchSolanaTransactions();\n            setLoading(false);\n        }\n    }, [pubkey]);\n\n\n\n    if (loading){\n        return (\n            <>\n                {t('Loading your solana profile')}\n            </>\n        );\n    } else{\n        return (\n            <Container>\n                    <Box\n                        className=\"grape-art-generic-placeholder-container\"\n                    > \n                            <Grid \n                                container \n                                direction=\"column\" \n                                spacing={2} \n                                alignItems=\"center\"\n                                rowSpacing={8}\n                            >\n                                \n                                <Grid \n                                    item xs={12}\n                                >\n                                    <Tooltip title={t('Back go Profile')}>\n                                        <Button\n                                            component={Link} \n                                            to={`${GRAPE_PROFILE}${pubkey}`}\n                                            sx={{borderRadius:'24px',textTransform:'none',color:'white'}}\n                                            >\n                                            <Typography\n                                                variant=\"h3\"\n                                                color=\"inherit\"\n                                                display='flex'\n                                                sx={{mt:2}}\n                                            >\n                                                <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                                .art\n                                                </Typography>\n                                        </Button>\n                                    </Tooltip>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h5\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        ><SolIcon sx={{fontSize:'20px',mr:1}} /> {t('SOLANA IDENTITY')}</Typography>\n\n                                    </Grid>\n                            </Grid>\n           \n           \n                            <>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    {t('ADDRESS')}:\n                                </Typography>   \n                                    <List dense={true}>\n                                        <ListItem>\n                                            <Tooltip title={t('View on Solana Explorer')}>\n                                                <ListItemButton \n                                                    component=\"a\" \n                                                    href={`https://explorer.solana.com/address/${pubkey}`}\n                                                    target=\"_blank\"\n                                                    sx={{borderRadius:'24px'}}\n                                                >\n                                                    <ListItemAvatar>\n                                                        <Avatar\n                                                            sx={{backgroundColor:'#222'}}\n                                                        >\n                                                            <AccountBalanceWalletIcon sx={{color:'white'}} />\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText\n                                                        primary={pubkey}\n                                                        secondary={t('Solana Address')}\n                                                    />\n                                                </ListItemButton>\n                                            </Tooltip>\n                                        </ListItem>\n                                    </List>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    {t('PROFILE')}:\n                                </Typography>   \n                                    <List dense={true}>\n                                        {profilePictureUrl &&\n                                            <ListItem>\n                                                {(profilePictureUrl.toLocaleUpperCase().indexOf(\"HTTPS://\") > -1) ? (\n                                                    <Tooltip title={t('View Image')}>\n                                                        <ListItemButton\n                                                            component=\"a\" \n                                                            href={profilePictureUrl}\n                                                            target=\"_blank\"\n                                                            sx={{borderRadius:'24px'}}                                           \n                                                        >\n                                                            <ListItemAvatar>\n                                                                <Avatar\n                                                                    sx={{backgroundColor:'#222'}}\n                                                                    src={profilePictureUrl}\n                                                                    alt='PFP'\n                                                                />\n                                                            </ListItemAvatar>\n                                                            <ListItemText\n                                                                primary={profilePictureUrl}\n                                                                secondary={t('Solana Profile Picture')}\n                                                            />\n                                                        </ListItemButton>\n                                                    </Tooltip>\n                                                )\n                                                :(\n                                                    <>\n                                                        <ListItemAvatar>\n                                                            <Avatar\n                                                                sx={{backgroundColor:'#222'}}\n                                                                src={profilePictureUrl}\n                                                                alt='PFP'\n                                                            />\n                                                        </ListItemAvatar>\n                                                        <ListItemText\n                                                            primary={profilePictureUrl}\n                                                            secondary={t('Solana Profile Picture')}\n                                                        />\n                                                    </>\n                                                )}\n                                            </ListItem>\n                                        }\n                                    </List>\n                                \n                                \n                                {solanaDomain &&\n                                    <>\n                                        <Typography\n                                            variant=\"h6\"\n                                        >\n                                            {t('DOMAINS/REGISTRATIONS')}: \n                                            <Typography\n                                                variant=\"body2\"\n                                                sx={{ml:2}}\n                                            >{solanaDomain && <>{solanaDomain.length}</>}\n                                            </Typography>\n                                        </Typography> \n                                    \n                                        <List dense={true}>\n                                                {solanaDomain && solanaDomain?.map((item: any) => (\n                                                    <ListItem>\n                                                        {(item.toLocaleUpperCase().indexOf(\".SOL\") > -1) ? (\n                                                            <Tooltip title={t('View registration')}>\n                                                                <ListItemButton\n                                                                    component=\"a\" \n                                                                    href={`https://naming.bonfida.org/#/domain/${item.slice(0,item.indexOf(\".sol\"))}`}\n                                                                    target=\"_blank\"\n                                                                    sx={{borderRadius:'24px'}}                                           \n                                                                >\n                                                                    <ListItemAvatar>\n                                                                        <Avatar\n                                                                            sx={{backgroundColor:'#222'}}\n                                                                        >\n                                                                            <PublicIcon sx={{color:'white'}} />\n                                                                        </Avatar>\n                                                                    </ListItemAvatar>\n                                                                    <ListItemText\n                                                                        primary={JSON.stringify(item)}\n                                                                        secondary={t('Solana Domain')}\n                                                                        \n                                                                    />\n                                                                </ListItemButton>\n                                                            </Tooltip>\n                                                        ):(\n                                                            <>\n                                                                <ListItemAvatar>\n                                                                    <Avatar\n                                                                        sx={{backgroundColor:'#222'}}\n                                                                    >\n                                                                        <PublicIcon sx={{color:'white'}} />\n                                                                    </Avatar>\n                                                                </ListItemAvatar>\n                                                                <ListItemText\n                                                                    primary={JSON.stringify(item)}\n                                                                    secondary={(item.slice(0,1) === '@') && <>{t('Twitter Handle')}</>}\n                                                                    \n                                                                />\n                                                            </>\n                                                        )}\n                                                    </ListItem>\n                                                ))}\n                                        </List>\n                                    </>\n                                }\n                                \n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    SOL:\n                                </Typography>   \n                                 \n                                    <List dense={true}>\n                                        <ListItem>\n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    sx={{backgroundColor:'#222'}}\n                                                >\n                                                    <SolCurrencyIcon sx={{color:'white'}} />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={(parseFloat(new TokenAmount(solanaBalance, 9).format()))}\n                                                secondary=\"Solana\"\n                                            />\n                                        </ListItem>\n                                    </List>\n\n                                    {solanaHoldings &&\n\n                                        <Box sx={{ width: '100%', typography: 'body1' }}>\n                                            <TabContext value={value}>\n                                                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                                                <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n                                                    <Tab sx={{color:'white'}} label={\n                                                        <Typography variant=\"h6\">{t('Tokens')} {solanaHoldings.length}</Typography>\n                                                    } value=\"1\" />\n                                                    <Tab sx={{color:'white'}} label={\n                                                        <Typography variant=\"h6\">{t('Transactions')}</Typography>\n                                                    } value=\"2\" />\n                                                </TabList>\n                                                </Box>\n                                                <TabPanel value=\"1\">\n                                                    \n                                                {solanaHoldings ?\n                                                    <List dense={true}>\n                                                        {solanaHoldings.length > 0 ? solanaHoldings.map((item: any) => (\n                                                            <ListItem>\n                                                                {item.account.data.parsed.info.tokenAmount.decimals === 0 ?\n                                                                <>\n                                                                    <Tooltip title=\"NFT\">\n                                                                        <ListItemButton \n                                                                            component={Link} to={`${GRAPE_PREVIEW}${item.account.data.parsed.info.mint}`}\n                                                                            sx={{borderRadius:'24px'}}\n                                                                        >\n                                                                            <ListItemAvatar>\n                                                                                <Avatar\n                                                                                    sx={{backgroundColor:'#222'}}\n                                                                                >\n                                                                                    <PortraitIcon sx={{color:'white'}} />\n                                                                                </Avatar>\n                                                                            </ListItemAvatar>\n                                                                            <ListItemText\n                                                                                primary={item.account.data.parsed.info.mint}\n                                                                                secondary={`x${item.account.data.parsed.info.tokenAmount.amount}`}\n                                                                                \n                                                                            />\n                                                                        </ListItemButton>\n                                                                    </Tooltip>\n                                                                </>\n                                                                :\n                                                                <>\n                                                                        <ListItemAvatar>\n                                                                        <Avatar\n                                                                            sx={{backgroundColor:'#222'}}\n                                                                        >\n                                                                            <QrCode2Icon sx={{color:'white'}} />\n                                                                        </Avatar>\n                                                                    </ListItemAvatar>\n                                                                    <ListItemText\n                                                                        primary={((new TokenAmount(item.account.data.parsed.info.tokenAmount.amount, item.account.data.parsed.info.tokenAmount.decimals).format()))}\n                                                                        secondary={item.account.data.parsed.info.mint}\n                                                                    />\n                                                                </>\n                                                                }\n                                                            </ListItem>\n                                                        ))\n                                                        :\n                                                        <></>}\n                                                    </List>\n                                                :\n                                                <List dense={true}>\n                                                    <ListItem key={0}>{t('No tokens on this address!')}</ListItem>    \n                                                </List>\n                                                }\n                                                </TabPanel>\n                                                <TabPanel value=\"2\">\n                                                {solanaTransactions ?\n                                                    <List dense={true}>\n                                                        {solanaTransactions.length > 0 ? solanaTransactions.map((item: any) => (\n                                                            <ListItem>\n                                                                <>\n                                                                    <ListItemText\n                                                                        primary={\n                                                                            <>\n                                                                                <Tooltip title={formatBlockTime(item.blockTime,true,true)}>\n                                                                                    <Button>\n                                                                                    {timeAgo(item.blockTime)}\n                                                                                    </Button>\n                                                                                </Tooltip> - {item.type}<br/> \n                                                                                <ListItemButton \n                                                                                    component=\"a\" \n                                                                                    href={`https://explorer.solana.com/address/${item.signature}`}\n                                                                                    target=\"_blank\"\n                                                                                    sx={{borderRadius:'24px'}}\n                                                                                >\n                                                                                    {item.signature}\n                                                                                </ListItemButton>\n                                                                            </>}\n                                                                        secondary={\n                                                                            <>\n                                                                                {item?.memo && <Typography variant=\"caption\">{item?.memo}</Typography>}\n                                                                            </>\n                                                                        }\n                                                                    />\n                                                                </>\n                                                            </ListItem>\n                                                        ))\n                                                        :\n                                                        <></>}\n                                                    </List>\n                                                    :\n                                                    <List dense={true}>\n                                                        {loadingTransactions ?\n                                                            <ListItem key={0}>{t('Loading transactions...')}</ListItem>    \n                                                        :\n                                                            <ListItem key={0}>{t('No transactions for this address!')}</ListItem>    \n                                                        }\n                                                    </List>\n                                                }\n\n                                                </TabPanel>\n                                            </TabContext>\n                                        </Box>\n                                    }\n                            </>\n                            \n                    </Box>\n                </Container>\n        );\n    }\n}","/Users/kirk/Development/grape-art/src/Header/Header.tsx",["1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],"import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\nimport { useNavigate } from 'react-router';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nimport { useSnackbar } from 'notistack';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\n\nimport {\n    MenuItem,\n    Menu,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    InputBase,\n    Paper,\n    Container,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\n\n\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { GRAPE_PROFILE, GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { ValidateAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { useTranslation } from 'react-i18next';\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nexport interface State extends SnackbarOrigin {\n    open: boolean;\n}\n\nfunction getParam(param: string) {\n    //return new URLSearchParams(document.location.search).get(param);\n    return new URLSearchParams(window.location.search).get(param);\n}\n\ninterface HeaderProps{\n    children?:React.ReactNode;\n}\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    border: '1px solid rgba(255,255,255,0.25)',\n    borderRadius: '17px',\n    backgroundColor: alpha(theme.palette.common.white, 0.015),\n    '&:hover': {\n        border: '1px solid rgba(255,255,255,0.75)',\n        backgroundColor: alpha(theme.palette.common.white, 0.1),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    marginTop: 5,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        width: 'auto',\n        marginLeft: 5,\n    },\n  }));\n\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: alpha(theme.palette.common.white, 0.25),\n  }));\n  \n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '100%',\n      },\n    },\n  }));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function Header(props: any) {\n    const { open_menu } = props;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom','Solflare']);\n    const [open_wallet, setOpenWallet] = React.useState(false);\n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isWalletOpen = Boolean(anchorEl);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const currPath = location.pathname;\n    const searchParams = new URLSearchParams(location.search);\n    //const currPath = location?.pathname ?? \"\";\n    const { enqueueSnackbar } = useSnackbar();\n\n    const routes = [\n        { name: \"Home\", path: \"/\" },\n        // { name: \"Servers\", path: \"/servers\" },\n\n        // { name: \"Settings\", path: \"/settings\" }\n    ]\n    \n    /*\n    const toggleDrawer = () => {\n        //setOpenDrawer(!open);\n        open = !open;//setOpen(!open);\n    };\n    */\n\n    \n    /*\n    async function connect() {\n        let wallet = new Wallet();\n        wallet.onChange = (wallet) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n\n    async function connectPhantom() {\n        let wallet = new PhantomWallet();\n        wallet.onChange = (wallet: any) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function connectSolflare() {\n        let wallet = new SolflareWallet();\n        wallet.onChange = () => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function onWalletConnect(wallet: any){\n        if(wallet){\n            let session = await wallet.signMessage('$GRAPE');\n            if(session){\n                setSession(session);\n            }\n        }\n    }\n    */\n    \n\n    //Menu\n    const menuId = 'primary-wallet-account-menu';\n    const menuWalletId = 'primary-fullwallet-account-menu';\n\n    const handleProfileMenuOpen = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        // this.props.parentCallback(\"Data from child\");\n    };\n\n    const handleWalletConnectClickOpen = (type: string, callback: any) => {\n        /*\n        switch(type) {\n            case \"sollet\":\n                connect();\n                break;\n            case \"phantom\":\n                connectPhantom();\n                break;\n            case \"solflare\":\n                connectSolflare();\n                break;\n            default:\n                break;\n        }\n        */\n       \n        callback && callback();\n    };\n\n    const handleCloseWallet = (value: any) => {\n        setOpenWallet(false);\n\n    };\n\n    function SimpleDialog(props: any) {\n        const { onClose, selectedValue, open_wallet } = props;\n\n        const handleCloseWallet = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: any) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleCloseWallet} aria-labelledby=\"simple-dialog-title\" open={open_wallet}>\n                <DialogTitle id=\"simple-dialog-title\">{t('Select Wallet')}</DialogTitle>\n                <List>\n                    {providers.map((provider) => (\n                        <ListItem button onClick={() => handleListItemClick(provider)} key={provider}>\n                            <ListItemText primary={provider} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n\n    const handleClickSnackbar = () => {\n        enqueueSnackbar(`${t('Copied...')}`,{ variant: 'success' });\n        \n        handleMenuClose();\n        //setSnackbarState(true);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n        //console.log(\"\"+newinputpkvalue+\" (\"+newinputpkvalue.length+\"): \" +ValidateAddress(newinputpkvalue));\n        if ((newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue))||\n            ((newinputpkvalue.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (newinputpkvalue.slice(0,1) === '@'))){\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            setNewInputPKValue('');\n        } else if (newinputpkvalue && newinputpkvalue.length>0){\n            \n            if (newinputpkvalue.toLocaleUpperCase().indexOf(\"MINT:\") > -1){\n                let mint = newinputpkvalue.slice(5,newinputpkvalue.length);\n                if (ValidateAddress(mint)){\n                    navigate({\n                        pathname: GRAPE_PREVIEW+mint\n                    },\n                        { replace: true }\n                    );\n                    setNewInputPKValue('');\n                }\n            }\n        }else{\n            setNewInputPKValue('');\n        }\n    }\n\n    return (\n        <Toolbar\n            color=\"inherit\"\n            className=\"grape-art-header\"\n            >\n\n            <Box display='flex' flexGrow={1}>\n                <Button\n                    variant=\"text\"\n                    color=\"inherit\" \n                    href='/'\n                    sx={{borderRadius:'17px',pl:1,pr:1}}\n                >\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        display='flex'\n                        sx={{ml:1,mr:1}}\n                    >\n                        <img src=\"/grape_white_logo.svg\" height=\"40px\" width=\"137px\" className=\"header-logo\" alt=\"Grape\" />\n                    </Typography>\n                </Button>\n                    <Container\n                        component=\"form\"\n                        onSubmit={handlePublicKeySubmit}\n                        sx={{background:'none'}}\n                        >\n                        <Tooltip title={t('Search by mint address by entering: mint:address')}>\n                            <Search\n                                sx={{height:'40px'}}\n                            >\n                                <SearchIconWrapper>\n                                    <SearchIcon />\n                                </SearchIconWrapper>\n                                <StyledInputBase\n                                    sx={{height:'40px', width:'100%'}}\n                                    placeholder={t('Search Solana Address')}\n                                    inputProps={{ 'aria-label': 'search' }}\n                                    value={newinputpkvalue}\n                                    onChange={(e) => setNewInputPKValue(e.target.value)}\n                                />\n                            </Search>\n                        </Tooltip>\n                    </Container>\n\n\n            </Box>\n            <div>\n                <WalletModalProvider>\n                    <WalletMultiButton />\n                </WalletModalProvider>\n            </div>\n        </Toolbar>\n        \n    );\n}\n\nexport default Header;\n","/Users/kirk/Development/grape-art/src/Preview/Preview.tsx",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254"],"import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\n\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js'\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport ImageViewer from 'react-simple-image-viewer';\nimport { Helmet } from 'react-helmet';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { createSetProfilePictureTransaction } from '@solflare-wallet/pfp';\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { \n    getTokenOwnerRecordForRealm, \n} from '@solana/spl-governance';\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    Avatar,\n    Chip,\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Paper,\n    Divider,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Card,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport FlagIcon from '@mui/icons-material/Flag';\nimport EmojiFlagsIcon from '@mui/icons-material/EmojiFlags';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport SegmentIcon from '@mui/icons-material/Segment';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport BlockIcon from '@mui/icons-material/Block';\nimport LockIcon from '@mui/icons-material/Lock';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { UPDATE_AUTHORITIES } from '../utils/grapeTools/mintverification';\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES,\n    FREE_RPC_ENDPOINT, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY,\n    GRAPE_TREASURY,\n    TOKEN_REPORT_AMOUNT,\n} from '../utils/grapeTools/constants';\n\nimport {\n    METAPLEX_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\n\nimport ItemOffers from './ItemOffers';\nimport { SocialLikes, SocialFlags } from './Social';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport \"../App.less\";\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { decodeMetadata } from '../utils/auctionHouse/helpers/schema';\nimport GrapeIcon from \"../components/static/GrapeIcon\";\n\nimport { useTranslation } from 'react-i18next';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n  \n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction GrapeVerified(props:any){\n    const [loading, setLoading] = React.useState(false);\n    const [verifiedState, setVerifiedState] = React.useState(false);\n    const [verifiedPK, setVerificationPK] = React.useState(null);\n    const [collectionImage, setCollectionImage] = React.useState(null);\n    const [collectionName, setCollectionName] = React.useState(props.symbol);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    let updateAuthority = props?.updateAuthority;\n    let grape_verified = -1;\n\n    const MD_PUBKEY = METAPLEX_PROGRAM_ID;\n    \n    const getCollectionData = async (collectionAddress:string) => {\n        try {\n            let mint_address = new PublicKey(collectionAddress)\n            let [pda, bump] = await PublicKey.findProgramAddress([\n                Buffer.from(\"metadata\"),\n                MD_PUBKEY.toBuffer(),\n                new PublicKey(mint_address).toBuffer(),\n            ], MD_PUBKEY)\n            \n            \n            const meta_response = await ggoconnection.getAccountInfo(pda);\n\n            let meta_final = decodeMetadata(meta_response.data);\n            \n            const metadata = await fetch(meta_final.data.uri).then(\n                (res: any) => res.json());\n            \n            setCollectionName(metadata.name);\n            setCollectionImage(metadata.image) \n\n            return null;\n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    React.useEffect(() => { \n        try{\n            if (updateAuthority && !loading){\n                let verified = false;\n                let verified_creator = false;\n\n                // first stage verification\n                for (var item of updateAuthority.data.creators){\n                    if (item.address === updateAuthority.updateAuthority)\n                        if (item.verified === 1){\n                            // now validate verify_collection in the collection results\n                            verified_creator = true;\n                        }\n                }\n                // second stage verification\n                if (verified_creator){\n                    if (updateAuthority?.collection?.verified){\n                        if (updateAuthority.collection.verified === 1){\n                            //console.log(\"updateAuthority: \"+JSON.stringify(updateAuthority));\n                            if (ValidateAddress(updateAuthority.collection.key)){\n                                setVerifiedState(true);\n                                if (!collectionImage){\n                                    setVerificationPK(updateAuthority.collection.key)\n                                    getCollectionData(updateAuthority.collection.key);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // third stage verification (coming soon)\n                grape_verified = UPDATE_AUTHORITIES.indexOf(updateAuthority);\n                //grape_verified = 1;\n                if (grape_verified > -1){\n\n                }\n            }\n        }catch(e){console.log(\"ERR: \"+e)}\n    }, [updateAuthority]);\n\n    const { t, i18n } = useTranslation();\n\n    if (verifiedState){\n        \n        return (\n            <Tooltip title={`${props.symbol}: ${t('Update Authority/Creator Verified on Metaplex')}`} placement=\"top\">\n                <Button \n                    href={`${GRAPE_PREVIEW}${verifiedPK}`}\n                    sx={{color:'white', borderRadius:'24px'}}>\n                    {collectionName}\n                    <Avatar \n                        component={Paper} \n                        elevation={4}\n                        alt={updateAuthority.data.symbol}\n                        src={collectionImage}\n                        sx={{ width: 20, height: 20, bgcolor: \"#222\",ml:1}}\n                    />\n                    {grape_verified > -1 &&\n                        <VerifiedIcon sx={{fontSize:\"20px\",ml:1}} />\n                    }\n                </Button>\n            </Tooltip>\n        );\n    \n    } else{\n        return <>{collectionName}</>\n    } \n}\n\nfunction GalleryItemMeta(props: any) {\n    const collectionrawprimer = props.collectionrawdata.meta_primer || [];\n    const collectionrawdata = props.collectionrawdata.meta_final || [];\n    const collectionitem = props.collectionitem.collectionmeta || [];\n    const [mint, setMint] = React.useState(props.mint || null);\n    const [refreshOwner, setRefreshOwner] = React.useState(false);\n    const [loadingOwner, setLoadingOwner] = React.useState(false);\n    const [mintAta, setMintATA] = React.useState(null);\n    const [tokenOwners, setTokenOwners] = React.useState(null);\n    const [grape_member_balance, setGrapeMemberBalance] = React.useState(null);\n    const [sol_portfolio_balance, setSolPortfolioBalance] = React.useState(0);\n    const [grape_weighted_score, setGrapeWeightedScore] = React.useState(0);\n    const [grape_governance_balance, setGrapeGovernanceBalance] = React.useState(null);\n    const [grape_offer_threshhold, setGrapeOfferThreshhold] = React.useState(TOKEN_VERIFICATION_AMOUNT);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const [grape_whitelisted, setGrapeWhitelisted] = React.useState(null);\n    const [open_creator_collapse, setOpenCreatorCollapse] = React.useState(false);\n    const [open_attribute_collapse, setOpenAttributeCollapse] = React.useState(false);\n    const [currentImage, setCurrentImage] = useState(0);\n    const [isViewerOpen, setIsViewerOpen] = useState(false);\n    const [collectionItemImages, setCollectionItemImages] = useState([]);\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [open_meta, setOpenMeta] = React.useState(false);\n    const [open_offers, setOpenOffers] = React.useState(false);\n    const [open_description, setOpenDescription] = React.useState(true);\n    const [open_traits, setOpenTraits] = React.useState(true);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const {publicKey, sendTransaction} = useWallet();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const navigate = useNavigate();\n    const { enqueueSnackbar, closeSnackbar} = useSnackbar();\n    \n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n\n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaAddress: string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow, solanaAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    \n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n        \n    const salePrice = props.salePrice || null;\n    //console.log('GalleryItemMeta salePrice:', salePrice);\n    const handleClickOpenTraits = () => {\n        setOpenTraits(!open_traits);\n    }\n\n    const handleClickOpenMeta = () => {\n        setOpenMeta(!open_meta);\n    };\n\n    const handleClickOpenOffers = () => {\n        setOpenOffers(!open_offers);\n    };\n    const handleClickOpenDescription = () => {\n        setOpenDescription(!open_description);\n    };\n\n    const handleSendItem = () => {\n        \n    };\n\n    const openImageViewer = useCallback((index) => {\n        setCurrentImage(index);\n        setIsViewerOpen(true);\n    }, []);\n\n    const closeImageViewer = () => {\n        setCurrentImage(0);\n        setIsViewerOpen(false);\n    };\n\n    // after owner we can get the signatures for the \n\n    const getGovernanceBalance = async () => {\n        try{\n            const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n            const realmId = new PublicKey(TOKEN_REALM_ID);\n            const governingTokenMint = new PublicKey(TOKEN_VERIFICATION_ADDRESS);\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                ggoconnection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            \n            return ownerRecords;\n        } catch(e){console.log(\"ERR: \"+e);}\n    }\n\n    const fetchBalances = async () => {\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString(),\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n    \n          const response = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n          })\n          const json = await response.json();\n          const resultValues = json.result.value\n          return resultValues;\n    \n      };\n\n    const GetTokenOwner = async (tokenAddress:any) => {\n        //alert(\"HERE!\")\n        //let token_owner = await connection.getTokenLargestAccounts(new PublicKey(tokenAddress));//  Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"Token Owner: \"+JSON.stringify(token_owner));\n\n        const body = {\n          method: \"getAccountInfo\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            tokenAddress,\n            {\"encoding\":\"jsonParsed\",\n            \"commitment\":\"confirmed\"}\n            // add <object> (optional) Commitment\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const GetLargestTokenAccounts = async () => {\n        const body = {\n          method: \"getTokenLargestAccounts\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            mint,\n            {\"commitment\":\"confirmed\"}\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const fetchTokenAccountData = async () => {\n        let [flargestTokenAccounts] = await Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"settings setMintAta: \"+JSON.stringify(flargestTokenAccounts));\n        if (+flargestTokenAccounts[0].amount === 1){ // some NFTS are amount > 1\n            setMintATA(flargestTokenAccounts[0].address);\n        }\n    }\n\n    const fetchSOLBalance = async () => {\n        const body = {\n          method: \"getBalance\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString()\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value;\n        return resultValues;\n    };\n\n    const getFollowStatus = async (towner:string) => {\n        \n        if (publicKey){\n            if (towner){\n                //if (tokenOwners.data.parsed.info.owner){\n                    setLoadingFollowState(true);\n                    let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), towner);\n                    if (socialconnection){\n                        //if (socialconnection?.identity){\n                        if (socialconnection?.connections[0]?.followStatus) {  \n                            setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                        }\n                    }\n                    setLoadingFollowState(false);\n                //}\n            }\n        }\n    }\n\n    const getMintOwner = async () => {\n        setLoadingOwner(true);\n        let [tokenowner] = await Promise.all([GetTokenOwner(mintAta)]);\n        setTokenOwners(tokenowner);\n        fetchSolanaDomain(tokenowner?.data.parsed.info.owner);\n        getFollowStatus(tokenowner?.data.parsed.info.owner);\n        setLoadingOwner(false);\n    }\n\n    React.useEffect(() => {\n        if ((publicKey)&&(tokenOwners)){\n            getFollowStatus(tokenOwners?.data.parsed.info.owner);\n        }\n    }, [publicKey]);\n\n    const fetchTokenAccountOwnerHoldings = async () => {\n        if (publicKey){ \n            let [sol_rsp, portfolio_rsp, governance_rsp] = await Promise.all([fetchSOLBalance(), fetchBalances(), getGovernanceBalance()]);\n            //setGrapeWhitelisted(GRAPE_WHITELIST.indexOf(publicKey.toString()));\n            if (sol_rsp){ // use sol calc for balance\n                setSolPortfolioBalance(parseFloat(new TokenAmount(sol_rsp, 9).format()));\n            }\n            try{\n\n                if (governance_rsp?.account?.governingTokenDepositAmount){\n                    setGrapeGovernanceBalance(governance_rsp?.account?.governingTokenDepositAmount);\n                }else{    \n                    setGrapeGovernanceBalance(0);\n                }\n            }catch(e){\n                setGrapeGovernanceBalance(0);\n                console.log(\"ERR: \"+e);\n            }\n\n            try{\n                setGrapeMemberBalance(0);\n                let final_weighted_score = 0;\n                portfolio_rsp.map((token:any) => {\n                    let mint = token.account.data.parsed.info.mint;\n                    let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n                    if (mint === '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){ // check if wallet has sol\n                        if (governance_rsp?.account?.governingTokenDepositAmount){\n                            const total_grape = +balance + (+governance_rsp?.account?.governingTokenDepositAmount)/1000000\n                            setGrapeMemberBalance(total_grape);\n                            if (+total_grape >= 1000){\n                                const weighted_score = total_grape/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        } else{\n                            setGrapeMemberBalance(balance);\n                            if (+balance >= 1000){\n                                const weighted_score = +balance/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        }\n                    }\n                });\n            } catch(e){console.log(\"ERR: \"+e);}\n            \n        }\n    }\n\n    const HandleSetAvatar = async () => {\n        try{\n            const transaction = await createSetProfilePictureTransaction(publicKey, new PublicKey(mint), new PublicKey(mintAta));\n            //console.log(\"Transaction: \"+JSON.stringify(transaction));\n            enqueueSnackbar(`${t('Preparing set your avatar with')} ${mint} ${t('mint')}`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Your avatar has been set')} `,{ variant: 'success', action:snackaction });\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`${t('Error')}: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n        } \n    }\n\n    const SearchForMint = (props: any) => {\n        const [open_dialog, setOpenPKDialog] = React.useState(false);\n        const [mintKey, setInputMintValue] = React.useState('');\n    \n        const handleClickOpenDialog = () => {\n            setOpenPKDialog(true);\n        };\n        \n        const handleCloseDialog = () => {\n            setOpenPKDialog(false);\n        };\n        \n        function HandleMintAddressSubmit(event: any) {\n            event.preventDefault();\n            if ((mintKey.length >= 32) && \n                (mintKey.length <= 44)){\n                // WalletId is base58 validate the type too later on\n                props.setMintPubkey(mintKey);\n                handleCloseDialog();\n            } else{\n                // Invalid Wallet ID\n                console.log(\"INVALID MINT\");\n            }\n        }\n        \n        return (\n          <React.Fragment>\n            <Button onClick={handleClickOpenDialog}\n                sx={{borderRadius:'24px',color:'white'}}\n            >\n                <SearchIcon />\n            </Button> \n             \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"md\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    {t('Mint')}\n                </DialogTitle>\n                <form onSubmit={HandleMintAddressSubmit}>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            autoComplete='off'\n                            margin=\"dense\"\n                            id=\"preview_mint_key\"\n                            label={t('Paste a mint address')}\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            value={mintKey}\n                            onChange={(e) => setInputMintValue(e.target.value)}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDialog}>Cancel</Button>\n                        <Button \n                            type=\"submit\"\n                            variant=\"text\" \n                            title=\"GO\">\n                                {t('Go')}\n                        </Button>\n                    </DialogActions>\n                </form>\n            </BootstrapDialog>   \n          </React.Fragment>\n        );\n    }\n\n    const fetchSolanaDomain = async (ownerPublicKey:string) => {\n        if (ownerPublicKey){\n            //console.log(\"checking domains for \"+ownerPublicKey);\n            const domain = await findDisplayName(ggoconnection, ownerPublicKey);\n            if (domain){\n                if (domain[0] !== ownerPublicKey)\n                    setSolanaDomain(domain[0]);\n            }\n        }\n    }\n    \n    React.useEffect(() => { \n        if (refreshOwner){\n            //setTokenOwners(null);\n            props.setRefresh(true);\n        }\n        if ((mintAta)||(refreshOwner)){\n            getMintOwner();\n            fetchTokenAccountOwnerHoldings();\n        }\n        if (refreshOwner){\n            setRefreshOwner(!refreshOwner);\n        }\n    }, [mintAta, publicKey, refreshOwner]);\n    \n    React.useEffect(() => { \n        try{\n            ( collectionitem?.image && \n                collectionItemImages.push(collectionitem.image)\n            )\n        } catch(e){\n            console.log(\"ERR: \"+e);\n        }\n        \n        if (!tokenOwners){\n            fetchTokenAccountData();\n        }\n    }, [mint]);\n\n    const { t, i18n } = useTranslation();\n\n    try{\n        return (\n            <Grid>\n                <Helmet>\n                    <title>{`${collectionitem.name} | ${t('Grape Social. Stateless. Marketplace.')}`}</title>\n                    <meta property=\"og:title\" content={`${collectionitem.name} @Grape`} />\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:url\" content={window.location.href} />\n                    <meta property=\"og:image\" content={collectionitem.image} />\n                    <meta property=\"og:description\" content={collectionitem.name} />\n                    <meta name=\"theme-color\" content=\"#000000\" />\n\n                    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta name=\"twitter:site\" content={`${collectionitem.name} @Grape`} />\n                    <meta name=\"twitter:title\" content={collectionitem.name} />\n                    <meta name=\"twitter:description\" content={collectionitem.name} />\n                    <meta name=\"twitter:image\" content={collectionitem.image} />\n                </Helmet>\n\n                {isViewerOpen && (\n                    <ImageViewer\n                    src={ collectionItemImages }\n                    currentIndex={ currentImage }\n                    disableScroll={ false }\n                    closeOnClickOutside={ true }\n                    onClose={ closeImageViewer }\n                    />\n                )}\n\n                <Box\n                    sx={{\n                        mt: 2,\n                        \n                    }}\n                >\n                    <Box\n                        sx={{\n                            borderRadius: '17px',\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            mb: 4,\n                            pl: 3,\n                            pr: 3,\n                            pt: 1,\n                            pb: 1\n                        }}\n                        >\n                            <Grid container direction=\"row\" spacing={{ xs: 2, md: 3 }}>\n                                <Grid item xs={6} md={8}>\n                                    <ButtonGroup variant=\"text\">\n                                        <Button\n                                            className=\"button icon-left\"\n                                            onClick={() => navigate(-1)}\n                                            sx={{color:'white',borderRadius:'24px'}}\n                                        >\n                                            <ArrowBackIosIcon />\n                                            {t('Back')}\n                                        </Button>\n                                        <SearchForMint setMintPubkey={props.setMintPubkey} />\n                                    </ButtonGroup>\n                                </Grid>\n                                <Grid item  xs={6} md={4}>\n                                    <Box display=\"flex\" justifyContent=\"flex-end\">\n                                        <ButtonGroup variant=\"text\">\n                                            <SocialLikes mint={mint} />\n                                            <SocialFlags mint={mint} />\n                                                <Grid item sx={{borderRadius:'24px',background:'none'}}>\n                                                    <Avatar \n                                                        component={Paper} \n                                                        elevation={4}\n                                                        alt={collectionitem.name}\n                                                        src={collectionitem.image}\n                                                        sx={{ width: 30, height: 30, bgcolor: \"#222\", ml:1,mr:0.5}}\n                                                    ></Avatar>\n                                                </Grid>\n                                                <Grid item>        \n                                                    <ShareSocialURL fontSize={'24px'} url={window.location.href} title={'Grape DEX | '+trimAddress(mint,4)} />\n                                                </Grid>\n\n                                        </ButtonGroup>\n                                    </Box>\n                                </Grid>\n                            </Grid> \n                    </Box>    \n                    <Box\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:3,\n                            pl:4,\n                            pr:4\n                        }} \n                    >              \n                        \n                        <Grid container spacing={{ xs: 2, md: 3 }} >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Box\n                                    sx={{ \n                                        width: '100%'\n                                    }}\n                                > \n                                    <List\n                                        sx={{ \n                                            width: '100%'\n                                        }}\n                                        component=\"nav\"\n                                        >\n                                        \n                                            <ListItemText>\n                                                <Grid \n                                                    container \n                                                    spacing={2}\n                                                    direction=\"column\"\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\">\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                                            <ListItemButton\n                                                                sx={{\n                                                                    width:'100%',\n                                                                    borderRadius:'25px',\n                                                                    p: '2px'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    src={`${collectionitem.image}`}\n                                                                    srcSet={`${collectionitem.image}`}\n                                                                    alt={collectionitem.name}\n                                                                    onClick={ () => openImageViewer(0) }\n                                                                    loading=\"lazy\"\n                                                                    height=\"auto\"\n                                                                    style={{\n                                                                        width:'100%',\n                                                                        borderRadius:'24px'\n                                                                    }}\n                                                                />\n                                                            </ListItemButton>\n                                                        </Grid>\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center', mt:'-15px'}}>\n                                                            <Button\n                                                                size=\"small\" variant=\"text\" \n                                                                onClick={ () => openImageViewer(0) }\n                                                                sx={{color:'white',borderRadius:'24px'}}\n                                                            >\n                                                                {t('Preview')} <OpenInFullIcon sx={{ fontSize:'16px', ml:1 }}/></Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                \n                                            </ListItemText>\n                                        \n                                    </List>\n                                </Box>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                    }}\n                                    component=\"nav\"\n                                >\n\n                                    <Box\n                                        sx={{ \n                                            p: 1,\n                                            mb: 3, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        \n                                            <ListItemButton onClick={handleClickOpenDescription}\n                                                sx={{borderRadius:'20px'}}\n                                            >\n                                                <ListItemIcon>\n                                                <SegmentIcon />\n                                                </ListItemIcon>\n                                                <ListItemText primary={t('Description')} />\n                                                {open_description ? <ExpandLess /> : <ExpandMoreIcon />}\n                                            </ListItemButton>\n                                            <Collapse in={open_description} timeout=\"auto\" unmountOnExit>\n                                                <List component=\"div\" disablePadding>\n                                                    <ListItemText primary={collectionitem?.description} sx={{p:2}}  />\n                                                </List>\n                                            </Collapse>\n                                            \n                                    </Box>\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    >         \n                                        \n                                        <ListItemButton onClick={handleClickOpenMeta}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary={t('Details')} />\n                                            {open_meta ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_meta} timeout=\"auto\" unmountOnExit>\n                                            <List component=\"div\" sx={{ pl: 0 }}>\n                                                <ListItemText>\n\n                                                <TableContainer component={Paper}\n                                                    sx={{\n                                                        background: 'rgba(255,255,255,0.015)',\n                                                        boxShadow: 3,\n                                                        borderRadius: '20px'\n                                                    }}\n                                                >\n                                                    <StyledTable \n                                                        sx={{ }} \n                                                        size=\"small\" \n                                                        aria-label=\"NFT Meta\">\n                                                        \n                                                        {collectionitem?.attributes ?\n                                                            <React.Fragment>\n\n                                                                {collectionitem.attributes?.length  && collectionitem.attributes.length > 0 ? (\n                                                                    <></>\n                                                                    )\n                                                                :\n                                                                <>\n                                                                    <TableRow\n                                                                        onClick={() => setOpenAttributeCollapse(!open_attribute_collapse)}\n                                                                    >\n                                                                        <TableCell>\n                                                                        {t('Attributes')}:\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {collectionitem.attributes.length}\n                                                                            <IconButton\n                                                                                aria-label=\"expand row\"\n                                                                                size=\"small\"\n                                                                                sx={{ textAlign:\"right\" }}\n                                                                            >\n                                                                                {open_attribute_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                            </IconButton>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    <TableRow>\n                                                                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                            <Collapse in={open_attribute_collapse} timeout=\"auto\" unmountOnExit>\n                                                                                <Box sx={{ margin: 1 }}>\n                                                                                    <Table size=\"small\" aria-label=\"purchases\">\n\n                                                                                        {collectionitem.attributes.length > 0 &&\n                                                                                        <TableHead>\n                                                                                            <TableRow>\n                                                                                                <TableCell><Typography variant=\"subtitle1\">{t('Attribute')}</Typography></TableCell>\n                                                                                                <TableCell><Typography variant=\"subtitle1\" >{t('Type')}</Typography></TableCell>\n                                                                                            </TableRow>\n                                                                                        </TableHead>\n                                                                                        }\n                                                                                        {collectionitem.attributes.length > 0 ? collectionitem.attributes?.map((item: any) => (\n                                                                                            <TableRow>\n                                                                                                <TableCell>{item?.trait_type}</TableCell>\n                                                                                                <TableCell>{item?.value}</TableCell>\n                                                                                            </TableRow>\n                                                                                        ))  \n                                                                                        :\n                                                                                        <TableRow>\n                                                                                            <TableCell>{t('Attributes')}:</TableCell>\n                                                                                            <TableCell>\n                                                                                            {collectionitem.attributes.itemType?.length > 0 &&\n                                                                                                <Tooltip title={t('Type')}>\n                                                                                                <Chip label={collectionitem.attributes?.itemType} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.category?.length > 0 &&\n                                                                                                <Tooltip title={t('Category')}>\n                                                                                                <Chip label={collectionitem.attributes?.category} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.rarity?.length > 0 &&\n                                                                                                <Tooltip title={t('Rarity')}>\n                                                                                                <Chip label={collectionitem.attributes?.rarity} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.spec?.length > 0 &&\n                                                                                                <Tooltip title={t('Spec')}>\n                                                                                                <Chip label={collectionitem.attributes?.spec} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.class?.length > 0 &&\n                                                                                                <Tooltip title={t('Class')}>\n                                                                                                <Chip label={collectionitem.attributes?.class} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            </TableCell>\n                                                                                        </TableRow> \n                                                                                        }\n                                                                                    </Table>\n                                                                                </Box>\n                                                                            </Collapse>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </>\n                                                                }\n                                                            </React.Fragment>\n                                                        : null }\n\n                                                        <TableRow>\n                                                            <TableCell>{t('Mint')}:</TableCell>\n                                                            <TableCell>\n                                                                <MakeLinkableAddress addr={mint} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        <TableRow>\n                                                            <TableCell>{t('Owner')}:</TableCell>\n                                                            <TableCell>\n                                                                \n                                                            {tokenOwners && (\n                                                                <MakeLinkableAddress addr={tokenOwners?.data.parsed.info.owner} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            )}  \n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        {collectionitem?.symbol ? \n                                                            <TableRow>\n                                                                <TableCell>{t('Symbol')}:</TableCell>\n                                                                <TableCell>{collectionitem.symbol}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem.seller_fee_basis_points > 0 ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Royalty')}:</TableCell>\n                                                                <TableCell>\n                                                                {(+collectionitem.seller_fee_basis_points/100).toFixed(2)}%\n                                                                <Tooltip title={t('This is the rate at which royalties are shared with creators if this asset is sold using the Metaplex Auction program')}><HelpOutlineIcon sx={{ fontSize:16, ml: 1  }}/></Tooltip>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n    {collectionitem.properties?.creators ?\n                                                            <React.Fragment>\n                                                                <TableRow\n                                                                    onClick={() => setOpenCreatorCollapse(!open_creator_collapse)}\n                                                                >\n                                                                    <TableCell>{t('Creators')}:</TableCell>\n                                                                    <TableCell>\n                                                                        {collectionitem.properties.creators.length}\n                                                                        <IconButton\n                                                                            aria-label=\"expand row\"\n                                                                            size=\"small\"\n                                                                            sx={{ textAlign:\"right\" }}\n                                                                        >\n                                                                            {open_creator_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                        </IconButton>\n                                                                        \n                                                                    </TableCell>\n                                                                </TableRow>\n                                                                <TableRow>\n                                                                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                        <Collapse in={open_creator_collapse} timeout=\"auto\" unmountOnExit>\n                                                                            <Box sx={{ margin: 1 }}>\n                                                                                <Table size=\"small\" aria-label=\"purchases\">\n                                                                                    <TableHead>\n                                                                                        <TableRow>\n                                                                                            <TableCell><Typography variant=\"caption\">{t('Creator Address')}</Typography></TableCell>\n                                                                                            <TableCell align=\"right\"><Typography variant=\"caption\">% {t('Royalty')}</Typography></TableCell>\n                                                                                        </TableRow>\n                                                                                    </TableHead>\n                                                                                    {collectionitem.properties.creators.length > 0 && collectionitem.properties.creators.map((item: any) => (\n                                                                                        <TableRow>\n                                                                                            <TableCell>\n                                                                                            <Button\n                                                                                                title={t('Visit Profile')}\n                                                                                                component={Link} \n                                                                                                to={`${GRAPE_PROFILE}${item.address}`}\n                                                                                            >\n                                                                                                <AccountCircleOutlinedIcon sx={{fontSize:'14px'}}/>\n                                                                                            </Button>\n                                                                                                <MakeLinkableAddress addr={item.address} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                                            </TableCell>\n                                                                                            <TableCell align=\"right\">{item.share}%</TableCell>\n                                                                                        </TableRow>\n                                                                                    ))}\n                                                                                </Table>\n                                                                            </Box>\n                                                                        </Collapse>\n                                                                    </TableCell>\n                                                                </TableRow>\n                                                            </React.Fragment>\n                                                        : null }\n\n\n                                                        {collectionitem?.edition ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Edition')}:</TableCell>\n                                                                <TableCell>{collectionitem.edition}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.background_color ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Background')}:</TableCell>\n                                                                <TableCell>#{collectionitem.background_color}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionrawdata?.updateAuthority ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Update Authority')}:</TableCell>\n                                                                <TableCell>\n                                                                    <MakeLinkableAddress addr={collectionrawdata.updateAuthority} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawdata?.isMutable == 1 ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Mutable')}:</TableCell>\n                                                                <TableCell><LockOpenIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                            <TableRow>\n                                                                <TableCell>{t('Mutable')}:</TableCell>\n                                                                <TableCell><Tooltip title={t('This is immutable')}><LockIcon /></Tooltip></TableCell>\n                                                            </TableRow> }\n                                                        {collectionrawdata?.primarySaleHappened ? \n                                                            <TableRow>\n                                                                <TableCell>{t('Primary Sale')}:</TableCell>\n                                                                <TableCell><CheckCircleIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                        <TableRow>\n                                                            <TableCell>{t('Primary Sale')}:</TableCell>\n                                                            <TableCell><Tooltip title={t('Primary sale has not occured as of this fetch')}><BlockIcon /></Tooltip></TableCell>\n                                                        </TableRow>\n                                                        }\n\n                                                        {collectionitem?.createdAt ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Created At')}:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.createdAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.updatedAt ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Updated At')}:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.updatedAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.deactivated ?\n                                                            <TableRow>\n                                                                <TableCell>{t('Deactivated')}:</TableCell>\n                                                                <TableCell><Tooltip title={t('This is deactivated')}><CheckCircleIcon /></Tooltip></TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionitem.image ?\n                                                            \n                                                            <TableRow>\n                                                                <TableCell>{t('Image')}:</TableCell>\n                                                                <TableCell>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${collectionitem.image}`} target=\"_blank\">\n                                                                    {t('View Original')} <OpenInNewIcon sx={{fontSize:12, ml:1}} />\n                                                                    </Button>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null}\n\n                                                        {/*collectionrawprimer.owner ?\n                                                            <TableRow>\n                                                                <TableCell>Owner:</TableCell>\n                                                                <TableCell>{collectionrawprimer.owner}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawprimer.executable ?\n                                                            <TableRow>\n                                                                <TableCell>Executable:</TableCell>\n                                                                <TableCell>{collectionrawprimer.executable}</TableCell>\n                                                            </TableRow>\n                                                        : null */}\n                                                    </StyledTable>\n                                                </TableContainer>\n                                                \n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                </List>\n                            </Grid>\n                            <Grid item xs={12} sm={12} md={6}>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                        p: 2\n                                    }}\n                                    component=\"nav\"\n                                    >       \n                                    <ListItemText>\n\n                                        <Box>\n                                            <Typography component=\"div\" variant=\"subtitle1\">\n                                               <GrapeVerified updateAuthority={collectionrawdata} symbol={collectionitem.symbol} />\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>\n                                                {collectionitem.name}\n                                                </strong>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\">\n                                                {tokenOwners && \n                                                    (<>\n                                                        {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner).length > 0) ? (\n                                                            <>\n                                                                {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner)).map(filteredMarket => (\n                                                                <>\n                                                                {t('Listed on')}\n                                                                    {(filteredMarket.name.length > 0) ? (\n                                                                        <>  \n                                                                            \n                                                                            {(filteredMarket.previewUrl.length > 0) ? (\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${filteredMarket.previewUrl}${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            ):(\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} \n                                                                                        <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            )}\n                                                                        </>\n                                                                    ):(\n                                                                        <>\n                                                                        {trimAddress(tokenOwners?.data.parsed.info.owner, 4)}\n                                                                        </>\n                                                                    )}\n                                                                </>\n                                                                ))}\n                                                            </>\n                                                        )\n                                                        :\n                                                        (\n                                                            <>\n                                                            {!loadingOwner ?\n                                                            <Grid container direction=\"row\">\n                                                                <Grid item>\n                                                                {solanaDomain && solanaDomain.length > 0 ?\n                                                                <>\n                                                                    {t('Owned by')} \n                                                                    <Tooltip title={t('Visit Profile')}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{solanaDomain}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    {t('Owned by')} \n                                                                    <Tooltip title={t('Visit Profile')}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{trimAddress(tokenOwners?.data.parsed.info.owner, 4)}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n\n                                                                </>\n                                                                }\n                                                                \n                                                                </Grid>\n                                                                <Grid item \n                                                                    sx={{ \n                                                                        display: \"flex\",\n                                                                        justifyContent: 'flex-end'\n                                                                    }}>\n                                                                    <Tooltip title={t('Explorer')}>\n                                                                        <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${tokenOwners?.data.parsed.info.owner}`} target=\"_blank\" sx={{borderRadius:'24px', color:'white', pl:0, pr:0}}> <OpenInNewIcon sx={{fontSize:'14px'}} /></Button>\n                                                                    </Tooltip>\n                                                                    {publicKey && publicKey.toBase58() === tokenOwners?.data.parsed.info.owner ?\n                                                                        <Tooltip title={t('Set this NFT as your avatar')}>\n                                                                            <Button \n                                                                                variant=\"text\" \n                                                                                onClick={HandleSetAvatar}\n                                                                                size=\"small\"\n                                                                                className=\"profileAvatarIcon\"\n                                                                                sx={{borderRadius:'24px', color:'white'}}\n                                                                                >\n                                                                                <AccountCircleOutlinedIcon \n                                                                                    sx={{\n                                                                                        fontSize:'14px',\n                                                                                    }} \n                                                                                />\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                    :\n                                                                    <>\n                                                                        {loadingFollowState ?\n                                                                            <Button \n                                                                                sx={{borderRadius:'24px'}}\n                                                                            >\n                                                                                <CircularProgress sx={{p:'14px',m:-2}} />\n                                                                            </Button>\n                                                                        :\n                                                                            <>\n                                                                            {isFollowing ?  \n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title={t('Unfollow')}\n                                                                                        onClick={() => followWalletDisconnect(tokenOwners?.data.parsed.info.owner)}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonRemoveOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                                :\n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title={t('Follow')}\n                                                                                        onClick={() => followWalletConnect(tokenOwners?.data.parsed.info.owner, solanaDomain || '')}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonAddOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                            }\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                    }\n\n                                                                </Grid>\n                                                                \n                                                            </Grid>\n                                                            :<>{t('Loading owner')}</>}\n                                                            </>\n                                                        )\n                                                    }\n                                                    </>\n                                                    )\n                                                }  \n                                            </Typography>\n                                        </Box>\n                                    </ListItemText>\n                                </List>\n                                \n                                {tokenOwners?.data.parsed.info.owner &&\n                                    <ItemOffers\n                                        mintAta={mintAta} \n                                        mintOwner={tokenOwners?.data.parsed.info.owner} \n                                        mint={mint} \n                                        refreshOwner={refreshOwner}\n                                        setRefreshOwner={setRefreshOwner} \n                                        setRefresh={props.setRefresh} \n                                        grape_member_balance={grape_member_balance}\n                                        grape_governance_balance={grape_governance_balance}\n                                        grape_offer_threshhold={grape_offer_threshhold}\n                                        grape_weighted_score={grape_weighted_score}\n                                        grape_whitelisted={grape_whitelisted}\n                                        sol_portfolio_balance={sol_portfolio_balance}\n                                        />\n                                }\n                                \n                                {collectionitem.attributes?.length && collectionitem.attributes.length > 0 ? (\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        <ListItemButton onClick={handleClickOpenTraits}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary={t('Traits')} />\n                                            {open_traits ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_traits} timeout=\"auto\" unmountOnExit>\n                                            <List\n                                                sx={{ \n                                                    width: '100%'\n                                                }}\n                                                component=\"nav\"\n                                                >       \n                                                <ListItemText>\n                                                    <Grid item alignItems=\"center\">\n                                                        {collectionitem.attributes?.length && collectionitem.attributes.length > 0 && (\n                                                            <>\n                                                                {collectionitem.attributes?.map((item: any) => (\n                                                                    <Chip \n                                                                        sx={{\n                                                                            padding:'22.5px',\n                                                                            margin: '5px',\n                                                                            textAlign: 'center',\n                                                                            background: '#272727',\n                                                                            borderRadius: '10px'\n                                                                        }}\n                                                                        label={\n                                                                            <>\n                                                                                <strong>{item?.trait_type}</strong>\n                                                                                <Divider />\n                                                                                {item?.value}\n                                                                            </>} />\n                                                                        \n                                                                ))}\n                                                            </>  \n                                                            )\n                                                        }\n                                                    </Grid>\n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                )\n                                : <></>\n                                }\n                                    \n                            </Grid>\n                        </Grid>    \n                    \n                    </Box>\n                    {/*\n                    <CardActions\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: 'flex-end',\n                            padding: 1\n                        }}\n                    >\n                        <OfferPrompt mint={mint} />\n                    </CardActions>\n                    */}\n                </Box>  \n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e);\n        return null \n    }\n}\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nexport function PreviewView(this: any, props: any) {\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    //const [success, setSuccess] = React.useState(false);\n    const [mint, setMintPubkey] = React.useState(null);\n    const [refresh, setRefresh] = React.useState(false);\n    \n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"mint\") || handlekey;\n\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [walletPKId, setInputPKValue] = React.useState(null);\n    \n    const history = useNavigate();\n    //const location = useLocation();\n    \n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        console.log(\"Sending: \"+walletPKId);\n        \n        if (ValidateAddress(walletPKId)){\n            // WalletId is base58 validate the type too later on\n            setMintPubkey(walletPKId);\n            //setPubkey(walletPKId);\n            //props.setPubkey(walletPKId);\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID MINT ID\");\n        }\n    }\n    const CollectionProfileClear = (props: any) => {\n        // TODO:\n        // Add button next to collection to clear navigation address\n        // this should only appear if the user is logged in (has a pubkey from session)\n        return (\n            <React.Fragment></React.Fragment>\n        );\n    }\n\n    const PreviewItem = (props: any) => {\n        const [thismint, setThisMint] = React.useState(props.mint);\n        const [expanded, setExpanded] = React.useState(false);\n        const [loading, setLoading] = React.useState(false);\n        const [collectionmeta, setCollectionMeta] = React.useState(null);\n        const [collectionrawdata, setCollectionRaw] = React.useState(null);\n        const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n        const { connection } = useConnection();\n        const MD_PUBKEY = METAPLEX_PROGRAM_ID;\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n        \n        const getCollectionData = async () => {\n            try {\n                let mint_address = new PublicKey(mint)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                setCollectionRaw({meta_final,meta_response});\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n        \n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n    \n                setLoading(false);\n            }\n        }\n    \n        useEffect(() => {\n            const interval = setTimeout(() => {\n                getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [thismint]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            \n            return (\n                <Card\n                    sx={{\n                        borderRadius: '20px',\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius: '20px',\n                        }}\n                        variant=\"rectangular\" width=\"100%\" height={325} />\n                </Card>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                        <GalleryItemMeta collectionitem={collectionmeta} collectionrawdata={collectionrawdata} mint={mint} setRefresh={setRefresh} setMintPubkey={setMintPubkey} />\n                );\n            }\n            //}\n        }\n    }\n\n    React.useEffect(() => { \n        if (refresh)\n            setRefresh(!refresh);\n        \n        if (mint && ValidateAddress(mint)){\n            //props.history.push({\n            history({\n                pathname: GRAPE_PREVIEW+mint\n            },\n                { replace: true }\n            );\n        } else {\n            history({\n                pathname: '/preview'\n            },\n                { replace: true }\n            );\n        } \n        \n    }, [mint, refresh]);\n\n    if (!mint){\n        if (urlParams?.length > 0){\n            setMintPubkey(urlParams);\n        }\n    }\n\n    const { t, i18n } = useTranslation();\n\n    return (\n        <React.Fragment>\n                { mint && ValidateAddress(mint) ?\n                    <PreviewItem mint={mint} />\n                : \n                <>\n                    <React.Fragment>\n                        <Box\n                            sx={{ \n                                p: 1, \n                                mb: 3, \n                                width: '100%',\n                                background: '#13151C',\n                                borderRadius: '24px'\n                            }}\n                        > \n                                <Grid \n                                    container \n                                    direction=\"column\" \n                                    spacing={2} \n                                    alignItems=\"center\"\n                                    justifyContent={'center'}\n                                    rowSpacing={8}\n                                >\n                                    \n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2,mb:3}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                        </Typography>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        >{t('ooops... you entered an invalid address!')}</Typography>\n\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                    </React.Fragment>\n                </>\n                }\n                \n        </React.Fragment>\n    );\n}","/Users/kirk/Development/grape-art/src/utils/config/theme.tsx",["1255","1256"],"import { createTheme, makeStyles } from '@mui/material/styles';\n// paper: #12151B\n\n//background: rgb(18,21,28);\n//background: linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%);\n\n \n//background: #F0F2F0;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #000C40, #F0F2F0);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #000C40, #F0F2F0); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n//background: #141E30;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #243B55, #141E30);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n\nconst themeInstance = {\n  background: 'linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%)',//'#0A1D30',\n\n};\n\nconst theme = createTheme({\n//const useStyles = makeStyles((theme: typeof themeInstance) => ({\n  typography: {\n    fontFamily: [\n      'GrapeFont',\n      'sans-serif',\n    ].join(','),\n  },  \n  palette: {\n    mode: \"dark\",\n    background: {\n      default: '#0A1D30',\n      paper: \"#000000\"\n    },\n  }\n});\n\nexport default theme;","/Users/kirk/Development/grape-art/src/components/ConfirmDialog/ConfirmDialog.tsx",["1257"],"import React from 'react';\n// material ui\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\n// zustand\nimport create from 'zustand';\n\nimport { useTranslation } from 'react-i18next';\n\ntype ConfirmDialogStore = {\n  message: string;\n  onSubmit?: () => void;\n  close: () => void;\n};\n\nconst useConfirmDialogStore = create<ConfirmDialogStore>((set) => ({\n  message: '',\n  onSubmit: undefined,\n  close: () => set({ onSubmit: undefined }),\n}));\n\nexport const confirmDialog = (message: string, onSubmit: () => void) => {\n  useConfirmDialogStore.setState({\n    message,\n    onSubmit,\n  });\n};\n\nconst ConfirmDialog = () => {\n  const { t, i18n } = useTranslation();\n  const { message, onSubmit, close } = useConfirmDialogStore();\n  //return new Promise((res) => {\n  return (\n    <Dialog open={Boolean(onSubmit)} onClose={close} maxWidth=\"sm\" fullWidth>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <DialogTitle>{t('Confirm the action')}</DialogTitle>\n        <IconButton onClick={close}>\n          <Close />\n        </IconButton>\n      </Box>\n      <DialogContent>\n        <Typography>{message}</Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={close}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            if (onSubmit) {\n              onSubmit();\n            }\n            close();\n          }}\n        >\n          {t('Confirm')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n  //});\n};\n\nexport default ConfirmDialog;","/Users/kirk/Development/grape-art/src/utils/grapeTools/utils.ts",["1258"],"import { deserializeUnchecked, serialize, BinaryReader, BinaryWriter } from 'borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js'\nconst base58 = require('bs58');\n\nexport type StringPublicKey = string;\n\nexport const extendBorsh = () => {\n\t(BinaryReader.prototype as any).readPubkey = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn new PublicKey(array);\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(value.toBuffer());\n\t};\n\n\t(BinaryReader.prototype as any).readPubkeyAsString = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn base58.encode(array) as StringPublicKey;\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkeyAsString = function (\n\t\tvalue: StringPublicKey,\n\t) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(base58.decode(value));\n\t};\n};\n\nextendBorsh();\n\nexport const METADATA_PREFIX = 'metadata';\nexport const EDITION = 'edition';\nexport const RESERVATION = 'reservation';\n\nexport const MAX_NAME_LENGTH = 32;\n\nexport const MAX_SYMBOL_LENGTH = 10;\n\nexport const MAX_URI_LENGTH = 200;\n\nexport const MAX_CREATOR_LIMIT = 5;\n\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\nexport const MAX_METADATA_LEN =\n\t1 +\n\t32 +\n\t32 +\n\tMAX_NAME_LENGTH +\n\tMAX_SYMBOL_LENGTH +\n\tMAX_URI_LENGTH +\n\tMAX_CREATOR_LIMIT * MAX_CREATOR_LEN +\n\t2 +\n\t1 +\n\t1 +\n\t198;\n\nexport const MAX_EDITION_LEN = 1 + 32 + 8 + 200;\n\nexport const EDITION_MARKER_BIT_SIZE = 248;\n\n\nexport enum MetadataKey {\n\tUninitialized = 0,\n\tMetadataV1 = 4,\n\tEditionV1 = 1,\n\tMasterEditionV1 = 2,\n\tMasterEditionV2 = 6,\n\tEditionMarker = 7,\n}\n\nexport enum MetadataCategory {\n\tAudio = 'audio',\n\tVideo = 'video',\n\tImage = 'image',\n\tVR = 'vr',\n}\n\nexport type MetadataFile = {\n\turi: string;\n\ttype: string;\n};\n\nexport type FileOrString = MetadataFile | String;\n\nexport type Attribute = {\n\ttrait_type?: string;\n\tdisplay_type?: string;\n\tvalue: string | number;\n};\n\nexport interface IMetadataExtension {\n\tname: string;\n\tsymbol: string;\n\n\tcreators: Creator[] | null;\n\tdescription: string;\n\t// preview image absolute URI\n\timage: string;\n\tanimation_url?: string;\n\n\tattributes?: Attribute[];\n\n\t// stores link to item on meta\n\texternal_url: string;\n\n\tseller_fee_basis_points: number;\n\n\tproperties: {\n\t\tfiles?: FileOrString[];\n\t\tcategory: MetadataCategory;\n\t\tmaxSupply?: number;\n\t\tcreators?: {\n\t\t\taddress: string;\n\t\t\tshares: number;\n\t\t}[];\n\t};\n}\n\nexport class MasterEditionV1 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\t/// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n\tprintingMint: StringPublicKey;\n\t/// If you don't know how many printing tokens you are going to need, but you do know\n\t/// you are going to need some amount in the future, you can use a token from this mint.\n\t/// Coming back to token metadata with one of these tokens allows you to mint (one time)\n\t/// any number of printing tokens you want. This is used for instance by Auction Manager\n\t/// with participation NFTs, where we dont know how many people will bid and need participation\n\t/// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n\t/// because when the auction begins we just dont know how many printing tokens we will need,\n\t/// but at the end we will. At the end it then burns this token with token-metadata to\n\t/// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n\t/// to get their limited editions.\n\toneTimePrintingAuthorizationMint: StringPublicKey;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tsupply: typeof BN;\n\t\tmaxSupply?: typeof BN;\n\t\tprintingMint: StringPublicKey;\n\t\toneTimePrintingAuthorizationMint: StringPublicKey;\n\t}) {\n\t\tthis.key = MetadataKey.MasterEditionV1;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t\tthis.printingMint = args.printingMint;\n\t\tthis.oneTimePrintingAuthorizationMint =\n\t\t\targs.oneTimePrintingAuthorizationMint;\n\t}\n}\n\nexport class MasterEditionV2 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\n\tconstructor(args: { key: MetadataKey; supply: typeof BN; maxSupply?: typeof BN }) {\n\t\tthis.key = MetadataKey.MasterEditionV2;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nexport class EditionMarker {\n\tkey: MetadataKey;\n\tledger: number[];\n\n\tconstructor(args: { key: MetadataKey; ledger: number[] }) {\n\t\tthis.key = MetadataKey.EditionMarker;\n\t\tthis.ledger = args.ledger;\n\t}\n\n\teditionTaken(edition: number) {\n\t\tconst editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n\t\tconst indexOffset = Math.floor(editionOffset / 8);\n\n\t\tif (indexOffset > 30) {\n\t\t\tthrow Error('bad index for edition');\n\t\t}\n\n\t\tconst positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n\t\tconst mask = Math.pow(2, positionInBitsetFromRight);\n\n\t\tconst appliedMask = this.ledger[indexOffset] & mask;\n\n\t\treturn appliedMask !== 0;\n\t}\n}\n\nexport class Edition {\n\tkey: MetadataKey;\n\t/// Points at MasterEdition struct\n\tparent: StringPublicKey;\n\t/// Starting at 0 for master record, this is incremented for each edition minted.\n\tedition: typeof BN;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tparent: StringPublicKey;\n\t\tedition: typeof BN;\n\t}) {\n\t\tthis.key = MetadataKey.EditionV1;\n\t\tthis.parent = args.parent;\n\t\tthis.edition = args.edition;\n\t}\n}\nexport class Creator {\n\taddress: StringPublicKey;\n\tverified: boolean;\n\tshare: number;\n\n\tconstructor(args: {\n\t\taddress: StringPublicKey;\n\t\tverified: boolean;\n\t\tshare: number;\n\t}) {\n\t\tthis.address = args.address;\n\t\tthis.verified = args.verified;\n\t\tthis.share = args.share;\n\t}\n}\n\nexport class Data {\n\tname: string;\n\tsymbol: string;\n\turi: string;\n\tsellerFeeBasisPoints: number;\n\tcreators: Creator[] | null;\n\tconstructor(args: {\n\t\tname: string;\n\t\tsymbol: string;\n\t\turi: string;\n\t\tsellerFeeBasisPoints: number;\n\t\tcreators: Creator[] | null;\n\t}) {\n\t\tthis.name = args.name;\n\t\tthis.symbol = args.symbol;\n\t\tthis.uri = args.uri;\n\t\tthis.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n\t\tthis.creators = args.creators;\n\t}\n}\n\nexport class Metadata {\n\tkey: MetadataKey;\n\tupdateAuthority: StringPublicKey;\n\tmint: StringPublicKey;\n\tdata: Data;\n\tprimarySaleHappened: boolean;\n\tisMutable: boolean;\n\teditionNonce: number | null;\n\n\t// set lazy\n\tmasterEdition?: StringPublicKey;\n\tedition?: StringPublicKey;\n\n\tconstructor(args: {\n\t\tupdateAuthority: StringPublicKey;\n\t\tmint: StringPublicKey;\n\t\tdata: Data;\n\t\tprimarySaleHappened: boolean;\n\t\tisMutable: boolean;\n\t\teditionNonce: number | null;\n\t}) {\n\t\tthis.key = MetadataKey.MetadataV1;\n\t\tthis.updateAuthority = args.updateAuthority;\n\t\tthis.mint = args.mint;\n\t\tthis.data = args.data;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t\tthis.isMutable = args.isMutable;\n\t\tthis.editionNonce = args.editionNonce;\n\t}\n}\n\nclass CreateMetadataArgs {\n\tinstruction: number = 0;\n\tdata: Data;\n\tisMutable: boolean;\n\n\tconstructor(args: { data: Data; isMutable: boolean }) {\n\t\tthis.data = args.data;\n\t\tthis.isMutable = args.isMutable;\n\t}\n}\nclass UpdateMetadataArgs {\n\tinstruction: number = 1;\n\tdata: Data | null;\n\t// Not used by this app, just required for instruction\n\tupdateAuthority: StringPublicKey | null;\n\tprimarySaleHappened: boolean | null;\n\tconstructor(args: {\n\t\tdata?: Data;\n\t\tupdateAuthority?: string;\n\t\tprimarySaleHappened: boolean | null;\n\t}) {\n\t\tthis.data = args.data ? args.data : null;\n\t\tthis.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t}\n}\n\nclass CreateMasterEditionArgs {\n\tinstruction: number = 10;\n\tmaxSupply: typeof BN | null;\n\tconstructor(args: { maxSupply: typeof BN | null }) {\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nclass MintPrintingTokensArgs {\n\tinstruction: number = 9;\n\tsupply: typeof BN;\n\n\tconstructor(args: { supply: typeof BN }) {\n\t\tthis.supply = args.supply;\n\t}\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n\t[\n\t\tCreateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', Data],\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tUpdateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', { kind: 'option', type: Data }],\n\t\t\t\t['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n\t\t\t\t['primarySaleHappened', { kind: 'option', type: 'u8' }],\n\t\t\t],\n\t\t},\n\t],\n\n\t[\n\t\tCreateMasterEditionArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMintPrintingTokensArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV1,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t\t['printingMint', 'pubkeyAsString'],\n\t\t\t\t['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV2,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEdition,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['parent', 'pubkeyAsString'],\n\t\t\t\t['edition', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tData,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['name', 'string'],\n\t\t\t\t['symbol', 'string'],\n\t\t\t\t['uri', 'string'],\n\t\t\t\t['sellerFeeBasisPoints', 'u16'],\n\t\t\t\t['creators', { kind: 'option', type: [Creator] }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tCreator,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['address', 'pubkeyAsString'],\n\t\t\t\t['verified', 'u8'],\n\t\t\t\t['share', 'u8'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMetadata,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['updateAuthority', 'pubkeyAsString'],\n\t\t\t\t['mint', 'pubkeyAsString'],\n\t\t\t\t['data', Data],\n\t\t\t\t['primarySaleHappened', 'u8'], // bool\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEditionMarker,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['ledger', [31]],\n\t\t\t],\n\t\t},\n\t],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n\tconst metadata = deserializeUnchecked(\n\t\tMETADATA_SCHEMA,\n\t\tMetadata,\n\t\tbuffer,\n\t) as Metadata;\n\tmetadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n\tmetadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n\tmetadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n\treturn metadata;\n};\n","/Users/kirk/Development/grape-art/src/utils/grapeTools/safe-math.ts",[],"/Users/kirk/Development/grape-art/src/utils/cyberConnect/types.ts",[],"/Users/kirk/Development/grape-art/src/utils/cyberConnect/helper.ts",[],"/Users/kirk/Development/grape-art/src/utils/cyberConnect/query.ts",[],"/Users/kirk/Development/grape-art/src/utils/grapeTools/mintverification.ts",[],"/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/constants.ts",[],"/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/schema.ts",[],"/Users/kirk/Development/grape-art/src/Profile/FeedView.tsx",["1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296"],"import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nimport { Button } from '@mui/material';\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    METAPLEX_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { web3 } from '@project-serum/anchor';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Stack,\n    ListItemButton,\n    Container,\n    Tooltip,\n} from '@mui/material';\n\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WarningIcon from '@mui/icons-material/Warning';\n\nimport { \n    GRAPE_RPC_ENDPOINT, \n    GRAPE_PREVIEW,\n    REPORT_ALERT_THRESHOLD,\n    FREE_RPC_ENDPOINT, \n} from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { useTranslation } from 'react-i18next';\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction solanaCDN(image:string){\n    if ((image?.toLocaleUpperCase().indexOf('?EXT=PNG') > -1) ||\n        (image?.toLocaleUpperCase().indexOf('?EXT=JPEG') > -1)){\n            //image = image.slice(0, image.indexOf('?'));\n            image = 'https://solana-cdn.com/cdn-cgi/image/width=500/'+image;\n    }\n    return image;\n}\n\n// TAKE INTO ACCOUNT:\n// 1. is the nft still on curve? if not on curve this will not show up in our feed any longer\n// 2. check if it is has a sell state (note that offers take it off sale state for the feed)\n// 3. consider showing a new place for recent offers \n\nexport function MintFlagState(props: any){\n    const [isFlagged, setIsFlagged] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingFlaggedState, setLoadingFlaggedState] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [reportalertopen, setReportAlertOpen] = React.useState(false);\n    const [warningreportopen, setWarningReportOpen] = React.useState(false);\n    \n    const { publicKey, sendTransaction } = useWallet();\n\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n    \n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const handleAlertReportClose = () => {\n        setReportAlertOpen(false);\n    };\n\n    const handleWarningReportClose = () => {\n        setWarningReportOpen(false);\n    };\n\n    const getFlagStatus = async () => {\n        if (mint){\n            setLoadingFlaggedState(true);\n            let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n            if (socialconnection){\n                //if (socialconnection?.identity){\n                if (socialconnection?.connections[0]?.followStatus) { \n                    if ((socialconnection?.connections[0].type.toString() === \"REPORT\")||\n                        (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                        setIsFlagged(socialconnection?.connections[0].followStatus.isFollowing);\n                }\n            }\n            setLoadingFlaggedState(false);\n        } \n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'REPORT',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n        return;\n        }\n        \n        setLoading(true);\n        const resp = await followListInfoQuery({\n            address:mint,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n            if (+resp?.reported >= REPORT_ALERT_THRESHOLD)\n                setWarningReportOpen(true);\n        }\n        setLoading(false);\n    };\n\n    React.useEffect(() => {\n        initFollowListInfo();\n        getFlagStatus();\n    },[]);\n    \n    return ( \n        <>\n        {loadingFlaggedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isFlagged ?  \n                    <>\n                    {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                        <Typography variant=\"caption\" sx={{ml:1}}>\n                            <Tooltip title=\"WARNING: This mint has been reported by the community\">\n                                <Button>\n                                    <WarningIcon sx={{mr:1, fontSize:'20px', color:'yellow'}} /> {followListInfo?.reported}\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    :<></>}\n                    </>\n                :\n                    <>\n                    </>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nexport default function FeedView(props: any){\n    const [loading, setLoading] = React.useState(false);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [featured, setFeatured] = React.useState(null);\n    const [featuredmeta, setFeaturedMeta] = React.useState(null);\n    const [mergedfeaturedmeta, setMergedFeaturedMeta] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const MD_PUBKEY = METAPLEX_PROGRAM_ID;\n    \n    const statestruct = ['Withdraw', 'Offer', 'Sale', 'Accepted from listing', 'Buy Now', 'Cancel', ''];\n\n    const FeaturedItem = (props: any) => {\n        const [finalMeta, setFinalMeta] = React.useState(null);\n        const itemraw = props.itemmeta;\n        //const itemdata = props.itemdata;\n\n        const getCollectionItemData = async () => {\n            try {\n                //console.log(\"RAW: \"+JSON.stringify(itemraw));\n                let meta_primer = itemraw;\n                let buf = Buffer.from(itemraw.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                //setCollectionRaw({meta_final,meta_primer});\n    \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getMeta = async () => {\n            let final_meta = await getCollectionItemData();\n            setFinalMeta(final_meta);\n        }\n\n        React.useEffect(() => { \n            if ((itemraw)&&(!finalMeta)){\n                getMeta();\n            }\n        }, [itemraw]);\n\n        // IMPORTANT FIX:\n        // We need to get the mint owner\n        // Check if owner is on curve otherwise this is program owned and probably no longer lists on grape.art\n\n        const { t, i18n } = useTranslation();\n\n        if (!finalMeta){\n            return (\n                <Container\n                    className=\"grape-art-feed-outer-container\"\n                >\n                    <Container\n                        className=\"grape-art-feed-inner-container\"\n                    >\n                        <Grid \n                            container \n                            direction='row'\n                            className=\"grape-art-feed-overlay\"\n                            >\n                            <CircularProgress />\n                        </Grid>\n                    </Container>\n                </Container>\n            )\n        } else{\n            return (\n                <Container\n                    className=\"grape-art-feed-outer-container\"\n                >\n                    <Container\n                        className=\"grape-art-feed-inner-container\"\n                    >\n                    <img\n                        src={solanaCDN(finalMeta?.image)}\n                        alt=\"\"\n                        className=\"grape-art-feed-inner-img\"\n                    />\n                    \n                        <Grid \n                            container \n                            direction='row'\n                            className=\"grape-art-feed-overlay\"\n                            >\n                            <Grid component={Stack} item xs={12} sm={12} md={6}>\n                                <Grid \n                                    component={Stack} \n                                    direction=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\"\n                                    sx={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\"}}\n                                    >\n                                    <Grid \n                                        item \n                                        sx={{p:0}}>\n                                        <Box\n                                            \n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.6)',\n                                                borderRadius: '26px',\n                                                width:'100%',\n                                                p:'2px',\n                                            }} \n                                        >\n\n                                            <ListItemButton\n                                                component={Link} to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                                sx={{\n                                                    position:'relative',\n                                                    borderRadius:'25px',\n                                                    p: 0\n                                                }}\n                                            >\n                                                <img\n                                                    src={`${solanaCDN(finalMeta?.image)}`}\n                                                    srcSet={`${solanaCDN(finalMeta?.image)}`}\n                                                    alt={finalMeta?.name}\n                                                    //onClick={ () => openImageViewer(0) }\n                                                    loading=\"lazy\"\n                                                    height=\"auto\"\n                                                    style={{\n                                                        width:'100%',\n                                                        borderRadius:'24px',\n                                                        padding:0\n                                                    }}\n                                                />\n                                            </ListItemButton>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            \n                            <Grid item xs={12} sm={12} md={6}>\n                                <Container\n                                    sx={{\n                                        minWidth: '100%',\n                                        minHeight:'100%',\n                                        m:0.5,\n                                        p:0,\n                                    }} \n                                >\n                                    <Container>\n                                    {finalMeta?.symbol &&\n                                        <>\n                                            <>\n                                                <MintFlagState mint={itemraw.memo.mint} />\n                                            </>\n                                            <Typography variant=\"caption\">\n                                                {finalMeta?.symbol}\n                                            </Typography>\n                                        </>\n                                        }\n                                        <Typography variant=\"h4\">\n                                            {finalMeta?.name}\n                                        </Typography>\n                                        \n                                        <Box\n                                            className='grape-art-generic-dark-box'\n                                        >\n                                            <Typography sx={{fontSize:'30px'}}>\n                                                {statestruct[itemraw.memo.state]} <strong>{itemraw.memo.amount}</strong> <SolCurrencyIcon sx={{fontSize:\"18px\", mr:0.5 }}/>\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                            - {itemraw.memo.timestamp} \n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <Button size=\"small\" sx={{fontSize:'10px'}} component=\"a\" href={`https://explorer.solana.com/address/${itemraw.memo.mint}`} target=\"_blank\">{trimAddress(itemraw.memo.mint,5)} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} /></Button>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\" sx={{mt:1,mb:1}}>\n                                            {finalMeta?.description}\n                                            </Typography>\n                                            \n                                            <Button \n                                                className=\"buyNowButton\"\n                                                component={Link} \n                                                to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                            >\n                                                {t('View')}\n                                            </Button>\n                                        </Box>\n                                    </Container>\n                                </Container>\n                            </Grid>\n                            \n                        </Grid>\n                    </Container>\n                </Container>\n            )\n        }\n    }\n    \n    const getCollectionData = async (mintarr:string[]) => {\n        try {\n            let mintsPDAs = new Array();\n            \n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            \n            // LOOP ALL METADATA WE HAVE\n            /*\n            for (var metavalue of metadata){\n                \n                try{\n                    \n                    let meta_primer = metavalue;\n                    let buf = Buffer.from(metavalue.data);\n                    let meta_final = decodeMetadata(buf);\n                    \n                }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n            }\n            */\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFeatured = async () => {\n        \n        if (!loading){\n            setLoading(true);\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n        \n            let result = await ggoconnection.getSignaturesForAddress(auctionHouseKey, {limit: 100});\n            let ahListings: any[] = [];\n            let ahListingsMints: any[] =[];\n            let exists = false;\n            let cntr = 0;\n            let cnt = 0;\n\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            let featured = null;\n            for (var value of result){\n\n                if (value.err === null){\n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n                            \n                            exists = false;\n                            if ((value) && (value.memo)){\n                                \n                                let memo_arr: any[] = [];\n                                let memo_str = value.memo;\n                                let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                if (memo_instances > 0) {\n                                    // multi memo\n                                    let mcnt = 0;\n                                    let submemo = memo_str;\n                                    //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                    for (var mx=0;mx<memo_instances;mx++){\n                                        let init = submemo.indexOf('{');\n                                        let fin = submemo.indexOf('}');\n                                        memo_str = submemo.slice(init,fin+1); // include brackets\n                                        memo_arr.push(memo_str);\n                                        submemo = submemo.replace(memo_str, \"\");\n                                        //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                        //console.log(\"submemo: \"+submemo);\n                                    }\n                                } else{\n                                    let init = memo_str.indexOf('{');\n                                    let fin = memo_str.indexOf('}');\n                                    memo_str = memo_str.slice(init,fin+1); // include brackets\n                                    memo_arr.push(memo_str);\n                                }\n                                \n\n                                for (var memo_item of memo_arr){\n                                    try{\n\n                                        const memo_json = JSON.parse(memo_item);\n\n                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                        for (var i = 0; i < ahListings.length; i++){\n                                            if ((memo_json?.mint === ahListings[i].mint)){ // match same\n                                                // if match then add\n                                                if (memo_json.state === 1)\n                                                    ahListings[i].offers = ahListings[i].offers+1;\n                                                exists = true;\n                                            }\n                                        }\n\n                                        if (!exists){\n                                            let forSaleDate = ''+value.blockTime;\n                                            if (forSaleDate){\n                                                let timeago = timeAgo(''+value.blockTime);\n                                                forSaleDate = timeago;\n                                            }\n\n                                            let solvalue = convertSolVal(memo_json?.amount || memo_json?.offer);\n                                            if (memo_json?.mint){\n                                                let offer = 0;\n                                                if (memo_json.state === 1)\n                                                    offer = 1;\n                                                // 1. score will need to be decayed according to time\n                                                // 2. score will need to be decayed if reported and if reported > threshhold dont show\n                                                ahListings.push({amount: solvalue, mint: memo_json?.mint, timestamp: forSaleDate, blockTime:value.blockTime, state: memo_json?.state || memo_json?.status, offers: offer, score: memo_json?.score || 0});  \n                                                ahListingsMints.push(memo_json.mint);\n                                                \n                                            }\n                                        }\n                                    }catch(merr){console.log(\"ERR: \"+merr + \" - \"+memo_item)}\n                                }\n                            }\n                        }\n                    } catch (e){console.log(\"ERR: \"+e)}\n                }\n            } \n\n            let collectionmeta = await getCollectionData(ahListingsMints);\n\n            setFeaturedMeta(collectionmeta);\n            setFeatured(ahListings);\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                collectionmeta[i][\"memo\"] = ahListings[i];\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n\n                for (var item_meta of finalmeta){\n                    let meta_primer = item_meta.data;\n                    let buf = Buffer.from(meta_primer.data, 'base64');\n                    let meta_final = decodeMetadata(buf);\n                    //console.log(JSON.stringify(meta_final));\n                }\n\n                finalmeta.sort((a:any,b:any) => (b.memo.score - a.memo.score) || (b.memo.blockTime - a.memo.blockTime));\n                setMergedFeaturedMeta(finalmeta);\n            }catch(e){\n                setMergedFeaturedMeta(collectionmeta);\n            }\n            \n            \n            setLoading(false);                                      \n        }\n    }\n\n    //React.useEffect(() => { \n        if ((!loading) && (!featured))\n            getFeatured();\n    //}, []);\n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n                width=\"100%\"\n                minWidth=\"400px\"\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        <CircularProgress />\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        {mergedfeaturedmeta &&\n                            <>\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 2 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 1 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n                            </>\n                        }\n                    </Box>\n                </Grid>\n            </Grid>\n        );\n    }\n}","/Users/kirk/Development/grape-art/src/utils/name-service.tsx",["1297","1298","1299","1300"],"import { PublicKey, Connection } from \"@solana/web3.js\";\n//import { useAsync } from \"./utils.native\";\nimport { asyncCache } from \"./cache\";\nimport {\n  findOwnedNameAccountsForUser,\n  performReverseLookupBatch,\n} from \"./web3/name-auctioning\";\nimport { getHandleAndRegistryKey } from \"./web3/name-service\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n//import { Profile } from \"./web3/jabber\";\n\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport const findDisplayName = async (\n  connection: Connection,\n  receiver: string\n) => {\n  let allNames: string[] = [];\n  let favoriteDisplayName: string | undefined = undefined;\n\n  try {\n      /*\n    try {\n      const profile = await Profile.retrieve(\n        connection,\n        new PublicKey(receiver)\n      );\n      favoriteDisplayName = profile.name.split(\":fdn:\")[1];\n      if (favoriteDisplayName) {\n        allNames.push(favoriteDisplayName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    const knownReceiver = await asyncCache.get<string[]>(receiver);\n    if (knownReceiver && knownReceiver?.length > 0) {\n      if (favoriteDisplayName && favoriteDisplayName !== knownReceiver[0]) {\n        await asyncCache.set(receiver, [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ]);\n        return [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ];\n      }\n      return knownReceiver;\n    }\n    */\n\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      new PublicKey(receiver)\n    );\n    domainsAddresses.sort((a, b) => a.toBase58().localeCompare(b.toBase58()));\n    if (domainsAddresses.length === 0) {\n      return [receiver];\n    }\n\n    const reverse = (\n      await performReverseLookupBatch(connection, domainsAddresses)\n    )\n      .filter((e) => !!e)\n      .map((e) => e + \".sol\") as string[];\n\n    allNames = [...allNames, ...reverse];\n\n    if (allNames.length > 0) {\n      await asyncCache.set(receiver, allNames);\n      return allNames;\n    }\n\n    try {\n      const [display] = await getHandleAndRegistryKey(\n        connection,\n        new PublicKey(receiver)\n      );\n      return [\"@\" + display];\n    } catch (err) {\n      console.log(err);\n    }\n\n    return [receiver];\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const useDisplayName = (contact: string | undefined) => {\n    const { connection } = useConnection();\n\n  const fn = async (): Promise<string[] | undefined> => {\n    if (!contact) return;\n    return await findDisplayName(connection, contact);\n  };\n\n  return false;\n  //return useAsync(fn, false);\n};\n\nexport const ownerHasDomain = async (\n  connection: Connection,\n  owner: PublicKey\n) => {\n  try {\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      owner\n    );\n    return domainsAddresses.length != 0;\n  } catch (err) {\n    console.log(err);\n  }\n  try {\n    await getHandleAndRegistryKey(connection, owner);\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return false;\n};\n\nexport const useUserHasDomainOrTwitter = () => {\n  const { publicKey } = useWallet();\n  const { connection } = useConnection();\n\n  const fn = async () => {\n    let hasDomain = false;\n    let hasTwitter = false;\n    if (!publicKey) return;\n    try {\n      const domainsAddresses = await findOwnedNameAccountsForUser(\n        connection,\n        publicKey\n      );\n      hasDomain = domainsAddresses.length !== 0;\n    } catch (err) {\n      console.log(err);\n    }\n\n    try {\n      await getHandleAndRegistryKey(connection, publicKey);\n      hasTwitter = true;\n    } catch (err) {\n      console.log(err);\n    }\n\n    return { hasTwitter: hasTwitter, hasDomain: hasDomain };\n  };\n  return false;\n  //return useAsync(fn, false);\n};\n","/Users/kirk/Development/grape-art/src/utils/grapeTools/ShareUrl.tsx",["1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321"],"import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { styled } from '@mui/material/styles';\nimport { useSnackbar } from 'notistack';\n\nimport { \n    Dialog,\n    List,\n    ListItem,\n    ListItemButton,\n    ListItemText,\n    ListItemAvatar,\n    DialogTitle,\n    DialogContent,\n    Avatar,\n    Button,\n    Tooltip, \n    CardActionArea \n} from '@mui/material';\n\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport IosShareIcon from '@mui/icons-material/IosShare';\n\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    WhatsappShareButton,\n  } from \"react-share\";\n\n  import {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n  } from \"react-share\";\n\n  import { useTranslation } from 'react-i18next';\n\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\nexport default function ShareSocialURL(props:any){\n    const shareUrl = props.url;\n    const title = props.title;\n    const fontSize = props.fontSize || '20px';\n\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopyClick = () => {\n        enqueueSnackbar(`Copied!`,{ variant: 'success' });\n    };\n\n    const handleNavigatorShare = () => {\n        navigator.share({\n            title: title,\n            text: title,\n            url: shareUrl\n        });\n    }\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (value) => {\n        setOpen(false);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    return (\n        <>\n            <Tooltip title={t('Share')}>\n                <Button size=\"small\" variant=\"text\" onClick={handleClickOpen}\n                    sx={{borderRadius:'24px', color:'white'}}\n                >\n                    <IosShareIcon sx={{fontSize:{fontSize}}} />\n                </Button> \n            </Tooltip>\n            <BootstrapDialog \n                maxWidth={\"md\"}\n                open={open} onClose={handleClose}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                {t('Share')}\n                </DialogTitle>\n                <DialogContent>\n                    <List sx={{ pt: 0 }}>\n                        <ListItem>\n                            <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                <CopyToClipboard \n                                    text={shareUrl} \n                                    onCopy={handleCopyClick}\n                                    >\n                                    <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                        \n                                            <ListItemAvatar>\n                                                <Avatar sx={{ width: 32, height: 32 }}><ContentCopyIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={'Copy'} />\n                                        \n                                    </ListItemButton>\n                                </CopyToClipboard> \n                            </Button>\n                        </ListItem>\n                        {(navigator.share !== undefined) &&\n                            <ListItem>\n                                <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                    <CopyToClipboard \n                                        text={shareUrl} \n                                        onCopy={handleNavigatorShare}\n                                        >\n                                        <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                            \n                                                <ListItemAvatar>\n                                                    <Avatar sx={{ width: 32, height: 32 }}><IosShareIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={'Native Share'} />\n                                            \n                                        </ListItemButton>\n                                    </CopyToClipboard> \n                                </Button>\n                            </ListItem>\n                        }\n                        <ListItem>  \n                            <EmailShareButton\n                                    url={''}\n                                    subject={title}\n                                    body={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><EmailIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Email'} />\n                                    \n                                </ListItemButton>\n                            </EmailShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TwitterShareButton\n                                    url={shareUrl}\n                                    title={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TwitterIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Twitter'} />\n                                    \n                                </ListItemButton>\n                            </TwitterShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TelegramShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TelegramIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Telegram'} />\n                                    \n                                </ListItemButton>\n                            </TelegramShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <FacebookShareButton\n                                    url={shareUrl}\n                                    quote={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><FacebookIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Facebook'} />\n                                    \n                                </ListItemButton>\n                            </FacebookShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <ViberShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><ViberIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Viber'} />\n                                    \n                                </ListItemButton>\n                            </ViberShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <WhatsappShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><WhatsappIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'WhatsApp'} />\n                                    \n                                </ListItemButton>\n                            </WhatsappShareButton>\n                        </ListItem>\n\n                    </List>\n                </DialogContent>  \n            </BootstrapDialog>\n        </>\n        \n    ); \n}","/Users/kirk/Development/grape-art/src/utils/grapeTools/WalletAddress.tsx",["1322","1323"],"import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport { Button, CardActionArea } from '@mui/material';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport moment from 'moment';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { FEATURED_DAO_ARRAY } from './constants';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport async function getImageOrFallback(url:string, fallback:string) {\n    //console.log(url+\" vs \"+fallback)\n    return new Promise((resolve, reject) => {\n      const img = new Image()\n      img.src = url\n      img.onload = () => {\n        //console.log(\"image found\")\n        resolve(url)\n        return url\n      }\n      img.onerror = () => {\n        //console.log(\"image not found\")\n        reject(`image not found for url ${url}`)\n      }\n    }).catch(() => {\n      return fallback\n    })\n}\n\nexport function timeAgo(blockTime:string){\n    try{\n        let prettydate = moment.unix(+blockTime).format(\"MMMM Do YYYY, h:mm a\");\n                    //console.log(\"prettyForSaleDate: \"+prettyForSaleDate)\n        let timeago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asDays().toFixed(0);\n        //console.log(\"Time Ago: \"+timeago);\n        if (+timeago >= 1){\n            prettydate = timeago+' days ago';\n        } else{\n            let hoursago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asHours().toFixed(0);\n            if (+hoursago >= 1){\n                prettydate = hoursago+' hours ago';\n            } else {\n                let minutesAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asMinutes().toFixed(0);\n                if (+minutesAgo >= 1){\n                    prettydate = minutesAgo+' minutes ago';\n                } else {\n                    let secondsAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asSeconds().toFixed(0);\n                    if (+secondsAgo >= 1){\n                        prettydate = minutesAgo+' seconds ago';\n                    }\n                }\n            }\n        }  \n\n        return prettydate;\n    }catch(e){\n        return blockTime;\n    }\n}\n\nexport function formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return date_str\n    \n}\n\nexport function trimAddress(addr: string, trim:any) {\n    if ((addr) && (addr.length > trim)){\n        let start = addr.substring(0, trim);\n        let end = addr.substring(addr.length - trim);\n        return `${start}...${end}`;\n    } else{\n        return addr;\n    }\n}\n\nexport function ValidateCurve(address:string){\n    //console.log(\"On Curve: \"+PublicKey.isOnCurve(new PublicKey(address).toBuffer()));\n    return PublicKey.isOnCurve(new PublicKey(address).toBuffer());\n}\n\nexport function ValidateAddress(address:any){\n    try{\n        if (address){\n            //let base58 = useMemo(() => props?.toBase58(), [props]) || null;\n            if ((address.length >= 32) && \n                (address.length <= 45)){    \n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === address){\n                            return true;\n                        }\n                    }\n                    if ((address === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK'))\n                        return true;\n                return ValidateCurve(address);\n            }\n            return false;\n        }\n    } catch(e){console.log(\"ERR: \"+e)};\n    return false;\n    \n}\n\nexport function MakeLinkableAddress(props:any){\n    const addr = props?.addr || \"\";\n    const trim = props?.trim;\n    const hasextlink = props?.hasextlink || false;\n    const hascopy = props?.hascopy || false;\n    const fontsize = props?.fontsize || \"16px\";\n    const permalink = props?.permalink || false;\n    const isDNS = props?.isDNS || null;\n    \n    let stri_addr = addr;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const handleCopyClick = () => {\n        setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n    \n    if (addr.length > 0){\n        if (trim>0)\n            stri_addr = trimAddress(addr, trim)\n    }\n\n    function ClipboardAction(){\n        if (hascopy){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={addr} \n                    onCopy={handleCopyClick}\n                    >\n                        <ContentCopyIcon sx={{fontSize:fontsize, mr:0 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n\n    function PermalinkAction(){\n        if (permalink){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={window.location.href} \n                    onCopy={handleCopyClick}\n                    >\n                        <InsertLinkIcon sx={{fontSize:fontsize, ml:1 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n    \n    if (addr.length > 0){\n        if (hasextlink){\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr} <OpenInNewIcon sx={{fontSize:fontsize, ml:1}} /></Button>\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        } else {\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    {isDNS ?\n                        <>{addr}</>\n                    :\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr}</Button>\n                    }\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        }\n    } else{\n        return (\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n}","/Users/kirk/Development/grape-art/src/Profile/CurationView.tsx",["1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { LikeListInfoResp, FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { removeDuplicate } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery, likeListInfoQuery } from '../utils/cyberConnect/query';\n\nimport { decodeMetadata } from '../utils/grapeTools/utils';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { Connection, PublicKey} from '@solana/web3.js';\n\nimport {\n    METAPLEX_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { Button } from '@mui/material';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Avatar,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    ListItemAvatar,\n} from '@mui/material';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport GalleryItem from './GalleryItem';\nimport GalleryView from './GalleryView';\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nexport default function CurationView(props: any){\n    const MD_PUBKEY = METAPLEX_PROGRAM_ID;\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [type, setType] = React.useState<number>(props.type || 0);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rpclimit = 100;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [likeListInfo, setLikeListInfo] = useState<LikeListInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n    const [wallet_collection_meta, setCollectionMeta] = React.useState(null);\n    const [final_collection, setCollectionMetaFinal] = React.useState(null);\n    const NAME_SPACE = 'Grape';\n    const GLOBAL_NAME_SPACE = '';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 12; // The number of users in followings/followers list for each fetch\n    const rowsperpage = 1500;\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        setLoading(true);\n        if (!pubkey) {\n            return;\n        }\n\n        const resp = await likeListInfoQuery({\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            likeFirst: FIRST,\n            likedFirst: FIRST,\n        });\n        if (resp) {\n            setLikeListInfo(resp);\n        }\n        setLoading(false);\n    };\n  \n  const fetchMore = async (type: 'likes' | 'likeds') => {\n    if (!pubkey || !likeListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'likeds'\n        ? {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: likeListInfo.likeds.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: likeListInfo.likes.pageInfo.endCursor,\n          };\n\n    const resp = await likeListInfoQuery(params);\n    if (resp) {\n      type === 'likes'\n        ? setLikeListInfo({\n            ...likeListInfo,\n            likes: {\n              pageInfo: resp.likes.pageInfo,\n              list: removeDuplicate(\n                likeListInfo.likes.list.concat(resp.likes.list)\n              ),\n            },\n          })\n        : setLikeListInfo({\n            ...likeListInfo,\n            likeds: {\n              pageInfo: resp.likeds.pageInfo,\n              list: removeDuplicate(\n                likeListInfo.likeds.list.concat(resp.likeds.list)\n              ),\n            },\n          });\n    }\n  };\n  \n  const getCollectionData = async (start:number) => {\n        const wallet_collection = likeListInfo.likes.list;\n        \n        try {\n            let mintsPDAs = new Array();\n            //console.log(\"RPClim: \"+rpclimit);\n            //console.log(\"Paging \"+(rpclimit*(start))+\" - \"+(rpclimit*(start+1)));\n            \n            let mintarr = wallet_collection.slice(rpclimit*(start), rpclimit*(start+1)).map((value:any, index:number) => {\n                //console.log(\"mint: \"+JSON.stringify(value.address));\n                //return value.account.data.parsed.info.mint;\n                return value.address;\n            });\n            \n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                }\n            }\n\n            //console.log(\"pushed pdas: \"+JSON.stringify(mintsPDAs));\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            //console.log(\"returned: \"+JSON.stringify(metadata));\n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                //console.log(\"Metaplex val: \"+JSON.stringify(metavalue));\n                if (metavalue?.data){\n                    try{\n                        let meta_primer = metavalue;\n                        let buf = Buffer.from(metavalue.data);\n                        let meta_final = decodeMetadata(buf);\n                        //console.log(\"meta_final: \"+JSON.stringify(meta_final));\n                    }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n                } else{\n                    console.log(\"Something not right...\");\n                }\n            }\n\n            return metadata;\n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getCollectionMeta = async (start:number) => {\n        const wallet_collection = likeListInfo.likes.list;\n\n        let tmpcollectionmeta = await getCollectionData(start);\n        setCollectionMeta(tmpcollectionmeta);\n\n        for (var i = 0; i < tmpcollectionmeta.length; i++){\n            //console.log(i+\": \"+JSON.stringify(collectionmeta[i])+\" --- with --- \"+JSON.stringify(wallet_collection[i]));\n            if (tmpcollectionmeta[i]){\n                tmpcollectionmeta[i][\"wallet\"] = wallet_collection[i];\n            }\n        }\n        \n        try{\n            let finalmeta = JSON.parse(JSON.stringify(tmpcollectionmeta));\n            setCollectionMetaFinal(finalmeta);\n        }catch(e){}\n\n    }\n\n    // if likeListInfo set\n    // iterate all and use a batch rpc call\n    React.useEffect(() => {\n        if (likeListInfo && likeListInfo.likes.list){\n            getCollectionMeta(0);\n        }\n    }, [likeListInfo]);\n\n    React.useEffect(() => { \n        if (pubkey){\n            initFollowListInfo();\n        }\n    }, []);\n    \n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={2} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <> \n                {wallet_collection_meta && final_collection &&\n                    <GalleryView finalCollection={final_collection} walletCollection={wallet_collection_meta} />\n                }\n            </>\n        );\n    }\n}","/Users/kirk/Development/grape-art/src/Profile/GalleryView.tsx",["1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371"],"\nimport React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport { PublicKey } from '@solana/web3.js';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    ListItemButton,\n} from '@mui/material';\n\nimport GalleryItem from './GalleryItem';\nimport { GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { ConstructionOutlined } from \"@mui/icons-material\";\n\nexport default function GalleryView(props: any){\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const finalCollection = props.finalCollection;\n    //const walletCollection = props.walletCollection;\n\n    return (\n        <>\n        {finalCollection && finalCollection.length > 0 && (\n            <Box\n                sx={{\n                    background: 'rgba(0, 0, 0, 0.6)',\n                    borderRadius: '17px',\n                    p:4\n                }} \n            > \n                <Grid container \n                    spacing={{ xs: 2, md: 3 }} \n                    justifyContent=\"center\"\n                    alignItems=\"center\">\n                    \n                    { (finalCollection.length > 0 ? finalCollection\n                        .slice((page - 1) * rowsperpage, page * rowsperpage):finalCollection)\n                        .map((collectionInfo: any, key: any) => {\n                            return(\n                                <Grid item xs={12} sm={12} md={4} lg={3} key={key}>\n                                    <Box\n                                        sx={{\n                                            background: 'rgba(0, 0, 0, 0.6)',\n                                            borderRadius: '26px',\n                                            minWidth: '175px'\n                                        }} \n                                    >\n                                        <GalleryItem collectionitem={collectionInfo} listed={true} count={key} />\n                                    </Box>\n                                </Grid>\n                                    \n                            )\n                        }\n                    )}\n                </Grid>\n                \n                { finalCollection.length > rowsperpage && \n                    <Grid container justifyContent=\"flex-end\" sx={{ mt: 2 }}>\n                        <Stack spacing={2}>\n                            <Pagination\n                                count={(Math.ceil(finalCollection.length / rowsperpage))}\n                                page={page}\n                                //onChange={handlePageChange}\n                                defaultPage={1}\n                                color=\"primary\"\n                                size=\"small\"\n                                showFirstButton\n                                showLastButton\n                                //classes={{ ul: classes.paginator }}\n                                />\n                        </Stack>\n                    </Grid>\n                }\n            </Box>\n            \n        )}\n        </>);\n}","/Users/kirk/Development/grape-art/src/Profile/SocialView.tsx",["1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { removeDuplicate } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { Connection, PublicKey} from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { Button } from '@mui/material';\n\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Avatar,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    ListItemAvatar,\n} from '@mui/material';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { useTranslation } from 'react-i18next';\n\nexport default function SocialView(props: any){\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [type, setType] = React.useState<number>(props.type || 0);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rpclimit = 100;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n\n    const NAME_SPACE = 'Grape';\n    const GLOBAL_NAME_SPACE = '';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 12; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        setLoading(true);\n        if (!pubkey) {\n            return;\n        }\n\n        const resp = await followListInfoQuery({\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n\n    const ProfilePicture = (props:any) => {\n        const followitem = props.followitem;\n        const [address, setAddress] = React.useState(followitem.address);\n        const [loadingpicture, setLoadingPicture] = React.useState(false);\n        const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n        const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n        const countRef = React.useRef(0);\n\n        const fetchProfilePicture = async () => {\n            setLoadingPicture(true);  \n                //console.log(\"trying: \"+address)\n                try{\n                    //console.log(countRef.current+\": \"+address+\" - \"+loadingpicture);\n                    const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(address));\n                    \n                    let img_url = url;\n                    if (url)\n                        img_url = url.replace(/width=100/g, 'width=256');\n                    setProfilePictureUrl(img_url);\n                    setHasProfilePicture(isAvailable);\n                    countRef.current++;\n                }catch(e){}\n            setLoadingPicture(false);\n        }\n\n        React.useEffect(() => {       \n            if (!loadingpicture){\n                //const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                //}, 500);\n            }\n        }, []);\n\n        /*\n        React.useEffect(() => { \n            if ((!loadingpicture)&&(countRef.current<1)){\n                const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                }, 500);\n                return () => clearInterval(interval); \n            }\n        }, []);\n        */\n\n        \n        if (loadingpicture){\n            return (\n                <Avatar sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                    <CircularProgress sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }} />\n                </Avatar>)\n        }else{\n            \n            if (hasProfilePicture){\n                return (  \n                    <Avatar alt={address} src={profilePictureUrl} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                        {address.substr(0,2)}\n                    </Avatar>\n                );\n            \n            } else{\n                return (\n                    <>\n                    {followitem.avatar ?\n                        <>\n                            <Avatar alt={followitem.address} src={followitem.avatar} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                                {followitem.address.substr(0,2)}\n                            </Avatar>\n                        </>\n                    :\n                        <>\n                        {jsNumberForAddress(followitem.address) ?\n                            <>\n                            <Jazzicon diameter={56} seed={jsNumberForAddress(followitem.address)} />\n                            </>\n                        :\n                            <>\n                            <Jazzicon diameter={56} seed={Math.round(Math.random() * 10000000)} />\n                            </>\n                        }\n                        </>\n                    }\n                    </>\n                );\n            }\n        }\n    }\n\n\n    const SocialItem = (props: any) => {\n        const [followitem, setFollowItem] = React.useState(props.followitem);\n        const [followitemkey, setFollowItemKey] = React.useState(props.followitemkey);\n        const following = props.following;\n    \n        const { t, i18n } = useTranslation();\n\n        if (loading){\n            return <Grid item xs={12} sm={6} md={4}><CircularProgress /></Grid>\n        } else{\n            return (\n                \n                <Grid item xs={12} sm={12} md={4} lg={3}>\n\n                    <ListItem \n                        key={followitemkey}\n                        sx={{ \n                            background:'rgba(0,0,0,0.5)',\n                            borderRadius:'17px' }}>\n                        <ListItemButton\n                            component={Link} \n                            to={`${GRAPE_PROFILE}${followitem.address}`}\n                            sx={{ \n                                m:1,\n                                borderRadius:'17px'}}\n                            >\n                            <ListItemAvatar>\n                                <ProfilePicture followitem={followitem} />\n                            </ListItemAvatar>\n                            {following ?\n                                <ListItemText\n                                    sx={{ml:1}}\n                                    primary={followitem.alias || followitem.ens || trimAddress(followitem.address,4)}  \n                                    secondary={<Typography variant=\"caption\" color=\"#777\">{t('From')} {followitem.namespace}</Typography>}\n                                />\n                            :\n                            <ListItemText\n                                sx={{ml:1}}\n                                primary={followitem.ens || trimAddress(followitem.address,4)}  \n                                secondary={<Typography variant=\"caption\" color=\"#777\">{t('From')} {followitem.namespace}</Typography>}\n                            />\n                            }\n                        </ListItemButton>\n                    </ListItem>\n                </Grid>\n\n\n            )\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            initFollowListInfo();\n        }\n    }, []);\n    \n    const { t, i18n } = useTranslation();\n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={2} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <> \n                <Box\n                    sx={{\n                        background: 'rgba(0, 0, 0, 0.6)',\n                        borderRadius: '17px',\n                        p:4\n                    }} \n                > \n                    <Grid container \n                        spacing={{ xs: 2, md: 3 }} \n                        justifyContent=\"center\"\n                        alignItems=\"center\">\n                        \n                        {type === 0 ?\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followers && followListInfo.followers.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} following={false} />\n                                    ))}\n                                </Grid>\n                            }\n                            \n                            {followListInfo?.followers.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followers')}>{t('more')}</Button>\n                            }\n                        </>\n                        :\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followings && followListInfo.followings.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} following={true} />\n                                    ))}\n                                </Grid>\n                            }\n                            {followListInfo?.followings.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followings')}>{t('more')}</Button>\n                            }\n                        </>\n                        }\n                    </Grid>\n\n                </Box>\n            </>\n        );\n    }\n}","/Users/kirk/Development/grape-art/src/Profile/OffersView.tsx",["1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport { makeStyles, styled, alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getMetadata,\n    getAuctionHouseProgramAsSigner,\n    loadWalletKey,\n    deserializeAccount,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Table,\n    TableContainer,\n    TableRow,\n    TableCell,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Container,\n} from '@mui/material';\n\nimport { red } from '@mui/material/colors';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport GrapeIcon from '../components/static/GrapeIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\n\nimport { useTranslation } from 'react-i18next';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  function convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nexport default function OffersView(props:any){\n    const [offers, setOffers] = React.useState(null);\n    const [myoffers, setMyOffers] = React.useState(0);\n    const [listings, setListings] = React.useState(null);\n    const [ahbalance, setAHBalance] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [ahloading, setAHLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.pubkey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const connection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { publicKey, sendTransaction } = useWallet();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const [refresh, setRefresh] = React.useState(false);\n    const [counter, setCounter] = React.useState(0);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [page, setPage] = React.useState(1);\n    const [alertwithdrawopen, setAlertWithdrawOpen] = React.useState(false);\n    \n    const rowsperpage = 1500;\n    const selectedstate = props.selectedstate;\n\n    const handleAlertWithdrawClose = () => {\n        setAlertWithdrawOpen(false);\n    };\n    const handleAlertWithdrawOpen = () => {\n        setAlertWithdrawOpen(true);\n    };\n\n    const handleCancelOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);                \n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`${t('Preparing to Cancel Offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await connection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Offer has been canceled')} `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`${t('Error')}: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\t//handCancelWithdrawOffer was useful when only allowing one offer at a time\n    const handleCancelWithdrawOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            const signedTransaction = await sendTransaction(transaction, connection)\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Offer Cancel and Withdrawal completed')} `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar()\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n    \n    const handleWithdrawOffer = async (offerAmount: number, mint: string) => {\n\n        try {\n            \n            var allmints: any[] = [];\n            if (!mint){\n                for (var item of offers){\n                    if(item.state === 1){\n                        allmints.push({mint: item.mint, offerAmount: convertSolVal(item.offeramount)});\n                        if (!mint)\n                            mint = item.mint;\n                    }               \n                }\n            }\n\n            if (allmints.length <= 1){\n                if (mint){ // with mint allow calling cancel withdraw combo\n                    try {\n                        const mintKey = new web3.PublicKey(mint);\n                        let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                        const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                        let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                        const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                        const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`${t('Preparing to withdraw offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n                        \n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`${t('Offer Cancel and Withdrawal completed')} `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`${t('Error')}: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    } \n                } else{ // no mint then just withdraw\n                    try {\n                        const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`${t('Preparing to withdraw offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        \n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`${t('Withdrawal from Grapevine completed')} `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`${t('Error')}: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    }\n                }\n            } else {  \n                //enqueueSnackbar(`To withdraw from Grapevine you must first cancel all pending Offers.`,{ variant: 'warning' });\n                //several mints to cancel and finally withdraw\n                \n                    let cnt = 1;\n\n                    for (var item of allmints){  \n                        console.log(JSON.stringify(allmints));  \n                        try{ \n                            if (cnt <= allmints.length){\n                                //cancelOffer on specific mint in list\n                                const mintKey = new web3.PublicKey(item.mint);\n                                let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                                const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                //let numericAmmount = item.offerAmount;\n                                const transactionInstr = await cancelOffer(item.offerAmount, item.mint, publicKey, mintAccountInfoDs.owner);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                            \n                                enqueueSnackbar(`${t('Preparing to cancel offer for')} ${item.offerAmount} SOL ${t('on')} ${t('mint')} ${item.mint}`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`${t('Offer cancel complete')} `,{ variant: 'success', action:snackaction });                 \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`${t('Error')}: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }\n\n                        try{\n                            if (cnt === allmints.length){\n                                const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                                enqueueSnackbar(`${t('Preparing to withdraw offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`${t('Grapevine Withdrawal complete')} `,{ variant: 'success', action:snackaction });                     \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`${t('Error')}: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }    \n\n                        cnt++;\n                    }\n                    const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                    });\n                    setTimeout(function() {\n                        closeSnackbar(eskey);\n                        setRefresh(true);\n                    }, GRAPE_RPC_REFRESH);\n         \n\t\t\t\t\n            }\n            \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`${t('Error')}: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const getOffers = async () => {\n        getEscrowBalance();\n\n        if (!loading){\n            setLoading(true);\n            setMaxPage(false);\n\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(thisPublicKey)).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n            \n            let result = await ggoconnection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 100});\n            \n            //let sale_result = await connection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 250});\n            //console.log(JSON.stringify(result));\n            \n            let offerResults: any[] = [];\n            let cancelStateResults: any[] = [];\n            let allListingResults: any[] = [];\n            let listingResults: any[] = [];\n            let mintArrayPDA: any[] = [];\n            let escrow_cache: any[] = [];\n            let exists = false;\n            let existSaleCancelAction = 0;\n            let cntr = 0;\n            let cnt = 0;\n\n\n            let sellerTradeStateArr: any[] = [];\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            for (var value of result){\n                if (value.err === null){\n                    \n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                //console.log(value.signature);\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n\n                            //if ( feePayer != mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                            {\n                                 \n                                let escrow_found = false;\n                                let escrow_found_index = 0;\n                                for (var i = 0; i < escrow_cache.length; i++){\n                                    if (escrow_cache[i].feePayer.toBase58() === feePayer.toBase58()){\n                                        escrow_found = true;\n                                        escrow_found_index = i;\n                                    }\n                                }\n\n                                let amount_on_escrow = 0;\n\n                                if (!escrow_found){\n                                    let escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                    amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n                                    escrow_cache.push(\n                                        {\n                                            //escrow: escrow,\n                                            amount_on_escrow: amount_on_escrow,\n                                            feePayer: feePayer\n                                        }\n                                    );\n                                    \n                                } else{\n                                    amount_on_escrow = escrow_cache[escrow_found_index].amount_on_escrow;\n                                }\n                                \n                                let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;\n                                //console.log('auctionMint: '+auctionMint);\n                                \n                                //if (auctionMint){\n                                //    console.log(\"value3: \"+JSON.stringify(value));\n                                \n                                // check if memo is an array\n                                \n                                // consider countering all brackets\n\n                                    {\n                                        exists = false;\n                                        //console.log('VAL '+JSON.stringify(value));\n                                        if ((value) && (value.memo)){\n                                            \n                                            let memo_arr: any[] = [];\n                                            let memo_str = value.memo;\n                                            let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                            if (memo_instances > 0) {\n                                                // multi memo\n                                                let mcnt = 0;\n                                                let submemo = memo_str;\n                                                //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                                for (var mx=0;mx<memo_instances;mx++){\n                                                    let init = submemo.indexOf('{');\n                                                    let fin = submemo.indexOf('}');\n                                                    memo_str = submemo.substring(init,fin+1); // include brackets\n                                                    memo_arr.push(memo_str);\n                                                    submemo = submemo.replace(memo_str, \"\");\n                                                    //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                                    //console.log(\"submemo: \"+submemo);\n                                                }\n                                            } else{\n                                                let init = memo_str.indexOf('{');\n                                                let fin = memo_str.indexOf('}');\n                                                memo_str = memo_str.substring(init,fin); // include brackets\n                                                memo_arr.push(memo_str);\n                                            }\n                                            \n                                            for (var memo_item of memo_arr){\n                                                try{\n                                                    const memo_json = JSON.parse(memo_item);\n                                                    \n                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                    //console.log(memo_json);\n                                                    if ((memo_json?.status === 0) || // withdraw\n                                                        (memo_json?.status === 1) || // offer\n                                                        (memo_json?.status === 2) || // sale\n                                                        (memo_json?.status === 3) || // listing/accept\n                                                        (memo_json?.status === 4) || // buy now\n                                                        (memo_json?.status === 5) || // cancel\n                                                        (memo_json?.state === 0) || // withdraw\n                                                        (memo_json?.state === 1) || // offer\n                                                        (memo_json?.state === 2) || // sale\n                                                        (memo_json?.state === 3) || // listing/accept\n                                                        (memo_json?.state === 4) || // buy now\n                                                        (memo_json?.state === 5)){ // cancel\n                                                        \n                                                        // consider checking amount vs memo_json.offer\n                                                        \n                                                        //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                                        let sale_state_exists = false;\n                                                        \n                                                        //console.log(memo_json?.state + ' ('+memo_json?.mint+') - ' + feePayer.toBase58() + ': ' + memo_json?.amount);\n                                                        //console.log(feePayer.toBase58() + ' v ' + thisPublicKey);\n                                                        \n                                                        if (feePayer.toBase58() === thisPublicKey){\n\n                                                            if ( feePayer.toBase58() === thisPublicKey && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && !sale_state_exists){\n                                                                \n                                                                if ((memo_json?.status === 0) ||\n                                                                    (memo_json?.status === 2) ||\n                                                                    (memo_json?.status === 3) ||\n                                                                    (memo_json?.status === 4) ||\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) ||\n                                                                    (memo_json?.state === 2) ||\n                                                                    (memo_json?.state === 3) ||\n                                                                    (memo_json?.state === 4) ||\n                                                                    (memo_json?.state === 5)){\n\n                                                                    if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                                        // check if exists\n                                                                        for (var i = 0; i < allListingResults.length; i++){\n                                                                            if (memo_json?.mint === allListingResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n                                                                        for (var i = 0; i < cancelStateResults.length; i++){\n                                                                            if (memo_json?.mint === cancelStateResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n\n                                                                        // push last sale state first\n                                                                        if ((!sale_state_exists)&&(selectedstate===2)){ // handle this only for sale tab\n                                                                            let mint_address = new PublicKey(memo_json?.mint)\n                                                                            mintArrayPDA.push(mint_address);\n\n                                                                            if (memo_json?.amount){\n                                                                                let ownerHasMint = false;\n                                                                                for (var wvalue of walletCollection){\n                                                                                    if (wvalue.account.data.parsed.info?.mint === memo_json?.mint)\n                                                                                        ownerHasMint = true;\n                                                                                }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check if this is a valid sale or offer first\n                                                                                if ((memo_json?.status === 2) || // sale\n                                                                                    (memo_json?.status === 5)  || // cancel\n                                                                                    (memo_json?.state === 2) || // sale\n                                                                                    (memo_json?.state === 5)){ // cancel\n                                                                                    \n                                                                                    if (memo_json?.state === 5){\n                                                                                        //sellerTradeStateArr.push(null);\n                                                                                        cancelStateResults.push({tradeStatePublicKey: null, buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: ownerHasMint, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status}); \n                                                                                    } else if (memo_json?.state === 2){\n                                                                                        let thisTokenOwner = new web3.PublicKey(thisPublicKey);\n                                                                                        if (!ownerHasMint){\n                                                                                            // owner does not have the mint\n                                                                                            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mint_address));\n                                                                                            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                                                                            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                                                                            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                                                                            thisTokenOwner = mintAccountInfoDs.owner;\n                                                                                        } \n                                                                                        //console.log(\"Check: \"+JSON.stringify(memo_json));\n                                                                                        \n                                                                                        if (ownerHasMint){\n                                                                                            const tokenAccountKey = (await getAtaForMint(mint_address, thisTokenOwner))[0];\n                                                                                            \n                                                                                            //const tokenAccountKey = (await getAtaForMint(mint_address, mintAccountInfoDs.owner))[0];\n                                                                                            const tokenSizeAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    1,\n                                                                                                    mint_address,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                                                            const buyPriceAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    convertSolVal(offerAmount),\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            \n                                                                                            const sellerTradeState = (\n                                                                                                await getAuctionHouseTradeState(\n                                                                                                    auctionHouseKey,\n                                                                                                    thisTokenOwner,\n                                                                                                    tokenAccountKey,\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    mint_address,\n                                                                                                    tokenSizeAdjusted,\n                                                                                                    buyPriceAdjusted,\n                                                                                                )\n                                                                                            )[0];\n                                                                                            \n                                                                                            sellerTradeStateArr.push(sellerTradeState);\n                                                                                            // THESE ARE REDUNDANT RPC CALLS WE ARE BATCHING AND CHECKING IN THE END\n                                                                                            //const sellerTradeStateInfo = await connection.getAccountInfo(sellerTradeState);    \n                                                                                            //console.log(\"sellerTradeStateInfo: \"+JSON.stringify(sellerTradeStateInfo));\n                                                                                            //if (sellerTradeStateInfo != null){   \n                                                                                                //console.log('ownerHasMint ('+ownerHasMint+'):', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                if (ownerHasMint) {\n                                                                                                    //console.log('ownerHasMint:', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                    if (thisPublicKey == feePayer)\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                    else\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                } else {\n                                                                                                    //console.log('owner does not have Mint:', memo_json?.mint, 'state:', memo_json?.state); \n                                                                                                    if (memo_json?.state != 5) {\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state});  \n                                                                                                    }\n                                                                                                }\n                                                                                            //}\n                                                                                        }\n                                                                                    }\n                                                                                    \n                                                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                                        }\n                                                                    }\n                                                                    \n                                                                }\n                                                            }\n                                                        }\n\n                                                        if ((memo_json?.status === 0) ||\n                                                            (memo_json?.status === 1) ||\n                                                            (memo_json?.status === 5) ||\n                                                            (memo_json?.state === 0) ||\n                                                            (memo_json?.state === 1) ||\n                                                            (memo_json?.state === 5)){\n                                                            \n                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                            //if ((memo_json?.amount === amount)||\n                                                            //    (memo_json?.offer === amount)){\n                                                            {\n                                                                //console.log('OFFER: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                if (memo_json?.amount >= 0){\n                                                                    exists = false;\n                                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                    for (var i = 0; i < offerResults.length; i++){\n                                                                        if (//(feePayer === offerResults[i].buyeraddress)&&\n                                                                            (memo_json?.mint === offerResults[i].mint)){\n                                                                            exists = true;\n                                                                        }\n                                                                    }\n                                                                    if (!exists){\n                                                                        \n                                                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                        \n                                                                        if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                            if (feePayer.toBase58() === thisPublicKey)\n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n\n                                                                            else   \n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }catch(e){console.log(\"ERR: \"+e)}\n                                            }\n                                        }\n                                    }\n                                //}\n                            }\n                        }\n                    }catch(ert){console.log(\"ERR: \"+ert)}\n                }\n                cnt++;\n                cntr++;\n                setCounter(cntr);\n            }\n\n            if (mintArrayPDA.length > 0){\n                /*\n                for (var y=0;y<mintArrayPDA.length;y++){\n                    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mintArrayPDA[y]).toBuffer(),\n                    ], MD_PUBKEY)\n                }\n\n                let final_mint_states = await connection.getParsedTransactions(mintArrayPDA);\n                let state_was_sold = false;\n                let final_sale_state = '';//memo_json?.state || memo_json?.status;\n                for (var x=0; x < listingResults.length; x++){\n                    \n                    // for each listing\n                    // check the final_mint_state (last transaction?)\n                    for (var r=0; r < final_mint_states.length; r++){\n                        \n                        console.log(\"Final Mint State: \"+JSON.stringify(final_mint_states[r]))\n\n                    }\n                    /*\n                    if ((listingResults[x]) && (listingResults[x].memo)){\n                    \n                        let sub_memo_str = listingResults[x].memo;\n                        let init = sub_memo_str.indexOf('{');\n                        let fin = sub_memo_str.indexOf('}');\n                        sub_memo_str = sub_memo_str.substr(init,fin);\n                        const sub_memo_json = JSON.parse(sub_memo_str);\n                        \n                        if ((sub_memo_json?.status === 3) ||\n                            (sub_memo_json?.status === 4) ||\n                            (sub_memo_json?.state === 3) ||\n                            (sub_memo_json?.state === 4)){\n                            state_was_sold = true;\n                            final_sale_state = sub_memo_json?.state || sub_memo_json?.status;\n                            //console.log(\"SOLD: \"+sub_memo_json?.state);\n                        }\n                    }\n                    */\n\n                    // if first instance of \n                //} \n            }\n            var j = 0;\n            for (var i = 0; i < offerResults.length; i++){\n                if ((offerResults[i].isowner && offerResults[i].state === 1)){\n                    j++;\n                }\n            }\n            setMyOffers(myoffers+j);\n\n            // check which tab we are in to avoid uneeded RPC call\n            const tradeStates = await ggoconnection.getMultipleAccountsInfo(sellerTradeStateArr, 'confirmed');\n            let x = 0;\n            for (var alrvalue of allListingResults){\n                // check if this has a trade \n                if ((alrvalue.tradeStatePublicKey) && (sellerTradeStateArr[x])){\n                    if (alrvalue.tradeStatePublicKey === sellerTradeStateArr[x].toBase58()){\n                        // check if this has an active trade state\n                        if (tradeStates[x]){\n                            //console.log(\"checking: \"+alrvalue.tradeStatePublicKey + \" vs \"+sellerTradeStateArr[x].toBase58());\n                            listingResults.push({\n                                buyeraddress: allListingResults[x].buyeraddress, offeramount: allListingResults[x].offeramount, mint: allListingResults[x].mint, isowner: allListingResults[x].isowner, timestamp: allListingResults[x].timestamp, state: allListingResults[x].state\n                            })\n                        }\n                    }\n                }\n                x++;\n            }\n            \n            if (offers){\n                setOffers(\n                    (offers:any) => [...offers,offerResults]\n                );\n            }else {\n                setOffers(\n                    offerResults\n                ); \n            }\n\n            if (listings){\n                setListings(\n                    (listings:any) => [...listings,listingResults]\n                );\n            }else {\n                setListings(\n                    listingResults\n                ); \n            }\n\n            setLoading(false);\n        }\n    }\n\n    const getEscrowBalance = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        \n        if (!ahloading){\n            setAHLoading(true);\n            let cntr = 0;\n            let amount = 0;\n            if (publicKey){\n                const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey,))[0];\n                let amount = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n            }\n            setAHBalance(amount);\n\n            setAHLoading(false);\n            \n        }\n    }\n\n    const { t, i18n } = useTranslation();\n\n    React.useEffect(() => { \n        if (thisPublicKey){\n            if (!loading){\n                if ((!offers)||(refresh)){\n                    console.log(\"Getting offers for \"+thisPublicKey);\n                    getOffers();\n                }\n            }\n        }\n    }, [refresh, thisPublicKey]);\n    \n    if (loading){\n        return (\n            <Grid container\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                sx={{\n                }} \n            >\n                <CircularProgress />\n            </Grid>\n        );\n    } else {\n        if (selectedstate == 1){\n            return (\n                \n                <Container\n                    sx={{p:0,m:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:1,\n                                ml:0,\n                                mr:0\n                            }}\n                        >\n\n                            <BootstrapDialog \n                                fullWidth={true}\n                                maxWidth={\"sm\"}\n                                PaperProps={{\n                                    style: {\n                                        background: '#13151C',\n                                        border: '1px solid rgba(255,255,255,0.05)',\n                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                        borderRadius: '20px'\n                                    }\n                                }}\n                                open={alertwithdrawopen}\n                                onClose={handleAlertWithdrawClose}\n                                aria-labelledby=\"alert-bn-dialog-title\"\n                                aria-describedby=\"alert-bn-dialog-description\"\n                                >\n                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                    <Typography>\n                                        {t('CONFIRMATION')}\n                                    </Typography>\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                    <br />\n                                    <Alert \n                                        severity=\"warning\" variant=\"outlined\"\n                                        sx={{backgroundColor:'black'}}\n                                        >\n                                            {t('You currently have')} <strong>{myoffers}</strong> {t('standing offer')}{(myoffers > 1 && <>s</>)}, {t('it is recommended that you cancel all standing offers and then attempt to withdraw. If you are unable to cancel then click Withdraw to force cancel from the Grape Auction House')}\n                                            <br/><br/>\n                                            {t('NOTE: By pressing Withdraw you will have to Accept')} <strong>{myoffers}</strong> {t('additional transaction')}{(myoffers > 1 && <>s</>)} {t('with your wallet')}\n                                    </Alert>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleAlertWithdrawClose}>{t('Cancel')}</Button>\n                                    <Button \n                                        onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                        autoFocus>\n                                    {t('Withdraw')}\n                                    </Button>\n                                </DialogActions>\n                            </BootstrapDialog>\n                            \n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title={t('Withdraw from the Grape Auction House')}\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => (myoffers > 0 ? setAlertWithdrawOpen(true) : handleWithdrawOffer(convertSolVal(ahbalance), null))}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n                \n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:0,\n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"offers\">\n                            {offers && offers.map((item: any,key:number) => (\n                                <>\n                                    {item.state === selectedstate && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell>\n                                                <Tooltip title={t('Visit Profile')}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <AccountCircleOutlinedIcon sx={{fontSize:\"14px\", mr:1}} />\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.buyeraddress, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell  align=\"center\"><Typography variant=\"h6\">\n                                                {item.isowner ? (\n                                                    <Tooltip title={t('Offer made')}>\n                                                        <IconButton>\n                                                            <ArrowForwardIcon color=\"success\" />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    ):(\n                                                    <Tooltip title={t('Offer received')}>\n                                                        <IconButton>\n                                                            <ArrowBackIcon sx={{ color: red[500] }} />\n                                                        </IconButton>\n                                                    </Tooltip>)}\n                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={t('View NFT')}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\"> \n                                                {publicKey &&\n                                                <>\n                                                    {(publicKey.toBase58() === item.buyeraddress) && (\n                                                    <Tooltip title={t('Cancel Offer')}>\n                                                        <Button \n                                                            color=\"error\"\n                                                            variant=\"text\"\n                                                            //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            onClick={() => handleCancelWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            //onClick={() => handleCancelOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            sx={{\n                                                                borderRadius: '24px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon />\n                                                        </Button>\n                                                    </Tooltip>\n                                                    )}\n                                                </>\n                                                }\n                                            </TableCell>\n                                        </TableRow>\n                                        </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        } else {\n            return (\n                <Container\n                    sx={{p:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:2\n                            }}\n                        >\n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title={t('Withdraw from the Grape Auction House')}\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n\n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            \n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"listings\">\n                            {listings && listings.map((item: any,key:number) => (\n                                <>\n                                    {item.state === 2 && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell  align=\"right\"><Typography variant=\"caption\">\n                                            </Typography></TableCell>\n                                            <TableCell  align=\"right\"><Typography variant=\"h6\">\n                                                {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={t('View NFT')}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 4)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                            </TableCell>\n                                        </TableRow>\n                                    </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        }\n    }\n}\n","/Users/kirk/Development/grape-art/src/components/static/SolCurrencyIcon.tsx",[],"/Users/kirk/Development/grape-art/src/components/static/SolIcon.tsx",[],"/Users/kirk/Development/grape-art/src/Preview/Social.tsx",["1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471"],"import React, { useEffect, useState, useCallback, memo } from \"react\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\n\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js'\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    Typography,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport FlagIcon from '@mui/icons-material/Flag';\nimport EmojiFlagsIcon from '@mui/icons-material/EmojiFlags';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES,\n    FREE_RPC_ENDPOINT, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY,\n    GRAPE_TREASURY,\n    TOKEN_REPORT_AMOUNT,\n    REPORT_ALERT_THRESHOLD,\n} from '../utils/grapeTools/constants';\n\nimport { MakeLinkableAddress, ValidateAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport \"../App.less\";\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport GrapeIcon from \"../components/static/GrapeIcon\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n\nexport function SocialLikes(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isLiked, setIsLiked] = React.useState(false);\n    const [loadingLikedState, setLoadingLikedState] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n            return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:mint,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST,\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n\n    const getLikeStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingLikedState(true);\n                setIsLiked(false);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        if ((socialconnection?.connections[0].type.toString() === \"LIKE\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsLiked(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingLikedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'LIKE',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    const likeWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.LIKE)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    const likeWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    \n    React.useEffect(() => {\n        initFollowListInfo();\n        getLikeStatus();\n    },[]);\n\n    return ( \n        <>\n        {loadingLikedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isLiked ?  \n                    <Tooltip title=\"Unlike\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteIcon sx={{fontSize:'24px', color:'red'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Like\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteBorderIcon sx={{fontSize:'24px'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nexport function SocialFlags(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFlagged, setIsFlagged] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingFlaggedState, setLoadingFlaggedState] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [reportalertopen, setReportAlertOpen] = React.useState(false);\n    const [warningreportopen, setWarningReportOpen] = React.useState(false);\n    \n    const { publicKey, sendTransaction } = useWallet();\n\n    const freeconnection = new Connection(FREE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    \n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n    \n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const handleAlertReportClose = () => {\n        setReportAlertOpen(false);\n    };\n\n    const handleWarningReportClose = () => {\n        setWarningReportOpen(false);\n    };\n\n    const getFlagStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingFlaggedState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) { \n                        if ((socialconnection?.connections[0].type.toString() === \"REPORT\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsFlagged(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFlaggedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'REPORT',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n        return;\n        }\n        \n        setLoading(true);\n        const resp = await followListInfoQuery({\n            address:mint,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n            if (+resp?.reported >= REPORT_ALERT_THRESHOLD)\n                setWarningReportOpen(true);\n        }\n        setLoading(false);\n    };\n\n    function handleFlagMintTransaction(mint:string){\n        const tokenMintAddress = TOKEN_VERIFICATION_ADDRESS;\n        const tokenMintName = 'GRAPE';\n        const to = GRAPE_TREASURY;\n        const amount = TOKEN_REPORT_AMOUNT;\n        const notes = mint;\n        flatMintTransaction(tokenMintAddress, tokenMintName, to, amount, notes)\n    }\n\n    async function flatMintTransaction(tokenMintAddress: string, tokenMintName: string, to: string, amount: number, notes:string) {\n        const fromWallet = publicKey;\n        const toaddress = to;\n        const toWallet = new PublicKey(to);\n        const mintPubkey = new PublicKey(tokenMintAddress);\n        const amountToSend = +amount;\n        const tokenAccount = new PublicKey(mintPubkey);\n        \n        handleAlertReportClose();\n\n        let GRAPE_TT_MEMO = {\n            state:1, // status\n            type:'REPORT', // AMA - SETUP \n            ref:'GRAPE.ART', // SOURCE\n            notes:notes\n        };\n        \n        \n        if (tokenMintAddress == \"So11111111111111111111111111111111111111112\"){ // Check if SOL\n            const decimals = 9;\n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const transaction = new Transaction()\n            .add(\n                SystemProgram.transfer({\n                    fromPubkey: fromWallet,\n                    toPubkey: toWallet,\n                    lamports: adjustedAmountToSend,\n                })\n            ).add(\n                new TransactionInstruction({\n                    keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                    data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                })\n            );\n            try{\n                enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                const signature = await sendTransaction(transaction, freeconnection);\n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signature, 'processed');\n                closeSnackbar(cnfrmkey);\n                const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank'  sx={{color:'white'}}>\n                            Signature: {signature}\n                        </Button>\n                );\n\n                flagWalletConnect(mint);\n\n                enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n            }catch(e){\n                enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            } \n        } else{\n            const accountInfo = await connection.getParsedAccountInfo(tokenAccount);\n            const accountParsed = JSON.parse(JSON.stringify(accountInfo.value.data));\n            const decimals = accountParsed.parsed.info.decimals;\n\n            let fromAta = await Token.getAssociatedTokenAddress( // calculate from ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                fromWallet // from owner\n            );\n            \n            let toAta = await Token.getAssociatedTokenAddress( // calculate to ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                toWallet // to owner\n            );\n            \n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const receiverAccount = await connection.getAccountInfo(toAta);\n            \n            if (receiverAccount === null) { // initialize token\n                const transaction = new Transaction()\n                .add(\n                    Token.createAssociatedTokenAccountInstruction(\n                        ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                        TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                        mintPubkey, // mint\n                        toAta, // ata\n                        toWallet, // owner of token account\n                        fromWallet // fee payer\n                    )\n                )\n                .add(\n                    Token.createTransferInstruction(\n                        TOKEN_PROGRAM_ID,\n                        fromAta,\n                        toAta,\n                        publicKey,\n                        [],\n                        adjustedAmountToSend,\n                    )\n                ).add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n\n                    flagWalletConnect(mint);\n\n                    enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            } else{ // token already in wallet\n                const transaction = new Transaction()\n                .add(\n                    Token.createTransferInstruction(\n                    TOKEN_PROGRAM_ID,\n                    fromAta,\n                    toAta,\n                    publicKey,\n                    [],\n                    adjustedAmountToSend,\n                    )\n                )\n                .add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n\n                    flagWalletConnect(mint);\n\n                    enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            }\n        }\n    }\n\n    const flagWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        // Show a prompt here in order to flag\n\n            let promise = await cyberConnect.connect(tofollow,'', ConnectionType.REPORT)\n            .catch(function (error) {\n                console.log(error);\n            });\n            initFollowListInfo();\n            getFlagStatus();\n    };\n    const flagWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n\n    React.useEffect(() => {\n        initFollowListInfo();\n        getFlagStatus();\n    },[]);\n    \n    return ( \n        <>\n        {loadingFlaggedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n\n                <BootstrapDialog \n                    fullWidth={true}\n                    maxWidth={\"sm\"}\n                    PaperProps={{\n                        style: {\n                            background: '#13151C',\n                            border: '1px solid rgba(255,255,255,0.05)',\n                            borderTop: '1px solid rgba(255,255,255,0.1)',\n                            borderRadius: '20px'\n                        }\n                    }}\n                    open={warningreportopen}\n                    onClose={handleWarningReportClose}\n                    aria-labelledby=\"alert-bn-dialog-title\"\n                    aria-describedby=\"alert-bn-dialog-description\"\n                    >\n                    <DialogTitle id=\"alert-bn-dialog-title\">\n                        <Typography>\n                            WARNING\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-bn-dialog-description\">\n                        <br />\n                        <Alert \n                            severity=\"error\" variant=\"outlined\"\n                            sx={{backgroundColor:'black'}}\n                            >\n                            Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                            <Typography sx={{textAlign:'center'}}>\n                                This mint/collection has been flagged by the community {followListInfo?.reported && +followListInfo?.reported} time(s) as being either offensive, a scam, or a potential IP infringement. Please do your own research before transacting. \n                            </Typography>\n                        </Alert>\n                        \n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button component=\"a\" href={`${GRAPE_PROFILE}`}>Back</Button>\n                        <Button \n                            onClick={handleWarningReportClose}\n                            autoFocus>\n                        I understand\n                        </Button>\n                    </DialogActions>\n                </BootstrapDialog>\n\n            {isFlagged ?  \n                    <Tooltip title=\"Unflag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'yellow'}}\n                            >\n                            <FlagIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <>\n                        <BootstrapDialog \n                            fullWidth={true}\n                            maxWidth={\"sm\"}\n                            PaperProps={{\n                                style: {\n                                    background: '#13151C',\n                                    border: '1px solid rgba(255,255,255,0.05)',\n                                    borderTop: '1px solid rgba(255,255,255,0.1)',\n                                    borderRadius: '20px'\n                                }\n                            }}\n                            open={reportalertopen}\n                            onClose={handleAlertReportClose}\n                            aria-labelledby=\"alert-bn-dialog-title\"\n                            aria-describedby=\"alert-bn-dialog-description\"\n                            >\n                            <DialogTitle id=\"alert-bn-dialog-title\">\n                                <Typography>\n                                    REPORT THIS MINT\n                                </Typography>\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id=\"alert-bn-dialog-description\">\n                                <br />\n                                <Alert \n                                    severity=\"warning\" variant=\"outlined\"\n                                    sx={{backgroundColor:'black'}}\n                                    >\n                                    Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                    <Typography sx={{textAlign:'center'}}>\n                                        You are about to report this mint because it is offensive, a scam, or a potential IP infringement, in order to minimize unnecessary reporting there is a <GrapeIcon sx={{fontSize:'12px'}} />{TOKEN_REPORT_AMOUNT} fee to report\n                                    </Typography>\n                                </Alert>\n                                \n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleAlertReportClose}>Cancel</Button>\n                                <Button \n                                    onClick={() => handleFlagMintTransaction(mint)}\n                                    autoFocus>\n                                Accept &amp; Report\n                                </Button>\n                            </DialogActions>\n                        </BootstrapDialog>\n\n                        <Tooltip title=\"Flag\">\n            \n                            <Button \n                                variant=\"text\" \n                                onClick={() => setReportAlertOpen(true)}\n                                size=\"small\"\n                                className=\"profileAvatarIcon\"\n                                sx={{borderRadius:'24px', color:'white'}}\n                                >\n                                <EmojiFlagsIcon sx={{fontSize:'24px'}} />\n                                {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                    <Typography variant=\"caption\" sx={{ml:1}}>\n                                        {followListInfo?.reported}\n                                    </Typography>\n                                :<></>}\n                            </Button>\n                        </Tooltip>\n                    </>\n            }\n            </>\n        }\n        </>\n    );\n}","/Users/kirk/Development/grape-art/src/Preview/ItemOffers.tsx",["1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516"],"import React, { useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\n// @ts-ignore\nimport fetch from 'node-fetch';\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport moment from 'moment';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport HowToVoteIcon from '@mui/icons-material/HowToVote';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport BallotOutlinedIcon from '@mui/icons-material/BallotOutlined';\nimport SellIcon from '@mui/icons-material/Sell';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport HistoryView from './HistoryView';\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY,\n    VERIFIED_DAO_ARRAY,\n} from '../utils/grapeTools/constants';\nimport { RegexTextField } from '../utils/grapeTools/RegexTextField';\nimport { MakeLinkableAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\nimport { submitOffer } from '../utils/auctionHouse/submitOffer';\nimport { acceptOffer } from '../utils/auctionHouse/acceptOffer';\nimport { cancelListing } from '../utils/auctionHouse/cancelListing';\nimport { sellNowListing } from '../utils/auctionHouse/sellNowListing';\nimport { buyNowListing } from '../utils/auctionHouse/buyNowListing';\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { depositInGrapeVine } from '../utils/auctionHouse/depositInGrapeVine';\nimport { createDAOProposal } from '../utils/auctionHouse/createDAOProposal';\n\nimport \"../App.less\";\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from \"@solana/wallet-adapter-react-ui\";\n\nimport { useTranslation } from 'react-i18next';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n\nfunction ValidateDAO(mintOwner: string){\n    for (var featured of FEATURED_DAO_ARRAY){\n        if (featured.address === mintOwner){\n            return true;\n        }\n    } \n    for (var verified of VERIFIED_DAO_ARRAY){\n        if (verified.address === mintOwner){\n            return true;\n        }\n    } \n    return false;\n}\n\nfunction convertSolVal(sol: any){\n    sol = parseFloat(new TokenAmount(sol, 9).format());\n    return sol;\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction SellNowVotePrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const [daoPublicKey, setDaoPublicKey] = React.useState(null);\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    const { t, i18n } = useTranslation();\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                const transaction = new Transaction();\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey);\n                \n                const instructionsArray = [transactionInstr.instructions].flat();        \n                \n                // we need to pass the transactions to realms not to the wallet, and then with the instruction set we pass to the wallet only the ones from realms\n                if (daoPublicKey){\n                    const transactionInstr2 = await createDAOProposal(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey, connection, transactionInstr, sendTransaction);\n                    //console.log(\"transactionInstr2: \"+JSON.stringify(transactionInstr2));\n                    const instructionsArray2 = [transactionInstr2.instructions].flat();\n                    //console.log(\"instructionsArray2: \"+ JSON.stringify(instructionsArray2));\n                    transaction.add(...instructionsArray2);\n                } else {\n                    transaction.add(\n                        ...instructionsArray\n                    );\n                }\n                if (daoPublicKey){\n                    enqueueSnackbar(`${t('Preparing to create a Proposal for Listing Price to')} ${sell_now_amount} SOL`,{ variant: 'info' });\n                } else {\n                    enqueueSnackbar(`${t('Preparing to set Sell Now Price to')} ${sell_now_amount} SOL`,{ variant: 'info' });\n                }\n                const signedTransaction = await sendTransaction(transaction, connection);                    \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                if (daoPublicKey){\n                    enqueueSnackbar(`${t('Proposal Created for Listing Price Set to')} ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                } else {\n                    enqueueSnackbar(`${t('Sell Now Price Set to')} ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                }\n                const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n                \n            \n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n\n    React.useEffect(() => {\n        for (var featured of FEATURED_DAO_ARRAY){\n            if (featured.address === mintOwner){\n                setDaoPublicKey(featured.address);\n            }\n        } \n        for (var verified of VERIFIED_DAO_ARRAY){\n            if (verified.address === mintOwner){\n                setDaoPublicKey(verified.address);\n            }\n        } \n    },[]);\n\n    return (\n        <React.Fragment>\n            \n            {daoPublicKey ?\n               <> \n        \n                    <Button \n                        size=\"large\" \n                        variant=\"outlined\" \n                        sx={{\n                            borderRadius: '10px',\n                        }}\n                        value=\"Sell Now Instructions\" onClick={handleClickOpenDialog}>\n                        <HowToVoteIcon sx={{mr:1}}/> VOTE TO LIST\n                    </Button>            \n                    <BootstrapDialog \n                        fullWidth={true}\n                        maxWidth={\"sm\"}\n                        open={open_dialog} onClose={handleCloseDialog}\n                        PaperProps={{\n                            style: {\n                                background: '#13151C',\n                                border: '1px solid rgba(255,255,255,0.05)',\n                                borderTop: '1px solid rgba(255,255,255,0.1)',\n                                borderRadius: '20px'\n                            }\n                        }}\n                    >\n                        <DialogTitle>\n                        {t('PROPOSE A SELL NOW PRICE')}\n                        </DialogTitle>\n                        <form onSubmit={handleSellNow}>\n                        <DialogContent>\n                            <RegexTextField\n                                regex={/[^0-9]+\\.?[^0-9]/gi}\n                                autoFocus\n                                autoComplete='off'\n                                margin=\"dense\"\n                                id=\"preview_sell_now_id\"\n                                label={t('Set your sale price')}\n                                type=\"text\"\n                                fullWidth\n                                variant=\"standard\"\n                                value={sell_now_amount}\n                                onChange={(e: any) => {\n                                    setSellNowAmount(e.target.value)}\n                                }\n                                inputProps={{\n                                    style: { \n                                        textAlign:'center', \n                                        fontSize: '34px'\n                                    }\n                                }}\n                            />\n                            <Grid \n                                container\n                                alignContent='flex-end'\n                                justifyContent='flex-end'\n                            >\n                                <Grid item\n                                    sx={{textAlign:'right'}}\n                                >\n                                    <Typography\n                                        variant=\"caption\"\n                                    >\n                                        {t('Price set in SOL')} <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDialog}>{t('Cancel')}</Button>\n                            <Button \n                                type=\"submit\"\n                                variant=\"text\" \n                                disabled={+sell_now_amount < 0.001}\n                                title=\"Submit\">\n                                    {t('SUBMIT')}\n                            </Button>\n                        </DialogActions>\n                        </form>\n                    </BootstrapDialog> \n                </>\n            :\n            <>\n                <Grid item>\n                    <Tooltip title={t('This NFT is currently owned by a program and may be listed on a marketplace')}>\n                        <Button sx={{borderRadius:'10px'}}>\n                            <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                            {t('LISTED/PROGRAM OWNED NFT')}\n                            </Alert>\n                        </Button>\n                    </Tooltip>\n                </Grid>  \n            </>\n            }  \n        </React.Fragment>\n    );\n}\n\nfunction SellNowPrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                //START SELL NOW / LIST\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, null);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                enqueueSnackbar(`${t('Preparing to set Sell Now Price to')} ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`${t('Sell Now Price Set to')} ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n\n    const { t, i18n } = useTranslation();\n\n    return (\n        <React.Fragment>\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                sx={{\n                    borderRadius: '10px',\n                }}\n                value=\"Sell Now\" onClick={handleClickOpenDialog}>\n                <AccountBalanceWalletIcon sx={{mr:1}}/> {t('Sell Now')}\n            </Button>            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                }}\n            >\n                <DialogTitle>\n                    {t('SET SELL NOW PRICE')}\n                </DialogTitle>\n                <form onSubmit={handleSellNow}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_sell_now_id\"\n                        label={t('Set your sale price')}\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={sell_now_amount}\n                        onChange={(e: any) => {\n                            setSellNowAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                {t('Price set in SOL')} <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>{t('Cancel')}</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={+sell_now_amount < 0.001}\n                        title=\"Submit\">\n                            {t('SUBMIT')}\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n}\n\nexport function OfferPrompt(props: any) {\n    const [open_dialog, setOpenOPDialog] = React.useState(false);\n    const [offer_amount, setOfferAmount] = React.useState('');\n    //const [sol_balance, setSolBalance] = React.useState(props.solBalance);\n    const sol_balance = props.solBalance;  \n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;  \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n\n    // using wallet-adapter\n    const buyerPublicKey = publicKey;\n    \n    const handleClickOpenDialog = () => {\n        setOfferAmount('');\n        setOpenOPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenOPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    const { t, i18n } = useTranslation();\n\n    async function HandleOfferSubmit(event: any) {\n        event.preventDefault();\n        if (+offer_amount > 0) {\n            handleCloseDialog();\n            //check the buyerwallet offer balance and that no other pending offer exists\n            /*const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const balance = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n            if (balance === 0) {    \n\t\t\t*/\n\t\t\t//no need allowing for multiple offers\n                try {\n                    const transactionInstr = await submitOffer(+offer_amount, mint, publicKey.toString(), mintOwner);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n\n                    enqueueSnackbar(`${t('Preparing to make an offer for')} ${+offer_amount} SOL`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection)\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`${t('Offer sent')} `,{ variant: 'success', action:snackaction });\n                    \n                    const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            props.setRefreshOffers(true);\n                        }, GRAPE_RPC_REFRESH);\n                } catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                    console.log(\"Error: \"+e);\n                    //console.log(\"Error: \"+JSON.stringify(e));\n                }\n            /*}\n            else {\n                enqueueSnackbar(`To make a new offer you must first cancel the existing offer of ${convertSolVal(balance)} SOL.`,{ variant: 'warning' });\n            } */       \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    \n    return (\n\n        <React.Fragment>\n\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                value=\"Make Offer\" \n                onClick={handleClickOpenDialog}\n                sx={{\n                    color: '#fff',\n                    borderColor: '#fff',\n                    borderRadius: '10px',\n                }}\n            >\n                <SellIcon sx={{mr:1}}/> {t('Make offer')}\n            </Button> \n            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    /*\n                    style: {\n                        \n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },*/\n                    }}\n                >\n                <DialogTitle>\n                    {t('MAKE AN OFFER')}\n                </DialogTitle>\n                <form onSubmit={HandleOfferSubmit}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        //regex={/[^0-9]+\\.?[0-9]/gi}\n                        //regex={/^[+-]?([0-9]+\\.?[0-9]*|\\.[0-9]+)$/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_offer_id\"\n                        label={t('Set your offer')}\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={offer_amount}\n                        onChange={(e: any) => {\n                            setOfferAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                {t('Available Balance')}: {sol_balance} <SolCurrencyIcon sx={{fontSize:\"10px\"}} />\n                                <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                    <Button \n                                        onClick={() => {\n                                            setOfferAmount((String)(sol_balance))}}\n                                    > \n                                        {t('Max')}\n                                    </Button>\n                                    <Button  \n                                        onClick={() => {\n                                            setOfferAmount((String)(+sol_balance/2))}}\n                                    > \n                                        {t('Half')}\n                                    </Button>\n                                </ButtonGroup>\n                                {(props.highestOffer > 0) && (\n                                    <>\n                                    <br/>{t('Highest Offer')}: \n                                        {(props.highestOffer < sol_balance+0.001) ?\n                                            <Button \n                                                onClick={() => {\n                                                    setOfferAmount((String)(+props.highestOffer+0.001))}}\n                                            > \n                                                {props.highestOffer}\n                                            </Button>\n                                        : \n                                            <>\n                                                {props.highestOffer}\n                                            </>\n                                        }\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={((+offer_amount > sol_balance) || (+offer_amount < 0.001) || (+offer_amount < props.highestOffer))}\n                        title=\"Submit\">\n                            {t('SUBMIT')}\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n\n}\n\nexport default function ItemOffers(props: any) {\n    const [mintAta, setMintAta] = React.useState(props.mintAta);\n    const [offers, setOffers] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const pubkey = props.pubkey || null;\n    const mintOwner = props.mintOwner;\n    \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const walletPublicKey = publicKey;\n    const mint = props.mint; \n    const [refreshOffers, setRefreshOffers] = React.useState(false);\n    const anchorWallet = useAnchorWallet();\n    const [alertopen, setAlertOpen] = React.useState(false); \n    const [alertbuynowopen, setAlertBuyNowOpen] = React.useState(false);\n    const [final_offeramount, setFinalOfferAmount] = React.useState(null);\n    const [final_offerfrom, setFinalOfferFrom] = React.useState(null);\n    const [salePrice, setSalePrice] = React.useState(props.salePrice);\n    const [saleDate, setSaleDate] = React.useState(null);\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const [highestOffer, setHighestOffer] = React.useState(0);\n    const [openOffers, setOpenOffers] = React.useState(0);\n    const grape_governance_balance = props.grape_governance_balance;\n    const grape_offer_threshhold = props.grape_offer_threshhold;\n    const grape_member_balance = props.grape_member_balance;\n    const grape_whitelisted = props.grape_whitelisted;\n    const grape_weighted_score = props.grape_weighted_score;\n    const sol_portfolio_balance = props.sol_portfolio_balance;\n    \n    const handleAlertBuyNowClose = () => {\n        setAlertBuyNowOpen(false);\n    };\n    const handleAlertBuyNowOpen = () => {\n        setAlertBuyNowOpen(true);\n    };\n    const setBuyNowPrompt = () => {\n        handleAlertBuyNowOpen();\n    }\n    \n    const handleAlertClickOpen = () => {\n        setAlertOpen(true);\n    };\n    \n    const handleAlertClose = () => {\n        setAlertOpen(false);\n    };\n    const handleClick = () => {\n        setOpenOffersCollapse(!open_offers_collapse);\n    }\n\n    const setAcceptPrompt = (offeramount:any, offerfrom:any) => {\n        setFinalOfferAmount(offeramount);\n        setFinalOfferFrom(offerfrom);\n        handleAlertClickOpen();\n    }\n\n    const handleAcceptOffer = async (offerAmount: number, buyerAddress: any) => {\n        handleAlertClose();\n\n        try {\n            const transactionInstr = await acceptOffer(offerAmount, mint, walletPublicKey, buyerAddress.toString());\n            const instructionsArray = [transactionInstr.instructions].flat();  \n            const transaction = new Transaction()\n            .add(...instructionsArray);\n\n            enqueueSnackbar(`${t('Preparing to accept offer of')}: ${offerAmount} SOL ${t('from')}: ${buyerAddress.toString()}`,{ variant: 'info' });\n            const signedTransaction2 = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction2}\n                </Button>\n            );\n            enqueueSnackbar(`{t('NFT transaction completed')} `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                props.setRefresh(true);\n                //props.refreshOffers(true);\n                //props.setRefreshOwner(true);\n            }, GRAPE_RPC_REFRESH);\n                \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n        \n    }\n\n    const handleCancelListing =  async (salePrice: number) => {\n        try {\n            //START CANCEL LISTING\n            const transactionInstr = await cancelListing(salePrice, mint, walletPublicKey.toString(), mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`${t('Canceling Sell Now Price for')} ${salePrice} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Sell Now Price Removed')} `,{ variant: 'success', action:snackaction });\n            //END CANCEL LISTING\n            \n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleWithdrawOffer = async (offerAmount: number) => {\n        try {\n            //const transactionInstr = await withdrawOffer(offerAmount, mint, walletPublicKey.toString(), mintOwner);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n\n            enqueueSnackbar(`${t('Preparing to withdraw offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection)\n           \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Offer Withdrawal complete')} `,{ variant: 'success', action:snackaction });\n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleCancelOffer = async (offerAmount: number) => {\n        try {\n\n            //const transactionInstr = await cancelOffer(offerAmount, mint, walletPublicKey, mintOwner);\n\t\t\tconst transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`${t('Preparing to Cancel Offer for')} ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`${t('Offer has been cancelled')} `,{ variant: 'success', action:snackaction });\n                \n            const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center',\n              },\n              persist: true,\n            });\n            setTimeout(function() {\n              closeSnackbar(eskey);\n              setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    //console.log('mintowner: ', mintOwner);\n    const GetSignatureOffers = async (spkey: string, until: any, slimit: Number)  => { // made this more generic of a function\n        const gslimit = slimit || 25;\n        const body = {\n          method: \"getSignaturesForAddress\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            spkey,\n            {\n                \"limit\":gslimit,\n                \"commitment\":\"confirmed\",\n                //\"before\":beforeSignature,\n                //\"until\":until \n            }\n          ],\n          \"id\":1,\n        };\n\n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result\n        return resultValues;\n    };\n\n    const getOffers = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(pubkey, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n        \n        //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n        //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n        \n        /*\n        console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n        console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n        */\n\n        //console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        \n        let [result] = await Promise.all([GetSignatureOffers(derivedMintPDA[0].toString(),'', 25)]);\n        let offerResults: any[] = [];\n\t\tlet offerResultsCancelled: any[] = [];\n\t\tlet exists = false;\n        //let salePrice = 0;\n        let existSaleCancelAction = 0;\n        let cnt = 0;\n        let open_offers = 0;\n        var forSale = 0;\n        var forSaleDate = null;\n        var forSaleTimeAgo = null;\n        //console.log('derivedMintPDA[0]: '+derivedMintPDA[0].toString());\n\n        if (!loading){\n            setLoading(true);\n            \n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            setOpenOffers(0);\n            for (var value of result){\n                if (value.err === null){                   \n                    \n                    const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n\n                    try{\n                        //console.log(\"value: \"+JSON.stringify(value));\n                        //console.log(\"gtai (\"+getTransactionAccountInputs2.length+\"): \"+JSON.stringify(getTransactionAccountInputs2[cnt]));\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();\n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n                            let instructionType = getTransactionAccountInputs.meta.logMessages[1];\n                            let allLogMessages = getTransactionAccountInputs.meta.logMessages;\n\n                            //console.log(\"feePayer: \"+feePayer.toBase58());\n\n                            //console.log('getTransactionAccountInputs:', getTransactionAccountInputs);\n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.meta.preTokenBalances));\n                            let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;                        \n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.transaction.feePayer));\n                            //if (auctionMint){\n                            {    \n                                    \n                                if ((value) && (value?.memo)){\n\n                                    let memo_arr: any[] = [];\n                                    let memo_str = value.memo;\n                                    let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                    if (memo_instances > 0) {\n                                        // multi memo\n                                        let mcnt = 0;\n                                        let submemo = memo_str;\n                                        //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                        for (var mx=0;mx<memo_instances;mx++){\n                                            let init = submemo.indexOf('{');\n                                            let fin = submemo.indexOf('}');\n                                            memo_str = submemo.substring(init,fin+1); // include brackets\n                                            memo_arr.push(memo_str);\n                                            submemo = submemo.replace(memo_str, \"\");\n                                            //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                            //console.log(\"submemo: \"+submemo);\n                                        }\n                                    } else{\n                                        let init = memo_str.indexOf('{');\n                                        let fin = memo_str.indexOf('}');\n                                        memo_str = memo_str.substring(init,fin+1); // include brackets\n                                        memo_arr.push(memo_str);\n                                    }\n                                    \n                                    for (var memo_item of memo_arr){\n                                        try{\n                                            const memo_json = JSON.parse(memo_item);\n                                    \n                                            /*\n                                            if ((memo_json?.status === 3) || \n                                                (memo_json?.status === 4) ||\n                                                (memo_json?.state === 3) ||\n                                                (memo_json?.state === 4)){\n                                                if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                    //let sol = parseFloat(new TokenAmount(memo_json?.amount, 9).format());\n                                                    //console.log(\"Sold for: \"+sol);\n                                                    offerResults.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: getTransactionAccountInputs.meta.preTokenBalances[0].mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                }\n                                            }*/\n\n                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                            if ( feePayer.toBase58() !== mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                                                \n                                                //console.log(\"value: \"+JSON.stringify(value));\n                                                const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                                let amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,); // total amount on escrow\n                                                // we need to now get the amount of the offer\n                                                //console.log(amount);\n                                                //let amount = await getTokenAmount(anchorProgram, escrow, new PublicKey(auctionMint),);\n                                                // we need to filter to find the amount that was offered to the specific mint\n                                                \n                                                if (amount_on_escrow >= 0) {\n                                                //{\n                                                    //let [inner_result] = await Promise.all([GetSignatureOffers(mintAta, '')]); // making this call again to get the memos                                       \n                                                    exists = false;                   \n                                                    {\n                                                        try{    \n                                                            if ((memo_json?.status === 0)||\n                                                                (memo_json?.status === 5) ||\n                                                                (memo_json?.state === 0)||\n                                                                (memo_json?.state === 5)){ // add to an array to search against other offers and cancel them out\n                                                                offerResultsCancelled.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                            }\n                                                            \n                                                            //console.log('memo_json: ' + memo_str);\n                                                            \n                                                            //if (memo_json.mint === getTransactionAccountInputs.meta.preTokenBalances[0].mint){\n                                                            {  \n                                                                //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n\n                                                                if ((memo_json?.status === 0) || // withdraw\n                                                                    (memo_json?.status === 1) || // offer\n                                                                    (memo_json?.status === 2) || // sale\n                                                                    (memo_json?.status === 3) || // listing/accept\n                                                                    //(memo_json?.status === 4) || // buy now\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) || // withdraw\n                                                                    (memo_json?.state === 1) || // offer\n                                                                    (memo_json?.state === 2) || // sale\n                                                                    (memo_json?.state === 3) || // listing/accept\n                                                                    //(memo_json?.state === 4) || // buy now\n                                                                    (memo_json?.state === 5)){ // cancel\n                                                                    \n                                                                    //console.log(feePayer.toBase58() + \": \"+memo_str);\n\n                                                                    /*if ((memo_json?.amount <= amount_on_escrow)||\n                                                                        (memo_json?.offer <= amount_on_escrow)){ //.offer used in beta*/\n                                                                        \n                                                                        let found = false;\n                                                                        //console.log(feePayer+\": \"+JSON.stringify(memo_str));\n                                                                        for (var cancelled of offerResultsCancelled){\n                                                                            if ((cancelled.buyeraddress === feePayer.toBase58())&&\n                                                                                (cancelled.offeramount === amount_on_escrow)){\n                                                                                    found = true;\n                                                                            }\n                                                                        }\n                                                                        \n                                                                        if (!found){\n                                                                            //if (amount_on_escrow > highestOffer){\n                                                                                let sol = parseFloat(new TokenAmount(highestOffer, 9).format());\n                                                                                setHighestOffer(sol);\n                                                                            //}\n\n                                                                            exists = false;\n                                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                            for (var i = 0; i < offerResults.length; i++){\n                                                                                if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                                                    exists = true;\n                                                                                }\n                                                                            }\n                                                                            \n                                                                            if (!exists){\n                                                                                if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                                    //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                                    \n                                                                                    if (memo_json?.state === 1 || memo_json?.status === 1){\n                                                                                        open_offers++;\n                                                                                    }\n\n                                                                                    if (feePayer.toBase58() === mintOwner)\n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                    else   \n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    // }\n                                                                }\n                                                            }\n                                                        }catch(e){console.log(\"ERR: \"+e)}\n                                                    }\n                                                }\n                                            }\n                                            //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                            if ( feePayer.toBase58() === mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && existSaleCancelAction === 0){\n                                                //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                                                                    \n                                                for (var i = 0; i < offerResults.length; i++){\n                                                    if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                        exists = true;\n                                                    }\n                                                }\n\n                                                if (!exists){\n                                                    //console.log(feePayer+\": \"+JSON.stringify(memo_str)); \n                                                    if ((memo_json?.status === 2) ||\n                                                        (memo_json?.state === 2)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//make a final check for seller trade state\n                                                            const mintOwnerPK = new PublicKey(mintOwner);\n                                                            const mintKey = new PublicKey(mint);\n                                                            const tokenAccountKey = (await getAtaForMint(mintKey, mintOwnerPK))[0];\n                                                            const tokenSizeAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  1,\n                                                                  mintKey,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                            //console.log('offerAmount', offerAmount);\n                                                            const buyPriceAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  convertSolVal(offerAmount),\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n\n                                                            const sellerTradeState = (\n                                                                await getAuctionHouseTradeState(\n                                                                  auctionHouseKey,\n                                                                  mintOwnerPK,\n                                                                  tokenAccountKey,\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintKey,\n                                                                  tokenSizeAdjusted,\n                                                                  buyPriceAdjusted,\n                                                                )\n                                                            )[0];\n                                                            const sellerTradeStateInfo = await ggoconnection.getAccountInfo(sellerTradeState);        \n                                                            //console.log('sellerTradeStateInfo:', sellerTradeStateInfo);\n                                                            if (sellerTradeStateInfo != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSale = memo_json?.amount || memo_json?.sellPrice;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSaleDate = value.blockTime;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                        //console.log('Saleprice:', salePrice);\n                                                    }\n                                                }\n                                                existSaleCancelAction = 1;\n                                            }\n                                        } catch(ert){console.log(\"ERR: \"+ert);}\n                                    }\n                                }\n                            }\n                        }\n                    }catch(er){console.log(\"ERR: \"+er)}\n                    cnt++;\n                }\n            }\n\n            setOpenOffers(open_offers);\n            // sort offers by highest offeramount\n            //console.log(\"offerResults pre: \"+JSON.stringify(offerResults));\n            offerResults.sort((a,b) => (a.offeramount < b.offeramount) ? 1 : -1);\n            //console.log(\"offerResults post: \"+JSON.stringify(offerResults));\n            setOffers(\n                offerResults\n            );\n            setSalePrice(\n                convertSolVal(forSale)\n            );\n        \n            if (forSaleDate){\n                let prettyForSaleDate = moment.unix(+forSaleDate).format(\"MMMM Do YYYY, h:mm a\");\n                setSaleDate(\n                    prettyForSaleDate\n                );\n                if (forSaleDate){\n                    let timeago = timeAgo(forSaleDate);\n                    setSaleTimeAgo(timeago);                                          \n                }\n            }\n            setLoading(false);\n        }\n    }\n\n    const handleBuyNow =  async (salePrice: number) => {\n\n        const buyerPublicKey = publicKey;\n        const sellerWalletKey = new web3.PublicKey(mintOwner);\n        handleAlertBuyNowClose();\n\n        try {\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n\t\t\tconst escrowAmount = convertSolVal(amount);\n            //if (amount === 0){\n                const transactionInstr = await buyNowListing(salePrice, mint, sellerWalletKey.toString(), buyerPublicKey);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                \n                enqueueSnackbar(`${t('Preparing to BUY NOW')}: ${salePrice} SOL ${t('from')}: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                //const signedTransaction = await sendTransaction(transaction, connection);\n                //await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`${t('Executing transfer for')}: ${mint.toString()}`,{ variant: 'info' });\n                const signedTransaction2 = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction2}\n                    </Button>\n                );\n                enqueueSnackbar(`${t('NFT transaction complete')} `,{ variant: 'success', action:snackaction });\n                \n                if (escrowAmount > 0){\n                    //check the amount to redeposit \n                    let depositAmount = 0;\n                    if (escrowAmount > salePrice){\n                        depositAmount = salePrice;\n                    } else {\n                        depositAmount = escrowAmount;\n                    }\n                    const transactionInstr = await depositInGrapeVine(depositAmount, buyerPublicKey);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n                    \n                    enqueueSnackbar(`${t('Preparing to Deposit amount back in GrapeVine')}: ${depositAmount} SOL ${t('to')}: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection);\n                    \n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`${t('Confirming transaction')}`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`${t('Deposit back to GrapeVine completed')}`,{ variant: 'success', action:snackaction });\n                }\n                const eskey = enqueueSnackbar(`${t('Metadata will be refreshed in a few seconds')}`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                });\n                \n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefresh(true);\n                }, GRAPE_RPC_REFRESH);\n\n            /*}\n            else {\n                enqueueSnackbar(`To BUY NOW you must first cancel the existing offer of ${convertSolVal(amount)} SOL.`,{ variant: 'warning' });\n            }*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }     \n    }\n\n    const setSolanaPay = (props: any) => {\n        /* // NATIVE SOL\n            console.log('2. 🛍 Simulate a customer checkout \\n');\n            const amount = new BigNumber(20);\n            const reference = new Keypair().publicKey;\n            const label = 'Jungle Cats store';\n            const message = 'Jungle Cats store - your order - #001234';\n            const memo = 'JC#4098';\n        */\n\n        /* // SPL TOKEN\n        console.log('2. 🛍 Simulate a customer checkout \\n');\n        const amount = new BigNumber(20);\n        const reference = new Keypair().publicKey;\n        const label = 'Jungle Cats store';\n        const message = 'Jungle Cats store - your order - #001234';\n        const memo = 'JC#4098';\n        const splToken = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v)';\n        \n        */\n\n        /* // CREATE LINK\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo, splToken });\n        */\n\n        /*// ENCODE TO QR\n        \n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        */\n\n\n        /* // ADD QR TO PAGE\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        // get a handle of the element\n        const element = document.getElementById('qr-code');\n\n        // append QR code to the element\n        qrCode.append(element);\n        */\n\n        return \n\n    }\n\n    const { t, i18n } = useTranslation();\n\n    const ItemTools = (props: any) => {\n        \n        return (\n            <>\n            {(OTHER_MARKETPLACES.filter(e => e.address === mintOwner).length > 0) ? (\n                <></>\n            ):(\n                <Box\n                    sx={{ \n                        p: 1, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px',\n                        mb: 3\n                    }}\n                > \n                    <List\n                        sx={{ \n                            width: '100%'\n                        }}\n                        component=\"nav\"\n                        >       \n                        <ListItemText>\n                        \n                        \n                            <>\n                                \n                                {publicKey && publicKey.toString() === mintOwner ? (\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                        {t('Selling now')}: \n                                            \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;{t('not listed for sale')}</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;{t('listed')} {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;{t('listed on')} {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                            <Typography component=\"div\" variant=\"caption\" id=\"grape-art-last-sale\"></Typography>\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                ):(\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            {t('Buy now')}: \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;{t('not listed for sale')}</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <>&nbsp;{t('listed')} {saleTimeAgo}</>\n                                                :\n                                                    (saleDate) && <>&nbsp;{t('listed on')} {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                            <Typography component=\"div\" variant=\"caption\" id=\"grape-art-last-sale\"></Typography>\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                )}\n\n                                <Grid \n                                    container \n                                    spacing={2}\n                                    direction=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    \n                                    {publicKey ?\n                                        <>\n                                        {publicKey.toString() !== mintOwner ? (\n                                                <Grid \n                                                container\n                                                spacing={2}\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\">\n                                                    <>\n                                                                <BootstrapDialog \n                                                                    fullWidth={true}\n                                                                    maxWidth={\"sm\"}\n                                                                    PaperProps={{\n                                                                        style: {\n                                                                            background: '#13151C',\n                                                                            border: '1px solid rgba(255,255,255,0.05)',\n                                                                            borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                                            borderRadius: '20px'\n                                                                        }\n                                                                    }}\n                                                                    open={alertbuynowopen}\n                                                                    onClose={handleAlertBuyNowClose}\n                                                                    aria-labelledby=\"alert-bn-dialog-title\"\n                                                                    aria-describedby=\"alert-bn-dialog-description\"\n                                                                    >\n                                                                    <DialogTitle id=\"alert-bn-dialog-title\">\n                                                                        <Typography>\n                                                                            {t('BUY NOW CONFIRMATION')}\n                                                                        </Typography>\n                                                                    </DialogTitle>\n                                                                    <DialogContent>\n                                                                        <DialogContentText id=\"alert-bn-dialog-description\">\n                                                                        <br />\n                                                                        <Alert \n                                                                            severity=\"info\" variant=\"outlined\"\n                                                                            sx={{backgroundColor:'black'}}\n                                                                            >\n                                                                            {t('Amount')}: {salePrice}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                                            {t('Mint')}: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                                            {t('Owner')}: <MakeLinkableAddress addr={mintOwner} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                                            <Typography sx={{textAlign:'center'}}>\n                                                                            {t('Make sure the above is correct')}<br/>{t('press Accept to proceed')}\n                                                                            </Typography>\n                                                                        </Alert>\n                                                                        \n                                                                        </DialogContentText>\n                                                                    </DialogContent>\n                                                                    <DialogActions>\n                                                                        <Button onClick={handleAlertBuyNowClose}>Cancel</Button>\n                                                                        <Button \n                                                                            onClick={() => handleBuyNow(salePrice)}\n                                                                            autoFocus>\n                                                                        {t('Accept')}\n                                                                        </Button>\n                                                                    </DialogActions>\n                                                                </BootstrapDialog>\n                                                                \n                                                                <Grid item>\n                                                                    {( (salePrice > 0) ?\n                                                                        <>\n                                                                            {/*\n                                                                            <Button \n                                                                                size=\"large\" \n                                                                                variant=\"contained\" \n                                                                                value=\"Use Solana Pay\" \n                                                                                onClick={() => setSolanaPay(true)}\n                                                                                sx={{\n                                                                                    background: 'linear-gradient(268.11deg, #00F0DD 3.12%, #DC1FFF 96.88%)',\n                                                                                    borderRadius: '10px',\n                                                                                    color: '#fff',\n                                                                                    mr:1,\n                                                                                }}\n                                                                            >\n                                                                                <QrCodeIcon />\n                                                                            </Button>\n                                                                            */}\n                                                                            <Button \n                                                                                size=\"large\" \n                                                                                variant=\"contained\" \n                                                                                value=\"Buy Now\" \n                                                                                className=\"buyNowButton\"\n                                                                                onClick={() => setAlertBuyNowOpen(true)}\n                                                                                sx={{\n                                                                                    \n                                                                                }}\n                                                                            >\n                                                                                <AccountBalanceWalletIcon sx={{mr:1}}/> {t('Buy Now')}\n\n                                                                            </Button>\n                                                                        </>\n                                                                    :<></>)}\n                                                                </Grid>\n\n                                                            {((grape_whitelisted > -1) ||\n                                                                (grape_member_balance > grape_offer_threshhold)) ? (\n                                                                    <>\n                                                                    {!ValidateCurve(mintOwner) &&\n                                                                        <Grid item>\n                                                                            <SellNowVotePrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                                        </Grid>\n                                                                    }\n                                                                    \n                                                                    {(ValidateCurve(mintOwner) || (ValidateDAO(mintOwner))) && (\n                                                                        <Grid item>\n                                                                            <OfferPrompt mint={mint} mintOwner={mintOwner} setRefreshOffers={setRefreshOffers} solBalance={sol_portfolio_balance} highestOffer={highestOffer} />\n                                                                        </Grid>\n                                                                    )}\n                                                                    </>\n                                                            ) : (\n                                                                <Grid item>\n                                                                    <Tooltip title={`${t('The Marketplace requires')} ${TOKEN_VERIFICATION_AMOUNT} ${TOKEN_VERIFICATION_NAME} ${t('to make an offer')}`}>\n                                                                        <Button sx={{borderRadius:'10px'}}>\n                                                                            <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                                                                            {t('Offers limited to')} {TOKEN_VERIFICATION_NAME} {t('holders')}\n                                                                            </Alert>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </Grid>\n                                                            )}\n                                                    </>\n                                                </Grid>\n                                        )\n                                        :\n                                            <Grid \n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\">\n                                                <Grid item>\n                                                    \n                                                    {( (salePrice > 0) ?\n                                                        <>\n                                                            <Button \n                                                                size=\"large\" \n                                                                color=\"error\"\n                                                                variant='outlined'\n                                                                onClick={() => handleCancelListing(salePrice)}\n                                                                sx={{\n                                                                    borderRadius: '10px',\n                                                                }}\n                                                            >\n                                                                <CancelIcon sx={{mr:1}}/> {t('Cancel Listing')}\n                                                            </Button>   \n                                                        </>\n                                                        : \n                                                        <>\n                                                            <SellNowPrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                        </>\n                                                    )}\n                                                </Grid>\n                                            </Grid>\n                                        }\n                                        </>\n                                    :(\n                                        <Grid\n                                            container\n                                            direction=\"row\"\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\"\n                                        >\n                                            <Grid item>\n                                            <WalletConnectButton />\n                                            </Grid>\n                                        </Grid>\n                                    )\n                                    }\n                                </Grid>\n                            </>\n                        </ListItemText>\n                    </List>\n                </Box>\n            )}\n            </>\n        );\n    }   \n\n    React.useEffect(() => {\n        if (refreshOffers){\n            //setOffers(null);\n            setRefreshOffers(!refreshOffers);\n        }\n\n        if (mintAta){\n            //if (!offers){\n                getOffers();\n            //}\n        }\n    }, [mintAta, refreshOffers]);\n\n    if ((!offers)||(loading)){\n        return (\n            <Box\n                sx={{ \n                    p: 1, \n                    mb: 3, \n                    width: '100%',\n                    background: '#13151C',\n                    borderRadius: '24px'\n                }}\n            > \n                <Skeleton\n                    sx={{ \n                        height: '100%',\n                        width: '100%'\n                    }}\n                />\n            </Box>\n        )\n    } else{      \n        return ( \n            <>\n                <ItemTools />\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                    <ListItemButton onClick={handleClick}\n                        sx={{borderRadius:'20px'}}\n                    >\n                        <ListItemIcon>\n                        <BallotOutlinedIcon />\n                        </ListItemIcon>\n                        <ListItemText \n                            primary={t('Offers')}\n                        />\n                            <Typography variant=\"caption\"><strong>{openOffers}</strong></Typography>\n                            {open_offers_collapse ? <ExpandLess /> : <ExpandMoreIcon />}\n                    </ListItemButton>\n                    <Collapse in={open_offers_collapse} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" \n                            sx={{ \n                                width: '100%',\n                            }}>\n                            <ListItemText>\n                                <Box sx={{ margin: 1 }}>\n                                    {/*<div style={{width: 'auto', overflowX: 'scroll'}}>*/}\n                                    <TableContainer>\n                                        <Table size=\"small\" aria-label=\"purchases\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell><Typography variant=\"caption\">{t('Address')}</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">{t('Offer')}</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">{t('Date')}</Typography></TableCell>\n                                                    <TableCell></TableCell>\n                                                </TableRow>\n                                            </TableHead>\n\n                                            <BootstrapDialog \n                                                fullWidth={true}\n                                                maxWidth={\"sm\"}\n                                                PaperProps={{\n                                                    style: {\n                                                        background: '#13151C',\n                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                        borderRadius: '20px'\n                                                    }\n                                                    /*\n                                                    style: {\n                                                        \n                                                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                                                        boxShadow: '3',\n                                                        border: '1px solid rgba(255,255,255,0.15)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                                                        borderRadius: '20px',\n                                                        padding:'4'\n                                                        },*/\n                                                    }}\n                                                \n                                                    open={alertopen}\n                                                    onClose={handleAlertClose}\n                                                    aria-labelledby=\"alert-dialog-title\"\n                                                    aria-describedby=\"alert-dialog-description\"\n                                                    >\n                                                    <DialogTitle id=\"alert-dialog-title\">\n                                                        <Typography>\n                                                            {t('CONFIRMATION')}\n                                                        </Typography>\n                                                    </DialogTitle>\n                                                    <DialogContent>\n                                                        <DialogContentText id=\"alert-dialog-description\">\n                                                        <br />\n                                                        <Alert severity=\"info\" variant=\"outlined\" sx={{backgroundColor:'black'}} >\n                                                            {t('Amount')}: {final_offeramount}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                            {t('Mint')}: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                            {t('From')}: <MakeLinkableAddress addr={final_offerfrom} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                            <Typography sx={{textAlign:'center'}}>\n                                                            {t('Make sure the above is correct')}<br/>{t('press Accept to proceed')}\n                                                            </Typography><br/>\n                                                        </Alert>\n                                                        \n                                                        </DialogContentText>\n                                                    </DialogContent>\n                                                    <DialogActions>\n                                                        <Button onClick={handleAlertClose}>{t('Cancel')}</Button>\n                                                        <Button \n                                                            onClick={() => handleAcceptOffer(final_offeramount, final_offerfrom)}\n                                                            autoFocus>\n                                                        {t('Accept')}\n                                                        </Button>\n                                                    </DialogActions>\n                                                </BootstrapDialog>\n\n                                            {offers && offers.map((item: any) => (\n                                                <>\n\n                                                    {(item.state === 1) ? (\n                                                        <TableRow>\n                                                            <TableCell><Typography variant=\"body2\">\n                                                                <Tooltip title={t('View Profile')}>\n                                                                    <Button size=\"small\" variant=\"text\" component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        {trimAddress(item.buyeraddress,4)}\n                                                                    </Button>\n                                                                </Tooltip>\n                                                                <Tooltip title={t('Visit Explorer')}>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        <OpenInNewIcon sx={{fontSize:'14px'}} />\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Typography></TableCell>\n                                                            <TableCell  align=\"right\">\n                                                                <Typography variant=\"body2\">\n                                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                                <Typography variant=\"caption\">\n                                                                    <Tooltip\n                                                                        title={formatBlockTime(item.timestamp, true, true)}\n                                                                    >\n                                                                        <Button size=\"small\">{timeAgo(item.timestamp)}</Button>\n                                                                    </Tooltip>\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                            \n                                                            <>\n                                                                {(ValidateDAO(mintOwner)) ? (\n                                                                    <Tooltip\n                                                                        title='Vote to accept this offer'\n                                                                    >\n                                                                        <Button\n                                                                        onClick={() => setAcceptPrompt(convertSolVal(item.offeramount), item.buyeraddress)}\n                                                                        className='buyNowButton'\n                                                                        sx={{\n                                                                        }}\n                                                                        >\n                                                                            {t('VOTE')}\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                ):(\n                                                                    <>\n                                                                    {publicKey && publicKey.toBase58() === mintOwner && (\n                                                                        <Button\n                                                                            onClick={() => setAcceptPrompt(convertSolVal(item.offeramount), item.buyeraddress)} //acceptOfferWrapper(convertSolVal(item.offeramount), item.buyeraddress)} //handleAcceptOffer(convertSolVal(item.offeramount), item.buyeraddress)}\n                                                                            className='buyNowButton'\n                                                                            sx={{\n                                                                            }}\n                                                                        >\n                                                                            {t('ACCEPT')}\n                                                                        </Button>\n                                                                    )}\n                                                                    \n                                                                    {publicKey && publicKey.toBase58() === item.buyeraddress && (\n                                                                        <Button \n                                                                            color=\"error\"\n                                                                            variant=\"text\"\n                                                                            //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount))}\n                                                                            onClick={() => handleCancelOffer(convertSolVal(item.offeramount))}\n                                                                            sx={{\n                                                                                borderRadius: '10px',\n                                                                            }}\n                                                                        >\n                                                                            <CancelIcon />\n                                                                        </Button>\n                                                                    )}\n                                                                    </>\n                                                                )}\n                                                            </>\n                                                            \n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ):(<></>)}\n                                                </>\n                                            ))}\n                                        </Table>\n                                    </TableContainer>\n                                </Box>\n                            </ListItemText>\n                        </List>\n                    </Collapse>\n                </Box>\n                {mint &&\n                    <></>\n                    /*\n                    <HistoryView mint={mint} />\n                    */\n\n                }\n            </>\n        )\n    }\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/withdrawOffer.ts",["1517","1518","1519"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function withdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    //const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n\n    const amountAdjusted = await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    const instructions = [instruction];\n    \n\n\n    //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:0, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint?.toString(), // mint\n      amount:amountAdjusted // price\n    };\n\n    if (mint){\n      const mintKey = new web3.PublicKey(mint);\n      let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedMintPDA[0],\n          lamports: 0,\n        })\n      );\n\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }else{\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }\n    /*\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );*/\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/various.ts",["1520","1521","1522"],"import { LAMPORTS_PER_SOL, AccountInfo } from '@solana/web3.js';\nimport fs from 'fs';\nimport weighted from 'weighted';\nimport path from 'path';\nimport { Program, web3 } from '@project-serum/anchor';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\n//const { readFile } = fs.promises;\n\n/*export async function readJsonFile(fileName: string) {\n  const file = await readFile(fileName, 'utf-8');\n  return JSON.parse(file);\n}*/\n\nexport function shuffle(array: any) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex != 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\n/*export const assertValidBreakdown = breakdown => {\n  const total = Object.values(breakdown).reduce(\n    (sum: number, el: number) => (sum += el),\n    0,\n  );\n  if (total > 101 || total < 99) {\n    console.log(breakdown);\n    throw new Error('Breakdown not within 1% of 100! It is: ' + total);\n  }\n};\n\nexport const generateRandomSet = (breakdown, dnp) => {\n  let valid = true;\n  let tmp = {};\n\n  do {\n    valid = true;\n    const keys = shuffle(Object.keys(breakdown));\n    keys.forEach(attr => {\n      const breakdownToUse = breakdown[attr];\n\n      const formatted = Object.keys(breakdownToUse).reduce((f, key) => {\n        if (breakdownToUse[key]['baseValue']) {\n          f[key] = breakdownToUse[key]['baseValue'];\n        } else {\n          f[key] = breakdownToUse[key];\n        }\n        return f;\n      }, {});\n\n      assertValidBreakdown(formatted);\n      const randomSelection = weighted.select(formatted);\n      tmp[attr] = randomSelection;\n    });\n\n    keys.forEach(attr => {\n      let breakdownToUse = breakdown[attr];\n\n      keys.forEach(otherAttr => {\n        if (\n          tmp[otherAttr] &&\n          typeof breakdown[otherAttr][tmp[otherAttr]] != 'number' &&\n          breakdown[otherAttr][tmp[otherAttr]][attr]\n        ) {\n          breakdownToUse = breakdown[otherAttr][tmp[otherAttr]][attr];\n\n          console.log(\n            'Because this item got attr',\n            tmp[otherAttr],\n            'we are using different probabilites for',\n            attr,\n          );\n\n          assertValidBreakdown(breakdownToUse);\n          const randomSelection = weighted.select(breakdownToUse);\n          tmp[attr] = randomSelection;\n        }\n      });\n    });\n\n    Object.keys(tmp).forEach(attr1 => {\n      Object.keys(tmp).forEach(attr2 => {\n        if (\n          dnp[attr1] &&\n          dnp[attr1][tmp[attr1]] &&\n          dnp[attr1][tmp[attr1]][attr2] &&\n          dnp[attr1][tmp[attr1]][attr2].includes(tmp[attr2])\n        ) {\n          console.log('Not including', tmp[attr1], tmp[attr2], 'together');\n          valid = false;\n          tmp = {};\n        }\n      });\n    });\n  } while (!valid);\n  return tmp;\n};*/\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function fromUTF8Array(data: number[]) {\n  // array of bytes\n  let str = '',\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    const value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode(\n        ((value & 0x0f) << 12) |\n          ((data[i + 1] & 0x3f) << 6) |\n          (data[i + 2] & 0x3f),\n      );\n      i += 2;\n    } else {\n      // surrogate pair\n      const charCode =\n        (((value & 0x07) << 18) |\n          ((data[i + 1] & 0x3f) << 12) |\n          ((data[i + 2] & 0x3f) << 6) |\n          (data[i + 3] & 0x3f)) -\n        0x010000;\n\n      str += String.fromCharCode(\n        (charCode >> 10) | 0xd800,\n        (charCode & 0x03ff) | 0xdc00,\n      );\n      i += 3;\n    }\n  }\n\n  return str;\n}\n\nexport function parsePrice(price: string, mantissa: number = LAMPORTS_PER_SOL) {\n  return Math.ceil(parseFloat(price) * mantissa);\n}\n\nexport function parseDate(date: string) {\n  if (date === 'now') {\n    return Date.now() / 1000;\n  }\n  return Date.parse(date) / 1000;\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nexport function chunks(array: any, size: any) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index: any) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport function generateRandoms(\n  numberOfAttrs: number = 1,\n  total: number = 100,\n) {\n  const numbers = [];\n  const loose_percentage = total / numberOfAttrs;\n\n  for (let i = 0; i < numberOfAttrs; i++) {\n    const random = Math.floor(Math.random() * loose_percentage) + 1;\n    numbers.push(random);\n  }\n\n  const sum = numbers.reduce((prev, cur) => {\n    return prev + cur;\n  }, 0);\n\n  numbers.push(total - sum);\n  return numbers;\n}\n\nexport const getMetadata = (\n  name: string = '',\n  symbol: string = '',\n  index: number = 0,\n  creators: any,\n  description: string = '',\n  seller_fee_basis_points: number = 500,\n  attrs: any,\n  collection: any,\n) => {\n  const attributes = [];\n  for (const prop in attrs) {\n    attributes.push({\n      trait_type: prop,\n      value: path.parse(attrs[prop]).name,\n    });\n  }\n\n  return {\n    name: `${name}${index + 1}`,\n    symbol,\n    image: `${index}.png`,\n    properties: {\n      files: [\n        {\n          uri: `${index}.png`,\n          type: 'image/png',\n        },\n      ],\n      category: 'image',\n      creators,\n    },\n    description,\n    seller_fee_basis_points,\n    attributes,\n    collection,\n  };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport const getPriceWithMantissa = async (\n  price: number,\n  mint: web3.PublicKey,\n  walletKeyPair: any,\n  anchorProgram: Program,\n): Promise<number> => {\n  const token = new Token(\n    anchorProgram.provider.connection,\n    new web3.PublicKey(mint),\n    TOKEN_PROGRAM_ID,\n    walletKeyPair,\n  );\n\n  const mintInfo = await token.getMintInfo();\n\n  const mantissa = 10 ** mintInfo.decimals;\n\n  return Math.ceil(price * mantissa);\n};\n","/Users/kirk/Development/grape-art/src/utils/auctionHouse/createDAOProposal.ts",["1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543"],"import { PublicKey, SystemProgram, TransactionInstruction, Transaction, } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\nimport { \n  getRealms, \n  getVoteRecordsByVoter, \n  getTokenOwnerRecordAddress,\n  getTokenOwnerRecordForRealm, \n  getTokenOwnerRecordsByOwner, \n  getGovernanceAccounts, \n  pubkeyFilter, \n  TokenOwnerRecord, \n  withCreateProposal,\n  VoteType, \n  getGovernanceProgramVersion,\n  serializeInstructionToBase64,\n  createInstructionData,\n  withInsertTransaction,\n  InstructionData,\n  AccountMetaData,\n  getRealm,\n  withSignOffProposal,\n  getAllProposals,\n} from '@solana/spl-governance';\n\nimport { \n  TOKEN_REALM_PROGRAM_ID,\n} from '../grapeTools/constants';\nimport { AnyMxRecord } from 'dns';\n\n// Converts TransactionInstruction to InstructionData format\n/*export const createInstructionData2 = (instruction: TransactionInstruction) => {\n  return new InstructionData({\n    programId: instruction.programId,\n    data: instruction.data,\n    accounts: instruction.keys.map(\n      k =>\n        new AccountMetaData({\n          pubkey: k.pubkey,\n          isSigner: k.isSigner,\n          //isSigner: false,\n          isWritable: k.isWritable,\n          //isWritable: false,\n        }),\n    ),\n  });\n};*/\n\n  export async function createDAOProposal(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string, connection: any, transactionInstr: InstructionsAndSignersSet, sendTransaction: any): Promise<InstructionsAndSignersSet> {\n    \n    //console.log('inDAOProposal instructionArray before adding DAO Instructions:'+JSON.stringify(transactionInstr));\n    //let initialInstructions: TransactionInstruction[] = [];\n    let signers: any[] = [];\n\n    let instructions: TransactionInstruction[] = [];\n    const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n    const programVersion = await getGovernanceProgramVersion(\n      connection,\n      programId,\n    );\n    const realmPk = new PublicKey('DcR6g5EawaEoTRYcnuBjtD26VSVjWNoi1C1hKJWwvcup');\n    const governancePk = new PublicKey('JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK');\n    const name = 'Sale of NFT: '+mint+' for '+offerAmount+'sol on grape.art';\n    const descriptionLink = '';\n    const governingTokenMint = new PublicKey('9Z7SQ1WMiDNaHu2cX823sZxD2SQpscoLGkyeLAHEqy9r');\n    const walletPk = new PublicKey(walletPublicKey);\n\n\n    const proposalIndex = 15;  //this isn't fixed will need to find the next available slot for a proposal\n    const voteType = VoteType.SINGLE_CHOICE;\n    const options = ['Approve'];\n    const useDenyOption = true;\n    \n    const tokenOwnerRecordPk = await getTokenOwnerRecordAddress(\n      programId,\n      realmPk,\n      governingTokenMint,\n      walletPk,\n    );\n    \n    //extras\n    const governingTokenMintAuthority = new PublicKey('Dg4LFS33D4jMaSzQVLbFst6PB5svY9KcMHqWyJTth4bM');\n    const communityTokenMint = new PublicKey('DGPzmXUt39qwNca5diqsWHK7P9w2jtrP6jNt7MH8AhEq');\n    const realmAuthority = new PublicKey('8zhQAf4KmJKBPH1hUT8QCQJEcXF78DdoKHoNqxX3dJDj');\n    //const realm = await getRealm(connection, realmPk);\n\n    instructions = [];\n    const proposalPk = await withCreateProposal(\n      instructions,\n      programId,\n      programVersion,\n      realmPk,\n      governancePk,\n      tokenOwnerRecordPk,\n      name,\n      descriptionLink,\n      governingTokenMint,\n      walletPk,\n      proposalIndex,\n      voteType,\n      options,\n      useDenyOption,\n      walletPk,\n  );\n  //see if we can add some of the instruction data in the createProposal before sending first transaction\n\n  let transactionDao = new Transaction();\n  transactionDao.add(...instructions);\n\n  let instructionData: InstructionData[]=[];\n\n  for (var instruction of transactionInstr.instructions){\n      instructionData.push(createInstructionData(instruction));\n  }\n  //reset instructions to prepare for sending rest of instructions and signOffProposal         \n  instructions = [];\n  signers = [];\n\n  const wit1 = await withInsertTransaction(\n    instructions,\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    walletPk,\n    0,\n    0,\n    0,\n    instructionData.slice(0,1),\n    walletPk,\n  );\n  console.log(\"instructionsData: \"+JSON.stringify(instructionData.slice(0,1)));\n  transactionDao.add(...instructions);\n\n  const signedTransaction = await sendTransaction(transactionDao, connection);\n  await connection.confirmTransaction(signedTransaction, 'processed'); \n  instructions = [];\n  signers = [];\n  const wit2 = await withInsertTransaction(\n    instructions,\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    walletPk,\n    1,\n    0,\n    0,\n    instructionData.slice(1,3),\n    walletPk,\n  );\n  \n  //const instructions2Set = instructions;\n  console.log(\"instructionsData2: \"+JSON.stringify(instructionData.slice(1,3)));\n  //add to transaction first sell now listing instruction (the big one)\n  let transactionDao2 = new Transaction();\n  transactionDao2.add(...instructions);\n\n  const signedTransaction2 = await sendTransaction(transactionDao2, connection);\n  await connection.confirmTransaction(signedTransaction2, 'processed'); \n\n  instructions = [];\n  signers = [];\n  //const transaction2 = new Transaction();\n  //transaction2.add(...instructions);\n  const wit3 = await withInsertTransaction(\n    instructions,\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    walletPk,\n    2,\n    0,\n    0,\n    instructionData.slice(4),\n    //[instructionData2],\n    walletPk,\n  );\n  console.log(\"instructionsData3: \"+JSON.stringify(instructionData.slice(4)));\n  const instructions3Set = instructions;\n  //reset instructions\n  \n  instructions = [];\n  signers = [];\n  //add signOff without signatory\n  withSignOffProposal(\n      instructions,\n      programId,\n      programVersion,\n      realmPk,\n      governancePk,\n      proposalPk,\n      walletPk,\n      undefined,\n      tokenOwnerRecordPk,\n  );\n  \n  instructions3Set.push(...instructions);\n  //transaction2.add(...instructions);\n    //console.log(\"instructions: \"+JSON.stringify(instructions));\n  console.log(\"instructionsData3: \"+JSON.stringify(instructionData.slice(3)));\n  return {\n    signers: signers,\n    instructions: instructions3Set\n  }\n\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/depositInGrapeVine.ts",["1544","1545","1546","1547"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function depositInGrapeVine(escrowAmount: number, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n\n    const amountAdjusted = await getPriceWithMantissa(\n        escrowAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.deposit(\n      escrowBump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          paymentAccount: isNative ? buyerWalletKey : ata,\n          transferAuthority: isNative\n            ? web3.SystemProgram.programId\n            : transferAuthority.publicKey,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n      },\n    );\n\n    const instructions = [instruction];\n  \n    const GRAPE_AH_MEMO = {\n      state:6, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel, 6: deposit)\n      ah:auctionHouseKey.toString(), // pk\n      mint:null, // mint\n      amount:amountAdjusted // price\n    };\n      \n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n    instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelWithdrawOffer.ts",["1548","1549","1550","1551"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { getPriceWithMantissa } from './helpers/various';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\nexport async function cancelWithdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n    //START CANCEL\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    \n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    \n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    \n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    \n    const instructions = [instruction];\n    //END CANCEL\n\n    //START WITHDRAW\n    let withdrawAmmount = 0;\n    if (escrowSolAmount < offerAmount){\n      withdrawAmmount = escrowSolAmount;\n    } else {\n      withdrawAmmount = offerAmount;\n    }\n    const amountAdjusted = await getPriceWithMantissa(\n      withdrawAmmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerWalletKey,\n      anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    //const signers = isNative ? [] : [transferAuthority];\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction2 = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    instructions.push(instruction2);\n\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/buyNowListing.ts",["1552","1553","1554"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nexport async function buyNowListing(offerAmount: number, mint: string, walletPublicKey: string, buyerAddress: PublicKey): Promise<InstructionsAndSignersSet> {\n  //START BUY\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n\n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n    auctionHouseKey,\n    buyerAddress, \n  );\n\n  const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey); \n\n  const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    buyerAddress, \n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    buyPriceAdjusted,\n  );\n\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const ata = (\n      await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerAddress, \n      )\n  )[0];\n\n  const transferAuthority = web3.Keypair.generate();\n  const signers = isNative ? [] : [transferAuthority];\n\n  const instruction = anchorProgram.instruction.buy(\n    tradeBump,\n    escrowBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n        accounts: {\n            wallet: buyerAddress,\n            paymentAccount: isNative ? buyerAddress : ata,\n            transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n            metadata: await getMetadata(mintKey),\n            tokenAccount: tokenAccountKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            buyerTradeState: tradeState,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n    }\n  );\n\n  const instructions = [\n    ...(isNative\n        ? []\n        : [\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                transferAuthority.publicKey,\n                buyerAddress,\n                [],\n                buyPriceAdjusted.toNumber(),\n            ),\n        ]),\n    instruction,\n    ...(isNative\n        ? []\n        : [\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                buyerAddress,\n                [],\n            ),\n        ]),\n  ];\n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  //const instructions = [instruction];\n  //END BUY\n  \n  //START EXECUTE SALE\n  //const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerAddress,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    escrowBump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerAddress,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerAddress)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:3, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n\n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: buyerAddress, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/sellNowListing.ts",["1555","1556"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\n  export async function sellNowListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const thisWalletPublicKey = new web3.PublicKey(walletPublicKey);\n    \n    let sellerWalletKey = thisWalletPublicKey;\n    if (daoPublicKey){\n      sellerWalletKey = new web3.PublicKey(daoPublicKey);\n    }\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        +offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const [programAsSigner, programAsSignerBump] =\n        await getAuctionHouseProgramAsSigner();\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n        auctionHouseKey,\n        sellerWalletKey,\n        tokenAccountKey,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted,\n        buyPriceAdjusted,\n    );\n    const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      new BN(0),\n    );\n\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.sell(\n      tradeBump,\n      freeTradeBump,\n      programAsSignerBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n      accounts: {\n          wallet: sellerWalletKey,\n          metadata: await getMetadata(mintKey),\n          tokenAccount: tokenAccountKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          sellerTradeState: tradeState,\n          freeSellerTradeState: freeTradeState1,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n      },\n    ); \n\n    const instructions = [instruction];\n    console.log(\"sellerWalletKey: \"+sellerWalletKey.toBase58());\n    \n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:2, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber(), // price\n      score:weightedScore, // spam protection for our feed/higher score weight higher feed visibility\n    };\n    \n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n  }","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelListing.ts",["1557"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('tokenSizeAdjusted:', tokenSizeAdjusted);\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    //console.log('tokenAccountKey:', tokenAccountKey.toBase58());\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              sellerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: sellerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    //is it withdraw here or cancel (we are removing the listing we made)\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","/Users/kirk/Development/grape-art/src/Profile/GalleryItem.tsx",["1558","1559","1560","1561","1562","1563","1564"],"\nimport React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport { PublicKey } from '@solana/web3.js';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    ListItemButton,\n} from '@mui/material';\n\nimport {\n    METAPLEX_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\n\nimport { GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { getImageOrFallback } from '../utils/grapeTools/WalletAddress';\n\nexport default function GalleryItem(props: any){\n    const MD_PUBKEY = METAPLEX_PROGRAM_ID;\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account?.data.parsed.info.mint || collectionitem?.wallet?.address || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n        \n        const getCollectionData = async () => {\n            if (collectionitem){\n                try {\n                    let meta_primer = collectionitem;\n                    let buf = Buffer.from(meta_primer.data, 'base64');\n                    let meta_final = decodeMetadata(buf);\n                    try{\n                        const metadata = await fetch(meta_final.data.uri)\n                        .then(\n                            (res: any) => res.json()\n                        );\n                        return metadata;\n                    }catch(ie){\n                        // not on Arweave:\n                        //console.log(\"ERR: \"+JSON.stringify(meta_final));\n                        return null;\n                    }\n                } catch (e) { // Handle errors from invalid calls\n                    console.log(e);\n                    return null;\n                }\n            }\n        }\n\n        const setImageUrl = async (image_url:string, image:string) => {\n            await getImageOrFallback(image_url, image).then(validUrl => {\n                return validUrl\n            });\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            try{\n                if (image){\n                    if ((image?.toLocaleUpperCase().indexOf('?EXT=PNG') > -1) ||\n                        (image?.toLocaleUpperCase().indexOf('?EXT=JPEG') > -1)){\n                            let image_url = 'https://solana-cdn.com/cdn-cgi/image/width=256/'+image;\n                            image = image_url;\n                            //image = setImageUrl(image_url, image);\n                    }\n                }\n            }catch(e){console.log(\"ERR: \"+e)}\n            \n            if (!image){\n                //console.log(\"!image ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            } else {\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                        <>\n                            {collectionmeta &&\n                                <Grid \n                                    container \n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                        <ListItemButton\n                                            component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                            sx={{\n                                                width:'100%',\n                                                borderRadius:'25px',\n                                                p: '2px'\n                                            }}\n                                        >\n                                            <img\n                                                src={`${image}`}\n                                                srcSet={`${image}`}\n                                                alt={collectionmeta.collectionmeta?.name}\n                                                //onClick={ () => openImageViewer(0) }\n                                                loading=\"lazy\"\n                                                height=\"auto\"\n                                                style={{\n                                                    width:'100%',\n                                                    borderRadius:'24px'\n                                                }}\n                                            />\n                                        </ListItemButton>\n                                    </Grid>\n                                    <Grid item sx={{display:'flex'}}>\n                                        <Box\n                                            sx={{p:1}}\n                                        >\n                                            <Typography variant=\"caption\">\n                                                {collectionmeta.collectionmeta?.name}\n                                            </Typography>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            }\n                        </>\n                );\n            }\n            //}\n        }\n}","/Users/kirk/Development/grape-art/src/utils/auctionHouse/acceptOffer.ts",["1565","1566","1567"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function acceptOffer(offerAmount: number, mint: string, sellerWalletKey: PublicKey, buyerAddress: any): Promise<InstructionsAndSignersSet> {\n  //START SELL\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n  );\n  const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    sellerWalletKey,\n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    new BN(0),\n  );\n\n  const signers: any[] = [];\n\n  const instruction = anchorProgram.instruction.sell(\n    tradeBump,\n    freeTradeBump,\n    programAsSignerBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n      accounts: {\n        wallet: sellerWalletKey,\n        metadata: await getMetadata(mintKey),\n        tokenAccount: tokenAccountKey,\n        //@ts-ignore\n        authority: auctionHouseObj.authority,\n        auctionHouse: auctionHouseKey,\n        //@ts-ignore\n        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n        sellerTradeState: tradeState,\n        freeSellerTradeState: freeTradeState1,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        programAsSigner,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n    },\n  ); \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const instructions = [instruction];\n  //END SELL\n  \n  //START EXECUTE SALE\n\n  const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerWalletKey,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey,);\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    bump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerWalletKey,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerWalletKey)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:4, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n  \n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","/Users/kirk/Development/grape-art/src/utils/web3/name-service.tsx",[],"/Users/kirk/Development/grape-art/src/components/static/GrapeIcon.tsx",[],"/Users/kirk/Development/grape-art/src/utils/auctionHouse/submitOffer.ts",["1568","1569"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { TokenAmount } from '../../utils/grapeTools/safe-math';\n\nfunction convertSolVal(sol: any){\n    sol = parseFloat(new TokenAmount(sol, 9).format());\n    return sol;\n}\n\n  export async function submitOffer(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n    //console.log('escrow_amount:',escrowSolAmount, 'offerAmount:', offerAmount);\n    //execute BUY\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n          offerAmount,\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    );\n\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n          tokenSize,\n          mintKey,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    ); \n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey, \n    );\n\n    const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey);    \n  \n    //const tokenAccountKey: web3.PublicKey = tokenAccount ? new web3.PublicKey(tokenAccount) : results.value[0].address;\n    const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      buyerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n    const ata = (\n        await getAtaForMint(\n            //@ts-ignore\n            auctionHouseObj.treasuryMint,\n            buyerWalletKey,\n        )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.buy(\n      tradeBump,\n      escrowBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n          accounts: {\n              wallet: buyerWalletKey,\n              paymentAccount: isNative ? buyerWalletKey : ata,\n              transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n              metadata: await getMetadata(mintKey),\n              tokenAccount: tokenAccountKey,\n              escrowPaymentAccount,\n              //@ts-ignore\n              treasuryMint: auctionHouseObj.treasuryMint,\n              //@ts-ignore\n              authority: auctionHouseObj.authority,\n              auctionHouse: auctionHouseKey,\n              //@ts-ignore\n              auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n              buyerTradeState: tradeState,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              systemProgram: web3.SystemProgram.programId,\n              rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n      }\n    );\n    \n    //const instructions = [instruction];\n    const instructions = [\n      ...(isNative\n          ? []\n          : [\n              Token.createApproveInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  transferAuthority.publicKey,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n                  buyPriceAdjusted.toNumber(),\n              ),\n          ]),\n      instruction,\n      ...(isNative\n          ? []\n          : [\n              Token.createRevokeInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n              ),\n          ]),\n      ];\n    //END BUY\n\n    //CHECK IF DEPOSIT INSTRUCTTION IS NECESSARY\n    if (escrowSolAmount > 0){\n      //calculate how much more to deposit\n      let depositAmount = 0;\n      if (offerAmount < escrowSolAmount){\n          depositAmount = offerAmount;\n      } else {\n          depositAmount = (offerAmount - (offerAmount - escrowSolAmount));\n      }\n      //console.log('depositAmount:', depositAmount);\n      const amountAdjusted = await getPriceWithMantissa(\n        depositAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      );\n\n      const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n        auctionHouseKey,\n        buyerWalletKey,\n      );\n\n      const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n      const ata = (\n        await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n        )\n      )[0];\n\n      const transferAuthority = web3.Keypair.generate();\n      //const signers = isNative ? [] : [transferAuthority];\n\n      const instruction2 = anchorProgram.instruction.deposit(\n        escrowBump,\n        new BN(amountAdjusted),\n        {\n          accounts: {\n            wallet: buyerWalletKey,\n            paymentAccount: isNative ? buyerWalletKey : ata,\n            transferAuthority: isNative\n              ? web3.SystemProgram.programId\n              : transferAuthority.publicKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n        },\n      );\n      instructions.push(instruction2);\n    }\n    // END ADDING DEPOSIT\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:1, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n  \n\n\n  }","/Users/kirk/Development/grape-art/src/utils/auctionHouse/helpers/accounts.ts",["1570","1571","1572","1573","1574"],"import {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  AccountInfo,\n} from '@solana/web3.js';\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  FAIR_LAUNCH_PROGRAM_ID,\n  AUCTION_HOUSE_PROGRAM_ID,\n  AUCTION_HOUSE,\n  FEE_PAYER,\n  TREASURY,\n  WRAPPED_SOL_MINT,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  TOKEN_ENTANGLER,\n  ESCROW,\n  B,\n  A,\n} from './constants';\nimport * as anchor from '@project-serum/anchor';\n//import { Wallet } from '@solana/wallet-adapter-react';\nimport fs from 'fs';\n//import { createConfigAccount } from './instructions';\nimport { web3 } from '@project-serum/anchor';\nimport log from 'loglevel';\nimport { AccountLayout, u64 } from '@solana/spl-token';\n\nexport type AccountAndPubkey = {\n  pubkey: string;\n  account: AccountInfo<Buffer>;\n};\n\nexport type StringPublicKey = string;\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: anchor.BN;\n    symbol: string;\n    sellerFeeBasisPoints: number;\n    isMutable: boolean;\n    maxSupply: anchor.BN;\n    retainAuthority: boolean;\n    creators: {\n      address: PublicKey;\n      verified: boolean;\n      share: number;\n    }[];\n  },\n) {\n  const configAccount = Keypair.generate();\n  const uuid = uuidFromConfigPubkey(configAccount.publicKey);\n\n  if (!configData.creators || configData.creators.length === 0) {\n    throw new Error(`Invalid config, there must be at least one creator.`);\n  }\n\n  const totalShare = (configData.creators || []).reduce(\n    (acc, curr) => acc + curr.share,\n    0,\n  );\n\n  /*if (totalShare !== 100) {\n    throw new Error(`Invalid config, creators shares must add up to 100`);\n  }\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  };*/\n};\n\nexport function uuidFromConfigPubkey(configAccount: PublicKey) {\n  return configAccount.toBase58().slice(0, 6);\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunch = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), seq.toBuffer('le', 8)],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationToken = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n      Buffer.from('account'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getTreasury = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('treasury')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkPda = async (\n  mint: anchor.web3.PublicKey,\n  edition: number,\n): Promise<anchor.web3.PublicKey> => {\n  const editionNumber = Math.floor(edition / 248);\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(editionNumber.toString()),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getAuctionHouse = async (\n  creator: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), creator.toBuffer(), treasuryMint.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseProgramAsSigner = async (): Promise<\n  [PublicKey, number]\n> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), Buffer.from('signer')],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseFeeAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(FEE_PAYER),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTreasuryAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(TREASURY),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseBuyerEscrow = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  //console.log(\"get escrow inside\");\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTradeState = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n  tokenAccount: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n  tokenMint: anchor.web3.PublicKey,\n  tokenSize: anchor.BN,\n  buyPrice: anchor.BN,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      wallet.toBuffer(),\n      auctionHouse.toBuffer(),\n      tokenAccount.toBuffer(),\n      treasuryMint.toBuffer(),\n      tokenMint.toBuffer(),\n      //nmaz needed to change otherwise would crash (browserify compatibility)\n      //buyPrice.toBuffer('le', 8),\n      buyPrice.toArrayLike(Buffer,'le',8),\n      //tokenSize.toBuffer('le', 8),\n      tokenSize.toArrayLike(Buffer,'le',8),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglementEscrows = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number, PublicKey, number]> => {\n  return [\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(A),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(B),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n  ];\n};\n\n\n\nexport function loadWalletKey(keypair: any): Keypair {\n  if (!keypair || keypair == '') {\n    throw new Error('Keypair is required!');\n  }\n  const loaded = Keypair.fromSecretKey(\n    //new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n    //new Uint8Array(JSON.parse((keypair))),\n    new Uint8Array(keypair),\n  );\n  log.info(`wallet public key: ${loaded.publicKey}`);\n  //console.log(`wallet public key: ${loaded.publicKey}`);\n  return loaded;\n}\n\n/*\nexport async function loadCandyProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider);\n  log.debug('program id from anchor', program.programId.toBase58());\n  return program;\n}*/\n\n/*\nexport async function loadFairLaunchProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, FAIR_LAUNCH_PROGRAM_ID, provider);\n}\n*/\nexport async function loadAuctionHouseProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  \n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(AUCTION_HOUSE_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, AUCTION_HOUSE_PROGRAM_ID, provider);\n}\n\n/*\nexport async function loadTokenEntanglementProgream(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n*/\n\nexport async function getTokenAmount(\n  anchorProgram: anchor.Program,\n  account: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey,\n): Promise<number> {\n  let amount = 0;\n  if (!mint.equals(WRAPPED_SOL_MINT)) {\n    try {\n      const token =\n        await anchorProgram.provider.connection.getTokenAccountBalance(account);\n      amount = token.value.uiAmount * Math.pow(10, token.value.decimals);\n    } catch (e) {\n      log.error(e);\n      log.info(\n        'Account ',\n        account.toBase58(),\n        'didnt return value. Assuming 0 tokens.',\n      );\n    }\n  } else {\n    amount = await anchorProgram.provider.connection.getBalance(account);\n  }\n  return amount;\n}\n\nexport async function getProgramAccounts(\n  connection: anchor.web3.Connection,\n  programId: string,\n  configOrCommitment?: any,\n): Promise<AccountAndPubkey[]> {\n  const extra: any = {};\n  let commitment;\n  //let encoding;\n\n  if (configOrCommitment) {\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else {\n      commitment = configOrCommitment.commitment;\n      //encoding = configOrCommitment.encoding;\n\n      if (configOrCommitment.dataSlice) {\n        extra.dataSlice = configOrCommitment.dataSlice;\n      }\n\n      if (configOrCommitment.filters) {\n        extra.filters = configOrCommitment.filters;\n      }\n    }\n  }\n\n  const args = connection._buildArgs([programId], commitment, 'base64', extra);\n  const unsafeRes = await (connection as any)._rpcRequest(\n    'getProgramAccounts',\n    args,\n  );\n\n  return unsafeResAccounts(unsafeRes.result);\n}\n\n//function unsafeAccount(account: anchor.web3.AccountInfo<string[]>) {\nfunction unsafeAccount(account: anchor.web3.AccountInfo<[string, string]>) {\n    return {\n    // TODO: possible delay parsing could be added here\n    data: Buffer.from(account.data[0], 'base64'),\n    executable: account.executable,\n    lamports: account.lamports,\n    // TODO: maybe we can do it in lazy way? or just use string\n    owner: account.owner,\n  } as anchor.web3.AccountInfo<Buffer>;\n}\n\nfunction unsafeResAccounts(\n  data: Array<{\n    //account: anchor.web3.AccountInfo<string[]>;\n    account: anchor.web3.AccountInfo<[string, string]>;\n    pubkey: string;\n  }>,\n) {\n  return data.map(item => ({\n    account: unsafeAccount(item.account),\n    pubkey: item.pubkey,\n  }));\n}\n","/Users/kirk/Development/grape-art/src/utils/auctionHouse/cancelOffer.ts",["1575"],"import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log('instruction:', instruction);\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","/Users/kirk/Development/grape-art/src/utils/grapeTools/RegexTextField.jsx",[],"/Users/kirk/Development/grape-art/src/utils/cache.tsx",["1576"],"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport function hashCode(s: string) {\n  let h = 0;\n  for (let i = 0; i < s.length; i++)\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n\n  return h.toString();\n}\n\nexport enum CachePrefix {\n  Message = \"message_\",\n  DecryptedMessage = \"decrypted_message_\",\n  Media = \"media_\",\n  DecryptedMedia = \"decrypted_media_\",\n  MessageCount = \"message_count_\",\n  RetrievedThread = \"retrieved_thread_\",\n  LastMsgCount = \"last_msg_count_\",\n  ProfilePicture = \"profile_pic_\",\n  Archive = \"archive_\",\n  CentralState = \"central_state_\",\n  Sha256 = \"sha256_\",\n  ProgramAddress = \"program_address_\",\n  IpfsHash = \"ipfs_hash_\",\n}\n\nexport class asyncCache {\n  static async get<T>(key: string): Promise<T | null> {\n    const cached = await AsyncStorage.getItem(hashCode(key));\n    if (!cached) {\n      return null;\n    }\n    return JSON.parse(cached);\n  }\n  static async set<T>(key: string, value: T) {\n    const stringified = JSON.stringify(value);\n    await AsyncStorage.setItem(hashCode(key), stringified);\n  }\n\n  static async sha256(data: ethers.utils.BytesLike): Promise<string> {\n    const cached = await asyncCache.get<string>(\n      CachePrefix.Sha256 + data.toString()\n    );\n    if (cached) {\n      return cached;\n    }\n    const result: string = await new Promise((resolve) =>\n      resolve(ethers.utils.sha256(data).slice(2))\n    );\n    await asyncCache.set(CachePrefix.Sha256 + data.toString(), result);\n    return result;\n  }\n}\n\nexport function useGetAsyncCache<T>(key: string, refresh?: boolean): T | null {\n  const [cached, setCached] = useState<T | null>(null);\n\n  const fn = useCallback(async () => {\n    return await asyncCache.get<T>(key);\n  }, [key]);\n\n  useEffect(() => {\n    let mounted = true;\n    fn().then((c) => {\n      if (!mounted) return null;\n      setCached(c);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [refresh, key]);\n  return cached;\n}","/Users/kirk/Development/grape-art/src/utils/web3/program-address.tsx",["1577"],"/** @solana/web3.js is not compatible with react-native */\nimport nacl from \"tweetnacl\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Buffer } from \"buffer\";\nimport BN from \"bn.js\";\nimport { asyncCache } from \"../cache\";\nimport { ethers } from \"ethers\";\n\nexport const MAX_SEED_LENGTH = 32;\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function createProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<PublicKey> {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([\n    buffer,\n    programId.toBuffer(),\n    Buffer.from(\"ProgramDerivedAddress\"),\n  ]);\n  const hash: string = await new Promise((resolve) =>\n    resolve(ethers.utils.sha256(new Uint8Array(buffer)).slice(2))\n  );\n  const publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n  if (is_on_curve(publicKeyBytes)) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n  const key = new PublicKey(publicKeyBytes);\n  return key;\n}\n\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<[PublicKey, number]> {\n  const cached = await asyncCache.get<{ address: string; nonce: number }>(\n    seeds.toString()\n  );\n  if (cached) {\n    return [new PublicKey(cached.address), cached.nonce];\n  }\n  let nonce = 255;\n  let address;\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = await createProgramAddress(seedsWithNonce, programId);\n      await asyncCache.set(seeds.toString(), {\n        address: address.toBase58(),\n        nonce: nonce,\n      });\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\n/* eslint-disable */\n//  @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/* eslint-enable */","/Users/kirk/Development/grape-art/src/utils/web3/name-auctioning.tsx",[],{"ruleId":"1578","severity":1,"message":"1579","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1583","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1584","line":1,"column":21,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":32,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1586","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1587","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1588","line":12,"column":3,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":6},{"ruleId":"1582","severity":1,"message":"1589","line":22,"column":10,"nodeType":"1580","messageId":"1581","endLine":22,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1590","line":22,"column":61,"nodeType":"1580","messageId":"1581","endLine":22,"endColumn":70},{"ruleId":"1582","severity":1,"message":"1591","line":23,"column":32,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1592","line":23,"column":45,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1593","line":24,"column":10,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1594","line":24,"column":22,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1595","line":24,"column":31,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1596","line":24,"column":46,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1597","line":24,"column":59,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":72},{"ruleId":"1582","severity":1,"message":"1598","line":25,"column":10,"nodeType":"1580","messageId":"1581","endLine":25,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1599","line":27,"column":10,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1600","line":65,"column":10,"nodeType":"1580","messageId":"1581","endLine":65,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1601","line":68,"column":14,"nodeType":"1580","messageId":"1581","endLine":68,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1603","line":32,"column":35,"nodeType":"1604","messageId":"1605","endLine":114,"endColumn":2,"fix":"1606"},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":38,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1608","line":1,"column":57,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":65},{"ruleId":"1582","severity":1,"message":"1609","line":6,"column":8,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1610","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1611","line":18,"column":49,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1612","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1613","line":20,"column":42,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":53},{"ruleId":"1582","severity":1,"message":"1614","line":26,"column":23,"nodeType":"1580","messageId":"1581","endLine":26,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":27,"column":33,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1596","line":27,"column":48,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1615","line":27,"column":61,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1616","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1617","line":39,"column":5,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1618","line":73,"column":8,"nodeType":"1580","messageId":"1581","endLine":73,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1619","line":87,"column":8,"nodeType":"1580","messageId":"1581","endLine":87,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1620","line":90,"column":30,"nodeType":"1580","messageId":"1581","endLine":90,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1621","line":97,"column":10,"nodeType":"1580","messageId":"1581","endLine":97,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1622","line":97,"column":61,"nodeType":"1580","messageId":"1581","endLine":97,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1623","line":98,"column":10,"nodeType":"1580","messageId":"1581","endLine":98,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1624","line":102,"column":7,"nodeType":"1580","messageId":"1581","endLine":102,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1625","line":108,"column":7,"nodeType":"1580","messageId":"1581","endLine":108,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1626","line":128,"column":9,"nodeType":"1580","messageId":"1581","endLine":128,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1627","line":139,"column":10,"nodeType":"1580","messageId":"1581","endLine":139,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1628","line":143,"column":10,"nodeType":"1580","messageId":"1581","endLine":143,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1629","line":147,"column":10,"nodeType":"1580","messageId":"1581","endLine":147,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1630","line":163,"column":7,"nodeType":"1580","messageId":"1581","endLine":163,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1601","line":189,"column":16,"nodeType":"1580","messageId":"1581","endLine":189,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1631","line":257,"column":10,"nodeType":"1580","messageId":"1581","endLine":257,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1632","line":268,"column":10,"nodeType":"1580","messageId":"1581","endLine":268,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1633","line":278,"column":6,"nodeType":"1580","messageId":"1581","endLine":278,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1634","line":283,"column":7,"nodeType":"1580","messageId":"1581","endLine":283,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1635","line":291,"column":15,"nodeType":"1580","messageId":"1581","endLine":291,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1636","line":295,"column":15,"nodeType":"1580","messageId":"1581","endLine":295,"endColumn":24},{"ruleId":"1637","severity":1,"message":"1638","line":330,"column":12,"nodeType":"1639","endLine":330,"endColumn":28,"suggestions":"1640"},{"ruleId":"1582","severity":1,"message":"1641","line":433,"column":7,"nodeType":"1580","messageId":"1581","endLine":433,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1601","line":449,"column":16,"nodeType":"1580","messageId":"1581","endLine":449,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1643","line":451,"column":46,"nodeType":"1644","messageId":"1645","endLine":451,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1646","line":562,"column":21,"nodeType":"1580","messageId":"1581","endLine":562,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1647","line":563,"column":28,"nodeType":"1580","messageId":"1581","endLine":563,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1648","line":564,"column":13,"nodeType":"1580","messageId":"1581","endLine":564,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1649","line":564,"column":30,"nodeType":"1580","messageId":"1581","endLine":564,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1650","line":565,"column":30,"nodeType":"1580","messageId":"1581","endLine":565,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1651","line":566,"column":34,"nodeType":"1580","messageId":"1581","endLine":566,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1652","line":568,"column":12,"nodeType":"1580","messageId":"1581","endLine":568,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":568,"column":18,"nodeType":"1580","messageId":"1581","endLine":568,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1654","line":569,"column":11,"nodeType":"1580","messageId":"1581","endLine":569,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1601","line":577,"column":16,"nodeType":"1580","messageId":"1581","endLine":577,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1643","line":587,"column":21,"nodeType":"1644","messageId":"1645","endLine":587,"endColumn":23},{"ruleId":"1637","severity":1,"message":"1655","line":590,"column":8,"nodeType":"1639","endLine":590,"endColumn":26,"suggestions":"1656"},{"ruleId":"1582","severity":1,"message":"1657","line":668,"column":20,"nodeType":"1580","messageId":"1581","endLine":668,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1652","line":670,"column":12,"nodeType":"1580","messageId":"1581","endLine":670,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1654","line":671,"column":11,"nodeType":"1580","messageId":"1581","endLine":671,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1658","line":675,"column":31,"nodeType":"1580","messageId":"1581","endLine":675,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1659","line":679,"column":13,"nodeType":"1580","messageId":"1581","endLine":679,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1660","line":688,"column":12,"nodeType":"1580","messageId":"1581","endLine":688,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1661","line":694,"column":9,"nodeType":"1580","messageId":"1581","endLine":694,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1662","line":729,"column":9,"nodeType":"1580","messageId":"1581","endLine":729,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1663","line":793,"column":13,"nodeType":"1580","messageId":"1581","endLine":793,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1664","line":795,"column":13,"nodeType":"1580","messageId":"1581","endLine":795,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":804,"column":13,"nodeType":"1580","messageId":"1581","endLine":804,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1665","line":811,"column":11,"nodeType":"1580","messageId":"1581","endLine":811,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1666","line":817,"column":11,"nodeType":"1580","messageId":"1581","endLine":817,"endColumn":38},{"ruleId":"1602","severity":1,"message":"1603","line":843,"column":29,"nodeType":"1604","messageId":"1605","endLine":843,"endColumn":40,"fix":"1667"},{"ruleId":"1582","severity":1,"message":"1668","line":855,"column":31,"nodeType":"1580","messageId":"1581","endLine":855,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1669","line":876,"column":29,"nodeType":"1580","messageId":"1581","endLine":876,"endColumn":40},{"ruleId":"1582","severity":1,"message":"1670","line":878,"column":29,"nodeType":"1580","messageId":"1581","endLine":878,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1671","line":914,"column":17,"nodeType":"1580","messageId":"1581","endLine":914,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1601","line":949,"column":16,"nodeType":"1580","messageId":"1581","endLine":949,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1672","line":970,"column":8,"nodeType":"1639","endLine":970,"endColumn":16,"suggestions":"1673"},{"ruleId":"1637","severity":1,"message":"1674","line":983,"column":8,"nodeType":"1639","endLine":983,"endColumn":41,"suggestions":"1675"},{"ruleId":"1582","severity":1,"message":"1676","line":1263,"column":21,"nodeType":"1580","messageId":"1581","endLine":1263,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1677","line":1273,"column":12,"nodeType":"1580","messageId":"1581","endLine":1273,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1678","line":1273,"column":23,"nodeType":"1580","messageId":"1581","endLine":1273,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1679","line":1280,"column":26,"nodeType":"1580","messageId":"1581","endLine":1280,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1601","line":1287,"column":16,"nodeType":"1580","messageId":"1581","endLine":1287,"endColumn":20},{"ruleId":"1602","severity":1,"message":"1603","line":1322,"column":40,"nodeType":"1604","messageId":"1605","endLine":1322,"endColumn":51,"fix":"1680"},{"ruleId":"1582","severity":1,"message":"1681","line":1323,"column":21,"nodeType":"1580","messageId":"1581","endLine":1323,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1682","line":1369,"column":19,"nodeType":"1580","messageId":"1581","endLine":1369,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1683","line":1370,"column":19,"nodeType":"1580","messageId":"1581","endLine":1370,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1684","line":1371,"column":19,"nodeType":"1580","messageId":"1581","endLine":1371,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1685","line":1397,"column":19,"nodeType":"1580","messageId":"1581","endLine":1397,"endColumn":27},{"ruleId":"1637","severity":1,"message":"1686","line":1464,"column":8,"nodeType":"1639","endLine":1464,"endColumn":16,"suggestions":"1687"},{"ruleId":"1637","severity":1,"message":"1688","line":1492,"column":8,"nodeType":"1639","endLine":1492,"endColumn":20,"suggestions":"1689"},{"ruleId":"1637","severity":1,"message":"1690","line":1501,"column":8,"nodeType":"1639","endLine":1501,"endColumn":30,"suggestions":"1691"},{"ruleId":"1582","severity":1,"message":"1586","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1692","line":2,"column":18,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1693","line":3,"column":16,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1694","line":3,"column":29,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1695","line":5,"column":10,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1621","line":19,"column":10,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1696","line":19,"column":31,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1622","line":19,"column":61,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1601","line":27,"column":12,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1611","line":4,"column":49,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1595","line":6,"column":33,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1596","line":6,"column":48,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1615","line":6,"column":61,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1697","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1698","line":7,"column":17,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1699","line":7,"column":35,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1700","line":24,"column":10,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1701","line":25,"column":10,"nodeType":"1580","messageId":"1581","endLine":25,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1702","line":49,"column":5,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1703","line":61,"column":8,"nodeType":"1580","messageId":"1581","endLine":61,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1704","line":62,"column":8,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1705","line":63,"column":8,"nodeType":"1580","messageId":"1581","endLine":63,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1706","line":64,"column":8,"nodeType":"1580","messageId":"1581","endLine":64,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1707","line":93,"column":5,"nodeType":"1580","messageId":"1581","endLine":93,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1708","line":98,"column":5,"nodeType":"1580","messageId":"1581","endLine":98,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1620","line":99,"column":5,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1709","line":102,"column":5,"nodeType":"1580","messageId":"1581","endLine":102,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1710","line":103,"column":5,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1711","line":104,"column":5,"nodeType":"1580","messageId":"1581","endLine":104,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1712","line":114,"column":48,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":61},{"ruleId":"1582","severity":1,"message":"1622","line":114,"column":76,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1713","line":120,"column":8,"nodeType":"1580","messageId":"1581","endLine":120,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1625","line":130,"column":7,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1714","line":137,"column":7,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1715","line":154,"column":7,"nodeType":"1580","messageId":"1581","endLine":154,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1716","line":164,"column":7,"nodeType":"1580","messageId":"1581","endLine":164,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1626","line":195,"column":9,"nodeType":"1580","messageId":"1581","endLine":195,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1627","line":206,"column":10,"nodeType":"1580","messageId":"1581","endLine":206,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1646","line":227,"column":21,"nodeType":"1580","messageId":"1581","endLine":227,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1668","line":241,"column":23,"nodeType":"1580","messageId":"1581","endLine":241,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1717","line":268,"column":21,"nodeType":"1580","messageId":"1581","endLine":268,"endColumn":29},{"ruleId":"1637","severity":1,"message":"1718","line":296,"column":34,"nodeType":"1719","endLine":296,"endColumn":77},{"ruleId":"1582","severity":1,"message":"1601","line":305,"column":16,"nodeType":"1580","messageId":"1581","endLine":305,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1720","line":335,"column":11,"nodeType":"1580","messageId":"1581","endLine":335,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1721","line":338,"column":18,"nodeType":"1580","messageId":"1581","endLine":338,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1722","line":347,"column":36,"nodeType":"1580","messageId":"1581","endLine":347,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1723","line":348,"column":12,"nodeType":"1580","messageId":"1581","endLine":348,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1724","line":348,"column":34,"nodeType":"1580","messageId":"1581","endLine":348,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1725","line":349,"column":31,"nodeType":"1580","messageId":"1581","endLine":349,"endColumn":50},{"ruleId":"1582","severity":1,"message":"1726","line":354,"column":34,"nodeType":"1580","messageId":"1581","endLine":354,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1660","line":369,"column":12,"nodeType":"1580","messageId":"1581","endLine":369,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1664","line":399,"column":13,"nodeType":"1580","messageId":"1581","endLine":399,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":408,"column":13,"nodeType":"1580","messageId":"1581","endLine":408,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":416,"column":11,"nodeType":"1580","messageId":"1581","endLine":416,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1728","line":424,"column":11,"nodeType":"1580","messageId":"1581","endLine":424,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1729","line":434,"column":11,"nodeType":"1580","messageId":"1581","endLine":434,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1730","line":441,"column":11,"nodeType":"1580","messageId":"1581","endLine":441,"endColumn":25},{"ruleId":"1637","severity":1,"message":"1731","line":614,"column":8,"nodeType":"1639","endLine":614,"endColumn":19,"suggestions":"1732"},{"ruleId":"1733","severity":1,"message":"1734","line":638,"column":47,"nodeType":"1735","messageId":"1736","endLine":638,"endColumn":49},{"ruleId":"1637","severity":1,"message":"1737","line":811,"column":8,"nodeType":"1639","endLine":811,"endColumn":42,"suggestions":"1738"},{"ruleId":"1637","severity":1,"message":"1739","line":825,"column":8,"nodeType":"1639","endLine":825,"endColumn":14,"suggestions":"1740"},{"ruleId":"1582","severity":1,"message":"1601","line":827,"column":16,"nodeType":"1580","messageId":"1581","endLine":827,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1741","line":1241,"column":87,"nodeType":"1644","messageId":"1645","endLine":1241,"endColumn":89},{"ruleId":"1582","severity":1,"message":"1631","line":1604,"column":10,"nodeType":"1580","messageId":"1581","endLine":1604,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1632","line":1615,"column":10,"nodeType":"1580","messageId":"1581","endLine":1615,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1633","line":1625,"column":6,"nodeType":"1580","messageId":"1581","endLine":1625,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1742","line":1631,"column":12,"nodeType":"1580","messageId":"1581","endLine":1631,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1743","line":1631,"column":24,"nodeType":"1580","messageId":"1581","endLine":1631,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1744","line":1633,"column":12,"nodeType":"1580","messageId":"1581","endLine":1633,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1646","line":1633,"column":21,"nodeType":"1580","messageId":"1581","endLine":1633,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1679","line":1639,"column":26,"nodeType":"1580","messageId":"1581","endLine":1639,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1745","line":1644,"column":24,"nodeType":"1580","messageId":"1581","endLine":1644,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1746","line":1649,"column":14,"nodeType":"1580","messageId":"1581","endLine":1649,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1747","line":1663,"column":11,"nodeType":"1580","messageId":"1581","endLine":1663,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1748","line":1673,"column":26,"nodeType":"1580","messageId":"1581","endLine":1673,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1659","line":1679,"column":17,"nodeType":"1580","messageId":"1581","endLine":1679,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1635","line":1682,"column":15,"nodeType":"1580","messageId":"1581","endLine":1682,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1668","line":1689,"column":27,"nodeType":"1580","messageId":"1581","endLine":1689,"endColumn":31},{"ruleId":"1637","severity":1,"message":"1749","line":1728,"column":12,"nodeType":"1639","endLine":1728,"endColumn":22,"suggestions":"1750"},{"ruleId":"1637","severity":1,"message":"1751","line":1783,"column":8,"nodeType":"1639","endLine":1783,"endColumn":23,"suggestions":"1752"},{"ruleId":"1582","severity":1,"message":"1601","line":1791,"column":16,"nodeType":"1580","messageId":"1581","endLine":1791,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1753","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1694","line":3,"column":29,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1754","line":5,"column":9,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1755","line":14,"column":8,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1756","line":18,"column":5,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1757","line":23,"column":5,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1758","line":24,"column":5,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":9},{"ruleId":"1582","severity":1,"message":"1759","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1760","line":55,"column":11,"nodeType":"1580","messageId":"1581","endLine":55,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1625","line":103,"column":7,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1761","line":111,"column":13,"nodeType":"1580","messageId":"1581","endLine":111,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1762","line":112,"column":12,"nodeType":"1580","messageId":"1581","endLine":112,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1763","line":112,"column":27,"nodeType":"1580","messageId":"1581","endLine":112,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1764","line":114,"column":12,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1765","line":114,"column":24,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1766","line":115,"column":12,"nodeType":"1580","messageId":"1581","endLine":115,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1767","line":115,"column":23,"nodeType":"1580","messageId":"1581","endLine":115,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1768","line":116,"column":12,"nodeType":"1580","messageId":"1581","endLine":116,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1769","line":116,"column":20,"nodeType":"1580","messageId":"1581","endLine":116,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1770","line":117,"column":23,"nodeType":"1580","messageId":"1581","endLine":117,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1771","line":118,"column":12,"nodeType":"1580","messageId":"1581","endLine":118,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1772","line":121,"column":11,"nodeType":"1580","messageId":"1581","endLine":121,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1773","line":125,"column":11,"nodeType":"1580","messageId":"1581","endLine":125,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1774","line":126,"column":11,"nodeType":"1580","messageId":"1581","endLine":126,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1775","line":130,"column":11,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1776","line":176,"column":11,"nodeType":"1580","messageId":"1581","endLine":176,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1777","line":177,"column":11,"nodeType":"1580","messageId":"1581","endLine":177,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1778","line":179,"column":11,"nodeType":"1580","messageId":"1581","endLine":179,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1779","line":188,"column":11,"nodeType":"1580","messageId":"1581","endLine":188,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1780","line":208,"column":11,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1781","line":213,"column":14,"nodeType":"1580","messageId":"1581","endLine":213,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1782","line":238,"column":11,"nodeType":"1580","messageId":"1581","endLine":238,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1601","line":245,"column":16,"nodeType":"1580","messageId":"1581","endLine":245,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1783","line":1,"column":23,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1784","line":17,"column":7,"nodeType":"1580","messageId":"1581","endLine":17,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1601","line":39,"column":14,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1785","line":1,"column":32,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1786","line":21,"column":7,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1787","line":96,"column":9,"nodeType":"1580","messageId":"1581","endLine":96,"endColumn":11},{"ruleId":"1642","severity":1,"message":"1643","line":114,"column":36,"nodeType":"1644","messageId":"1645","endLine":114,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1787","line":132,"column":9,"nodeType":"1580","messageId":"1581","endLine":132,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1788","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":38,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1789","line":2,"column":16,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1790","line":2,"column":27,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":42},{"ruleId":"1582","severity":1,"message":"1614","line":9,"column":23,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1611","line":14,"column":49,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1708","line":48,"column":5,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1744","line":74,"column":12,"nodeType":"1580","messageId":"1581","endLine":74,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":76,"column":12,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1791","line":77,"column":12,"nodeType":"1580","messageId":"1581","endLine":77,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1792","line":78,"column":12,"nodeType":"1580","messageId":"1581","endLine":78,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1793","line":80,"column":24,"nodeType":"1580","messageId":"1581","endLine":80,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1794","line":86,"column":11,"nodeType":"1580","messageId":"1581","endLine":86,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1795","line":90,"column":11,"nodeType":"1580","messageId":"1581","endLine":90,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1796","line":99,"column":11,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1797","line":103,"column":11,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":35},{"ruleId":"1637","severity":1,"message":"1798","line":163,"column":7,"nodeType":"1639","endLine":163,"endColumn":9,"suggestions":"1799"},{"ruleId":"1582","severity":1,"message":"1800","line":199,"column":19,"nodeType":"1580","messageId":"1581","endLine":199,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1801","line":200,"column":12,"nodeType":"1580","messageId":"1581","endLine":200,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1802","line":201,"column":12,"nodeType":"1580","messageId":"1581","endLine":201,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1803","line":203,"column":12,"nodeType":"1580","messageId":"1581","endLine":203,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1659","line":206,"column":13,"nodeType":"1580","messageId":"1581","endLine":206,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1804","line":208,"column":12,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1805","line":208,"column":25,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1669","line":221,"column":21,"nodeType":"1580","messageId":"1581","endLine":221,"endColumn":32},{"ruleId":"1637","severity":1,"message":"1806","line":245,"column":12,"nodeType":"1639","endLine":245,"endColumn":21,"suggestions":"1807"},{"ruleId":"1582","severity":1,"message":"1601","line":251,"column":20,"nodeType":"1580","messageId":"1581","endLine":251,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1603","line":401,"column":29,"nodeType":"1604","messageId":"1605","endLine":401,"endColumn":40,"fix":"1808"},{"ruleId":"1582","severity":1,"message":"1668","line":406,"column":31,"nodeType":"1580","messageId":"1581","endLine":406,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1809","line":449,"column":19,"nodeType":"1580","messageId":"1581","endLine":449,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1810","line":473,"column":17,"nodeType":"1580","messageId":"1581","endLine":473,"endColumn":25},{"ruleId":"1811","severity":1,"message":"1812","line":474,"column":22,"nodeType":"1580","messageId":"1813","endLine":474,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1814","line":483,"column":33,"nodeType":"1580","messageId":"1581","endLine":483,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1815","line":484,"column":33,"nodeType":"1580","messageId":"1581","endLine":484,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1816","line":500,"column":41,"nodeType":"1580","messageId":"1581","endLine":500,"endColumn":45},{"ruleId":"1811","severity":1,"message":"1817","line":567,"column":22,"nodeType":"1580","messageId":"1813","endLine":567,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1818","line":5,"column":18,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1819","line":6,"column":20,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1620","line":33,"column":30,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1695","line":33,"column":49,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1709","line":33,"column":79,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1657","line":39,"column":20,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1820","line":40,"column":18,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1652","line":42,"column":12,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":42,"column":18,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1821","line":43,"column":11,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1659","line":45,"column":13,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1822","line":46,"column":12,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":46,"column":26,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1824","line":47,"column":12,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1825","line":47,"column":25,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1660","line":49,"column":12,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1826","line":49,"column":28,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":45},{"ruleId":"1582","severity":1,"message":"1827","line":51,"column":13,"nodeType":"1580","messageId":"1581","endLine":51,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1795","line":58,"column":11,"nodeType":"1580","messageId":"1581","endLine":58,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1828","line":135,"column":25,"nodeType":"1580","messageId":"1581","endLine":135,"endColumn":35},{"ruleId":"1637","severity":1,"message":"1829","line":165,"column":12,"nodeType":"1639","endLine":165,"endColumn":14,"suggestions":"1830"},{"ruleId":"1582","severity":1,"message":"1831","line":224,"column":28,"nodeType":"1580","messageId":"1581","endLine":224,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1832","line":225,"column":31,"nodeType":"1580","messageId":"1581","endLine":225,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1601","line":228,"column":20,"nodeType":"1580","messageId":"1581","endLine":228,"endColumn":24},{"ruleId":"1637","severity":1,"message":"1833","line":278,"column":8,"nodeType":"1639","endLine":278,"endColumn":10,"suggestions":"1834"},{"ruleId":"1582","severity":1,"message":"1601","line":280,"column":16,"nodeType":"1580","messageId":"1581","endLine":280,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1818","line":18,"column":5,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1835","line":27,"column":5,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1836","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1837","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1838","line":39,"column":5,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1839","line":40,"column":5,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1840","line":41,"column":5,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1841","line":42,"column":5,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1842","line":43,"column":5,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1843","line":44,"column":5,"nodeType":"1580","messageId":"1581","endLine":44,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1844","line":45,"column":5,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1845","line":46,"column":5,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1846","line":47,"column":5,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1847","line":48,"column":5,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1848","line":50,"column":5,"nodeType":"1580","messageId":"1581","endLine":50,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1849","line":53,"column":5,"nodeType":"1580","messageId":"1581","endLine":53,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1850","line":54,"column":5,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1851","line":56,"column":5,"nodeType":"1580","messageId":"1581","endLine":56,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1762","line":75,"column":12,"nodeType":"1580","messageId":"1581","endLine":75,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1763","line":75,"column":27,"nodeType":"1580","messageId":"1581","endLine":75,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1601","line":100,"column":16,"nodeType":"1580","messageId":"1581","endLine":100,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1614","line":7,"column":23,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":8,"column":33,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1615","line":8,"column":61,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1783","line":10,"column":10,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1692","line":10,"column":30,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1852","line":19,"column":5,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1698","line":20,"column":5,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1853","line":28,"column":5,"nodeType":"1580","messageId":"1581","endLine":28,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1854","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1855","line":30,"column":5,"nodeType":"1580","messageId":"1581","endLine":30,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1856","line":62,"column":22,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1709","line":68,"column":79,"nodeType":"1580","messageId":"1581","endLine":68,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1624","line":76,"column":7,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1647","line":125,"column":28,"nodeType":"1580","messageId":"1581","endLine":125,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1650","line":130,"column":30,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1857","line":131,"column":12,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1651","line":131,"column":34,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1858","line":133,"column":12,"nodeType":"1580","messageId":"1581","endLine":133,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1800","line":134,"column":19,"nodeType":"1580","messageId":"1581","endLine":134,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1801","line":135,"column":12,"nodeType":"1580","messageId":"1581","endLine":135,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1802","line":136,"column":12,"nodeType":"1580","messageId":"1581","endLine":136,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1652","line":137,"column":12,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":137,"column":18,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1654","line":140,"column":11,"nodeType":"1580","messageId":"1581","endLine":140,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1859","line":146,"column":11,"nodeType":"1580","messageId":"1581","endLine":146,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1860","line":150,"column":11,"nodeType":"1580","messageId":"1581","endLine":150,"endColumn":28},{"ruleId":"1811","severity":1,"message":"1861","line":358,"column":30,"nodeType":"1580","messageId":"1813","endLine":358,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1862","line":485,"column":17,"nodeType":"1580","messageId":"1581","endLine":485,"endColumn":38},{"ruleId":"1811","severity":1,"message":"1812","line":497,"column":22,"nodeType":"1580","messageId":"1813","endLine":497,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1863","line":545,"column":37,"nodeType":"1580","messageId":"1581","endLine":545,"endColumn":48},{"ruleId":"1864","severity":1,"message":"1865","line":555,"column":37,"nodeType":"1866","messageId":"1867","endLine":779,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1816","line":565,"column":53,"nodeType":"1580","messageId":"1581","endLine":565,"endColumn":57},{"ruleId":"1811","severity":1,"message":"1817","line":628,"column":82,"nodeType":"1580","messageId":"1813","endLine":628,"endColumn":83},{"ruleId":"1811","severity":1,"message":"1817","line":633,"column":82,"nodeType":"1580","messageId":"1813","endLine":633,"endColumn":83},{"ruleId":"1642","severity":1,"message":"1741","line":715,"column":119,"nodeType":"1644","messageId":"1645","endLine":715,"endColumn":121},{"ruleId":"1642","severity":1,"message":"1643","line":721,"column":122,"nodeType":"1644","messageId":"1645","endLine":721,"endColumn":124},{"ruleId":"1864","severity":1,"message":"1865","line":749,"column":61,"nodeType":"1866","messageId":"1867","endLine":773,"endColumn":62},{"ruleId":"1811","severity":1,"message":"1817","line":754,"column":78,"nodeType":"1580","messageId":"1813","endLine":754,"endColumn":79},{"ruleId":"1811","severity":1,"message":"1817","line":837,"column":22,"nodeType":"1580","messageId":"1813","endLine":837,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1868","line":894,"column":17,"nodeType":"1580","messageId":"1581","endLine":894,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1869","line":898,"column":21,"nodeType":"1580","messageId":"1581","endLine":898,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1601","line":907,"column":16,"nodeType":"1580","messageId":"1581","endLine":907,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1870","line":918,"column":8,"nodeType":"1639","endLine":918,"endColumn":32,"suggestions":"1871"},{"ruleId":"1642","severity":1,"message":"1741","line":932,"column":27,"nodeType":"1644","messageId":"1645","endLine":932,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1872","line":52,"column":8,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1873","line":58,"column":5,"nodeType":"1580","messageId":"1581","endLine":58,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1874","line":59,"column":5,"nodeType":"1580","messageId":"1581","endLine":59,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1875","line":62,"column":5,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1695","line":66,"column":5,"nodeType":"1580","messageId":"1581","endLine":66,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1852","line":77,"column":5,"nodeType":"1580","messageId":"1581","endLine":77,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1698","line":78,"column":5,"nodeType":"1580","messageId":"1581","endLine":78,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1876","line":88,"column":10,"nodeType":"1580","messageId":"1581","endLine":88,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1877","line":89,"column":10,"nodeType":"1580","messageId":"1581","endLine":89,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1624","line":109,"column":7,"nodeType":"1580","messageId":"1581","endLine":109,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1714","line":122,"column":7,"nodeType":"1580","messageId":"1581","endLine":122,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1715","line":139,"column":7,"nodeType":"1580","messageId":"1581","endLine":139,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1716","line":149,"column":7,"nodeType":"1580","messageId":"1581","endLine":149,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1878","line":200,"column":11,"nodeType":"1580","messageId":"1581","endLine":200,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1681","line":202,"column":24,"nodeType":"1580","messageId":"1581","endLine":202,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1728","line":204,"column":11,"nodeType":"1580","messageId":"1581","endLine":204,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":219,"column":11,"nodeType":"1580","messageId":"1581","endLine":219,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":227,"column":16,"nodeType":"1580","messageId":"1581","endLine":227,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1879","line":308,"column":7,"nodeType":"1639","endLine":308,"endColumn":9,"suggestions":"1880"},{"ruleId":"1582","severity":1,"message":"1681","line":417,"column":24,"nodeType":"1580","messageId":"1581","endLine":417,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1728","line":418,"column":11,"nodeType":"1580","messageId":"1581","endLine":418,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":433,"column":11,"nodeType":"1580","messageId":"1581","endLine":433,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":493,"column":16,"nodeType":"1580","messageId":"1581","endLine":493,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1681","line":586,"column":24,"nodeType":"1580","messageId":"1581","endLine":586,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1881","line":589,"column":11,"nodeType":"1580","messageId":"1581","endLine":589,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1727","line":601,"column":11,"nodeType":"1580","messageId":"1581","endLine":601,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":609,"column":16,"nodeType":"1580","messageId":"1581","endLine":609,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1882","line":807,"column":21,"nodeType":"1580","messageId":"1581","endLine":807,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1883","line":821,"column":11,"nodeType":"1580","messageId":"1581","endLine":821,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1884","line":831,"column":11,"nodeType":"1580","messageId":"1581","endLine":831,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1885","line":844,"column":11,"nodeType":"1580","messageId":"1581","endLine":844,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1886","line":960,"column":11,"nodeType":"1580","messageId":"1581","endLine":960,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1887","line":1112,"column":13,"nodeType":"1580","messageId":"1581","endLine":1112,"endColumn":27},{"ruleId":"1811","severity":1,"message":"1812","line":1125,"column":22,"nodeType":"1580","messageId":"1813","endLine":1125,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1888","line":1137,"column":33,"nodeType":"1580","messageId":"1581","endLine":1137,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1889","line":1138,"column":33,"nodeType":"1580","messageId":"1581","endLine":1138,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1863","line":1144,"column":33,"nodeType":"1580","messageId":"1581","endLine":1144,"endColumn":44},{"ruleId":"1864","severity":1,"message":"1865","line":1147,"column":29,"nodeType":"1866","messageId":"1867","endLine":1348,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1816","line":1156,"column":45,"nodeType":"1580","messageId":"1581","endLine":1156,"endColumn":49},{"ruleId":"1864","severity":1,"message":"1865","line":1206,"column":53,"nodeType":"1866","messageId":"1867","endLine":1281,"endColumn":54},{"ruleId":"1864","severity":1,"message":"1865","line":1218,"column":61,"nodeType":"1866","messageId":"1867","endLine":1279,"endColumn":62},{"ruleId":"1811","severity":1,"message":"1817","line":1288,"column":58,"nodeType":"1580","messageId":"1813","endLine":1288,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1890","line":1477,"column":11,"nodeType":"1580","messageId":"1581","endLine":1477,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1601","line":1532,"column":16,"nodeType":"1580","messageId":"1581","endLine":1532,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1891","line":1810,"column":8,"nodeType":"1639","endLine":1810,"endColumn":32,"suggestions":"1892"},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1894","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1895","line":56,"column":11,"nodeType":"1580","messageId":"1581","endLine":56,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1896","line":2,"column":8,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1897","line":3,"column":8,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":16},{"ruleId":"1642","severity":1,"message":"1643","line":20,"column":23,"nodeType":"1644","messageId":"1645","endLine":20,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":1,"column":21,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1609","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1898","line":2,"column":14,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1899","line":5,"column":3,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1900","line":6,"column":3,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1901","line":8,"column":3,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1902","line":9,"column":3,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1903","line":10,"column":3,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1904","line":11,"column":3,"nodeType":"1580","messageId":"1581","endLine":11,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1905","line":12,"column":3,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1906","line":16,"column":3,"nodeType":"1580","messageId":"1581","endLine":16,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1907","line":20,"column":3,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1908","line":21,"column":3,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1909","line":23,"column":3,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1910","line":29,"column":10,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1911","line":82,"column":11,"nodeType":"1580","messageId":"1581","endLine":82,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1912","line":83,"column":11,"nodeType":"1580","messageId":"1581","endLine":83,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1913","line":84,"column":11,"nodeType":"1580","messageId":"1581","endLine":84,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1914","line":119,"column":9,"nodeType":"1580","messageId":"1581","endLine":119,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1915","line":140,"column":9,"nodeType":"1580","messageId":"1581","endLine":140,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1916","line":168,"column":9,"nodeType":"1580","messageId":"1581","endLine":168,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1894","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1699","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1595","line":7,"column":21,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1918","line":23,"column":7,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1919","line":131,"column":11,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1895","line":133,"column":11,"nodeType":"1580","messageId":"1581","endLine":133,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1623","line":19,"column":10,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1595","line":7,"column":21,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1699","line":21,"column":10,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1595","line":4,"column":3,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1896","line":27,"column":8,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1920","line":93,"column":9,"nodeType":"1580","messageId":"1581","endLine":93,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1921","line":99,"column":9,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":19},{"ruleId":"1642","severity":1,"message":"1741","line":453,"column":27,"nodeType":"1644","messageId":"1645","endLine":453,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1637","severity":1,"message":"1922","line":74,"column":6,"nodeType":"1639","endLine":74,"endColumn":20,"suggestions":"1923"},{"ruleId":"1642","severity":1,"message":"1643","line":61,"column":16,"nodeType":"1644","messageId":"1645","endLine":61,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1788","line":2,"column":17,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1608","line":2,"column":28,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1924","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1925","line":5,"column":10,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1926","line":7,"column":33,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1586","line":9,"column":10,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1927","line":10,"column":10,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1617","line":19,"column":5,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1928","line":24,"column":5,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1929","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1930","line":33,"column":5,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1931","line":34,"column":5,"nodeType":"1580","messageId":"1581","endLine":34,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1932","line":52,"column":27,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1623","line":54,"column":10,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1933","line":54,"column":32,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1679","line":70,"column":26,"nodeType":"1580","messageId":"1581","endLine":70,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1601","line":74,"column":16,"nodeType":"1580","messageId":"1581","endLine":74,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1934","line":182,"column":17,"nodeType":"1580","messageId":"1581","endLine":182,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1690","line":212,"column":8,"nodeType":"1639","endLine":212,"endColumn":30,"suggestions":"1935"},{"ruleId":"1637","severity":1,"message":"1936","line":225,"column":8,"nodeType":"1639","endLine":225,"endColumn":16,"suggestions":"1937"},{"ruleId":"1582","severity":1,"message":"1788","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1873","line":35,"column":5,"nodeType":"1580","messageId":"1581","endLine":35,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1874","line":36,"column":5,"nodeType":"1580","messageId":"1581","endLine":36,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1707","line":37,"column":5,"nodeType":"1580","messageId":"1581","endLine":37,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1938","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1600","line":40,"column":5,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1893","line":41,"column":5,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1620","line":43,"column":5,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1695","line":44,"column":5,"nodeType":"1580","messageId":"1581","endLine":44,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1709","line":46,"column":5,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1696","line":52,"column":31,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1712","line":52,"column":48,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":61},{"ruleId":"1582","severity":1,"message":"1932","line":52,"column":63,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":74},{"ruleId":"1582","severity":1,"message":"1622","line":52,"column":76,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1822","line":76,"column":12,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":76,"column":26,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1744","line":79,"column":12,"nodeType":"1580","messageId":"1581","endLine":79,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":80,"column":12,"nodeType":"1580","messageId":"1581","endLine":80,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1664","line":158,"column":13,"nodeType":"1580","messageId":"1581","endLine":158,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":167,"column":13,"nodeType":"1580","messageId":"1581","endLine":167,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1939","line":178,"column":7,"nodeType":"1639","endLine":178,"endColumn":9,"suggestions":"1940"},{"ruleId":"1582","severity":1,"message":"1822","line":232,"column":12,"nodeType":"1580","messageId":"1581","endLine":232,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":232,"column":26,"nodeType":"1580","messageId":"1581","endLine":232,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1744","line":234,"column":12,"nodeType":"1580","messageId":"1581","endLine":234,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":236,"column":12,"nodeType":"1580","messageId":"1581","endLine":236,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1794","line":249,"column":11,"nodeType":"1580","messageId":"1581","endLine":249,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1727","line":254,"column":11,"nodeType":"1580","messageId":"1581","endLine":254,"endColumn":18},{"ruleId":"1642","severity":1,"message":"1741","line":363,"column":30,"nodeType":"1644","messageId":"1645","endLine":363,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1664","line":525,"column":17,"nodeType":"1580","messageId":"1581","endLine":525,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1664","line":534,"column":13,"nodeType":"1580","messageId":"1581","endLine":534,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1798","line":545,"column":7,"nodeType":"1639","endLine":545,"endColumn":9,"suggestions":"1941"},{"ruleId":"1582","severity":1,"message":"1788","line":2,"column":17,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1753","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1925","line":4,"column":10,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1942","line":6,"column":8,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1943","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1944","line":12,"column":5,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1928","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1945","line":16,"column":5,"nodeType":"1580","messageId":"1581","endLine":16,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1695","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1623","line":21,"column":10,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1653","line":24,"column":18,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1753","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1700","line":6,"column":28,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1946","line":6,"column":48,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":66},{"ruleId":"1582","severity":1,"message":"1701","line":8,"column":10,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1947","line":13,"column":10,"nodeType":"1580","messageId":"1581","endLine":13,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1948","line":21,"column":8,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1949","line":21,"column":20,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1950","line":23,"column":10,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1944","line":26,"column":5,"nodeType":"1580","messageId":"1581","endLine":26,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1588","line":28,"column":5,"nodeType":"1580","messageId":"1581","endLine":28,"endColumn":8},{"ruleId":"1582","severity":1,"message":"1951","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1952","line":30,"column":5,"nodeType":"1580","messageId":"1581","endLine":30,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1953","line":31,"column":5,"nodeType":"1580","messageId":"1581","endLine":31,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1945","line":32,"column":5,"nodeType":"1580","messageId":"1581","endLine":32,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1954","line":33,"column":5,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1955","line":38,"column":8,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1620","line":40,"column":30,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1695","line":40,"column":49,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1956","line":40,"column":64,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":77},{"ruleId":"1582","severity":1,"message":"1709","line":40,"column":79,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1932","line":41,"column":10,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1657","line":45,"column":20,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1957","line":46,"column":12,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1820","line":46,"column":18,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1652","line":48,"column":12,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":48,"column":18,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1659","line":51,"column":13,"nodeType":"1580","messageId":"1581","endLine":51,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1827","line":54,"column":13,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1654","line":61,"column":11,"nodeType":"1580","messageId":"1581","endLine":61,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1795","line":63,"column":11,"nodeType":"1580","messageId":"1581","endLine":63,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1662","line":92,"column":9,"nodeType":"1580","messageId":"1581","endLine":92,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1603","line":142,"column":29,"nodeType":"1604","messageId":"1605","endLine":142,"endColumn":40,"fix":"1958"},{"ruleId":"1582","severity":1,"message":"1668","line":155,"column":31,"nodeType":"1580","messageId":"1581","endLine":155,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1669","line":176,"column":29,"nodeType":"1580","messageId":"1581","endLine":176,"endColumn":40},{"ruleId":"1582","severity":1,"message":"1670","line":178,"column":29,"nodeType":"1580","messageId":"1581","endLine":178,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1959","line":219,"column":8,"nodeType":"1639","endLine":219,"endColumn":22,"suggestions":"1960"},{"ruleId":"1637","severity":1,"message":"1833","line":225,"column":8,"nodeType":"1639","endLine":225,"endColumn":10,"suggestions":"1961"},{"ruleId":"1582","severity":1,"message":"1943","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1616","line":10,"column":5,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1617","line":11,"column":5,"nodeType":"1580","messageId":"1581","endLine":11,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1636","line":26,"column":11,"nodeType":"1580","messageId":"1581","endLine":26,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1635","line":34,"column":15,"nodeType":"1580","messageId":"1581","endLine":34,"endColumn":32},{"ruleId":"1637","severity":1,"message":"1638","line":80,"column":12,"nodeType":"1639","endLine":80,"endColumn":28,"suggestions":"1962"},{"ruleId":"1578","severity":1,"message":"1579","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1963","replacedBy":"1964"},{"ruleId":"1965","replacedBy":"1966"},{"ruleId":"1582","severity":1,"message":"1583","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1584","line":1,"column":21,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":32,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1586","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1587","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1588","line":12,"column":3,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":6},{"ruleId":"1582","severity":1,"message":"1589","line":22,"column":10,"nodeType":"1580","messageId":"1581","endLine":22,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1590","line":22,"column":61,"nodeType":"1580","messageId":"1581","endLine":22,"endColumn":70},{"ruleId":"1582","severity":1,"message":"1591","line":23,"column":32,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1592","line":23,"column":45,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1593","line":24,"column":10,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1594","line":24,"column":22,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1595","line":24,"column":31,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1596","line":24,"column":46,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1597","line":24,"column":59,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":72},{"ruleId":"1582","severity":1,"message":"1598","line":25,"column":10,"nodeType":"1580","messageId":"1581","endLine":25,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1599","line":27,"column":10,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1600","line":65,"column":10,"nodeType":"1580","messageId":"1581","endLine":65,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1601","line":68,"column":14,"nodeType":"1580","messageId":"1581","endLine":68,"endColumn":18},{"ruleId":"1963","replacedBy":"1964"},{"ruleId":"1965","replacedBy":"1966"},{"ruleId":"1602","severity":1,"message":"1603","line":36,"column":35,"nodeType":"1604","messageId":"1605","endLine":118,"endColumn":2,"fix":"1967"},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":38,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1608","line":1,"column":57,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":65},{"ruleId":"1582","severity":1,"message":"1609","line":6,"column":8,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1610","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1611","line":18,"column":49,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1612","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1613","line":20,"column":42,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":53},{"ruleId":"1582","severity":1,"message":"1614","line":26,"column":23,"nodeType":"1580","messageId":"1581","endLine":26,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":27,"column":33,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1596","line":27,"column":48,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1615","line":27,"column":61,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1616","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1617","line":39,"column":5,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1618","line":73,"column":8,"nodeType":"1580","messageId":"1581","endLine":73,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1619","line":87,"column":8,"nodeType":"1580","messageId":"1581","endLine":87,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1620","line":90,"column":30,"nodeType":"1580","messageId":"1581","endLine":90,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1621","line":97,"column":10,"nodeType":"1580","messageId":"1581","endLine":97,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1622","line":97,"column":61,"nodeType":"1580","messageId":"1581","endLine":97,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1623","line":98,"column":10,"nodeType":"1580","messageId":"1581","endLine":98,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1624","line":102,"column":7,"nodeType":"1580","messageId":"1581","endLine":102,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1625","line":108,"column":7,"nodeType":"1580","messageId":"1581","endLine":108,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1626","line":128,"column":9,"nodeType":"1580","messageId":"1581","endLine":128,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1627","line":139,"column":10,"nodeType":"1580","messageId":"1581","endLine":139,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1628","line":143,"column":10,"nodeType":"1580","messageId":"1581","endLine":143,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1629","line":147,"column":10,"nodeType":"1580","messageId":"1581","endLine":147,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1630","line":163,"column":7,"nodeType":"1580","messageId":"1581","endLine":163,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1601","line":189,"column":16,"nodeType":"1580","messageId":"1581","endLine":189,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1631","line":257,"column":10,"nodeType":"1580","messageId":"1581","endLine":257,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1632","line":268,"column":10,"nodeType":"1580","messageId":"1581","endLine":268,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1633","line":278,"column":6,"nodeType":"1580","messageId":"1581","endLine":278,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1634","line":283,"column":7,"nodeType":"1580","messageId":"1581","endLine":283,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1635","line":291,"column":15,"nodeType":"1580","messageId":"1581","endLine":291,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1636","line":295,"column":15,"nodeType":"1580","messageId":"1581","endLine":295,"endColumn":24},{"ruleId":"1637","severity":1,"message":"1638","line":330,"column":12,"nodeType":"1639","endLine":330,"endColumn":28,"suggestions":"1968"},{"ruleId":"1582","severity":1,"message":"1641","line":433,"column":7,"nodeType":"1580","messageId":"1581","endLine":433,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1601","line":449,"column":16,"nodeType":"1580","messageId":"1581","endLine":449,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1643","line":451,"column":46,"nodeType":"1644","messageId":"1645","endLine":451,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1646","line":562,"column":21,"nodeType":"1580","messageId":"1581","endLine":562,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1647","line":563,"column":28,"nodeType":"1580","messageId":"1581","endLine":563,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1648","line":564,"column":13,"nodeType":"1580","messageId":"1581","endLine":564,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1649","line":564,"column":30,"nodeType":"1580","messageId":"1581","endLine":564,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1650","line":565,"column":30,"nodeType":"1580","messageId":"1581","endLine":565,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1651","line":566,"column":34,"nodeType":"1580","messageId":"1581","endLine":566,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1652","line":568,"column":12,"nodeType":"1580","messageId":"1581","endLine":568,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":568,"column":18,"nodeType":"1580","messageId":"1581","endLine":568,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1654","line":569,"column":11,"nodeType":"1580","messageId":"1581","endLine":569,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1601","line":577,"column":16,"nodeType":"1580","messageId":"1581","endLine":577,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1643","line":587,"column":21,"nodeType":"1644","messageId":"1645","endLine":587,"endColumn":23},{"ruleId":"1637","severity":1,"message":"1655","line":590,"column":8,"nodeType":"1639","endLine":590,"endColumn":26,"suggestions":"1969"},{"ruleId":"1582","severity":1,"message":"1657","line":668,"column":20,"nodeType":"1580","messageId":"1581","endLine":668,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1652","line":670,"column":12,"nodeType":"1580","messageId":"1581","endLine":670,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1654","line":671,"column":11,"nodeType":"1580","messageId":"1581","endLine":671,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1658","line":675,"column":31,"nodeType":"1580","messageId":"1581","endLine":675,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1659","line":679,"column":13,"nodeType":"1580","messageId":"1581","endLine":679,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1660","line":688,"column":12,"nodeType":"1580","messageId":"1581","endLine":688,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1661","line":694,"column":9,"nodeType":"1580","messageId":"1581","endLine":694,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1662","line":729,"column":9,"nodeType":"1580","messageId":"1581","endLine":729,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1663","line":793,"column":13,"nodeType":"1580","messageId":"1581","endLine":793,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1664","line":795,"column":13,"nodeType":"1580","messageId":"1581","endLine":795,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":804,"column":13,"nodeType":"1580","messageId":"1581","endLine":804,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1665","line":811,"column":11,"nodeType":"1580","messageId":"1581","endLine":811,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1666","line":817,"column":11,"nodeType":"1580","messageId":"1581","endLine":817,"endColumn":38},{"ruleId":"1602","severity":1,"message":"1603","line":843,"column":29,"nodeType":"1604","messageId":"1605","endLine":843,"endColumn":40,"fix":"1970"},{"ruleId":"1582","severity":1,"message":"1668","line":855,"column":31,"nodeType":"1580","messageId":"1581","endLine":855,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1669","line":876,"column":29,"nodeType":"1580","messageId":"1581","endLine":876,"endColumn":40},{"ruleId":"1582","severity":1,"message":"1670","line":878,"column":29,"nodeType":"1580","messageId":"1581","endLine":878,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1671","line":914,"column":17,"nodeType":"1580","messageId":"1581","endLine":914,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1601","line":962,"column":16,"nodeType":"1580","messageId":"1581","endLine":962,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1672","line":983,"column":8,"nodeType":"1639","endLine":983,"endColumn":16,"suggestions":"1971"},{"ruleId":"1637","severity":1,"message":"1674","line":996,"column":8,"nodeType":"1639","endLine":996,"endColumn":41,"suggestions":"1972"},{"ruleId":"1582","severity":1,"message":"1676","line":1276,"column":21,"nodeType":"1580","messageId":"1581","endLine":1276,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1677","line":1286,"column":12,"nodeType":"1580","messageId":"1581","endLine":1286,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1678","line":1286,"column":23,"nodeType":"1580","messageId":"1581","endLine":1286,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1679","line":1293,"column":26,"nodeType":"1580","messageId":"1581","endLine":1293,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1601","line":1300,"column":16,"nodeType":"1580","messageId":"1581","endLine":1300,"endColumn":20},{"ruleId":"1602","severity":1,"message":"1603","line":1335,"column":40,"nodeType":"1604","messageId":"1605","endLine":1335,"endColumn":51,"fix":"1973"},{"ruleId":"1582","severity":1,"message":"1681","line":1336,"column":21,"nodeType":"1580","messageId":"1581","endLine":1336,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1682","line":1382,"column":19,"nodeType":"1580","messageId":"1581","endLine":1382,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1683","line":1383,"column":19,"nodeType":"1580","messageId":"1581","endLine":1383,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1684","line":1384,"column":19,"nodeType":"1580","messageId":"1581","endLine":1384,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1685","line":1410,"column":19,"nodeType":"1580","messageId":"1581","endLine":1410,"endColumn":27},{"ruleId":"1637","severity":1,"message":"1686","line":1477,"column":8,"nodeType":"1639","endLine":1477,"endColumn":16,"suggestions":"1974"},{"ruleId":"1637","severity":1,"message":"1688","line":1505,"column":8,"nodeType":"1639","endLine":1505,"endColumn":20,"suggestions":"1975"},{"ruleId":"1637","severity":1,"message":"1690","line":1514,"column":8,"nodeType":"1639","endLine":1514,"endColumn":30,"suggestions":"1976"},{"ruleId":"1582","severity":1,"message":"1586","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1692","line":2,"column":18,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1693","line":3,"column":16,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1694","line":3,"column":29,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1695","line":5,"column":10,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1621","line":19,"column":10,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1696","line":19,"column":31,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1622","line":19,"column":61,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":68},{"ruleId":"1582","severity":1,"message":"1601","line":27,"column":12,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1788","line":2,"column":17,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1608","line":2,"column":28,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1924","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1925","line":5,"column":10,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1926","line":7,"column":33,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1586","line":9,"column":10,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1927","line":10,"column":10,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1617","line":19,"column":5,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1928","line":24,"column":5,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1929","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1930","line":33,"column":5,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1931","line":34,"column":5,"nodeType":"1580","messageId":"1581","endLine":34,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1932","line":52,"column":27,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1623","line":54,"column":10,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1933","line":54,"column":32,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1679","line":70,"column":26,"nodeType":"1580","messageId":"1581","endLine":70,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1601","line":74,"column":16,"nodeType":"1580","messageId":"1581","endLine":74,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1934","line":182,"column":17,"nodeType":"1580","messageId":"1581","endLine":182,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1690","line":212,"column":8,"nodeType":"1639","endLine":212,"endColumn":30,"suggestions":"1977"},{"ruleId":"1637","severity":1,"message":"1936","line":225,"column":8,"nodeType":"1639","endLine":225,"endColumn":16,"suggestions":"1978"},{"ruleId":"1582","severity":1,"message":"1753","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1694","line":3,"column":29,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":36},{"ruleId":"1582","severity":1,"message":"1754","line":5,"column":9,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1755","line":14,"column":8,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1756","line":18,"column":5,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1757","line":23,"column":5,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1758","line":24,"column":5,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":9},{"ruleId":"1582","severity":1,"message":"1759","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1760","line":55,"column":11,"nodeType":"1580","messageId":"1581","endLine":55,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1625","line":103,"column":7,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1761","line":111,"column":13,"nodeType":"1580","messageId":"1581","endLine":111,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1762","line":112,"column":12,"nodeType":"1580","messageId":"1581","endLine":112,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1763","line":112,"column":27,"nodeType":"1580","messageId":"1581","endLine":112,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1764","line":114,"column":12,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1765","line":114,"column":24,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1766","line":115,"column":12,"nodeType":"1580","messageId":"1581","endLine":115,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1767","line":115,"column":23,"nodeType":"1580","messageId":"1581","endLine":115,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1768","line":116,"column":12,"nodeType":"1580","messageId":"1581","endLine":116,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1769","line":116,"column":20,"nodeType":"1580","messageId":"1581","endLine":116,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1770","line":117,"column":23,"nodeType":"1580","messageId":"1581","endLine":117,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1771","line":118,"column":12,"nodeType":"1580","messageId":"1581","endLine":118,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1772","line":121,"column":11,"nodeType":"1580","messageId":"1581","endLine":121,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1773","line":125,"column":11,"nodeType":"1580","messageId":"1581","endLine":125,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1774","line":126,"column":11,"nodeType":"1580","messageId":"1581","endLine":126,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1775","line":130,"column":11,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1776","line":176,"column":11,"nodeType":"1580","messageId":"1581","endLine":176,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1777","line":177,"column":11,"nodeType":"1580","messageId":"1581","endLine":177,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1778","line":179,"column":11,"nodeType":"1580","messageId":"1581","endLine":179,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1779","line":188,"column":11,"nodeType":"1580","messageId":"1581","endLine":188,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1780","line":208,"column":11,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1781","line":213,"column":14,"nodeType":"1580","messageId":"1581","endLine":213,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1782","line":238,"column":11,"nodeType":"1580","messageId":"1581","endLine":238,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1601","line":245,"column":16,"nodeType":"1580","messageId":"1581","endLine":245,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1611","line":4,"column":49,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1595","line":6,"column":33,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1596","line":6,"column":48,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1615","line":6,"column":61,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1697","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1698","line":7,"column":17,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1699","line":7,"column":35,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1700","line":24,"column":10,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1701","line":25,"column":10,"nodeType":"1580","messageId":"1581","endLine":25,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1702","line":49,"column":5,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1703","line":61,"column":8,"nodeType":"1580","messageId":"1581","endLine":61,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1704","line":62,"column":8,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1705","line":63,"column":8,"nodeType":"1580","messageId":"1581","endLine":63,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1706","line":64,"column":8,"nodeType":"1580","messageId":"1581","endLine":64,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1707","line":93,"column":5,"nodeType":"1580","messageId":"1581","endLine":93,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1708","line":98,"column":5,"nodeType":"1580","messageId":"1581","endLine":98,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1620","line":99,"column":5,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1709","line":102,"column":5,"nodeType":"1580","messageId":"1581","endLine":102,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1710","line":103,"column":5,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1711","line":104,"column":5,"nodeType":"1580","messageId":"1581","endLine":104,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1712","line":114,"column":48,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":61},{"ruleId":"1582","severity":1,"message":"1622","line":114,"column":76,"nodeType":"1580","messageId":"1581","endLine":114,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1713","line":120,"column":8,"nodeType":"1580","messageId":"1581","endLine":120,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1625","line":130,"column":7,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1714","line":137,"column":7,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1715","line":154,"column":7,"nodeType":"1580","messageId":"1581","endLine":154,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1716","line":164,"column":7,"nodeType":"1580","messageId":"1581","endLine":164,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1626","line":195,"column":9,"nodeType":"1580","messageId":"1581","endLine":195,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1627","line":206,"column":10,"nodeType":"1580","messageId":"1581","endLine":206,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1646","line":227,"column":21,"nodeType":"1580","messageId":"1581","endLine":227,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1668","line":241,"column":23,"nodeType":"1580","messageId":"1581","endLine":241,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1717","line":268,"column":21,"nodeType":"1580","messageId":"1581","endLine":268,"endColumn":29},{"ruleId":"1637","severity":1,"message":"1718","line":296,"column":34,"nodeType":"1719","endLine":296,"endColumn":77},{"ruleId":"1582","severity":1,"message":"1601","line":305,"column":16,"nodeType":"1580","messageId":"1581","endLine":305,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1720","line":335,"column":11,"nodeType":"1580","messageId":"1581","endLine":335,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1721","line":338,"column":18,"nodeType":"1580","messageId":"1581","endLine":338,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1722","line":347,"column":36,"nodeType":"1580","messageId":"1581","endLine":347,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1723","line":348,"column":12,"nodeType":"1580","messageId":"1581","endLine":348,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1724","line":348,"column":34,"nodeType":"1580","messageId":"1581","endLine":348,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1725","line":349,"column":31,"nodeType":"1580","messageId":"1581","endLine":349,"endColumn":50},{"ruleId":"1582","severity":1,"message":"1726","line":354,"column":34,"nodeType":"1580","messageId":"1581","endLine":354,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1660","line":369,"column":12,"nodeType":"1580","messageId":"1581","endLine":369,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1664","line":399,"column":13,"nodeType":"1580","messageId":"1581","endLine":399,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":408,"column":13,"nodeType":"1580","messageId":"1581","endLine":408,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":416,"column":11,"nodeType":"1580","messageId":"1581","endLine":416,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1728","line":424,"column":11,"nodeType":"1580","messageId":"1581","endLine":424,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1729","line":434,"column":11,"nodeType":"1580","messageId":"1581","endLine":434,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1730","line":441,"column":11,"nodeType":"1580","messageId":"1581","endLine":441,"endColumn":25},{"ruleId":"1637","severity":1,"message":"1731","line":614,"column":8,"nodeType":"1639","endLine":614,"endColumn":19,"suggestions":"1979"},{"ruleId":"1733","severity":1,"message":"1734","line":638,"column":47,"nodeType":"1735","messageId":"1736","endLine":638,"endColumn":49},{"ruleId":"1637","severity":1,"message":"1737","line":811,"column":8,"nodeType":"1639","endLine":811,"endColumn":42,"suggestions":"1980"},{"ruleId":"1637","severity":1,"message":"1739","line":825,"column":8,"nodeType":"1639","endLine":825,"endColumn":14,"suggestions":"1981"},{"ruleId":"1582","severity":1,"message":"1601","line":827,"column":16,"nodeType":"1580","messageId":"1581","endLine":827,"endColumn":20},{"ruleId":"1642","severity":1,"message":"1741","line":1241,"column":87,"nodeType":"1644","messageId":"1645","endLine":1241,"endColumn":89},{"ruleId":"1582","severity":1,"message":"1631","line":1604,"column":10,"nodeType":"1580","messageId":"1581","endLine":1604,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1632","line":1615,"column":10,"nodeType":"1580","messageId":"1581","endLine":1615,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1633","line":1625,"column":6,"nodeType":"1580","messageId":"1581","endLine":1625,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1742","line":1631,"column":12,"nodeType":"1580","messageId":"1581","endLine":1631,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1743","line":1631,"column":24,"nodeType":"1580","messageId":"1581","endLine":1631,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1744","line":1633,"column":12,"nodeType":"1580","messageId":"1581","endLine":1633,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1646","line":1633,"column":21,"nodeType":"1580","messageId":"1581","endLine":1633,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1679","line":1639,"column":26,"nodeType":"1580","messageId":"1581","endLine":1639,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1745","line":1644,"column":24,"nodeType":"1580","messageId":"1581","endLine":1644,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1746","line":1649,"column":14,"nodeType":"1580","messageId":"1581","endLine":1649,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1747","line":1663,"column":11,"nodeType":"1580","messageId":"1581","endLine":1663,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1748","line":1673,"column":26,"nodeType":"1580","messageId":"1581","endLine":1673,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1659","line":1679,"column":17,"nodeType":"1580","messageId":"1581","endLine":1679,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1635","line":1682,"column":15,"nodeType":"1580","messageId":"1581","endLine":1682,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1668","line":1689,"column":27,"nodeType":"1580","messageId":"1581","endLine":1689,"endColumn":31},{"ruleId":"1637","severity":1,"message":"1749","line":1728,"column":12,"nodeType":"1639","endLine":1728,"endColumn":22,"suggestions":"1982"},{"ruleId":"1637","severity":1,"message":"1751","line":1783,"column":8,"nodeType":"1639","endLine":1783,"endColumn":23,"suggestions":"1983"},{"ruleId":"1582","severity":1,"message":"1601","line":1791,"column":16,"nodeType":"1580","messageId":"1581","endLine":1791,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1783","line":1,"column":23,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1784","line":17,"column":7,"nodeType":"1580","messageId":"1581","endLine":17,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1601","line":39,"column":14,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1785","line":1,"column":32,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1788","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1585","line":1,"column":38,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1789","line":2,"column":16,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1790","line":2,"column":27,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":42},{"ruleId":"1582","severity":1,"message":"1614","line":9,"column":23,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1611","line":14,"column":49,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":63},{"ruleId":"1582","severity":1,"message":"1708","line":48,"column":5,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1744","line":74,"column":12,"nodeType":"1580","messageId":"1581","endLine":74,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":76,"column":12,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1791","line":77,"column":12,"nodeType":"1580","messageId":"1581","endLine":77,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1792","line":78,"column":12,"nodeType":"1580","messageId":"1581","endLine":78,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1793","line":80,"column":24,"nodeType":"1580","messageId":"1581","endLine":80,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1794","line":86,"column":11,"nodeType":"1580","messageId":"1581","endLine":86,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1795","line":90,"column":11,"nodeType":"1580","messageId":"1581","endLine":90,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1796","line":99,"column":11,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":33},{"ruleId":"1582","severity":1,"message":"1797","line":103,"column":11,"nodeType":"1580","messageId":"1581","endLine":103,"endColumn":35},{"ruleId":"1637","severity":1,"message":"1798","line":163,"column":7,"nodeType":"1639","endLine":163,"endColumn":9,"suggestions":"1984"},{"ruleId":"1582","severity":1,"message":"1800","line":199,"column":19,"nodeType":"1580","messageId":"1581","endLine":199,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1801","line":200,"column":12,"nodeType":"1580","messageId":"1581","endLine":200,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1802","line":201,"column":12,"nodeType":"1580","messageId":"1581","endLine":201,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1803","line":203,"column":12,"nodeType":"1580","messageId":"1581","endLine":203,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1659","line":206,"column":13,"nodeType":"1580","messageId":"1581","endLine":206,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1804","line":208,"column":12,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1805","line":208,"column":25,"nodeType":"1580","messageId":"1581","endLine":208,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1669","line":221,"column":21,"nodeType":"1580","messageId":"1581","endLine":221,"endColumn":32},{"ruleId":"1637","severity":1,"message":"1806","line":245,"column":12,"nodeType":"1639","endLine":245,"endColumn":21,"suggestions":"1985"},{"ruleId":"1582","severity":1,"message":"1601","line":251,"column":20,"nodeType":"1580","messageId":"1581","endLine":251,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1603","line":401,"column":29,"nodeType":"1604","messageId":"1605","endLine":401,"endColumn":40,"fix":"1986"},{"ruleId":"1582","severity":1,"message":"1668","line":406,"column":31,"nodeType":"1580","messageId":"1581","endLine":406,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1809","line":449,"column":19,"nodeType":"1580","messageId":"1581","endLine":449,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1810","line":473,"column":17,"nodeType":"1580","messageId":"1581","endLine":473,"endColumn":25},{"ruleId":"1811","severity":1,"message":"1812","line":474,"column":22,"nodeType":"1580","messageId":"1813","endLine":474,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1814","line":483,"column":33,"nodeType":"1580","messageId":"1581","endLine":483,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1815","line":484,"column":33,"nodeType":"1580","messageId":"1581","endLine":484,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1816","line":500,"column":41,"nodeType":"1580","messageId":"1581","endLine":500,"endColumn":45},{"ruleId":"1811","severity":1,"message":"1817","line":567,"column":22,"nodeType":"1580","messageId":"1813","endLine":567,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1670","line":577,"column":25,"nodeType":"1580","messageId":"1581","endLine":577,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1786","line":21,"column":7,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1787","line":96,"column":9,"nodeType":"1580","messageId":"1581","endLine":96,"endColumn":11},{"ruleId":"1642","severity":1,"message":"1643","line":114,"column":36,"nodeType":"1644","messageId":"1645","endLine":114,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1787","line":132,"column":9,"nodeType":"1580","messageId":"1581","endLine":132,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1818","line":18,"column":5,"nodeType":"1580","messageId":"1581","endLine":18,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1835","line":27,"column":5,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1836","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1837","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1838","line":39,"column":5,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1839","line":40,"column":5,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1840","line":41,"column":5,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1841","line":42,"column":5,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1842","line":43,"column":5,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1843","line":44,"column":5,"nodeType":"1580","messageId":"1581","endLine":44,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1844","line":45,"column":5,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1845","line":46,"column":5,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1846","line":47,"column":5,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1847","line":48,"column":5,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1848","line":50,"column":5,"nodeType":"1580","messageId":"1581","endLine":50,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1849","line":53,"column":5,"nodeType":"1580","messageId":"1581","endLine":53,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1850","line":54,"column":5,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1851","line":56,"column":5,"nodeType":"1580","messageId":"1581","endLine":56,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1762","line":75,"column":12,"nodeType":"1580","messageId":"1581","endLine":75,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1763","line":75,"column":27,"nodeType":"1580","messageId":"1581","endLine":75,"endColumn":43},{"ruleId":"1582","severity":1,"message":"1601","line":100,"column":16,"nodeType":"1580","messageId":"1581","endLine":100,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1818","line":5,"column":18,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1819","line":6,"column":20,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1753","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1700","line":6,"column":28,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1946","line":6,"column":48,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":66},{"ruleId":"1582","severity":1,"message":"1701","line":8,"column":10,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1947","line":13,"column":10,"nodeType":"1580","messageId":"1581","endLine":13,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1948","line":21,"column":8,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1949","line":21,"column":20,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1950","line":23,"column":10,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1944","line":26,"column":5,"nodeType":"1580","messageId":"1581","endLine":26,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1588","line":28,"column":5,"nodeType":"1580","messageId":"1581","endLine":28,"endColumn":8},{"ruleId":"1582","severity":1,"message":"1951","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1952","line":30,"column":5,"nodeType":"1580","messageId":"1581","endLine":30,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1953","line":31,"column":5,"nodeType":"1580","messageId":"1581","endLine":31,"endColumn":17},{"ruleId":"1582","severity":1,"message":"1945","line":32,"column":5,"nodeType":"1580","messageId":"1581","endLine":32,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1954","line":33,"column":5,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1955","line":38,"column":8,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1620","line":40,"column":30,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1695","line":40,"column":49,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1956","line":40,"column":64,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":77},{"ruleId":"1582","severity":1,"message":"1709","line":40,"column":79,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1932","line":41,"column":10,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1657","line":45,"column":20,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1957","line":46,"column":12,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1820","line":46,"column":18,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1652","line":48,"column":12,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":48,"column":18,"nodeType":"1580","messageId":"1581","endLine":48,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1659","line":51,"column":13,"nodeType":"1580","messageId":"1581","endLine":51,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1827","line":54,"column":13,"nodeType":"1580","messageId":"1581","endLine":54,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1654","line":61,"column":11,"nodeType":"1580","messageId":"1581","endLine":61,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1795","line":63,"column":11,"nodeType":"1580","messageId":"1581","endLine":63,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1662","line":92,"column":9,"nodeType":"1580","messageId":"1581","endLine":92,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1603","line":142,"column":29,"nodeType":"1604","messageId":"1605","endLine":142,"endColumn":40,"fix":"1987"},{"ruleId":"1582","severity":1,"message":"1668","line":155,"column":31,"nodeType":"1580","messageId":"1581","endLine":155,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1669","line":176,"column":29,"nodeType":"1580","messageId":"1581","endLine":176,"endColumn":40},{"ruleId":"1582","severity":1,"message":"1670","line":178,"column":29,"nodeType":"1580","messageId":"1581","endLine":178,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1959","line":219,"column":8,"nodeType":"1639","endLine":219,"endColumn":22,"suggestions":"1988"},{"ruleId":"1637","severity":1,"message":"1833","line":225,"column":8,"nodeType":"1639","endLine":225,"endColumn":10,"suggestions":"1989"},{"ruleId":"1582","severity":1,"message":"1788","line":2,"column":17,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1753","line":3,"column":10,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":14},{"ruleId":"1582","severity":1,"message":"1925","line":4,"column":10,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1942","line":6,"column":8,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1943","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1944","line":12,"column":5,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1928","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1945","line":16,"column":5,"nodeType":"1580","messageId":"1581","endLine":16,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1695","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1623","line":21,"column":10,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1653","line":24,"column":18,"nodeType":"1580","messageId":"1581","endLine":24,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1620","line":33,"column":30,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1695","line":33,"column":49,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":62},{"ruleId":"1582","severity":1,"message":"1709","line":33,"column":79,"nodeType":"1580","messageId":"1581","endLine":33,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1657","line":39,"column":20,"nodeType":"1580","messageId":"1581","endLine":39,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1820","line":40,"column":18,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1652","line":42,"column":12,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":42,"column":18,"nodeType":"1580","messageId":"1581","endLine":42,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1821","line":43,"column":11,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1659","line":45,"column":13,"nodeType":"1580","messageId":"1581","endLine":45,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1822","line":46,"column":12,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":46,"column":26,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1824","line":47,"column":12,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1825","line":47,"column":25,"nodeType":"1580","messageId":"1581","endLine":47,"endColumn":39},{"ruleId":"1582","severity":1,"message":"1660","line":49,"column":12,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1826","line":49,"column":28,"nodeType":"1580","messageId":"1581","endLine":49,"endColumn":45},{"ruleId":"1582","severity":1,"message":"1827","line":51,"column":13,"nodeType":"1580","messageId":"1581","endLine":51,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1795","line":58,"column":11,"nodeType":"1580","messageId":"1581","endLine":58,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1828","line":135,"column":25,"nodeType":"1580","messageId":"1581","endLine":135,"endColumn":35},{"ruleId":"1637","severity":1,"message":"1829","line":165,"column":12,"nodeType":"1639","endLine":165,"endColumn":14,"suggestions":"1990"},{"ruleId":"1582","severity":1,"message":"1831","line":224,"column":28,"nodeType":"1580","messageId":"1581","endLine":224,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1832","line":225,"column":31,"nodeType":"1580","messageId":"1581","endLine":225,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1601","line":228,"column":20,"nodeType":"1580","messageId":"1581","endLine":228,"endColumn":24},{"ruleId":"1637","severity":1,"message":"1833","line":278,"column":8,"nodeType":"1639","endLine":278,"endColumn":10,"suggestions":"1991"},{"ruleId":"1582","severity":1,"message":"1601","line":280,"column":16,"nodeType":"1580","messageId":"1581","endLine":280,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1614","line":7,"column":23,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":8,"column":33,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1615","line":8,"column":61,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1783","line":10,"column":10,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1692","line":10,"column":30,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1852","line":19,"column":5,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1698","line":20,"column":5,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1853","line":28,"column":5,"nodeType":"1580","messageId":"1581","endLine":28,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1854","line":29,"column":5,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1855","line":30,"column":5,"nodeType":"1580","messageId":"1581","endLine":30,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1856","line":62,"column":22,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1709","line":68,"column":79,"nodeType":"1580","messageId":"1581","endLine":68,"endColumn":97},{"ruleId":"1582","severity":1,"message":"1624","line":76,"column":7,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1647","line":125,"column":28,"nodeType":"1580","messageId":"1581","endLine":125,"endColumn":44},{"ruleId":"1582","severity":1,"message":"1650","line":130,"column":30,"nodeType":"1580","messageId":"1581","endLine":130,"endColumn":49},{"ruleId":"1582","severity":1,"message":"1857","line":131,"column":12,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1651","line":131,"column":34,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":57},{"ruleId":"1582","severity":1,"message":"1858","line":133,"column":12,"nodeType":"1580","messageId":"1581","endLine":133,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1800","line":134,"column":19,"nodeType":"1580","messageId":"1581","endLine":134,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1801","line":135,"column":12,"nodeType":"1580","messageId":"1581","endLine":135,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1802","line":136,"column":12,"nodeType":"1580","messageId":"1581","endLine":136,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1652","line":137,"column":12,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1653","line":137,"column":18,"nodeType":"1580","messageId":"1581","endLine":137,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1654","line":140,"column":11,"nodeType":"1580","messageId":"1581","endLine":140,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1859","line":146,"column":11,"nodeType":"1580","messageId":"1581","endLine":146,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1860","line":150,"column":11,"nodeType":"1580","messageId":"1581","endLine":150,"endColumn":28},{"ruleId":"1811","severity":1,"message":"1861","line":358,"column":30,"nodeType":"1580","messageId":"1813","endLine":358,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1862","line":485,"column":17,"nodeType":"1580","messageId":"1581","endLine":485,"endColumn":38},{"ruleId":"1811","severity":1,"message":"1812","line":497,"column":22,"nodeType":"1580","messageId":"1813","endLine":497,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1863","line":545,"column":37,"nodeType":"1580","messageId":"1581","endLine":545,"endColumn":48},{"ruleId":"1864","severity":1,"message":"1865","line":555,"column":37,"nodeType":"1866","messageId":"1867","endLine":779,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1816","line":565,"column":53,"nodeType":"1580","messageId":"1581","endLine":565,"endColumn":57},{"ruleId":"1811","severity":1,"message":"1817","line":628,"column":82,"nodeType":"1580","messageId":"1813","endLine":628,"endColumn":83},{"ruleId":"1811","severity":1,"message":"1817","line":633,"column":82,"nodeType":"1580","messageId":"1813","endLine":633,"endColumn":83},{"ruleId":"1642","severity":1,"message":"1741","line":715,"column":119,"nodeType":"1644","messageId":"1645","endLine":715,"endColumn":121},{"ruleId":"1642","severity":1,"message":"1643","line":721,"column":122,"nodeType":"1644","messageId":"1645","endLine":721,"endColumn":124},{"ruleId":"1864","severity":1,"message":"1865","line":749,"column":61,"nodeType":"1866","messageId":"1867","endLine":773,"endColumn":62},{"ruleId":"1811","severity":1,"message":"1817","line":754,"column":78,"nodeType":"1580","messageId":"1813","endLine":754,"endColumn":79},{"ruleId":"1811","severity":1,"message":"1817","line":837,"column":22,"nodeType":"1580","messageId":"1813","endLine":837,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1868","line":894,"column":17,"nodeType":"1580","messageId":"1581","endLine":894,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1869","line":898,"column":21,"nodeType":"1580","messageId":"1581","endLine":898,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1601","line":907,"column":16,"nodeType":"1580","messageId":"1581","endLine":907,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1870","line":918,"column":8,"nodeType":"1639","endLine":918,"endColumn":32,"suggestions":"1992"},{"ruleId":"1642","severity":1,"message":"1741","line":932,"column":27,"nodeType":"1644","messageId":"1645","endLine":932,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1788","line":1,"column":17,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1607","line":1,"column":51,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":55},{"ruleId":"1582","severity":1,"message":"1873","line":35,"column":5,"nodeType":"1580","messageId":"1581","endLine":35,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1874","line":36,"column":5,"nodeType":"1580","messageId":"1581","endLine":36,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1707","line":37,"column":5,"nodeType":"1580","messageId":"1581","endLine":37,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1938","line":38,"column":5,"nodeType":"1580","messageId":"1581","endLine":38,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1600","line":40,"column":5,"nodeType":"1580","messageId":"1581","endLine":40,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1893","line":41,"column":5,"nodeType":"1580","messageId":"1581","endLine":41,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1620","line":43,"column":5,"nodeType":"1580","messageId":"1581","endLine":43,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1695","line":44,"column":5,"nodeType":"1580","messageId":"1581","endLine":44,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1709","line":46,"column":5,"nodeType":"1580","messageId":"1581","endLine":46,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1696","line":52,"column":31,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":46},{"ruleId":"1582","severity":1,"message":"1712","line":52,"column":48,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":61},{"ruleId":"1582","severity":1,"message":"1932","line":52,"column":63,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":74},{"ruleId":"1582","severity":1,"message":"1622","line":52,"column":76,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":83},{"ruleId":"1582","severity":1,"message":"1822","line":76,"column":12,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":76,"column":26,"nodeType":"1580","messageId":"1581","endLine":76,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1744","line":79,"column":12,"nodeType":"1580","messageId":"1581","endLine":79,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":80,"column":12,"nodeType":"1580","messageId":"1581","endLine":80,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1664","line":158,"column":13,"nodeType":"1580","messageId":"1581","endLine":158,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1664","line":167,"column":13,"nodeType":"1580","messageId":"1581","endLine":167,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1939","line":178,"column":7,"nodeType":"1639","endLine":178,"endColumn":9,"suggestions":"1993"},{"ruleId":"1582","severity":1,"message":"1822","line":232,"column":12,"nodeType":"1580","messageId":"1581","endLine":232,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1823","line":232,"column":26,"nodeType":"1580","messageId":"1581","endLine":232,"endColumn":41},{"ruleId":"1582","severity":1,"message":"1744","line":234,"column":12,"nodeType":"1580","messageId":"1581","endLine":234,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1660","line":236,"column":12,"nodeType":"1580","messageId":"1581","endLine":236,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1794","line":249,"column":11,"nodeType":"1580","messageId":"1581","endLine":249,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1727","line":254,"column":11,"nodeType":"1580","messageId":"1581","endLine":254,"endColumn":18},{"ruleId":"1642","severity":1,"message":"1741","line":363,"column":30,"nodeType":"1644","messageId":"1645","endLine":363,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1664","line":525,"column":17,"nodeType":"1580","messageId":"1581","endLine":525,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1664","line":534,"column":13,"nodeType":"1580","messageId":"1581","endLine":534,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1798","line":545,"column":7,"nodeType":"1639","endLine":545,"endColumn":9,"suggestions":"1994"},{"ruleId":"1582","severity":1,"message":"1872","line":52,"column":8,"nodeType":"1580","messageId":"1581","endLine":52,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1873","line":58,"column":5,"nodeType":"1580","messageId":"1581","endLine":58,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1874","line":59,"column":5,"nodeType":"1580","messageId":"1581","endLine":59,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1875","line":62,"column":5,"nodeType":"1580","messageId":"1581","endLine":62,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1695","line":66,"column":5,"nodeType":"1580","messageId":"1581","endLine":66,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1852","line":78,"column":5,"nodeType":"1580","messageId":"1581","endLine":78,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1698","line":79,"column":5,"nodeType":"1580","messageId":"1581","endLine":79,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1876","line":89,"column":10,"nodeType":"1580","messageId":"1581","endLine":89,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1877","line":90,"column":10,"nodeType":"1580","messageId":"1581","endLine":90,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1624","line":110,"column":7,"nodeType":"1580","messageId":"1581","endLine":110,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1714","line":123,"column":7,"nodeType":"1580","messageId":"1581","endLine":123,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1715","line":140,"column":7,"nodeType":"1580","messageId":"1581","endLine":140,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1716","line":150,"column":7,"nodeType":"1580","messageId":"1581","endLine":150,"endColumn":22},{"ruleId":"1582","severity":1,"message":"1878","line":215,"column":11,"nodeType":"1580","messageId":"1581","endLine":215,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1681","line":217,"column":24,"nodeType":"1580","messageId":"1581","endLine":217,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1728","line":219,"column":11,"nodeType":"1580","messageId":"1581","endLine":219,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":234,"column":11,"nodeType":"1580","messageId":"1581","endLine":234,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":242,"column":16,"nodeType":"1580","messageId":"1581","endLine":242,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1879","line":325,"column":7,"nodeType":"1639","endLine":325,"endColumn":9,"suggestions":"1995"},{"ruleId":"1582","severity":1,"message":"1681","line":434,"column":24,"nodeType":"1580","messageId":"1581","endLine":434,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1728","line":435,"column":11,"nodeType":"1580","messageId":"1581","endLine":435,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1727","line":450,"column":11,"nodeType":"1580","messageId":"1581","endLine":450,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":510,"column":16,"nodeType":"1580","messageId":"1581","endLine":510,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1681","line":603,"column":24,"nodeType":"1580","messageId":"1581","endLine":603,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1881","line":606,"column":11,"nodeType":"1580","messageId":"1581","endLine":606,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1727","line":618,"column":11,"nodeType":"1580","messageId":"1581","endLine":618,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1601","line":626,"column":16,"nodeType":"1580","messageId":"1581","endLine":626,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1882","line":824,"column":21,"nodeType":"1580","messageId":"1581","endLine":824,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1883","line":838,"column":11,"nodeType":"1580","messageId":"1581","endLine":838,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1884","line":848,"column":11,"nodeType":"1580","messageId":"1581","endLine":848,"endColumn":35},{"ruleId":"1582","severity":1,"message":"1885","line":861,"column":11,"nodeType":"1580","messageId":"1581","endLine":861,"endColumn":26},{"ruleId":"1582","severity":1,"message":"1886","line":977,"column":11,"nodeType":"1580","messageId":"1581","endLine":977,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1887","line":1129,"column":13,"nodeType":"1580","messageId":"1581","endLine":1129,"endColumn":27},{"ruleId":"1811","severity":1,"message":"1812","line":1142,"column":22,"nodeType":"1580","messageId":"1813","endLine":1142,"endColumn":27},{"ruleId":"1582","severity":1,"message":"1888","line":1154,"column":33,"nodeType":"1580","messageId":"1581","endLine":1154,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1889","line":1155,"column":33,"nodeType":"1580","messageId":"1581","endLine":1155,"endColumn":47},{"ruleId":"1582","severity":1,"message":"1863","line":1161,"column":33,"nodeType":"1580","messageId":"1581","endLine":1161,"endColumn":44},{"ruleId":"1864","severity":1,"message":"1865","line":1164,"column":29,"nodeType":"1866","messageId":"1867","endLine":1365,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1816","line":1173,"column":45,"nodeType":"1580","messageId":"1581","endLine":1173,"endColumn":49},{"ruleId":"1864","severity":1,"message":"1865","line":1223,"column":53,"nodeType":"1866","messageId":"1867","endLine":1298,"endColumn":54},{"ruleId":"1864","severity":1,"message":"1865","line":1235,"column":61,"nodeType":"1866","messageId":"1867","endLine":1296,"endColumn":62},{"ruleId":"1811","severity":1,"message":"1817","line":1305,"column":58,"nodeType":"1580","messageId":"1813","endLine":1305,"endColumn":59},{"ruleId":"1582","severity":1,"message":"1890","line":1494,"column":11,"nodeType":"1580","messageId":"1581","endLine":1494,"endColumn":23},{"ruleId":"1582","severity":1,"message":"1601","line":1549,"column":16,"nodeType":"1580","messageId":"1581","endLine":1549,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1891","line":1833,"column":8,"nodeType":"1639","endLine":1833,"endColumn":32,"suggestions":"1996"},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1894","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1895","line":56,"column":11,"nodeType":"1580","messageId":"1581","endLine":56,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1896","line":2,"column":8,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1897","line":3,"column":8,"nodeType":"1580","messageId":"1581","endLine":3,"endColumn":16},{"ruleId":"1642","severity":1,"message":"1643","line":20,"column":23,"nodeType":"1644","messageId":"1645","endLine":20,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1595","line":1,"column":21,"nodeType":"1580","messageId":"1581","endLine":1,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1609","line":2,"column":10,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1898","line":2,"column":14,"nodeType":"1580","messageId":"1581","endLine":2,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1899","line":5,"column":3,"nodeType":"1580","messageId":"1581","endLine":5,"endColumn":12},{"ruleId":"1582","severity":1,"message":"1900","line":6,"column":3,"nodeType":"1580","messageId":"1581","endLine":6,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1901","line":8,"column":3,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1902","line":9,"column":3,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1903","line":10,"column":3,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":24},{"ruleId":"1582","severity":1,"message":"1904","line":11,"column":3,"nodeType":"1580","messageId":"1581","endLine":11,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1905","line":12,"column":3,"nodeType":"1580","messageId":"1581","endLine":12,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1906","line":16,"column":3,"nodeType":"1580","messageId":"1581","endLine":16,"endColumn":31},{"ruleId":"1582","severity":1,"message":"1907","line":20,"column":3,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1908","line":21,"column":3,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":11},{"ruleId":"1582","severity":1,"message":"1909","line":23,"column":3,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1910","line":29,"column":10,"nodeType":"1580","messageId":"1581","endLine":29,"endColumn":21},{"ruleId":"1582","severity":1,"message":"1911","line":82,"column":11,"nodeType":"1580","messageId":"1581","endLine":82,"endColumn":38},{"ruleId":"1582","severity":1,"message":"1912","line":83,"column":11,"nodeType":"1580","messageId":"1581","endLine":83,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1913","line":84,"column":11,"nodeType":"1580","messageId":"1581","endLine":84,"endColumn":25},{"ruleId":"1582","severity":1,"message":"1914","line":119,"column":9,"nodeType":"1580","messageId":"1581","endLine":119,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1915","line":140,"column":9,"nodeType":"1580","messageId":"1581","endLine":140,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1916","line":168,"column":9,"nodeType":"1580","messageId":"1581","endLine":168,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1894","line":14,"column":5,"nodeType":"1580","messageId":"1581","endLine":14,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1699","line":20,"column":10,"nodeType":"1580","messageId":"1581","endLine":20,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1918","line":23,"column":7,"nodeType":"1580","messageId":"1581","endLine":23,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1919","line":131,"column":11,"nodeType":"1580","messageId":"1581","endLine":131,"endColumn":28},{"ruleId":"1582","severity":1,"message":"1895","line":133,"column":11,"nodeType":"1580","messageId":"1581","endLine":133,"endColumn":18},{"ruleId":"1582","severity":1,"message":"1595","line":7,"column":21,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1623","line":19,"column":10,"nodeType":"1580","messageId":"1581","endLine":19,"endColumn":30},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1943","line":7,"column":10,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1616","line":10,"column":5,"nodeType":"1580","messageId":"1581","endLine":10,"endColumn":15},{"ruleId":"1582","severity":1,"message":"1617","line":11,"column":5,"nodeType":"1580","messageId":"1581","endLine":11,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1636","line":27,"column":11,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":20},{"ruleId":"1582","severity":1,"message":"1635","line":35,"column":15,"nodeType":"1580","messageId":"1581","endLine":35,"endColumn":32},{"ruleId":"1582","severity":1,"message":"1997","line":63,"column":15,"nodeType":"1580","messageId":"1581","endLine":63,"endColumn":26},{"ruleId":"1637","severity":1,"message":"1638","line":87,"column":12,"nodeType":"1639","endLine":87,"endColumn":28,"suggestions":"1998"},{"ruleId":"1582","severity":1,"message":"1595","line":7,"column":21,"nodeType":"1580","messageId":"1581","endLine":7,"endColumn":34},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1917","line":15,"column":5,"nodeType":"1580","messageId":"1581","endLine":15,"endColumn":19},{"ruleId":"1582","severity":1,"message":"1893","line":9,"column":30,"nodeType":"1580","messageId":"1581","endLine":9,"endColumn":48},{"ruleId":"1582","severity":1,"message":"1699","line":21,"column":10,"nodeType":"1580","messageId":"1581","endLine":21,"endColumn":37},{"ruleId":"1582","severity":1,"message":"1595","line":4,"column":3,"nodeType":"1580","messageId":"1581","endLine":4,"endColumn":16},{"ruleId":"1582","severity":1,"message":"1896","line":27,"column":8,"nodeType":"1580","messageId":"1581","endLine":27,"endColumn":10},{"ruleId":"1582","severity":1,"message":"1920","line":93,"column":9,"nodeType":"1580","messageId":"1581","endLine":93,"endColumn":13},{"ruleId":"1582","severity":1,"message":"1921","line":99,"column":9,"nodeType":"1580","messageId":"1581","endLine":99,"endColumn":19},{"ruleId":"1642","severity":1,"message":"1741","line":453,"column":27,"nodeType":"1644","messageId":"1645","endLine":453,"endColumn":29},{"ruleId":"1582","severity":1,"message":"1893","line":8,"column":30,"nodeType":"1580","messageId":"1581","endLine":8,"endColumn":48},{"ruleId":"1637","severity":1,"message":"1922","line":74,"column":6,"nodeType":"1639","endLine":74,"endColumn":20,"suggestions":"1999"},{"ruleId":"1642","severity":1,"message":"1643","line":61,"column":16,"nodeType":"1644","messageId":"1645","endLine":61,"endColumn":18},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'FC' is defined but never used.","'ReactNode' is defined but never used.","'useCallback' is defined but never used.","'styled' is defined but never used.","'HashRouter' is defined but never used.","'Box' is defined but never used.","'useConnection' is defined but never used.","'useWallet' is defined but never used.","'WalletError' is defined but never used.","'WalletNotConnectedError' is defined but never used.","'Connection' is defined but never used.","'Keypair' is defined but never used.","'SystemProgram' is defined but never used.","'Transaction' is defined but never used.","'clusterApiUrl' is defined but never used.","'Helmet' is defined but never used.","'useSnackbar' is defined but never used.","'GRAPE_RPC_ENDPOINT' is defined but never used.","'i18n' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"2000","text":"2001"},"'memo' is defined but never used.","'Suspense' is defined but never used.","'BN' is defined but never used.","'performReverseLookup' is defined but never used.","'ConnectionType' is defined but never used.","'formatAddress' is defined but never used.","'isValidAddr' is defined but never used.","'lt' is defined but never used.","'TransactionInstruction' is defined but never used.","'Pagination' is defined but never used.","'Stack' is defined but never used.","'ArtTrackOutlinedIcon' is defined but never used.","'OpenInNewIcon' is defined but never used.","'GRAPE_RPC_REFRESH' is defined but never used.","'MakeLinkableAddress' is defined but never used.","'timeAgo' is defined but never used.","'ConstructionOutlined' is defined but never used.","'StyledTable' is assigned a value but never used.","'Alert' is assigned a value but never used.","'ExpandMore' is assigned a value but never used.","'getParam' is defined but never used.","'convertSolVal' is defined but never used.","'formatBlockTime' is defined but never used.","'PubKeyDialog' is assigned a value but never used.","'intFromBytes' is defined but never used.","'getInt64Bytes' is defined but never used.","'Props' is defined but never used.","'GalleryItem' is assigned a value but never used.","'handleExpandClick' is assigned a value but never used.","'MD_PUBKEY' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCollectionMeta' and 'mint'. Either include them or remove the dependency array.","ArrayExpression",["2002"],"'StyledSpeedDial' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setLoading' is assigned a value but never used.","'setThisPublicKey' is assigned a value but never used.","'enqueueSnackbar' is assigned a value but never used.","'closeSnackbar' is assigned a value but never used.","'setWalletCollection' is assigned a value but never used.","'setWalletCollectionMeta' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'rowsperpage' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'tabvalue'. Either include it or remove the dependency array.",["2003"],"'setPubKey' is assigned a value but never used.","'setCollectionArray' is assigned a value but never used.","'connection' is assigned a value but never used.","'searchAddrInfo' is assigned a value but never used.","'ref' is assigned a value but never used.","'fetchMore' is assigned a value but never used.","'tofollow' is assigned a value but never used.","'promise' is assigned a value but never used.","'handlePageChange' is assigned a value but never used.","'handleExpandCollectionClick' is assigned a value but never used.",{"range":"2004","text":"2005"},"'bump' is assigned a value but never used.","'meta_primer' is assigned a value but never used.","'meta_final' is assigned a value but never used.","'wallletlength' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'fetchProfilePicture', 'fetchSolanaDomain', 'getCollectionMeta', 'getFollowStatus', 'initFollowListInfo', and 'loadCount'. Either include them or remove the dependency array.",["2006"],"React Hook React.useEffect has missing dependencies: 'pubkey' and 'publicKey'. Either include them or remove the dependency array.",["2007"],"'setGallery' is assigned a value but never used.","'solWebUrl' is assigned a value but never used.","'setSolWebUrl' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.",{"range":"2008","text":"2005"},"'wallet' is assigned a value but never used.","'ROOT_TLD_AUTHORITY' is assigned a value but never used.","'PROGRAM_ID' is assigned a value but never used.","'centralState' is assigned a value but never used.","'registry' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getWalletGallery'. Either include it or remove the dependency array.",["2009"],"React Hook React.useEffect has missing dependencies: 'getReverseDomainLookup', 'getTwitterLookup', and 'navigate'. Either include them or remove the dependency array.",["2010"],"React Hook React.useEffect has a missing dependency: 'pubkey'. Either include it or remove the dependency array.",["2011"],"'alpha' is defined but never used.","'useLocation' is defined but never used.","'NavLink' is defined but never used.","'GRAPE_PREVIEW' is defined but never used.","'ValidateAddress' is defined but never used.","'Token' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'ASSOCIATED_TOKEN_PROGRAM_ID' is defined but never used.","'FollowListInfoResp' is defined but never used.","'followListInfoQuery' is defined but never used.","'DialogContentText' is defined but never used.","'FlagIcon' is defined but never used.","'EmojiFlagsIcon' is defined but never used.","'FavoriteIcon' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'TOKEN_VERIFICATION_NAME' is defined but never used.","'FREE_RPC_ENDPOINT' is defined but never used.","'FEATURED_DAO_ARRAY' is defined but never used.","'GRAPE_TREASURY' is defined but never used.","'TOKEN_REPORT_AMOUNT' is defined but never used.","'ValidateCurve' is defined but never used.","'GrapeIcon' is defined but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'verified' is assigned a value but never used.","Assignments to the 'grape_verified' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","CallExpression","'collectionrawprimer' is assigned a value but never used.","'setMint' is assigned a value but never used.","'setGrapeOfferThreshhold' is assigned a value but never used.","'open_offers_collapse' is assigned a value but never used.","'setOpenOffersCollapse' is assigned a value but never used.","'setGrapeWhitelisted' is assigned a value but never used.","'setCollectionItemImages' is assigned a value but never used.","'onError' is assigned a value but never used.","'salePrice' is assigned a value but never used.","'handleClickOpenOffers' is assigned a value but never used.","'handleSendItem' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getFollowStatus' and 'tokenOwners'. Either include them or remove the dependency array.",["2012"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has missing dependencies: 'fetchTokenAccountOwnerHoldings', 'getMintOwner', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["2013"],"React Hook React.useEffect has missing dependencies: 'collectionItemImages', 'collectionitem.image', 'fetchTokenAccountData', and 'tokenOwners'. Either include them or remove the dependency array.",["2014"],"Expected '===' and instead saw '=='.","'collection' is assigned a value but never used.","'setCollection' is assigned a value but never used.","'loading' is assigned a value but never used.","'setInputPKValue' is assigned a value but never used.","'HandlePKSubmit' is defined but never used.","'CollectionProfileClear' is assigned a value but never used.","'setThisMint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCollectionMeta'. Either include it or remove the dependency array.",["2015"],"React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["2016"],"'Link' is defined but never used.","'CopyToClipboard' is defined but never used.","'Snackbar' is defined but never used.","'WalletDisconnectButton' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'Paper' is defined but never used.","'HeaderProps' is defined but never used.","'open_menu' is assigned a value but never used.","'open_snackbar' is assigned a value but never used.","'setSnackbarState' is assigned a value but never used.","'tokenParam' is assigned a value but never used.","'setTokenParam' is assigned a value but never used.","'discordId' is assigned a value but never used.","'setDiscordId' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'setProviders' is assigned a value but never used.","'open_wallet' is assigned a value but never used.","'isWalletOpen' is assigned a value but never used.","'currPath' is assigned a value but never used.","'searchParams' is assigned a value but never used.","'routes' is assigned a value but never used.","'menuId' is assigned a value but never used.","'menuWalletId' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'handleWalletConnectClickOpen' is assigned a value but never used.","'handleCloseWallet' is assigned a value but never used.","'SimpleDialog' is defined but never used.","'handleClickSnackbar' is assigned a value but never used.","'makeStyles' is defined but never used.","'themeInstance' is assigned a value but never used.","'serialize' is defined but never used.","'favoriteDisplayName' is assigned a value but never used.","'fn' is assigned a value but never used.","'useEffect' is defined but never used.","'useParams' is defined but never used.","'useSearchParams' is defined but never used.","'reportalertopen' is assigned a value but never used.","'warningreportopen' is assigned a value but never used.","'sendTransaction' is assigned a value but never used.","'NAME_SPACE' is assigned a value but never used.","'cyberConnect' is assigned a value but never used.","'handleAlertReportClose' is assigned a value but never used.","'handleWarningReportClose' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getFlagStatus' and 'initFollowListInfo'. Either include them or remove the dependency array.",["2017"],"'setLimit' is assigned a value but never used.","'maxPage' is assigned a value but never used.","'beforeSignature' is assigned a value but never used.","'featuredmeta' is assigned a value but never used.","'saleTimeAgo' is assigned a value but never used.","'setSaleTimeAgo' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'finalMeta' and 'getMeta'. Either include them or remove the dependency array.",["2018"],{"range":"2019","text":"2005"},"'auctionHouseObj' is assigned a value but never used.","'featured' is assigned a value but never used.","@typescript-eslint/no-redeclare","'value' is already defined.","redeclared","'feePayer' is assigned a value but never used.","'progAddress' is assigned a value but never used.","'mcnt' is assigned a value but never used.","'i' is already defined.","'CardActionArea' is defined but never used.","'SnackbarOrigin' is defined but never used.","'setType' is assigned a value but never used.","'rpclimit' is assigned a value but never used.","'solanaDomain' is assigned a value but never used.","'setSolanaDomain' is assigned a value but never used.","'isFollowing' is assigned a value but never used.","'setIsFollowing' is assigned a value but never used.","'setSearchAddrInfo' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'setAddress' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'address', 'fetchProfilePicture', and 'loadingpicture'. Either include them or remove the dependency array.",["2020"],"'setFollowItem' is assigned a value but never used.","'setFollowItemKey' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'initFollowListInfo' and 'pubkey'. Either include them or remove the dependency array.",["2021"],"'RedditShareButton' is defined but never used.","'TumblrShareButton' is defined but never used.","'FacebookMessengerIcon' is defined but never used.","'HatenaIcon' is defined but never used.","'InstapaperIcon' is defined but never used.","'LineIcon' is defined but never used.","'LinkedinIcon' is defined but never used.","'LivejournalIcon' is defined but never used.","'MailruIcon' is defined but never used.","'OKIcon' is defined but never used.","'PinterestIcon' is defined but never used.","'PocketIcon' is defined but never used.","'RedditIcon' is defined but never used.","'TumblrIcon' is defined but never used.","'VKIcon' is defined but never used.","'WeiboIcon' is defined but never used.","'WorkplaceIcon' is defined but never used.","'WRAPPED_SOL_MINT' is defined but never used.","'getMetadata' is defined but never used.","'getAuctionHouseProgramAsSigner' is defined but never used.","'loadWalletKey' is defined but never used.","'IconButtonProps' is defined but never used.","'walletCollectionMeta' is assigned a value but never used.","'counter' is assigned a value but never used.","'handleAlertWithdrawOpen' is assigned a value but never used.","'handleCancelOffer' is assigned a value but never used.","'item' is already defined.","'existSaleCancelAction' is assigned a value but never used.","'auctionMint' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'cntr' is assigned a value but never used.","'amount' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getOffers', 'loading', and 'offers'. Either include them or remove the dependency array.",["2022"],"'HistoryView' is defined but never used.","'TOKEN_REALM_PROGRAM_ID' is defined but never used.","'TOKEN_REALM_ID' is defined but never used.","'TOKEN_VERIFICATION_ADDRESS' is defined but never used.","'cancelOffer' is defined but never used.","'withdrawOffer' is defined but never used.","'ggoconnection' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'mintOwner'. Either include it or remove the dependency array.",["2023"],"'buyerPublicKey' is assigned a value but never used.","'setMintAta' is assigned a value but never used.","'anchorWallet' is assigned a value but never used.","'grape_governance_balance' is assigned a value but never used.","'setBuyNowPrompt' is assigned a value but never used.","'handleWithdrawOffer' is assigned a value but never used.","'forSaleTimeAgo' is assigned a value but never used.","'instructionType' is assigned a value but never used.","'allLogMessages' is assigned a value but never used.","'setSolanaPay' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getOffers'. Either include it or remove the dependency array.",["2024"],"'OTHER_MARKETPLACES' is defined but never used.","'getAuctionHouseTradeState' is defined but never used.","'currBal' is assigned a value but never used.","'fs' is defined but never used.","'weighted' is defined but never used.","'web3' is defined but never used.","'getRealms' is defined but never used.","'getVoteRecordsByVoter' is defined but never used.","'getTokenOwnerRecordForRealm' is defined but never used.","'getTokenOwnerRecordsByOwner' is defined but never used.","'getGovernanceAccounts' is defined but never used.","'pubkeyFilter' is defined but never used.","'TokenOwnerRecord' is defined but never used.","'serializeInstructionToBase64' is defined but never used.","'AccountMetaData' is defined but never used.","'getRealm' is defined but never used.","'getAllProposals' is defined but never used.","'AnyMxRecord' is defined but never used.","'governingTokenMintAuthority' is assigned a value but never used.","'communityTokenMint' is assigned a value but never used.","'realmAuthority' is assigned a value but never used.","'wit1' is assigned a value but never used.","'wit2' is assigned a value but never used.","'wit3' is assigned a value but never used.","'getTokenAmount' is defined but never used.","'sol_precision' is assigned a value but never used.","'transferAuthority' is assigned a value but never used.","'uuid' is assigned a value but never used.","'totalShare' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fn'. Either include it or remove the dependency array.",["2025"],"'Global' is defined but never used.","'decodeMetadata' is defined but never used.","'Commitment' is defined but never used.","'grey' is defined but never used.","'Skeleton' is defined but never used.","'ListItemIcon' is defined but never used.","'SwipeableDrawer' is defined but never used.","'CssBaseline' is defined but never used.","'trimAddress' is defined but never used.","'JavascriptRounded' is defined but never used.","'isAvailable' is assigned a value but never used.",["2026"],"React Hook React.useEffect has missing dependencies: 'fetchProfilePicture', 'fetchSolanaBalance', 'fetchSolanaDomain', 'fetchSolanaTokens', and 'fetchSolanaTransactions'. Either include them or remove the dependency array.",["2027"],"'TOKEN_VERIFICATION_AMOUNT' is defined but never used.","React Hook React.useEffect has missing dependencies: 'getLikeStatus' and 'initFollowListInfo'. Either include them or remove the dependency array.",["2028"],["2029"],"'fetch' is defined but never used.","'PublicKey' is defined but never used.","'Typography' is defined but never used.","'ListItemButton' is defined but never used.","'SearchUserInfoResp' is defined but never used.","'getProfilePicture' is defined but never used.","'Jazzicon' is defined but never used.","'jsNumberForAddress' is defined but never used.","'Button' is defined but never used.","'Avatar' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'GalleryItem' is defined but never used.","'GRAPE_PROFILE' is defined but never used.","'type' is assigned a value but never used.",{"range":"2030","text":"2005"},"React Hook React.useEffect has a missing dependency: 'getCollectionMeta'. Either include it or remove the dependency array.",["2031"],["2032"],["2033"],"no-native-reassign",["2034"],"no-negated-in-lhs",["2035"],{"range":"2036","text":"2001"},["2037"],["2038"],{"range":"2039","text":"2005"},["2040"],["2041"],{"range":"2042","text":"2005"},["2043"],["2044"],["2045"],["2046"],["2047"],["2048"],["2049"],["2050"],["2051"],["2052"],["2053"],["2054"],{"range":"2055","text":"2005"},{"range":"2056","text":"2005"},["2057"],["2058"],["2059"],["2060"],["2061"],["2062"],["2063"],["2064"],["2065"],"'setImageUrl' is assigned a value but never used.",["2066"],["2067"],[1473,5162],"[\n    {\n        name: 'Magic Eden',\n        logo: 'https://magiceden.io/static/media/logo.ca418d75.svg',\n        //logo: 'https://magiceden.io/img/logo.png',\n        address: 'GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp',\n        previewUrl: 'https://www.magiceden.io/item-details/',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'SolanArt',\n        logo: 'https://solanart.io/static/media/logo.0054f7e7.png',\n        address: '3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK',\n        previewUrl: 'https://solanart.io/search/?token=',\n        url: 'https://solanart.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/favicon-32x32.png',\n        address: 'F4ghBzHFNgJxV4wEQDchU5i7n4XWWMBSaq7CuswGiVsr',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/favicon-32x32.png',\n        address: 'BweTPKW9QsWZTJnfbLz88ekKaWw7HrBJsStrduHryPgk',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Alph Art',\n        //logo: 'https://alpha.art/icon-root.svg',\n        logo: 'https://alpha.art/logo_192.png',\n        address: '4pUQS4Jo2dsfWzt3VgHXy3H6RYnEDd11oWPiaM2rdAPw',\n        previewUrl: 'https://alpha.art/t/',\n        url: 'https://www.alpha.art'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: '73tF8uN3BwVzUzwETv59WNAafuEBct2zTgYbYXLggQiU',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HHvnfyY7vNWhjeHqCVyMPr4UjDp3ptqu3QbuFoCkrm8r',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HznNaC2cz1iXMtHMG3HAgMH2xkrt2iTXfUKz6wwAAVPB',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'G6xptnrkj4bxg9H9ZyPzmAnNsGghSxZ7oBCL1KNKJUza',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: '7Ppgch9d4XRAygVNJP4bDkc7V6htYXGfghX4zzG9r4cH',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'EQEpTS8SiVPUxyqRgT2Jdx9dHEwbpcbSZ2sotiAUZ7i7',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'CPo76cw52gKMTyvCS9GpnnZfvmkQQxovLwQFxonZrCRU',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    }\n]",{"desc":"2068","fix":"2069"},{"desc":"2070","fix":"2071"},[30073,30084],"[]",{"desc":"2072","fix":"2073"},{"desc":"2074","fix":"2075"},[56926,56937],{"desc":"2076","fix":"2077"},{"desc":"2078","fix":"2079"},{"desc":"2080","fix":"2081"},{"desc":"2082","fix":"2083"},{"desc":"2084","fix":"2085"},{"desc":"2086","fix":"2087"},{"desc":"2088","fix":"2089"},{"desc":"2090","fix":"2091"},{"desc":"2092","fix":"2093"},{"desc":"2094","fix":"2095"},[16455,16466],{"desc":"2096","fix":"2097"},{"desc":"2098","fix":"2099"},{"desc":"2100","fix":"2101"},{"desc":"2102","fix":"2103"},{"desc":"2104","fix":"2105"},{"desc":"2106","fix":"2107"},{"desc":"2108","fix":"2109"},{"desc":"2110","fix":"2111"},{"desc":"2112","fix":"2113"},{"desc":"2092","fix":"2114"},[4639,4650],{"desc":"2115","fix":"2116"},{"desc":"2098","fix":"2117"},{"desc":"2068","fix":"2118"},"no-global-assign","no-unsafe-negation",[1574,5263],{"desc":"2068","fix":"2119"},{"desc":"2070","fix":"2120"},[30037,30048],{"desc":"2072","fix":"2121"},{"desc":"2074","fix":"2122"},[57662,57673],{"desc":"2076","fix":"2123"},{"desc":"2078","fix":"2124"},{"desc":"2080","fix":"2125"},{"desc":"2108","fix":"2126"},{"desc":"2110","fix":"2127"},{"desc":"2082","fix":"2128"},{"desc":"2084","fix":"2129"},{"desc":"2086","fix":"2130"},{"desc":"2088","fix":"2131"},{"desc":"2090","fix":"2132"},{"desc":"2092","fix":"2133"},{"desc":"2094","fix":"2134"},[16455,16466],[4639,4650],{"desc":"2115","fix":"2135"},{"desc":"2098","fix":"2136"},{"desc":"2096","fix":"2137"},{"desc":"2098","fix":"2138"},{"desc":"2100","fix":"2139"},{"desc":"2112","fix":"2140"},{"desc":"2092","fix":"2141"},{"desc":"2102","fix":"2142"},{"desc":"2104","fix":"2143"},{"desc":"2068","fix":"2144"},{"desc":"2106","fix":"2145"},"Update the dependencies array to be: [collectionitem, getCollectionMeta, mint]",{"range":"2146","text":"2147"},"Update the dependencies array to be: [props?.activeTab, tabvalue]",{"range":"2148","text":"2149"},"Update the dependencies array to be: [fetchProfilePicture, fetchSolanaDomain, getCollectionMeta, getFollowStatus, initFollowListInfo, loadCount, pubkey]",{"range":"2150","text":"2151"},"Update the dependencies array to be: [solanaDomain, profilePictureUrl, publicKey, pubkey]",{"range":"2152","text":"2153"},"Update the dependencies array to be: [getWalletGallery, pubkey]",{"range":"2154","text":"2155"},"Update the dependencies array to be: [getReverseDomainLookup, getTwitterLookup, navigate, withPubKey]",{"range":"2156","text":"2157"},"Update the dependencies array to be: [pubkey, publicKey, urlParams]",{"range":"2158","text":"2159"},"Update the dependencies array to be: [getFollowStatus, publicKey, tokenOwners]",{"range":"2160","text":"2161"},"Update the dependencies array to be: [fetchTokenAccountOwnerHoldings, getMintOwner, mintAta, props, publicKey, refreshOwner]",{"range":"2162","text":"2163"},"Update the dependencies array to be: [collectionItemImages, collectionitem.image, fetchTokenAccountData, mint, tokenOwners]",{"range":"2164","text":"2165"},"Update the dependencies array to be: [getCollectionMeta, thismint]",{"range":"2166","text":"2167"},"Update the dependencies array to be: [history, mint, refresh]",{"range":"2168","text":"2169"},"Update the dependencies array to be: [getFlagStatus, initFollowListInfo]",{"range":"2170","text":"2171"},"Update the dependencies array to be: [finalMeta, getMeta, itemraw]",{"range":"2172","text":"2173"},"Update the dependencies array to be: [address, fetchProfilePicture, loadingpicture]",{"range":"2174","text":"2175"},"Update the dependencies array to be: [initFollowListInfo, pubkey]",{"range":"2176","text":"2177"},"Update the dependencies array to be: [getOffers, loading, offers, refresh, thisPublicKey]",{"range":"2178","text":"2179"},"Update the dependencies array to be: [mintOwner]",{"range":"2180","text":"2181"},"Update the dependencies array to be: [getOffers, mintAta, refreshOffers]",{"range":"2182","text":"2183"},"Update the dependencies array to be: [refresh, key, fn]",{"range":"2184","text":"2185"},"Update the dependencies array to be: [urlParams, publicKey, pubkey]",{"range":"2186","text":"2187"},"Update the dependencies array to be: [fetchProfilePicture, fetchSolanaBalance, fetchSolanaDomain, fetchSolanaTokens, fetchSolanaTransactions, pubkey]",{"range":"2188","text":"2189"},"Update the dependencies array to be: [getLikeStatus, initFollowListInfo]",{"range":"2190","text":"2191"},{"range":"2192","text":"2171"},"Update the dependencies array to be: [getCollectionMeta, likeListInfo]",{"range":"2193","text":"2194"},{"range":"2195","text":"2177"},{"range":"2196","text":"2147"},{"range":"2197","text":"2147"},{"range":"2198","text":"2149"},{"range":"2199","text":"2151"},{"range":"2200","text":"2153"},{"range":"2201","text":"2155"},{"range":"2202","text":"2157"},{"range":"2203","text":"2159"},{"range":"2204","text":"2187"},{"range":"2205","text":"2189"},{"range":"2206","text":"2161"},{"range":"2207","text":"2163"},{"range":"2208","text":"2165"},{"range":"2209","text":"2167"},{"range":"2210","text":"2169"},{"range":"2211","text":"2171"},{"range":"2212","text":"2173"},{"range":"2213","text":"2194"},{"range":"2214","text":"2177"},{"range":"2215","text":"2175"},{"range":"2216","text":"2177"},{"range":"2217","text":"2179"},{"range":"2218","text":"2191"},{"range":"2219","text":"2171"},{"range":"2220","text":"2181"},{"range":"2221","text":"2183"},{"range":"2222","text":"2147"},{"range":"2223","text":"2185"},[10670,10686],"[collectionitem, getCollectionMeta, mint]",[19521,19539],"[props?.activeTab, tabvalue]",[35066,35074],"[fetchProfilePicture, fetchSolanaDomain, getCollectionMeta, getFollowStatus, initFollowListInfo, loadCount, pubkey]",[35687,35720],"[solanaDomain, profilePictureUrl, publicKey, pubkey]",[62045,62053],"[getWalletGallery, pubkey]",[63126,63138],"[getReverseDomainLookup, getTwitterLookup, navigate, withPubKey]",[63358,63380],"[pubkey, publicKey, urlParams]",[21904,21915],"[getFollowStatus, publicKey, tokenOwners]",[30394,30428],"[fetchTokenAccountOwnerHoldings, getMintOwner, mintAta, props, publicKey, refreshOwner]",[30752,30758],"[collectionItemImages, collectionitem.image, fetchTokenAccountData, mint, tokenOwners]",[96038,96048],"[getCollectionMeta, thismint]",[97638,97653],"[history, mint, refresh]",[5502,5504],"[getFlagStatus, initFollowListInfo]",[8464,8473],"[finalMeta, getMeta, itemraw]",[5789,5791],"[address, fetchProfilePicture, loadingpicture]",[10046,10048],"[initFollowListInfo, pubkey]",[56985,57009],"[getOffers, loading, offers, refresh, thisPublicKey]",[11365,11367],"[mintOwner]",[93571,93595],"[getOffers, mintAta, refreshOffers]",[2000,2014],"[refresh, key, fn]",[7669,7691],"[urlParams, publicKey, pubkey]",[8017,8025],"[fetchProfilePicture, fetchSolanaBalance, fetchSolanaDomain, fetchSolanaTokens, fetchSolanaTransactions, pubkey]",[5878,5880],"[getLikeStatus, initFollowListInfo]",[21121,21123],[7707,7721],"[getCollectionMeta, likeListInfo]",[7826,7828],[2667,2683],[10670,10686],[19521,19539],[35802,35810],[36423,36456],[62781,62789],[63862,63874],[64094,64116],[7669,7691],[8017,8025],[21904,21915],[30394,30428],[30752,30758],[96038,96048],[97638,97653],[5502,5504],[8464,8473],[7707,7721],[7826,7828],[5789,5791],[10046,10048],[56985,57009],[5878,5880],[21121,21123],[11720,11722],[94458,94482],[2944,2960],[2000,2014]]