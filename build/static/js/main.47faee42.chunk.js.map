{"version":3,"sources":["components/static/SolCurrencyIcon.tsx","Featured/Featured.tsx","Identity/Identity.tsx","Header/Header.tsx","components/ConfirmDialog/ConfirmDialog.tsx","utils/config/theme.tsx","App.tsx","reportWebVitals.js","index.js","utils/cyberConnect/query.ts","utils/grapeTools/safe-math.ts","utils/cyberConnect/types.ts","utils/grapeTools/utils.ts","Profile/Profile.tsx","utils/auctionHouse/helpers/schema.ts","utils/auctionHouse/helpers/constants.ts","utils/auctionHouse/cancelWithdrawOffer.ts","utils/grapeTools/constants.ts","utils/auctionHouse/helpers/accounts.ts","utils/grapeTools/ShareUrl.tsx","utils/cache.tsx","utils/web3/program-address.tsx","utils/web3/name-service.tsx","utils/web3/name-auctioning.tsx","utils/name-service.tsx","utils/cyberConnect/helper.ts","utils/grapeTools/WalletAddress.tsx","utils/auctionHouse/helpers/various.ts","utils/grapeTools/RegexTextField.jsx","App.less","Profile/OffersView.tsx","components/static/GrapeIcon.tsx","utils/auctionHouse/withdrawOffer.ts","Profile/SocialView.tsx","Preview/Preview.tsx","utils/auctionHouse/sellNowListing.ts","Profile/FeedView.tsx","utils/auctionHouse/cancelOffer.ts","Profile/GalleryView.tsx","utils/grapeTools/mintverification.ts","Preview/ItemOffers.tsx","utils/auctionHouse/submitOffer.ts","utils/auctionHouse/acceptOffer.ts","utils/auctionHouse/cancelListing.ts","utils/auctionHouse/buyNowListing.ts","utils/auctionHouse/depositInGrapeVine.ts","utils/auctionHouse/createDAOProposal.ts"],"names":["SolCurrencyIcon","props","d","id","FeaturedView","FEATURED_DAO_ARRAY","map","featured","key","Card","sx","borderRadius","mb","CardActionArea","component","Link","to","GRAPE_PROFILE","address","CardMedia","image","img","alt","title","maxHeight","background","m","p","CardContent","Typography","gutterBottom","variant","color","text","src","style","opacity","position","marginTop","marginBottom","padding","top","left","width","CardActions","Grid","container","direction","justifyContent","alignContent","pr","ButtonGroup","Button","size","href","daourl","target","url","trimAddress","IdentityView","React","useState","profilePictureUrl","setProfilePictureUrl","solanaDomain","setSolanaDomain","solanaHoldings","setSolanaHoldings","loading","setLoading","publicKey","useWallet","pubkey","setPubkey","ggoconnection","Connection","GRAPE_RPC_ENDPOINT","handlekey","useParams","useSearchParams","searchParams","urlParams","get","fetchSolanaHoldings","a","getTokenAccountsByOwner","PublicKey","programId","response","holdings","value","item","push","console","log","JSON","stringify","fetchProfilePicture","getProfilePicture","isAvailable","img_url","replace","fetchSolanaDomain","findDisplayName","domain","useEffect","ValidateAddress","toBase58","Fragment","Box","spacing","alignItems","rowSpacing","xs","textTransform","display","mt","className","List","dense","ListItem","ListItemButton","ListItemAvatar","Avatar","ListItemText","primary","secondary","ml","length","getParam","param","URLSearchParams","window","location","search","require","Search","styled","theme","border","backgroundColor","alpha","palette","common","white","marginRight","marginLeft","breakpoints","up","SearchIconWrapper","height","pointerEvents","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","Header","open_menu","anchorEl","Boolean","newinputpkvalue","setNewInputPKValue","navigate","useNavigate","useLocation","pathname","useSnackbar","enqueueSnackbar","Toolbar","flexGrow","Container","onSubmit","event","preventDefault","toLocaleUpperCase","indexOf","slice","placeholder","inputProps","onChange","e","useConfirmDialogStore","set","message","undefined","close","ConfirmDialog","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","IconButton","onClick","Close","DialogContent","DialogActions","createTheme","typography","fontFamily","join","mode","default","paper","Copyright","align","DashboardContent","setOpen","network","WalletAdapterNetwork","Mainnet","endpoint","FREE_RPC_ENDPOINT","wallets","useMemo","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","ThemeProvider","grapeTheme","ConnectionProvider","WalletProvider","autoConnect","flex","CssBaseline","AppBar","toggleDrawer","path","element","Profile","index","Preview","NotFound","overflow","Paper","Dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","endPoint","querySchemas","operationName","query","variables","namespace","followingFirst","followingAfter","followerFirst","followerAfter","fromAddr","toAddr","request","data","fetch","method","cache","headers","referrerPolicy","body","json","handleQuery","followListInfoQuery","schema","resp","identity","searchUserInfoQuery","TokenAmount","wei","decimals","isWei","_decimals","this","BigNumber","exponentiatedBy","multipliedBy","dividedBy","vaule","toFormat","isInteger","toFixed","isNaN","isZero","Network","base58","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","toBuffer","readPubkeyAsString","encode","writePubkeyAsString","decode","MetadataKey","MetadataCategory","MasterEditionV1","args","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV2","EditionMarker","ledger","edition","editionOffset","indexOffset","Math","floor","Error","positionInBitsetFromRight","mask","pow","Edition","parent","EditionV1","Creator","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","updateAuthority","mint","primarySaleHappened","isMutable","editionNonce","masterEdition","MetadataV1","METADATA_SCHEMA","Map","instruction","kind","fields","type","METADATA_REPLACE","RegExp","decodeMetadata","buffer","metadata","deserializeUnchecked","Table","borderBottom","expand","other","transform","duration","shortest","TabPanel","children","role","hidden","SpeedDial","bottom","right","MainMenu","disablePadding","disabled","TabActiveContext","createContext","activeTab","setActiveTab","at","TabActiveProvider","initialActiveKey","Provider","MainPanel","thisPublicKey","closeSnackbar","wallet_collection","walletCollection","wallet_collection_meta","walletCollectionMeta","finalCollection","final_collection","tabvalue","setTabValue","a11yProps","sm","md","lg","xl","minHeight","scrollButtons","newValue","icon","smUp","fontSize","label","smDown","minWidth","selectedstate","collection","setCollectionMeta","setCollectionMetaFinal","useConnection","connection","featuredObj","setFeaturedObj","hasProfilePicture","setHasProfilePicture","isFollowing","setIsFollowing","loadCount","setLoadCount","loadingFollowState","setLoadingFollowState","followListInfo","setFollowListInfo","setSearchAddrInfo","solanaProvider","NAME_SPACE","NETWORK","SOLANA","cyberConnect","CyberConnect","env","Env","PRODUCTION","chain","Blockchain","provider","chainRef","solana","SOLANA_MAINNET_CHAIN_REF","signingMessageEntity","initFollowListInfo","fetchSearchAddrInfo","followWalletConnect","followAddress","solanaAddress","connect","catch","error","getFollowStatus","followWalletDisconnect","disconnect","MD_PUBKEY","getCollectionData","start","mintsPDAs","Array","mintarr","account","parsed","info","mint_address","findProgramAddress","Buffer","from","pda","getMultipleAccountsInfo","metavalue","buf","etfm","socialconnection","connections","followStatus","getCollectionMeta","loops","ceil","collectionmeta","x","tmpcollectionmeta","concat","i","finalmeta","parse","pb","pl","mr","diameter","seed","jsNumberForAddress","GRAPE_IDENTITY","addr","trim","hasextlink","hascopy","permalink","fontsize","pt","followingCount","followerCount","ProfileView","gallery","setCollection","rdloading","setRDLoading","withPubKey","setWithPubKey","fetchWalletCollection","jsonrpc","params","encoding","commitment","resultValues","result","collectionInfo","tokenAmount","amount","getWalletGallery","Promise","all","getReverseDomainLookup","SOL_TLD_AUTHORITY","domainName","getHashedName","hashedName","getNameAccountKey","domainKey","NameRegistryState","retrieve","registry","owner","getTwitterLookup","getTwitterRegistry","CollectionProfile","endsWith","startsWith","TokenStandard","NonFungible","FungibleAsset","Fungible","NonFungibleEdition","Collection","CreateMetadataArgs","UpdateMetadataArgs","CreateMasterEditionArgs","tokenStandard","CANDY_MACHINE","AUCTION_HOUSE","TOKEN_ENTANGLER","ESCROW","A","B","FEE_PAYER","TREASURY","CANDY_MACHINE_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_PROGRAM_ID","FAIR_LAUNCH_PROGRAM_ID","AUCTION_HOUSE_PROGRAM_ID","TOKEN_ENTANGLEMENT_PROGRAM_ID","WRAPPED_SOL_MINT","ENV_AH","AUCTION_HOUSE_ADDRESS","process","convertSolVal","sol","cancelWithdrawOffer","offerAmount","buyerWalletKey","mintOwner","tokenSize","auctionHouseKey","web3","mintKey","loadAuctionHouseProgram","anchorProgram","auctionHouse","auctionHouseObj","sellerWalletKey","getAuctionHouseBuyerEscrow","escrow","getTokenAmount","treasuryMint","escrow_amount","escrowSolAmount","BN","getPriceWithMantissa","buyPriceAdjusted","tokenSizeAdjusted","getAtaForMint","tokenAccountKey","getAuctionHouseTradeState","tradeState","signers","cancel","accounts","wallet","tokenAccount","tokenMint","authority","auctionHouseFeeAccount","tokenProgram","instructions","withdrawAmmount","amountAdjusted","escrowPaymentAccount","bump","isNative","equals","ata","Keypair","generate","instruction2","withdraw","receiptAccount","systemProgram","SystemProgram","rent","SYSVAR_RENT_PUBKEY","ataProgram","ASSOCIATED_TOKEN_PROGRAM_ID","GRAPE_AH_MEMO","state","ah","toString","toNumber","derivedMintPDA","derivedBuyerPDA","derivedOwnerPDA","transfer","fromPubkey","toPubkey","lamports","TransactionInstruction","keys","isSigner","isWritable","GRAPE_PREVIEW","GRAPE_RPC_REFRESH","TOKEN_VERIFICATION_ADDRESS","TOKEN_VERIFICATION_NAME","TOKEN_VERIFICATION_AMOUNT","TOKEN_REALM_ID","TOKEN_REALM_PROGRAM_ID","OTHER_MARKETPLACES","logo","previewUrl","deserializeAccount","accountInfo","AccountLayout","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","isFrozen","isNativeOption","rentExemptReserve","closeAuthorityOption","closeAuthority","buyer","anchor","getMetadata","getAuctionHouseProgramAsSigner","buyPrice","toArrayLike","walletKeyPair","customRpcUrl","solConnection","clusterApiUrl","walletWrapper","preflightCommitment","fetchIdl","idl","getTokenAccountBalance","token","uiAmount","getBalance","BootstrapDialog","ShareSocialURL","shareUrl","PaperProps","borderTop","onCopy","navigator","subject","round","quote","CachePrefix","hashCode","s","h","imul","charCodeAt","asyncCache","AsyncStorage","getItem","cached","stringified","setItem","Sha256","resolve","ethers","utils","sha256","arr","isBuffer","Uint8Array","byteOffset","byteLength","createProgramAddress","seeds","alloc","forEach","TypeError","hash","is_on_curve","publicKeyBytes","toArray","nonce","seedsWithNonce","naclLowLevel","nacl","lowlevel","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","pow2523","neq25519","I","b","c","pack25519","crypto_verify_32","input","HASH_PREFIX","hashed_name","nameClass","nameParent","NAME_PROGRAM_ID","nameAccountKey","getHandleAndRegistryKey","verifiedPubkey","hashedVerifiedPubkey","TWITTER_VERIFICATION_AUTHORITY","TWITTER_ROOT_PARENT_REGISTRY_KEY","reverseRegistryKey","ReverseTwitterRegistryState","reverseRegistryState","twitterHandle","twitterRegistryKey","PROGRAM_ID","findOwnedNameAccountsForUser","userAccount","filters","memcmp","offset","bytes","getProgramAccounts","performReverseLookupBatch","nameAccounts","centralState","reverseLookupAccounts","nameAccount","hashedReverseLookup","reverseLookupAccount","retrieveBatch","names","nameLength","receiver","allNames","domainsAddresses","sort","localeCompare","reverse","filter","removeDuplicate","user","self","findIndex","Alert","forwardRef","ref","elevation","timeAgo","blockTime","prettydate","moment","unix","format","timeago","Date","diff","asDays","hoursago","asHours","minutesAgo","asMinutes","asSeconds","substring","end","ValidateCurve","isOnCurve","MakeLinkableAddress","isDNS","stri_addr","open_snackbar","setSnackbarState","handleCopyClick","handleCloseSnackbar","reason","ClipboardAction","autoHideDuration","severity","PermalinkAction","price","Token","getMintInfo","mintInfo","mantissa","RegexTextField","regex","rest","handleChange","useCallback","currentTarget","defaultProps","parseFloat","formatBlockTime","date","epoch","time","date_str","toLocaleDateString","toLocaleString","OffersView","offers","setOffers","myoffers","setMyOffers","listings","setListings","ahbalance","setAHBalance","ahloading","setAHLoading","sendTransaction","refresh","setRefresh","setCounter","limit","setMaxPage","setBeforeSignature","alertwithdrawopen","setAlertWithdrawOpen","handleAlertWithdrawClose","handleCancelWithdrawOffer","getTokenLargestAccounts","tokenKey","getAccountInfo","mintAccountInfo","mintAccountInfoDs","transactionInstr","instructionsArray","flat","transaction","Transaction","add","signedTransaction","cnfrmkey","action","persist","confirmTransaction","eskey","anchorOrigin","vertical","horizontal","setTimeout","handleWithdrawOffer","allmints","offeramount","withdrawOffer","cnt","cancelOffer","getOffers","getEscrowBalance","getSignaturesForAddress","offerResults","cancelStateResults","allListingResults","listingResults","mintArrayPDA","escrow_cache","exists","cntr","sellerTradeStateArr","signatures","signature","getParsedTransactions","getTransactionAccountInputs2","err","getTransactionAccountInputs","feePayer","accountKeys","progAddress","meta","logMessages","escrow_found","escrow_found_index","amount_on_escrow","preTokenBalances","memo","memo_arr","memo_str","memo_instances","match","submemo","mx","init","fin","substr","memo_item","memo_json","status","sale_state_exists","sellPrice","ownerHasMint","wvalue","tradeStatePublicKey","buyeraddress","isowner","timestamp","thisTokenOwner","sellerTradeState","j","tradeStates","alrvalue","autoFocus","red","GrapeIcon","transferAuthority","SocialView","fetchMore","followers","pageInfo","endCursor","followings","list","ProfilePicture","followitem","loadingpicture","setLoadingPicture","countRef","useRef","current","bgcolor","avatar","random","SocialItem","followitemkey","ens","columns","hasNextPage","StyledTable","GrapeVerified","verifiedState","setVerifiedState","verifiedPK","setVerificationPK","collectionImage","setCollectionImage","collectionName","setCollectionName","grape_verified","collectionAddress","meta_response","meta_final","res","verified_creator","UPDATE_AUTHORITIES","placement","SocialLikes","isLiked","setIsLiked","loadingLikedState","setLoadingLikedState","getLikeStatus","likeWalletConnect","tofollow","ConnectionType","LIKE","likeWalletDisconnect","liked","SocialFlags","isFlagged","setIsFlagged","loadingFlaggedState","setLoadingFlaggedState","getFlagStatus","flagWalletConnect","REPORT","flagWalletDisconnect","reported","GalleryItemMeta","collectionrawdata","meta_primer","collectionitem","refreshOwner","setRefreshOwner","loadingOwner","setLoadingOwner","mintAta","setMintATA","tokenOwners","setTokenOwners","grape_member_balance","setGrapeMemberBalance","sol_portfolio_balance","setSolPortfolioBalance","grape_weighted_score","setGrapeWeightedScore","grape_governance_balance","setGrapeGovernanceBalance","grape_offer_threshhold","grape_whitelisted","open_creator_collapse","setOpenCreatorCollapse","open_attribute_collapse","setOpenAttributeCollapse","currentImage","setCurrentImage","isViewerOpen","setIsViewerOpen","collectionItemImages","open_meta","setOpenMeta","open_description","setOpenDescription","open_traits","setOpenTraits","openImageViewer","salePrice","getGovernanceBalance","realmId","governingTokenMint","governingTokenOwner","getTokenOwnerRecordForRealm","ownerRecords","fetchBalances","GetTokenOwner","tokenAddress","GetLargestTokenAccounts","fetchTokenAccountData","flargestTokenAccounts","fetchSOLBalance","towner","getMintOwner","tokenowner","fetchTokenAccountOwnerHoldings","sol_rsp","portfolio_rsp","governance_rsp","governingTokenDepositAmount","final_weighted_score","balance","total_grape","weighted_score","HandleSetAvatar","createSetProfilePictureTransaction","SearchForMint","open_dialog","setOpenPKDialog","setInputMintValue","handleCloseDialog","setMintPubkey","autoComplete","margin","ownerPublicKey","property","content","currentIndex","disableScroll","closeOnClickOutside","srcSet","in","timeout","unmountOnExit","description","boxShadow","attributes","textAlign","paddingBottom","paddingTop","colSpan","trait_type","itemType","category","rarity","spec","class","seller_fee_basis_points","properties","background_color","createdAt","updatedAt","deactivated","fontWeight","filteredMarket","PreviewView","history","PreviewItem","thismint","setCollectionRaw","interval","clearInterval","sellNowListing","walletPublicKey","weightedScore","daoPublicKey","thisWalletPublicKey","programAsSigner","programAsSignerBump","tradeBump","freeTradeState1","freeTradeBump","freeSellerTradeState","sell","score","FeedView","setFeatured","setFeaturedMeta","mergedfeaturedmeta","setMergedFeaturedMeta","statestruct","FeaturedItem","finalMeta","setFinalMeta","itemraw","itemmeta","getCollectionItemData","getMeta","final_meta","backgroundSize","getFeatured","ahListings","ahListingsMints","forSaleDate","offer","solvalue","merr","GalleryItem","GalleryView","page","rowsperpage","listed","count","defaultPage","showFirstButton","showLastButton","SellNowVotePrompt","setOpenSPDialog","sell_now_amount","setSellNowAmount","setDaoPublicKey","grapeWeightedScore","createDAOProposal","transactionInstr2","instructionsArray2","snackaction","setRefreshOffers","SellNowPrompt","OfferPrompt","setOpenOPDialog","offer_amount","setOfferAmount","sol_balance","solBalance","submitOffer","borderColor","String","highestOffer","ItemOffers","open_offers_collapse","setOpenOffersCollapse","refreshOffers","useAnchorWallet","alertopen","setAlertOpen","alertbuynowopen","setAlertBuyNowOpen","final_offeramount","setFinalOfferAmount","final_offerfrom","setFinalOfferFrom","setSalePrice","saleDate","setSaleDate","saleTimeAgo","setSaleTimeAgo","setHighestOffer","openOffers","setOpenOffers","handleAlertBuyNowClose","handleAlertClose","setAcceptPrompt","offerfrom","handleAcceptOffer","buyerAddress","acceptOffer","signedTransaction2","handleCancelListing","cancelListing","handleCancelOffer","GetSignatureOffers","spkey","until","slimit","offerResultsCancelled","existSaleCancelAction","open_offers","forSale","found","cancelled","mintOwnerPK","prettyForSaleDate","handleBuyNow","buyerPublicKey","escrowAmount","buyNowListing","depositAmount","depositInGrapeVine","ItemTools","RefreshOffers","escrowBump","results","paymentAccount","buyerTradeState","buy","createApproveInstruction","createRevokeInstruction","deposit","k","buyPriceAdjusted2","tokenSizeAdjusted2","tokenAccountKey2","freeTradeState","freeTradeStateBump","metadataObj","metadataDecoded","remainingAccounts","tMint","auctionHouseTreasury","seller","sellerPaymentReceiptAccount","buyerReceiptTokenAccount","executeSale","voteType","VoteType","SINGLE_CHOICE","options","useDenyOption","realmPk","governancePk","descriptionLink","governanceAuthority","proposalIndex","getGovernanceProgramVersion","programVersion","getTokenOwnerRecordAddress","tokenOwnerRecordPk","withCreateProposal","proposalPk","instructionData","createInstructionData","withInsertTransaction"],"mappings":"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","file":"static/js/main.47faee42.chunk.js","sourcesContent":["import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function SolCurrencyIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n            <path d=\"M12,24 C10.3434343,24 8.78787879,23.6868695 7.33333333,23.0606069 C5.8989899,22.4545463 4.62626263,21.6060614 3.51515152,20.5151524 C2.42424242,19.4040412 1.56565657,18.121213 0.939393939,16.6666675 C0.313131313,15.2121221 -2.8035935e-16,13.6565665 -2.8035935e-16,12 C-2.8035935e-16,10.3434352 0.313131313,8.78787963 0.939393939,7.33333418 C1.56565657,5.87878872 2.42424242,4.60606145 3.51515152,3.51515236 C4.62626263,2.40404125 5.8989899,1.54545539 7.33333333,0.939394781 C8.78787879,0.313132155 10.3434343,-3.73812466e-16 12,-3.73812466e-16 C13.6565657,-3.73812466e-16 15.2121212,0.313132155 16.6666667,0.939394781 C18.1212121,1.54545539 19.3939394,2.40404125 20.4848485,3.51515236 C21.5959596,4.60606145 22.4545455,5.87878872 23.0606061,7.33333418 C23.6868687,8.78787963 24,10.3434352 24,12 C24,13.6565665 23.6868687,15.2121221 23.0606061,16.6666675 C22.4545455,18.121213 21.5959596,19.4040412 20.4848485,20.5151524 C19.3939394,21.6060614 18.1212121,22.4545463 16.6666667,23.0606069 C15.2121212,23.6868695 13.6565657,24 12,24 Z M12,21.9090918 C13.3737374,21.9090918 14.6565657,21.6565665 15.8484848,21.151516 C17.040404,20.6262635 18.0909091,19.9090918 19,19.0000008 C19.9090909,18.0909099 20.6161616,17.0404049 21.1212121,15.8484857 C21.6464646,14.6565665 21.9090909,13.3737382 21.9090909,12.0000008 C21.9090909,10.6262635 21.6464646,9.34343519 21.1212121,8.15151599 C20.6161616,6.9595968 19.9090909,5.90909175 19,5.00000084 C18.0909091,4.09090993 17.040404,3.38383923 15.8484848,2.87878872 C14.6565657,2.3535362 13.3737374,2.09090993 12,2.09090993 C10.6262626,2.09090993 9.34343434,2.3535362 8.15151515,2.87878872 C6.95959596,3.38383923 5.90909091,4.09090993 5,5.00000084 C4.09090909,5.90909175 3.37373737,6.9595968 2.84848485,8.15151599 C2.34343434,9.34343519 2.09090909,10.6262635 2.09090909,12.0000008 C2.09090909,13.3737382 2.34343434,14.6565665 2.84848485,15.8484857 C3.37373737,17.0404049 4.09090909,18.0909099 5,19.0000008 C5.90909091,19.9090918 6.95959596,20.6262635 8.15151515,21.151516 C9.34343434,21.6565665 10.6262626,21.9090918 12,21.9090918 Z M12,20.4545463 C10.8282828,20.4545463 9.72727273,20.2424251 8.6969697,19.8181827 C7.68686869,19.3737382 6.78787879,18.7676776 6,18.0000008 C5.23232323,17.2121221 4.62626263,16.3131322 4.18181818,15.3030311 C3.75757576,14.2727281 3.54545455,13.171718 3.54545455,12.0000008 C3.54545455,10.8282837 3.75757576,9.73737458 4.18181818,8.72727357 C4.62626263,7.69697054 5.23232323,6.79798064 6,6.03030387 C6.78787879,5.24242508 7.68686869,4.63636448 8.6969697,4.21212205 C9.72727273,3.76767761 10.8282828,3.54545539 12,3.54545539 C13.1717172,3.54545539 14.2727273,3.76767761 15.3030303,4.21212205 C16.3333333,4.63636448 17.2323232,5.24242508 18,6.03030387 C18.7878788,6.79798064 19.3939394,7.69697054 19.8181818,8.72727357 C20.2626263,9.73737458 20.4848485,10.8282837 20.4848485,12.0000008 C20.4848485,13.171718 20.2626263,14.2727281 19.8181818,15.3030311 C19.3939394,16.3131322 18.7878788,17.2121221 18,18.0000008 C17.2323232,18.7676776 16.3333333,19.3737382 15.3030303,19.8181827 C14.2727273,20.2424251 13.1717172,20.4545463 12,20.4545463 Z M12,18.3636372 C13.1919192,18.3636372 14.2626263,18.0808089 15.2121212,17.5151524 C16.1818182,16.9494958 16.9494949,16.181819 17.5151515,15.2121221 C18.1010101,14.2424251 18.3939394,13.171718 18.3939394,12.0000008 C18.3939394,10.8080816 18.1010101,9.73737458 17.5151515,8.78787963 C16.9494949,7.81818266 16.1818182,7.05050589 15.2121212,6.48484933 C14.2626263,5.91919276 13.1919192,5.63636448 12,5.63636448 C10.8282828,5.63636448 9.75757576,5.91919276 8.78787879,6.48484933 C7.81818182,7.05050589 7.05050505,7.81818266 6.48484848,8.78787963 C5.91919192,9.73737458 5.63636364,10.8080816 5.63636364,12.0000008 C5.63636364,13.171718 5.91919192,14.2424251 6.48484848,15.2121221 C7.05050505,16.181819 7.81818182,16.9494958 8.78787879,17.5151524 C9.75757576,18.0808089 10.8282828,18.3636372 12,18.3636372 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\n\nimport { GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\n\nimport {\n    Grid,\n    Button,\n    ButtonGroup,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Typography,\n} from '@mui/material';\n\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { CardActionArea } from '@mui/material';\n\nexport function FeaturedView(props: any) {\n    \n  return (\n        <>\n            {FEATURED_DAO_ARRAY.map((featured: any, key: number) => (\n            <Card sx={{borderRadius:'26px',mb:2}}>\n                <CardActionArea\n                    component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                >\n                    \n                    <CardMedia\n                        component=\"img\"\n                        image={featured.img}\n                        alt={featured.title}\n                            sx={{\n                                maxHeight: '250',\n                                background: 'rgba(0, 0, 0, 1)',\n                                m:0,\n                                p:0,\n                            }} \n                        />\n                        \n                    <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {featured.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.primary\">\n                        {featured.text}\n                    </Typography>\n                        <img\n                            src={featured.img}\n                            alt=\"\"\n                            style={{\n                                opacity: '0.025',\n                                position: 'absolute',\n                                marginTop:2,\n                                marginBottom:2,\n                                padding:1,\n                                top:'-20%',\n                                left:'-20%',\n                                width:'150%'\n                            }}\n                        />\n                    </CardContent>\n                \n                </CardActionArea>\n                <CardActions>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justifyContent='flex-end'\n                        alignContent='flex-end'\n                        sx={{\n                            p:1,pr:1.25\n                        }}\n                    >\n                        <ButtonGroup variant=\"text\">\n                            <Button size=\"small\" \n                                component=\"a\" href={`${featured.daourl}`} target=\"_blank\"\n                                sx={{borderRadius:'24px', color:'white'}}>\n                                View DAO</Button>\n                            <Button size=\"small\"    \n                                component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                                sx={{borderRadius:'24px', color:'white'}}\n                            >View Collection</Button>\n                            <ShareSocialURL url={'https://grape.art'+GRAPE_PROFILE+featured.address} title={'Grape Profile | '+trimAddress(featured.address,4)} />\n                        </ButtonGroup>\n                    </Grid>\n                </CardActions>\n            </Card> \n            ))}\n        </>\n  );\n}","\nimport React, { useEffect } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport { PublicKey, Connection, Commitment } from '@solana/web3.js';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport {\n    Button,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    Avatar,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemText,\n    ListItemButton,\n} from '@mui/material';\n\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport PublicIcon from '@mui/icons-material/Public';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport QrCode2Icon from '@mui/icons-material/QrCode2';\n\nimport { ValidateAddress, trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PROFILE } from '../utils/grapeTools/constants';\n\nexport function IdentityView(props: any){\n    const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [solanaHoldings, setSolanaHoldings] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const { publicKey } = useWallet();\n    const [pubkey, setPubkey] = React.useState(props.pubkey || null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"address\") || handlekey;\n\n    const fetchSolanaHoldings = async () => {\n        const response = await ggoconnection.getTokenAccountsByOwner(new PublicKey(pubkey), {programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\")});\n        \n        let holdings: any[] = [];\n        for (var item of response.value){\n\n            //let buf = Buffer.from(item.account, 'base64');\n            holdings.push({pubkey:item.pubkey});\n            \n            /*\n            let buf = Buffer.from(item.account.data);\n            \n            let meta_final = JSON.parse(buf);\n            //let meta_final = decodeMetadata(buf);\n            console.log(\"meta_final: \"+meta_final);\n            */\n            /*\n            let buf = Buffer.from(JSON.stringify(item.account.data), 'base64');\n            console.log(\"buf: \"+JSON.stringify(buf));\n            let meta_final = JSON.parse(JSON.stringify(buf));\n\n            console.log(\"final: \"+JSON.stringify(meta_final));\n            let parsedData = meta_final;//JSON.parse(buf);\n            */\n        }\n        console.log(JSON.stringify(holdings));\n        setSolanaHoldings(holdings);\n    } \n\n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n        setProfilePictureUrl(img_url);\n    }\n    \n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            setSolanaDomain(domain)\n        }\n    }\n\n    React.useEffect(() => {\n        if (urlParams){\n            if (!pubkey){\n                if (ValidateAddress(urlParams))\n                    setPubkey(urlParams);\n            }\n        } else if (publicKey) {\n            setPubkey(publicKey.toBase58());\n        }\n    }, [urlParams, publicKey]);\n\n\n    React.useEffect(() => {\n        if (pubkey){\n            setLoading(true);\n                fetchProfilePicture();\n                fetchSolanaDomain();\n                fetchSolanaHoldings();\n            setLoading(false);\n        }\n    }, [pubkey]);\n\n\n\n    if (loading){\n        return (\n            <>\n                Loading your solana profile\n            </>\n        );\n    } else{\n        return (\n                <React.Fragment>\n                    <Box\n                        sx={{ \n                            p: 1, \n                            mb: 3, \n                            width: '100%',\n                            background: '#13151C',\n                            borderRadius: '24px'\n                        }}\n                    > \n                            <Grid \n                                container \n                                direction=\"column\" \n                                spacing={2} \n                                alignItems=\"center\"\n                                rowSpacing={8}\n                            >\n                                \n                                <Grid \n                                    item xs={12}\n                                >\n                                    <Button\n                                        component={Link} \n                                        to={`${GRAPE_PROFILE}${pubkey}`}\n                                        sx={{borderRadius:'24px',textTransform:'none',color:'white'}}\n                                        >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                            </Typography>\n                                    </Button>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h6\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        >SOLANA IDENTITY</Typography>\n\n                                    </Grid>\n                            </Grid>\n           \n           \n                            <>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    ADDRESS:\n                                </Typography>   \n                                    <List dense={true}>\n                                        <ListItem>\n                                            <ListItemButton \n                                                component=\"a\" \n                                                href={`https://explorer.solana.com/address/${pubkey}`}\n                                                target=\"_blank\"\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar\n                                                    >\n                                                        <AccountBalanceWalletIcon />\n                                                    </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={pubkey}\n                                                    secondary=\"Solana Address\"\n                                                />\n                                            </ListItemButton>\n                                        </ListItem>\n                                    </List>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    PROFILE:\n                                </Typography>   \n                                    <List dense={true}>\n                                        <ListItem>\n                                                \n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    src={profilePictureUrl}\n                                                    alt='PFP'\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={profilePictureUrl}\n                                                secondary=\"Solana Profile Picture\"\n                                            />\n                                        </ListItem>\n                                    </List>\n                                \n                                \n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    DOMAINS/REGISTRATIONS: \n                                    <Typography\n                                        variant=\"body2\"\n                                        sx={{ml:2}}\n                                    >{solanaDomain && <>{solanaDomain.length}</>}\n                                    </Typography>\n                                </Typography> \n                                \n                                <List dense={true}>\n                                        {solanaDomain && solanaDomain?.map((item: any) => (\n                                            <ListItem>\n                                                <ListItemAvatar>\n                                                    <Avatar>\n                                                        <PublicIcon />\n                                                    </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={JSON.stringify(item)}\n                                                    secondary=\"Solana Domain\"\n                                                />\n                                            </ListItem>\n                                        ))}\n                                </List>\n                                \n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    TOKENS: \n                                    <Typography\n                                        variant=\"body2\"\n                                        sx={{ml:2}}\n                                    >{solanaHoldings && <>{solanaHoldings.length}</>}\n                                    </Typography>\n                                </Typography> \n                                {solanaHoldings ?\n                                    <List dense={true}>\n                                        {solanaHoldings.length > 0 ? solanaHoldings.map((item: any) => (\n                                            <ListItem>\n                                            <ListItemAvatar>\n                                                <Avatar>\n                                                    <QrCode2Icon />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={JSON.stringify(item.pubkey)}\n                                                secondary=\"token\"\n                                            />\n                                            </ListItem>\n                                        ))\n                                        :\n                                        <></>}\n                                    </List>\n                                :\n                                <List dense={true}>\n                                    <ListItem key={0}>No tokens on this address!</ListItem>    \n                                </List>\n                                }\n                            </>\n                        \n                    </Box>\n                </React.Fragment>\n        );\n    }\n}","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\nimport { useNavigate } from 'react-router';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nimport { useSnackbar } from 'notistack';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\n\nimport {\n    MenuItem,\n    Menu,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    InputBase,\n    Paper,\n    Container,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\n\n\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { GRAPE_PROFILE } from '../utils/grapeTools/constants';\nimport { ValidateAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nexport interface State extends SnackbarOrigin {\n    open: boolean;\n}\n\nfunction getParam(param: string) {\n    //return new URLSearchParams(document.location.search).get(param);\n    return new URLSearchParams(window.location.search).get(param);\n}\n\ninterface HeaderProps{\n    children?:React.ReactNode;\n}\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    border: '1px solid rgba(255,255,255,0.25)',\n    borderRadius: '17px',\n    backgroundColor: alpha(theme.palette.common.white, 0.015),\n    '&:hover': {\n        border: '1px solid rgba(255,255,255,0.75)',\n        backgroundColor: alpha(theme.palette.common.white, 0.1),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    marginTop: 5,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        width: 'auto',\n        marginLeft: 5,\n    },\n  }));\n\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: alpha(theme.palette.common.white, 0.25),\n  }));\n  \n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '100%',\n      },\n    },\n  }));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function Header(props: any) {\n    const { open_menu } = props;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom','Solflare']);\n    const [open_wallet, setOpenWallet] = React.useState(false);\n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isWalletOpen = Boolean(anchorEl);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const currPath = location.pathname;\n    const searchParams = new URLSearchParams(location.search);\n    //const currPath = location?.pathname ?? \"\";\n    const { enqueueSnackbar } = useSnackbar();\n\n    const routes = [\n        { name: \"Home\", path: \"/\" },\n        // { name: \"Servers\", path: \"/servers\" },\n\n        // { name: \"Settings\", path: \"/settings\" }\n    ]\n    \n    /*\n    const toggleDrawer = () => {\n        //setOpenDrawer(!open);\n        open = !open;//setOpen(!open);\n    };\n    */\n\n    \n    /*\n    async function connect() {\n        let wallet = new Wallet();\n        wallet.onChange = (wallet) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n\n    async function connectPhantom() {\n        let wallet = new PhantomWallet();\n        wallet.onChange = (wallet: any) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function connectSolflare() {\n        let wallet = new SolflareWallet();\n        wallet.onChange = () => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function onWalletConnect(wallet: any){\n        if(wallet){\n            let session = await wallet.signMessage('$GRAPE');\n            if(session){\n                setSession(session);\n            }\n        }\n    }\n    */\n    \n\n    //Menu\n    const menuId = 'primary-wallet-account-menu';\n    const menuWalletId = 'primary-fullwallet-account-menu';\n\n    const handleProfileMenuOpen = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        // this.props.parentCallback(\"Data from child\");\n    };\n\n    const handleWalletConnectClickOpen = (type: string, callback: any) => {\n        /*\n        switch(type) {\n            case \"sollet\":\n                connect();\n                break;\n            case \"phantom\":\n                connectPhantom();\n                break;\n            case \"solflare\":\n                connectSolflare();\n                break;\n            default:\n                break;\n        }\n        */\n       \n        callback && callback();\n    };\n\n    const handleCloseWallet = (value: any) => {\n        setOpenWallet(false);\n\n    };\n\n    function SimpleDialog(props: any) {\n        const { onClose, selectedValue, open_wallet } = props;\n\n        const handleCloseWallet = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: any) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleCloseWallet} aria-labelledby=\"simple-dialog-title\" open={open_wallet}>\n                <DialogTitle id=\"simple-dialog-title\">Select Wallet</DialogTitle>\n                <List>\n                    {providers.map((provider) => (\n                        <ListItem button onClick={() => handleListItemClick(provider)} key={provider}>\n                            <ListItemText primary={provider} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n\n    const handleClickSnackbar = () => {\n        enqueueSnackbar(`Copied...`,{ variant: 'success' });\n        \n        handleMenuClose();\n        //setSnackbarState(true);\n    };\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n        if ((newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue))||\n            ((newinputpkvalue.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (newinputpkvalue.slice(0,1) === '@'))){\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            setNewInputPKValue('');\n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n    return (\n        <Toolbar\n            color=\"inherit\"\n            sx={{\n                pr: '24px', // keep right padding when drawer closed\n                background: 'none'\n            }}\n            >\n\n            <Box display='flex' flexGrow={1}>\n                <Button\n                    variant=\"text\"\n                    color=\"inherit\" \n                    href='/'\n                >\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        display='flex'\n                    >\n                        <img src=\"/grape_white_logo.svg\" height=\"40px\" width=\"137px\" className=\"header-logo\" alt=\"Grape\" />\n                    </Typography>\n                </Button>\n                    <Container\n                        component=\"form\"\n                        onSubmit={handlePublicKeySubmit}\n                        sx={{background:'none'}}\n                        >\n                        <Search\n                            sx={{height:'40px'}}\n                        >\n                            <SearchIconWrapper>\n                                <SearchIcon />\n                            </SearchIconWrapper>\n                            <StyledInputBase\n                                sx={{height:'40px', width:'100%'}}\n                                placeholder=\"Search Solana Address\"\n                                inputProps={{ 'aria-label': 'search' }}\n                                value={newinputpkvalue}\n                                onChange={(e) => setNewInputPKValue(e.target.value)}\n                            />\n                        </Search>\n                    </Container>\n\n\n            </Box>\n            <div>\n                <WalletModalProvider>\n                    <WalletMultiButton />\n                </WalletModalProvider>\n            </div>\n        </Toolbar>\n        \n    );\n}\n\nexport default Header;\n","import React from 'react';\n// material ui\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\n// zustand\nimport create from 'zustand';\n\ntype ConfirmDialogStore = {\n  message: string;\n  onSubmit?: () => void;\n  close: () => void;\n};\n\nconst useConfirmDialogStore = create<ConfirmDialogStore>((set) => ({\n  message: '',\n  onSubmit: undefined,\n  close: () => set({ onSubmit: undefined }),\n}));\n\nexport const confirmDialog = (message: string, onSubmit: () => void) => {\n  useConfirmDialogStore.setState({\n    message,\n    onSubmit,\n  });\n};\n\nconst ConfirmDialog = () => {\n  const { message, onSubmit, close } = useConfirmDialogStore();\n  //return new Promise((res) => {\n  return (\n    <Dialog open={Boolean(onSubmit)} onClose={close} maxWidth=\"sm\" fullWidth>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <DialogTitle>Confirm the action</DialogTitle>\n        <IconButton onClick={close}>\n          <Close />\n        </IconButton>\n      </Box>\n      <DialogContent>\n        <Typography>{message}</Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={close}>\n          Cancel\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            if (onSubmit) {\n              onSubmit();\n            }\n            close();\n          }}\n        >\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n  //});\n};\n\nexport default ConfirmDialog;","import { createTheme, makeStyles } from '@mui/material/styles';\n// paper: #12151B\n\n//background: rgb(18,21,28);\n//background: linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%);\n\n \n//background: #F0F2F0;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #000C40, #F0F2F0);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #000C40, #F0F2F0); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n//background: #141E30;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #243B55, #141E30);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n\nconst themeInstance = {\n  background: 'linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%)',//'#0A1D30',\n\n};\n\nconst theme = createTheme({\n//const useStyles = makeStyles((theme: typeof themeInstance) => ({\n  typography: {\n    fontFamily: [\n      'GrapeFont',\n      'sans-serif',\n    ].join(','),\n  },  \n  palette: {\n    mode: \"dark\",\n    background: {\n      default: '#0A1D30',\n      paper: \"#000000\"\n    },\n  }\n});\n\nexport default theme;","import React, { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n//import { LogView } from \"./Log/Log\";\nimport { ProfileView } from \"./Profile/Profile\";\nimport { PreviewView } from \"./Preview/Preview\";\nimport { FeaturedView } from \"./Featured/Featured\";\nimport { IdentityView } from \"./Identity/Identity\";\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport {\n  Box,\n  Grid,\n  Paper,\n  Container,\n  Typography,\n  AppBar,\n} from '@mui/material';\n\nimport Header from './Header/Header';\nimport { SnackbarProvider } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Connection, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\nimport { Helmet } from 'react-helmet';\n\nimport { useSnackbar } from 'notistack';\n\nimport ConfirmDialog from './components/ConfirmDialog/ConfirmDialog';\n\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n\n/*\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n*/\n\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    //getTorusWallet,\n  } from '@solana/wallet-adapter-wallets';\n\n\n//import { mainListItems, secondaryListItems } from './components/SidebarList/SidebarList';\nimport grapeTheme from  './utils/config/theme'\nimport \"./App.less\";\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from './utils/grapeTools/constants';\n\nfunction Copyright(props: any) {\n  return (\n    <Typography sx={{background:'transparent'}} variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      Powered by Grape on Solana\n      {/*\n      <Link color=\"inherit\" href=\"https://verify.grapes.network\">\n        Grape Network | Dashboard v1.1.5\n      </Link>\n      */}\n    </Typography>\n  );\n}\n\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  //const endpoint =  useMemo(() => clusterApiUrl(network), [network]); // GRAPE_RPC_ENDPOINT;\n  //const endpoint =  GRAPE_RPC_ENDPOINT;\n  const endpoint =  FREE_RPC_ENDPOINT;\n  const wallets = useMemo(() => [\n  \n    getPhantomWallet(),\n    getSolflareWallet(),\n    getSlopeWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n    getLedgerWallet(),\n  \n    //getTorusWallet({\n    //  options: { clientId: 'BCX2hQWDez2_qJhmSuQC7DXD4OG0VfGEFjCZfLar2EA5NvKyudCxOOlOcQ4YZbPGQhdwLonSXZr3i_siIJVhtwI' }\n    //}),\n  /*  \n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n  */  \n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n  \n  /*\n  const { enqueueSnackbar } = useSnackbar();\n  const onError = useCallback(\n      (error) => {\n          enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n          console.error(error);\n      },\n      [enqueueSnackbar]\n  );\n  */\n\n  return (\n    <>\n        <ThemeProvider theme={grapeTheme}>\n            <div className=\"grape-gradient-background\">\n            <SnackbarProvider>\n                <ConnectionProvider endpoint={endpoint}>\n                    <WalletProvider wallets={wallets} autoConnect>\n                    \n                    <Grid \n                        //color={grapeTheme.palette.primary.light}\n                        sx={{ \n                          flex: 1\n                        }}>\n                        <CssBaseline />\n                        <Router>\n                        <AppBar position=\"fixed\" color=\"primary\" style={{ background: 'rgba(0,0,0,0.5)' }}>\n                            <Header\n                                open={open} \n                                toggleDrawer={toggleDrawer}\n                            />\n                        </AppBar>\n                            \n                          <Grid\n                            component=\"main\"\n                            sx={{\n                                mt: 6,\n                                display: 'flex',\n                                flexGrow: 1\n                            }}\n                            >\n                            <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4}}>\n                                <ConfirmDialog />\n                                <Routes>\n\n                                  <Route path=\"/featured\" element={<FeaturedView/>} />\n\n                                  <Route path=\"/\" element={<ProfileView/>}>\n                                    <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  <Route index element={<ProfileView/>} />\n                                  \n                                  <Route path=\"profile/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n\n                                  <Route path=\"collection/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  \n                                  <Route path=\"preview/*\" element={<PreviewView />}>\n                                      <Route path=\":handlekey\" element={<PreviewView />} />\n                                  </Route>\n\n                                  <Route path=\"identity/*\" element={<IdentityView />}>\n                                      <Route path=\":handlekey\" element={<IdentityView />} />\n                                  </Route>\n\n                                  <Route path=\"*\" element={<NotFound />} />\n                                </Routes>\n                                \n                                <Copyright sx={{ mt: 4 }} />\n                            </Container>\n                          </Grid>\n                        </Router>\n                    </Grid>\n                    \n                    </WalletProvider>\n                </ConnectionProvider>\n            </SnackbarProvider>\n            </div>\n        </ThemeProvider>\n    </>\n  );\n}\n\nexport const NotFound = () => {\n  return (\n    <div style={{ height: \"100%\", overflow: \"auto\" }}>\n      <Paper className=\"grape-paper-background\">\n        <Grid \n          className=\"grape-paper\" \n          container\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\">\n          <Grid item>\n            <Typography \n              align=\"center\"\n              variant=\"h3\">\n              {'No Grapes Here...'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n  </div>\n  )\n}\n\n//export const Dashboard: FC<{ children: ReactNode }> = ({ children }) => {\nexport default function Dashboard() {\n  return <DashboardContent />;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n  FollowListInfoArgs,\n  SearchUserInfoArgs,\n  FollowListInfoResp,\n  SearchUserInfoResp,\n} from \"./types\";\n\nconst endPoint = \"https://api.cybertino.io/connect/\";\n\nexport const followListInfoSchema = ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  return {\n    operationName: \"followListInfo\",\n    query: `query followListInfo($address: String!, $namespace: String, $network: Network, $followingFirst: Int, $followingAfter: String, $followerFirst: Int, $followerAfter: String) {\n      identity(address: $address, network: $network) {\n        followingCount(namespace: $namespace)\n        followerCount(namespace: $namespace)\n        like: followingCount(namespace: $namespace, type: LIKE)\n        liked: followerCount(namespace: $namespace, type: LIKE)\n        report: followingCount(namespace: $namespace, type: REPORT)\n        reported: followerCount(namespace: $namespace, type: REPORT)\n        followings(namespace: $namespace, first: $followingFirst, after: $followingAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n        followers(namespace: $namespace, first: $followerFirst, after: $followerAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n      }\n    }`,\n    variables: {\n      address,\n      namespace,\n      network,\n      followingFirst,\n      followingAfter,\n      followerFirst,\n      followerAfter,\n    },\n  };\n};\n\nexport const searchUserInfoSchema = ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  return {\n    operationName: \"searchUserInfo\",\n    query: `query searchUserInfo($fromAddr: String!, $toAddr: String!, $network: Network) {\n      identity(address: $toAddr, network: $network) {\n        address\n        ens\n        avatar\n      }\n      connections(fromAddr: $fromAddr, toAddrList: [$toAddr], network: $network) {\n        type\n        followStatus {\n          isFollowed\n          isFollowing\n        }\n      }\n    }`,\n    variables: {\n      fromAddr,\n      toAddr,\n      network,\n    },\n  };\n};\n\nexport const querySchemas = {\n  followListInfo: followListInfoSchema,\n  searchUserInfo: searchUserInfoSchema,\n};\n\nexport const request = async (url = \"\", data = {}) => {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    referrerPolicy: \"no-referrer\",\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const handleQuery = (\n  data: {\n    query: string;\n    variables: object;\n    operationName: string;\n  },\n  url: string\n) => {\n  return request(url, data);\n};\n\nexport const followListInfoQuery = async ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  const schema = querySchemas[\"followListInfo\"]({\n    address,\n    namespace,\n    network,\n    followingFirst,\n    followingAfter,\n    followerFirst,\n    followerAfter,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data?.identity as FollowListInfoResp) || null;\n};\n\nexport const searchUserInfoQuery = async ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  const schema = querySchemas[\"searchUserInfo\"]({\n    fromAddr,\n    toAddr,\n    network,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data as SearchUserInfoResp) || null;\n};","import BigNumber from 'bignumber.js'\n\n// https://github.com/MikeMcl/bignumber.js\n// https://blog.csdn.net/shenxianhui1995/article/details/103985434\nexport class TokenAmount {\n  public wei: BigNumber\n\n  public decimals: number\n  public _decimals: BigNumber\n\n  constructor(wei: number | string | BigNumber, decimals: number = 0, isWei = true) {\n    this.decimals = decimals\n    this._decimals = new BigNumber(10).exponentiatedBy(decimals)\n\n    if (isWei) {\n      this.wei = new BigNumber(wei)\n    } else {\n      this.wei = new BigNumber(wei).multipliedBy(this._decimals)\n    }\n  }\n\n  toEther() {\n    return this.wei.dividedBy(this._decimals)\n  }\n\n  toWei() {\n    return this.wei\n  }\n\n  format() {\n    const vaule = this.wei.dividedBy(this._decimals)\n    return vaule.toFormat(vaule.isInteger() ? 0 : this.decimals)\n  }\n\n  fixed() {\n    return this.wei.dividedBy(this._decimals).toFixed(this.decimals)\n  }\n\n  isNullOrZero() {\n    return this.wei.isNaN() || this.wei.isZero()\n  }\n  // + plus\n  // - minus\n  // × multipliedBy\n  // ÷ dividedBy\n}\n\n// >\nexport function gt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThan(valueB)\n}\n\n// >=\nexport function gte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThanOrEqualTo(valueB)\n}\n\n// <\nexport function lt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThan(valueB)\n}\n\n// <=\nexport function lte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThanOrEqualTo(valueB)\n}\n\nexport function isNullOrZero(value: string | number) {\n  const amount = new BigNumber(value)\n\n  return amount.isNaN() || amount.isZero()\n}\n","export interface FollowListInfoArgs {\n    address: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n    alias?: string,\n    followingFirst?: number;\n    followingAfter?: string;\n    followerFirst?: number;\n    followerAfter?: string;\n  }\n  \n  export interface SearchUserInfoArgs {\n    fromAddr: string;\n    toAddr: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n  }\n  \n  export interface BasicUserInfo {\n    ens: string;\n    address: string;\n    avatar: string;\n  }\n  \n  export interface FollowListInfo {\n    pageInfo: {\n      endCursor: string;\n      hasNextPage: boolean;\n    };\n    list: BasicUserInfo[];\n  }\n  \n  export interface FollowListInfoResp {\n    followingCount: number;\n    followerCount: number;\n    followings: FollowListInfo;\n    followers: FollowListInfo;\n    like?: string,\n    liked?: string,\n    report?: string,\n    reported?: string, \n  }\n  \n  export interface SearchUserInfoResp {\n    connections: {\n      followStatus: {\n        isFollowing: boolean;\n        isFollowed: boolean;\n      };\n      type: ConnectionType;\n    }[];\n    identity: {\n      ens: string;\n      address: string;\n      avatar: string;\n    };\n  }\n  \n  export enum Network {\n    ETH = 'ETH',\n    SOLANA = 'SOLANA',\n  }","import { deserializeUnchecked, serialize, BinaryReader, BinaryWriter } from 'borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js'\nconst base58 = require('bs58');\n\nexport type StringPublicKey = string;\n\nexport const extendBorsh = () => {\n\t(BinaryReader.prototype as any).readPubkey = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn new PublicKey(array);\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(value.toBuffer());\n\t};\n\n\t(BinaryReader.prototype as any).readPubkeyAsString = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn base58.encode(array) as StringPublicKey;\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkeyAsString = function (\n\t\tvalue: StringPublicKey,\n\t) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(base58.decode(value));\n\t};\n};\n\nextendBorsh();\n\nexport const METADATA_PREFIX = 'metadata';\nexport const EDITION = 'edition';\nexport const RESERVATION = 'reservation';\n\nexport const MAX_NAME_LENGTH = 32;\n\nexport const MAX_SYMBOL_LENGTH = 10;\n\nexport const MAX_URI_LENGTH = 200;\n\nexport const MAX_CREATOR_LIMIT = 5;\n\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\nexport const MAX_METADATA_LEN =\n\t1 +\n\t32 +\n\t32 +\n\tMAX_NAME_LENGTH +\n\tMAX_SYMBOL_LENGTH +\n\tMAX_URI_LENGTH +\n\tMAX_CREATOR_LIMIT * MAX_CREATOR_LEN +\n\t2 +\n\t1 +\n\t1 +\n\t198;\n\nexport const MAX_EDITION_LEN = 1 + 32 + 8 + 200;\n\nexport const EDITION_MARKER_BIT_SIZE = 248;\n\n\nexport enum MetadataKey {\n\tUninitialized = 0,\n\tMetadataV1 = 4,\n\tEditionV1 = 1,\n\tMasterEditionV1 = 2,\n\tMasterEditionV2 = 6,\n\tEditionMarker = 7,\n}\n\nexport enum MetadataCategory {\n\tAudio = 'audio',\n\tVideo = 'video',\n\tImage = 'image',\n\tVR = 'vr',\n}\n\nexport type MetadataFile = {\n\turi: string;\n\ttype: string;\n};\n\nexport type FileOrString = MetadataFile | String;\n\nexport type Attribute = {\n\ttrait_type?: string;\n\tdisplay_type?: string;\n\tvalue: string | number;\n};\n\nexport interface IMetadataExtension {\n\tname: string;\n\tsymbol: string;\n\n\tcreators: Creator[] | null;\n\tdescription: string;\n\t// preview image absolute URI\n\timage: string;\n\tanimation_url?: string;\n\n\tattributes?: Attribute[];\n\n\t// stores link to item on meta\n\texternal_url: string;\n\n\tseller_fee_basis_points: number;\n\n\tproperties: {\n\t\tfiles?: FileOrString[];\n\t\tcategory: MetadataCategory;\n\t\tmaxSupply?: number;\n\t\tcreators?: {\n\t\t\taddress: string;\n\t\t\tshares: number;\n\t\t}[];\n\t};\n}\n\nexport class MasterEditionV1 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\t/// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n\tprintingMint: StringPublicKey;\n\t/// If you don't know how many printing tokens you are going to need, but you do know\n\t/// you are going to need some amount in the future, you can use a token from this mint.\n\t/// Coming back to token metadata with one of these tokens allows you to mint (one time)\n\t/// any number of printing tokens you want. This is used for instance by Auction Manager\n\t/// with participation NFTs, where we dont know how many people will bid and need participation\n\t/// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n\t/// because when the auction begins we just dont know how many printing tokens we will need,\n\t/// but at the end we will. At the end it then burns this token with token-metadata to\n\t/// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n\t/// to get their limited editions.\n\toneTimePrintingAuthorizationMint: StringPublicKey;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tsupply: typeof BN;\n\t\tmaxSupply?: typeof BN;\n\t\tprintingMint: StringPublicKey;\n\t\toneTimePrintingAuthorizationMint: StringPublicKey;\n\t}) {\n\t\tthis.key = MetadataKey.MasterEditionV1;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t\tthis.printingMint = args.printingMint;\n\t\tthis.oneTimePrintingAuthorizationMint =\n\t\t\targs.oneTimePrintingAuthorizationMint;\n\t}\n}\n\nexport class MasterEditionV2 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\n\tconstructor(args: { key: MetadataKey; supply: typeof BN; maxSupply?: typeof BN }) {\n\t\tthis.key = MetadataKey.MasterEditionV2;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nexport class EditionMarker {\n\tkey: MetadataKey;\n\tledger: number[];\n\n\tconstructor(args: { key: MetadataKey; ledger: number[] }) {\n\t\tthis.key = MetadataKey.EditionMarker;\n\t\tthis.ledger = args.ledger;\n\t}\n\n\teditionTaken(edition: number) {\n\t\tconst editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n\t\tconst indexOffset = Math.floor(editionOffset / 8);\n\n\t\tif (indexOffset > 30) {\n\t\t\tthrow Error('bad index for edition');\n\t\t}\n\n\t\tconst positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n\t\tconst mask = Math.pow(2, positionInBitsetFromRight);\n\n\t\tconst appliedMask = this.ledger[indexOffset] & mask;\n\n\t\treturn appliedMask !== 0;\n\t}\n}\n\nexport class Edition {\n\tkey: MetadataKey;\n\t/// Points at MasterEdition struct\n\tparent: StringPublicKey;\n\t/// Starting at 0 for master record, this is incremented for each edition minted.\n\tedition: typeof BN;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tparent: StringPublicKey;\n\t\tedition: typeof BN;\n\t}) {\n\t\tthis.key = MetadataKey.EditionV1;\n\t\tthis.parent = args.parent;\n\t\tthis.edition = args.edition;\n\t}\n}\nexport class Creator {\n\taddress: StringPublicKey;\n\tverified: boolean;\n\tshare: number;\n\n\tconstructor(args: {\n\t\taddress: StringPublicKey;\n\t\tverified: boolean;\n\t\tshare: number;\n\t}) {\n\t\tthis.address = args.address;\n\t\tthis.verified = args.verified;\n\t\tthis.share = args.share;\n\t}\n}\n\nexport class Data {\n\tname: string;\n\tsymbol: string;\n\turi: string;\n\tsellerFeeBasisPoints: number;\n\tcreators: Creator[] | null;\n\tconstructor(args: {\n\t\tname: string;\n\t\tsymbol: string;\n\t\turi: string;\n\t\tsellerFeeBasisPoints: number;\n\t\tcreators: Creator[] | null;\n\t}) {\n\t\tthis.name = args.name;\n\t\tthis.symbol = args.symbol;\n\t\tthis.uri = args.uri;\n\t\tthis.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n\t\tthis.creators = args.creators;\n\t}\n}\n\nexport class Metadata {\n\tkey: MetadataKey;\n\tupdateAuthority: StringPublicKey;\n\tmint: StringPublicKey;\n\tdata: Data;\n\tprimarySaleHappened: boolean;\n\tisMutable: boolean;\n\teditionNonce: number | null;\n\n\t// set lazy\n\tmasterEdition?: StringPublicKey;\n\tedition?: StringPublicKey;\n\n\tconstructor(args: {\n\t\tupdateAuthority: StringPublicKey;\n\t\tmint: StringPublicKey;\n\t\tdata: Data;\n\t\tprimarySaleHappened: boolean;\n\t\tisMutable: boolean;\n\t\teditionNonce: number | null;\n\t}) {\n\t\tthis.key = MetadataKey.MetadataV1;\n\t\tthis.updateAuthority = args.updateAuthority;\n\t\tthis.mint = args.mint;\n\t\tthis.data = args.data;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t\tthis.isMutable = args.isMutable;\n\t\tthis.editionNonce = args.editionNonce;\n\t}\n}\n\nclass CreateMetadataArgs {\n\tinstruction: number = 0;\n\tdata: Data;\n\tisMutable: boolean;\n\n\tconstructor(args: { data: Data; isMutable: boolean }) {\n\t\tthis.data = args.data;\n\t\tthis.isMutable = args.isMutable;\n\t}\n}\nclass UpdateMetadataArgs {\n\tinstruction: number = 1;\n\tdata: Data | null;\n\t// Not used by this app, just required for instruction\n\tupdateAuthority: StringPublicKey | null;\n\tprimarySaleHappened: boolean | null;\n\tconstructor(args: {\n\t\tdata?: Data;\n\t\tupdateAuthority?: string;\n\t\tprimarySaleHappened: boolean | null;\n\t}) {\n\t\tthis.data = args.data ? args.data : null;\n\t\tthis.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t}\n}\n\nclass CreateMasterEditionArgs {\n\tinstruction: number = 10;\n\tmaxSupply: typeof BN | null;\n\tconstructor(args: { maxSupply: typeof BN | null }) {\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nclass MintPrintingTokensArgs {\n\tinstruction: number = 9;\n\tsupply: typeof BN;\n\n\tconstructor(args: { supply: typeof BN }) {\n\t\tthis.supply = args.supply;\n\t}\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n\t[\n\t\tCreateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', Data],\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tUpdateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', { kind: 'option', type: Data }],\n\t\t\t\t['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n\t\t\t\t['primarySaleHappened', { kind: 'option', type: 'u8' }],\n\t\t\t],\n\t\t},\n\t],\n\n\t[\n\t\tCreateMasterEditionArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMintPrintingTokensArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV1,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t\t['printingMint', 'pubkeyAsString'],\n\t\t\t\t['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV2,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEdition,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['parent', 'pubkeyAsString'],\n\t\t\t\t['edition', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tData,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['name', 'string'],\n\t\t\t\t['symbol', 'string'],\n\t\t\t\t['uri', 'string'],\n\t\t\t\t['sellerFeeBasisPoints', 'u16'],\n\t\t\t\t['creators', { kind: 'option', type: [Creator] }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tCreator,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['address', 'pubkeyAsString'],\n\t\t\t\t['verified', 'u8'],\n\t\t\t\t['share', 'u8'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMetadata,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['updateAuthority', 'pubkeyAsString'],\n\t\t\t\t['mint', 'pubkeyAsString'],\n\t\t\t\t['data', Data],\n\t\t\t\t['primarySaleHappened', 'u8'], // bool\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEditionMarker,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['ledger', [31]],\n\t\t\t],\n\t\t},\n\t],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n\tconst metadata = deserializeUnchecked(\n\t\tMETADATA_SCHEMA,\n\t\tMetadata,\n\t\tbuffer,\n\t) as Metadata;\n\tmetadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n\tmetadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n\tmetadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n\treturn metadata;\n};\n","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils';\n// @ts-ignore\nimport fetch from 'node-fetch';\nimport BN from \"bn.js\";\n\nimport { findDisplayName } from '../utils/name-service';\n//import { performReverseLookup } from '../utils/web3/naming';\nimport {\n    getHashedName,\n    getNameAccountKey,\n    NameRegistryState,\n    performReverseLookup,\n    getTwitterRegistry,\n  } from \"@bonfida/spl-name-service\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { formatAddress, removeDuplicate, isValidAddr } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    Avatar,\n    Table,\n    Card,\n    CardActionArea,\n    CardMedia,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    Tab,\n    Tabs,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Paper,\n    Container,\n    ListItemIcon,\n    SpeedDial,\n    Hidden,\n    ButtonGroup,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport CollectionsOutlinedIcon from '@mui/icons-material/CollectionsOutlined';\nimport RssFeedOutlinedIcon from '@mui/icons-material/RssFeedOutlined';\nimport GavelOutlinedIcon from '@mui/icons-material/GavelOutlined';\nimport ArrowCircleLeftOutlinedIcon from '@mui/icons-material/ArrowCircleLeftOutlined';\nimport ArrowCircleRightOutlinedIcon from '@mui/icons-material/ArrowCircleRightOutlined';\nimport ExploreIcon from '@mui/icons-material/Explore';\nimport MessageIcon from '@mui/icons-material/Message';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport HomeIcon from '@mui/icons-material/Home';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, GRAPE_IDENTITY, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport FeedView from './FeedView';\nimport OffersView from './OffersView';\nimport SocialView from './SocialView';\nimport GalleryView from './GalleryView';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { ConstructionOutlined } from \"@mui/icons-material\";\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nconst PubKeyDialog = (props: any) => {\n    const [open_dialog, setOpenPKDialog] = React.useState(false);\n    const [walletPKId, setInputPKValue] = React.useState('');\n\n    const handleClickOpenDialog = () => {\n        setOpenPKDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setInputPKValue(\"\");\n        setOpenPKDialog(false);\n    };\n\n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        if ((walletPKId.length >= 32) && \n            (walletPKId.length <= 44)){\n            // WalletId is base58 validate the type too later on\n            props.setPubkey(walletPKId);\n            handleCloseDialog();\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID WALLET ID\");\n        }\n    }\n    \n    return (\n      <React.Fragment>\n        <Button size=\"small\" variant=\"text\" value=\"Search with WalletID\" onClick={handleClickOpenDialog}\n            sx={{borderRadius:'24px'}}\n        >\n            <SearchIcon />\n        </Button> \n         \n        <BootstrapDialog \n            fullWidth={true}\n            maxWidth={\"md\"}\n            open={open_dialog} onClose={handleCloseDialog}\n            PaperProps={{\n                style: {\n                    background: '#13151C',\n                    border: '1px solid rgba(255,255,255,0.05)',\n                    borderTop: '1px solid rgba(255,255,255,0.1)',\n                    borderRadius: '20px'\n                }\n                }}\n            >\n            <DialogTitle>\n                Public Key\n            </DialogTitle>\n            <form onSubmit={HandlePKSubmit}>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    autoComplete='off'\n                    margin=\"dense\"\n                    id=\"collection_wallet_id\"\n                    label=\"Paste a public key\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                    value={walletPKId}\n                    onChange={(e) => setInputPKValue(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDialog}>Cancel</Button>\n                <Button \n                    type=\"submit\"\n                    variant=\"text\" \n                    title=\"GO\">\n                        Go\n                </Button>\n            </DialogActions>\n            </form>\n        </BootstrapDialog>   \n      </React.Fragment>\n    );\n}\n\n\n/*\n  LAYOUT:\n    0 ['key', 'u8'] (Uninitialized=0, MetadataV1=4)\n    1 ['updateAuthority', 'pubkey'], (ignore)\n    33 ['mint', 'pubkey'], (filter)\n    65 ['data', Data],\n    72+0 name (borsh string)\n    72+x symbol (borsh string)\n    72+x uri (borsh string)\n */\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nconst GalleryItem = (props: any) => {\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account.data.parsed.info.mint || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n\n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let meta_primer = collectionitem;\n                let buf = Buffer.from(meta_primer.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                    \n                        <Grid \n                            container \n                            alignItems=\"center\"\n                            justifyContent=\"center\">\n                            <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                <ListItemButton\n                                    component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                    sx={{\n                                        width:'100%',\n                                        borderRadius:'25px',\n                                        p: '2px'\n                                    }}\n                                >\n                                    <img\n                                        src={`${image}`}\n                                        srcSet={`${image}`}\n                                        alt={collectionmeta.collectionmeta?.name}\n                                        //onClick={ () => openImageViewer(0) }\n                                        loading=\"lazy\"\n                                        height=\"auto\"\n                                        style={{\n                                            width:'100%',\n                                            borderRadius:'24px'\n                                        }}\n                                    />\n                                </ListItemButton>\n                            </Grid>\n                            <Grid item sx={{display:'flex'}}>\n                                <Box\n                                    sx={{p:1}}\n                                >\n                                    <Typography variant=\"caption\">\n                                        {collectionmeta.collectionmeta?.name}\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                );\n            }\n            //}\n        }\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n    <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n    >\n        {value === index && (\n        <Box sx={{ p: 0 }}>\n            <Typography>{children}</Typography>\n        </Box>\n        )}\n    </div>\n    );\n}\n\nconst StyledSpeedDial = styled(SpeedDial)(({ theme }) => ({\n    position: 'absolute',\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n      top: theme.spacing(2),\n      left: theme.spacing(2),\n    },\n  }));\n  \nconst MainMenu = (props:any) => {\n    const pubkey = props.pubkey;\n    const { publicKey } = useWallet();\n\n    if ((publicKey) && (publicKey.toBase58() != pubkey)){\n        return (\n        \n            <List\n                sx={{m:1,p:1}}\n            >\n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Back Home\"\n                        component={Link} to={`${GRAPE_PROFILE}${publicKey.toBase58()}`}\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <HomeIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Home\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Visit Solana Explorer\"\n                        component=\"a\" href={`https://explorer.solana.com/address/${publicKey.toBase58()}`} target=\"_blank\"\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <ExploreIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Explore\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Messaging coming soon\"\n                        disabled\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <MessageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={`Messages`} />\n                    </ListItemButton>\n                </ListItem>\n            </List>\n    \n        );\n    } else{\n        return (<></>);\n    }\n    \n    /*\n    const actions = [\n        { icon: <HomeIcon />, name: 'Home' },\n        { icon: <ExploreIcon />, name: 'Explore' },\n        { icon: <MessageIcon />, name: 'Messages *coming soon' },\n    ];\n    \n    return (\n        <Box sx={{ height: 230, transform: 'translateZ(0px)', flexGrow: 1 }}>\n            <SpeedDial\n                ariaLabel=\"Menu\"\n                sx={{ position: 'absolute', bottom: 16, left: 16 }}\n                icon={<SpeedDialIcon sx={{color:'white'}} />}\n                direction='down'\n            >\n                {actions.map((action) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                />\n                ))}\n            </SpeedDial>\n        </Box>\n    )\n    */\n}\n\nexport const TabActiveContext = React.createContext({\n    activeTab: 0,\n    setActiveTab: (at:number) => {}\n});\n\nexport const TabActiveProvider = ({ children, initialActiveKey }) => {\n    const [activeTab, setActiveTab] = useState(initialActiveKey);\n    return (\n      <TabActiveContext.Provider\n        value={{\n          activeTab,\n          setActiveTab\n        }}\n      >\n        {children}\n      </TabActiveContext.Provider>\n    );\n};\n\nconst MainPanel = (props: any) => {\n    const [loading, setLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.thisPublicKey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const finalCollection = props.final_collection || null;\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    //const { activeTab, setActiveTab } = React.useContext(TabActiveContext);\n    const [tabvalue, setTabValue] = React.useState(props?.activeTab || 0);\n    \n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n        setTabValue(newValue);\n    };\n\n    function a11yProps(index: number) {\n        return {\n            id: `grapeart-tab-${index}`,\n            'aria-controls': `grapeart-tabpanel-${index}`,\n        };\n    }\n\n    React.useEffect(() => { \n        if (tabvalue!=props?.activeTab){\n            setTabValue(props?.activeTab);\n        }\n    }, [props?.activeTab]);\n    \n    if(loading){\n        return (\n            <Grid item xs='auto' sm='auto' md='auto' lg='auto' xl='auto'>\n                <Box\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    sx={{\n                    }} \n                >\n                    <CircularProgress />\n                </Box>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid item xs={12} sm={6} md={8} lg={9} xl={9}>\n                <Container\n                    sx={{\n                        minHeight: '225px',\n                        m:0,\n                        p:0,\n                    }} \n                >\n                    <TabActiveProvider initialActiveKey=\"0\">   \n                        <Tabs \n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            value={tabvalue} \n                            onChange={handleTabChange} \n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.6)',\n                                borderRadius: '17px',\n                                mb:1,\n                            }} \n                        >\n                            <Tab icon={<Hidden smUp><CollectionsOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Collection</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(0)} />\n                            <Tab icon={<Hidden smUp><RssFeedOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Feed</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(1)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleLeftOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Followers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(2)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleRightOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Following</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(3)} />\n                            {/*<Tab label=\"Bids\" sx={{color:'white'}} {...a11yProps(4)} />*/}\n                            <Tab icon={<Hidden smUp><GavelOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Offers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(5)} />\n                            <Tab icon={<Hidden smUp><SolCurrencyIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Selling</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(6)} />\n                        </Tabs>\n                    \n                    \n                        <TabPanel value={tabvalue} index={1}>\n                            <Box\n                                sx={{\n                                    borderRadius: '17px',\n                                }} \n                                > \n                                <FeedView />\n                            </Box>\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={0}>\n                            <GalleryView finalCollection={finalCollection} walletCollection={walletCollection} />\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={2}>\n                            <SocialView pubkey={thisPublicKey} type={0} />\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={3}>\n                            <SocialView pubkey={thisPublicKey} type={1} />\n                        </TabPanel>\n\n                        <TabPanel value={tabvalue} index={4}>\n                            <OffersView selectedstate={1} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                        <TabPanel value={tabvalue} index={5}>\n                            <OffersView selectedstate={2} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                    </TabActiveProvider>\n                </Container>\n            </Grid>\n        );\n    }\n}\n\nconst IdentityView = (props: any) => {\n    const [expanded_collection, setExpandedCollection] = React.useState(true);\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const rpclimit = 100;\n    //const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection)\n    //const [wallet_collection] = React.useState(props.collection.collection);\n    const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection);\n    const [wallet_collection_meta, setCollectionMeta] = React.useState(null);\n    const [final_collection, setCollectionMetaFinal] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [featuredObj, setFeaturedObj] = React.useState(null);\n    const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n    const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n    //const { setActiveTab } = React.useContext(TabActiveContext);\n    const [activeTab, setActiveTab] = React.useState(0);\n\n    let ref = React.createRef()\n\n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!pubkey) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:pubkey,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n  \n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: NAME_SPACE,\n            network: NETWORK,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(followAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n\n        let promise = await cyberConnect.disconnect(followAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        getCollectionMeta(value);\n        //count={(Math.ceil(wallet_collection.length / rowsperpage))}\n    };\n\n    const handleExpandCollectionClick = () => {\n        setExpandedCollection(!expanded_collection);\n    };\n    \n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n        setProfilePictureUrl(img_url);\n        setHasProfilePicture(isAvailable);\n    }\n\n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            if (domain[0] !== pubkey)\n                setSolanaDomain(domain[0]);\n        }\n    }\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    const getCollectionData = async (start:number) => {\n        try {\n            let mintsPDAs = new Array();\n            //console.log(\"RPClim: \"+rpclimit);\n            //console.log(\"Paging \"+(rpclimit*(start))+\" - \"+(rpclimit*(start+1)));\n            \n            let mintarr = wallet_collection.slice(rpclimit*(start), rpclimit*(start+1)).map((value:any, index:number) => {\n                //console.log(\"mint: \"+JSON.stringify(value.account.data.parsed.info.mint));\n                return value.account.data.parsed.info.mint;\n            });\n\n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            //console.log(\"pushed pdas: \"+JSON.stringify(mintsPDAs));\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            //console.log(\"returned: \"+JSON.stringify(metadata));\n\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                //console.log(\"Metaplex val: \"+JSON.stringify(metavalue));\n                if (metavalue?.data){\n                    try{\n                        let meta_primer = metavalue;\n                        let buf = Buffer.from(metavalue.data);\n                        let meta_final = decodeMetadata(buf);\n                        //console.log(\"meta_final: \"+JSON.stringify(meta_final));\n                    }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n                } else{\n                    console.log(\"Something not right...\");\n                }\n                //setCollectionRaw({meta_final,meta_primer});\n                \n                /*\n                const finalmetadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                */\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFollowStatus = async () => {\n        if (publicKey){\n            if (pubkey){\n                setLoadingFollowState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), pubkey);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFollowState(false);\n            }\n        }\n    }\n\n    const getCollectionMeta = async (start:number) => {\n        if (!loading){\n            setLoading(true);\n            // see how many loops we will need to conduct\n            let wallletlength = wallet_collection.length;\n            \n            let loops = (Math.ceil(wallet_collection.length/rpclimit));\n            let collectionmeta: any[] = [];\n\n            console.log(\"lps: \"+loops);\n            for (var x=0;x<loops;x++){\n                //const interval = setTimeout(() => {\n                    let tmpcollectionmeta = await getCollectionData(x);\n                    //collectionmeta.push(tmpcollectionmeta);\n                    collectionmeta = collectionmeta.concat(tmpcollectionmeta);\n                //}, 200);\n                \n            }\n            \n            //console.log(collectionmeta.length + ' vs '+wallet_collection.length);\n\n            setLoadCount(loadCount+1);\n            setCollectionMeta({collectionmeta});\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                //console.log(i+\": \"+JSON.stringify(collectionmeta[i])+\" --- with --- \"+JSON.stringify(wallet_collection[i]));\n                if (collectionmeta[i]){\n                    collectionmeta[i][\"wallet\"] = wallet_collection[i];\n                }\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                setCollectionMetaFinal(finalmeta);\n            }catch(e){}\n            // setCollectionMetaFinal(); // add both arrays\n\n            setLoading(false);\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            if (ValidateAddress(pubkey)){\n                if (loadCount < 1){\n                    fetchProfilePicture();\n                    getCollectionMeta(0);\n                    fetchSolanaDomain();\n                    getFollowStatus();\n                    initFollowListInfo();\n\n                    // get featured\n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === pubkey){\n                            setFeaturedObj(featured);\n                        }\n                    }\n                }\n            }\n        }\n    }, [pubkey]);\n\n    if (loading){\n        return <>Loading...</>\n    } else {\n\n        return (\n            <React.Fragment>\n                <Box>\n                        <Box\n                            sx={{\n                                mb:4,\n                                mt:3,\n                                //background:'green'\n                            }}\n                        >\n                            {featuredObj && (\n                                <Card sx={{borderRadius:'26px',mb:2}}>\n\n                                        {/*component={Link} to={`${GRAPE_PROFILE}${featuredObj.address}`}*/}\n                                    <CardActionArea\n                                        component=\"a\" href={`${featuredObj.daourl}`} target=\"_blank\"\n                                    >\n                                        <CardMedia\n                                        component=\"img\"\n                                        image={featuredObj.img}\n                                        alt={featuredObj.title}\n                                            sx={{\n                                                maxHeight: '250',\n                                                background: 'rgba(0, 0, 0, 1)',\n                                                m:0,\n                                                p:0,\n                                            }} \n                                        />\n                                    </CardActionArea>\n                                </Card>\n                            )}\n\n                                <Grid \n                                    container \n                                    spacing={2}\n                                    rowSpacing={3}\n                                    >    \n                                    <Grid item xs={12} sm={6} md={4} lg={3} xl={3}\n                                    sx={{\n                                    }}\n                                    >\n                                    \n                                    <Box\n                                        className='grape-profile-background'\n                                        sx={{\n                                            //background: 'rgba(0, 0, 0, 0.6)',\n                                            position:'relative',\n                                            borderRadius: '17px',\n                                            minHeight: '225px',\n                                            minWidth:'250px',\n                                            overflow:'hidden',\n                                            pb:3,\n                                            pl:4,\n                                            pr:4\n                                        }} \n                                    >\n                                    {featuredObj ? (  \n                                        <img\n                                            src={featuredObj.img}\n                                            alt=\"\"\n                                            style={{\n                                                opacity: '0.21',\n                                                position: 'absolute',\n                                                marginTop:2,\n                                                marginBottom:2,\n                                                padding:1,\n                                                top:'-5%',\n                                                right:'-5%',\n                                                height:'110%'\n                                            }}\n                                        />\n                                    )\n                                    :(\n                                        <>\n                                            {(hasProfilePicture && profilePictureUrl) &&\n                                                <img\n                                                    src={profilePictureUrl}\n                                                    alt=\"\"\n                                                    style={{\n                                                        opacity: '0.03',\n                                                        position: 'absolute',\n                                                        marginTop:2,\n                                                        marginBottom:2,\n                                                        padding:1,\n                                                        top:'-5%',\n                                                        left:'-50%',\n                                                        height:'200%'\n                                                    }}\n                                                />\n                                            }\n                                        </>\n                                        )\n                                    }\n                                    \n                                        \n                                        <List\n                                            sx={{ \n                                                width: '100%',\n                                                pl: 2,\n                                                pr: 2,\n                                                pb: 2\n                                            }}\n                                            component=\"nav\"\n                                            >       \n                                            <ListItemText>\n\n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"flex-end\"\n                                                justifyContent=\"flex-end\"\n                                            >\n                                                <Grid item>\n                                                    <Box sx={{ mt:-1.5,mr:-6 }}>\n                                                        \n                                                        <Typography component=\"div\" variant=\"caption\" alignItems=\"flex-end\" justifyContent=\"flex-end\">\n\n                                                            <ButtonGroup variant=\"text\">\n                                                            <ShareSocialURL url={window.location.href} title={'Grape Profile | '+trimAddress(pubkey,4)} />\n\n                                                            {publicKey && publicKey.toBase58() !== pubkey &&\n                                                                <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                {loadingFollowState ?\n                                                                    <>\n                                                                        <CircularProgress sx={{p:'14px',m:-0.75}} />\n                                                                    </>\n                                                                :\n                                                                    <>\n                                                                        {isFollowing ?  \n                                                                            <Tooltip title={`Unfollow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletDisconnect(pubkey)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonRemoveOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                            :\n                                                                            <Tooltip title={`Follow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletConnect(pubkey, solanaDomain)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonAddOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                                </Typography>\n                                                            }\n                                                            </ButtonGroup>\n                                                        </Typography>\n                                                    </Box>\n                                                </Grid>  \n                                            </Grid>  \n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\"\n                                                sx={{mt:2}}\n                                            >\n                                                <Grid item>\n                                                {(hasProfilePicture && profilePictureUrl) ?\n                                                    <Avatar sx={{ width: 100, height: 100 }} alt=\"Profile\" src={profilePictureUrl} />\n                                                :\n                                                    <Jazzicon diameter={100} seed={jsNumberForAddress(pubkey)} />\n                                                }\n                                                </Grid>\n                                                <Grid item\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\"\n                                                >\n                                                    <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>\n                                                        {solanaDomain && solanaDomain.length > 0 ?\n                                                        \n                                                            <Button \n                                                                sx={{borderRadius:'17px'}} \n                                                                size=\"small\" variant=\"text\" \n                                                                component={Link} \n                                                                to={`${GRAPE_IDENTITY}${pubkey}`}>\n                                                                <Grid \n                                                                container \n                                                                direction=\"column\"\n                                                                alignItems=\"center\"\n                                                                justifyContent=\"center\"\n                                                                >\n                                                                    <Grid item>\n                                                                        <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}><strong>{solanaDomain}</strong></Typography>\n                                                                    </Grid>\n                                                                    <Grid item sx={{mt:-1.5}}>\n                                                                        <Typography gutterBottom variant=\"caption\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>{trimAddress(pubkey,4)}</Typography>\n                                                                    </Grid>\n                                                                </Grid>\n                                                            </Button>\n                                                        :\n                                                            <MakeLinkableAddress addr={pubkey} trim={5} hasextlink={true} hascopy={false} permalink={false} fontsize={14} />\n                                                        }\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item sx={{mt:1}}>\n                                                    \n                                                    {followListInfo && \n                                                        <>\n                                                            \n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(3)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followingCount}</strong>&nbsp;  \n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Following</Typography>&nbsp; \n                                                                </Button>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(2)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followerCount}</strong>&nbsp;\n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Followers</Typography>\n                                                                </Button>\n                                                            </Typography>\n                                                        </>\n                                                    }\n                                                    \n                                                    { final_collection && final_collection.length > 0 && (\n                                                        <>\n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" color=\"#aaa\"  sx={{ flexGrow: 1, mt:3 }}>\n                                                                <strong>{final_collection.length}</strong> items collected\n                                                            </Typography>\n                                                        </>\n                                                    )}\n                                                    \n                                                    \n                                                            \n                                                </Grid>\n                                            </Grid>\n                                            </ListItemText>\n                                        </List>\n                                    </Box>\n                                    <MainMenu pubkey={pubkey} />\n                                </Grid>\n                                \n                                <MainPanel activeTab={activeTab} thisPublicKey={pubkey} final_collection={final_collection} wallet_collection={wallet_collection} wallet_collection_meta={wallet_collection_meta} />\n                            </Grid>\n                        </Box>\n                        \n                    </Box>\n            </React.Fragment>\n        );\n    }\n    \n}\n\nexport async function findOwnedNameAccountsForUser(\n    connection: Connection,\n    userAccount: PublicKey\n  ): Promise<PublicKey[]> {\n    const NAME_PROGRAM_ID = new PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\n    const filters = [\n      {\n        memcmp: {\n          offset: 32,\n          bytes: userAccount.toBase58(),\n        },\n      },\n    ];\n    const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n      filters,\n    });\n    \n    return accounts.map((a) => a.pubkey);    \n}\n\n\nexport function ProfileView(this: any, props: any) {\n    //const [provider, setProvider] = React.useState(getParam('provider'));\n    const [gallery, setGallery] = React.useState(null);\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    const [rdloading, setRDLoading] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    //const [success, setSuccess] = React.useState(false);\n    const [withPubKey, setWithPubKey] = React.useState(null);\n    const [pubkey, setPubkey] = React.useState(null);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const [solWebUrl, setSolWebUrl] = React.useState(null);\n    const { connection } = useConnection();\n    const { publicKey } = useWallet();\n    //const { handlekey } = useParams() as { \n    //    handlekey: string;\n    //}\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"address\") || handlekey;\n    \n    const navigate = useNavigate();\n    //const location = useLocation();\n    \n    const fetchWalletCollection = async () => { \n        /*\n        TokenAccountsFilter\n        const response = await connection.getTokenAccountsByOwner(\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" }\n        );*/\n\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            pubkey,\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d4\",\n        };\n        \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n    \n        const json = await response.json();\n        try{\n            //const err = json?.result || true;\n            //if (!err){\n            //    return [];\n            //} else{\n                const resultValues = json.result.value\n                \n                let walletCollection = new Array();\n                let wallet = resultValues && resultValues?.map((collectionInfo: any) => {\n                    (+collectionInfo.account.data.parsed.info.tokenAmount.amount >= 1) &&\n                        (+collectionInfo.account.data.parsed.info.tokenAmount.decimals === 0) && \n                            walletCollection.push(collectionInfo);    \n                            return collectionInfo;\n                });\n                return walletCollection;\n            //}\n        } catch(e){console.log(e);}\n        return [];\n    };\n\n    const getWalletGallery = async () => {\n        if (!loading){\n            setLoading(true);\n            setLoadCount(loadCount+1);\n\n            let [collection] = await Promise.all([fetchWalletCollection()]);\n            setCollection({\n                collection\n            })\n            setLoading(false);\n        } else{\n            return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <CircularProgress color=\"inherit\" />\n                    </Grid>\n                </Grid>\n            )\n        }\n    }\n\n    const getReverseDomainLookup = async (url:string) => {\n        if (!rdloading){\n            setRDLoading(true);\n            \n            const SOL_TLD_AUTHORITY = new PublicKey(\"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\");\n            const ROOT_TLD_AUTHORITY = new PublicKey(\"ZoAhWEqTVqHVqupYmEanDobY7dee5YKbQox9BNASZzU\");\n            const PROGRAM_ID = new PublicKey(\"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\");\n            const centralState = new PublicKey(\"33m47vH6Eav6jr5Ry86XjhRft2jRBLDnDgPSHoquXi2Z\");\n            \n            const domainName = url.slice(0, url.indexOf('.'));\n            const hashedName = await getHashedName(domainName);\n            const domainKey = await getNameAccountKey(\n                hashedName,\n                undefined,\n                SOL_TLD_AUTHORITY\n            );\n            const registry = await NameRegistryState.retrieve(connection, new PublicKey(domainKey));\n            \n            if (!registry.data) {\n                throw new Error(\"Could not retrieve name data\");\n            }\n\n            setPubkey(registry.owner.toBase58());\n            setRDLoading(false);\n        }\n    }\n    const getTwitterLookup = async (url:string) => {\n        if ((!rdloading)&&(!pubkey)){\n            setRDLoading(true);\n            \n            //const domainName = url.slice(url.indexOf('@'), url.length);\n            const twitterHandle = \"\";\n            //console.log(\"checking: \"+twitterHandle);\n            const registry = await getTwitterRegistry(connection, twitterHandle);\n            \n            // verify that this is working and then push live...\n            //setPubkey(registry.owner.toBase58());\n            setRDLoading(false);\n        }\n    }\n\n    const CollectionProfile = (props: any) => {\n        return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <Box\n                            height=\"100%\"\n                            display=\"flex-grow\"\n                            justifyContent=\"center\"\n                        >\n                            <IdentityView gallery={gallery} collection={collection} pubkey={pubkey} setPubkey={setPubkey} />\n                        </Box>\n                    </Grid>\n                </Grid>\n        );\n    }\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n\n        if ((newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue))||\n            ((newinputpkvalue.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (newinputpkvalue.slice(0,1) === '@'))){\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            \n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            console.log(\"pubkey: \"+pubkey);\n            if (ValidateAddress(pubkey)){\n                console.log(\"getWalletGallery()\");\n                getWalletGallery();\n            }\n        }\n    }, [pubkey]);\n\n    React.useEffect(() => { \n        if (withPubKey){\n            if (ValidateAddress(withPubKey)){\n                setPubkey(withPubKey);\n                navigate({\n                    pathname: GRAPE_PROFILE+withPubKey\n                },\n                    { replace: true }\n                );\n            } else {\n                if ((withPubKey.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (withPubKey.slice(0,1) === '@')){\n                    if (withPubKey.toLocaleUpperCase().endsWith(\".SOL\")){ // Solana Domain\n                        getReverseDomainLookup(withPubKey);\n                    } else if (withPubKey.toLocaleUpperCase().startsWith(\"@\")){ // Twitter Handle\n                        getTwitterLookup(withPubKey);\n                    }\n                } else{\n                    console.log(\"Nothing send reverting to default profile\");\n                    navigate({\n                        pathname: '/profile'\n                    },\n                        { replace: true }\n                    );\n                }\n            }\n        }\n    }, [withPubKey]);\n\n    React.useEffect(() => { \n        if (urlParams){\n            setWithPubKey(urlParams);\n        } else if (pubkey){\n        } else if (publicKey){\n            setWithPubKey(publicKey.toBase58());\n        }\n    }, [publicKey, urlParams]);\n\n    \n    if (!pubkey){ \n        // ...\n    } else {\n        if(((!gallery) && (!collection))||\n            (loading)){\n            return (\n            <React.Fragment>\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                        <Grid \n                            container \n                            direction=\"column\" \n                            spacing={2} \n                            alignItems=\"center\"\n                            rowSpacing={8}\n                        >\n                            <Grid \n                                item xs={12}\n                            >\n                                <Box\n                                    height=\"100%\"\n                                    display=\"flex\"\n                                    justifyContent=\"center\"\n                                >\n                                    <CircularProgress color=\"inherit\" />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                </Box>\n            </React.Fragment>\n            )\n        }\n    }\n    \n    return (\n        <React.Fragment>\n            <Box\n                sx={{\n                    mt: 2,\n                    \n                }}\n            >\n                <Box>  \n\n                        { pubkey && ValidateAddress(pubkey) ?\n                            <CollectionProfile />\n                        : \n                        <>\n                            <React.Fragment>\n                                <Box\n                                    sx={{ \n                                        p: 1, \n                                        mb: 3, \n                                        width: '100%',\n                                        background: '#13151C',\n                                        borderRadius: '24px'\n                                    }}\n                                > \n                                        <Grid \n                                            container \n                                            direction=\"column\" \n                                            spacing={2} \n                                            alignItems=\"center\"\n                                            rowSpacing={8}\n                                        >\n                                            \n                                            <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                            </Typography>\n                                        </Grid>\n                                        <Grid \n                                            item xs={12}\n                                            alignItems=\"center\"\n                                        > \n                                            <Typography\n                                                variant=\"h6\"\n                                                color=\"inherit\"\n                                                display='flex'\n                                                sx={{mb:3}}\n                                            >Social. Stateless. Marketplace.</Typography>\n\n                                        </Grid>\n                                            \n                                        <Grid>\n                                            <Paper\n                                                component=\"form\"\n                                                onSubmit={handlePublicKeySubmit}\n                                                sx={{ m:2, p: 1, display: 'flex', alignItems: 'center', borderRadius: '24px' }}\n                                            >\n                                                <InputBase\n                                                    fullWidth\n                                                    sx={{ ml: 1, flex: 1 }}\n                                                    placeholder=\"Enter a solana address\"\n                                                    inputProps={{ 'aria-label': 'solana address' }}\n                                                    value={newinputpkvalue}\n                                                    onChange={(e) => setNewInputPKValue(e.target.value)}\n                                                />\n                                                <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n                                                    <SearchIcon />\n                                                </IconButton>\n                                            </Paper>\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                            </React.Fragment>\n                        </>\n                        }\n\n                </Box>\n            </Box>\n        </React.Fragment>\n    );\n}\n","import { BinaryReader, BinaryWriter, deserializeUnchecked } from 'borsh';\nimport base58 from 'bs58';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\ntype StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: number;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: number;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\nexport class TokenStandard {\n  NonFungible: number;\n  FungibleAsset: number;\n  Fungible: number;\n  NonFungibleEdition: number;\n\n  constructor(args: {\n    NonFungible: number;\n    FungibleAsset: number;\n    Fungible: number;\n    NonFungibleEdition: number;\n  }) {\n    this.NonFungible = args.NonFungible;\n    this.FungibleAsset = args.FungibleAsset;\n    this.Fungible = args.Fungible;\n    this.NonFungibleEdition = args.NonFungibleEdition;\n  }\n}\nexport class Collection {\n  verified: boolean;\n  key: StringPublicKey;\n\n  constructor(args: {\n    verified: boolean;\n    key: StringPublicKey;\n  }) {\n    this.verified = args.verified;\n    this.key = args.key;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\n\nexport class UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n  }\n}\n\nexport class CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n  edition?: StringPublicKey | null;\n  // set lazy\n  masterEdition?: StringPublicKey;\n  tokenStandard?: TokenStandard;\n  collection?: Collection;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n    tokenStandard: TokenStandard | null;\n    collection: Collection | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce ?? null;\n    this.tokenStandard = args.tokenStandard ?? null;\n    this.collection = args.collection ?? null;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', Data],\n        ['isMutable', 'u8'], // bool\n      ],\n    },\n  ],\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', { kind: 'option', type: Data }],\n        ['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n        ['primarySaleHappened', { kind: 'option', type: 'u8' }],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', 'pubkeyAsString'],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Collection,\n    {\n      kind: 'struct',\n      fields: [\n        ['verified', 'u8'], // bool\n        ['key', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TokenStandard,\n    {\n      kind: 'struct',\n      fields: [\n        ['NonFungible', 'u8'],\n        ['FungibleAsset', 'u8'],\n        ['Fungible', 'u8'],\n        ['NonFungibleEdition', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', 'pubkeyAsString'],\n        ['mint', 'pubkeyAsString'],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'], // bool\n        ['isMutable', 'u8'], // bool\n        ['editionNonce', { kind: 'option', type: 'u8' }],\n        ['tokenStandard', { kind: 'option', type: 'u8' }],\n        ['collection', { kind: 'option', type: Collection }],\n      ],\n    },\n  ],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer,\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n  return metadata;\n};\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import { PublicKey } from '@solana/web3.js';\nimport 'dotenv/config.js';\n\nexport const CANDY_MACHINE = 'candy_machine';\nexport const AUCTION_HOUSE = 'auction_house';\nexport const TOKEN_ENTANGLER = 'token_entangler';\nexport const ESCROW = 'escrow';\nexport const A = 'A';\nexport const B = 'B';\nexport const FEE_PAYER = 'fee_payer';\nexport const TREASURY = 'treasury';\nexport const LAMPORT = 1000000000;\nexport const MAX_NAME_LENGTH = 32;\nexport const MAX_URI_LENGTH = 200;\nexport const MAX_SYMBOL_LENGTH = 10;\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\n\nexport const ARWEAVE_PAYMENT_WALLET = new PublicKey(\n  '6FKvsq4ydWFci6nGq9ckbjYMtnmaqAoatz5c9XWjiDuS',\n);\nexport const METAPLEX_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\nexport const CANDY_MACHINE_PROGRAM_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\nexport const FAIR_LAUNCH_PROGRAM_ID = new PublicKey(\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\n);\nexport const AUCTION_HOUSE_PROGRAM_ID = new PublicKey(\n  'hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk',\n);\nexport const TOKEN_ENTANGLEMENT_PROGRAM_ID = new PublicKey(\n  'qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd',\n);\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\nexport const GUMDROP_DISTRIBUTOR_ID = new PublicKey(\n  'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'\n);\nexport const GUMDROP_TEMPORAL_SIGNER = new PublicKey(\n  'MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV'\n);\n\nexport const CONFIG_ARRAY_START =\n  32 + // authority\n  4 +\n  6 + // uuid + u32 len\n  4 +\n  10 + // u32 len + symbol\n  2 + // seller fee basis points\n  1 +\n  4 +\n  5 * 34 + // optional + u32 len + actual vec\n  8 + //max supply\n  1 + //is mutable\n  1 + // retain authority\n  4; // max number of lines;\nexport const CONFIG_LINE_SIZE = 4 + 32 + 4 + 200;\n\nexport const CACHE_PATH = './.cache';\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const EXTENSION_PNG = '.png';\nexport const EXTENSION_JSON = '.json';\n\nexport const ENV_AH = \"mainnet-beta\";\n\nexport const AUCTION_HOUSE_ADDRESS = process.env.REACT_APP_API_AUCTION_HOUSE_ADDRESS || \"4w2BVBfV86NBm3ytL1AuHxToBV7Kx5YahdMRgyyYFoRj\";","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { getPriceWithMantissa } from './helpers/various';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\nexport async function cancelWithdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n    //START CANCEL\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    \n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    \n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    \n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    \n    const instructions = [instruction];\n    //END CANCEL\n\n    //START WITHDRAW\n    let withdrawAmmount = 0;\n    if (escrowSolAmount < offerAmount){\n      withdrawAmmount = escrowSolAmount;\n    } else {\n      withdrawAmmount = offerAmount;\n    }\n    const amountAdjusted = await getPriceWithMantissa(\n      withdrawAmmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerWalletKey,\n      anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    //const signers = isNative ? [] : [transferAuthority];\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction2 = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    instructions.push(instruction2);\n\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","\nexport const FREE_RPC_ENDPOINT = process.env.REACT_APP_API_FREE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\nexport const GRAPE_RPC_ENDPOINT = process.env.REACT_APP_API_GRAPE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\n\n//export const GRAPE_PREVIEW = '/preview/';\n//export const GRAPE_PROFILE = '/profile/';\n//export const GRAPE_IDENTITY = '/identity/';\n\nexport const GRAPE_PREVIEW = '/preview?pkey=';\nexport const GRAPE_PROFILE = '/profile?pkey=';\nexport const GRAPE_IDENTITY = '/identity?pkey=';\n\nexport const GRAPE_RPC_REFRESH = 25000;\nexport const GRAPE_TREASURY = 'GrapevviL94JZRiZwn2LjpWtmDacXU8QhAJvzpUMMFdL';\n\nexport const TOKEN_VERIFICATION_ADDRESS = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\nexport const TOKEN_VERIFICATION_NAME = 'Grape';\nexport const TOKEN_VERIFICATION_AMOUNT = 1000;\nexport const TOKEN_REALM_ID = 'By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip';\nexport const TOKEN_REALM_PROGRAM_ID = 'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw';\n\nexport const FEATURED_DAO_ARRAY = [{\n    address:'66pJhhESDjdeBBDdkKmxYYd7q6GUggYPWjxpMKNX39KV',\n    daourl:'https://realms.today/dao/Ukraine',\n    img:'/solana4ukraine.png',\n    title:'Solana for Ukraine',\n    text:'NFT Artists come together in the DAO made exlusively to help out Ukraine, all proceeds of these NFT\\'s will be donated to help the Ukrainian people'\n}]\n\nexport const OTHER_MARKETPLACES = new Array(\n    {\n        name: 'Magic Eden',\n        logo: 'https://magiceden.io/static/media/logo.ca418d75.svg',\n        //logo: 'https://magiceden.io/img/logo.png',\n        address: 'GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp',\n        previewUrl: 'https://www.magiceden.io/item-details/',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'SolanArt',\n        logo: 'https://solanart.io/static/media/logo.0054f7e7.png',\n        address: '3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK',\n        previewUrl: 'https://solanart.io/search/?token=',\n        url: 'https://solanart.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/favicon-32x32.png',\n        address: 'F4ghBzHFNgJxV4wEQDchU5i7n4XWWMBSaq7CuswGiVsr',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/favicon-32x32.png',\n        address: 'BweTPKW9QsWZTJnfbLz88ekKaWw7HrBJsStrduHryPgk',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Alph Art',\n        //logo: 'https://alpha.art/icon-root.svg',\n        logo: 'https://alpha.art/logo_192.png',\n        address: '4pUQS4Jo2dsfWzt3VgHXy3H6RYnEDd11oWPiaM2rdAPw',\n        previewUrl: 'https://alpha.art/t/',\n        url: 'https://www.alpha.art'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: '73tF8uN3BwVzUzwETv59WNAafuEBct2zTgYbYXLggQiU',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HHvnfyY7vNWhjeHqCVyMPr4UjDp3ptqu3QbuFoCkrm8r',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HznNaC2cz1iXMtHMG3HAgMH2xkrt2iTXfUKz6wwAAVPB',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'G6xptnrkj4bxg9H9ZyPzmAnNsGghSxZ7oBCL1KNKJUza',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: '7Ppgch9d4XRAygVNJP4bDkc7V6htYXGfghX4zzG9r4cH',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'EQEpTS8SiVPUxyqRgT2Jdx9dHEwbpcbSZ2sotiAUZ7i7',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'CPo76cw52gKMTyvCS9GpnnZfvmkQQxovLwQFxonZrCRU',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    }\n);","import {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  AccountInfo,\n} from '@solana/web3.js';\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  FAIR_LAUNCH_PROGRAM_ID,\n  AUCTION_HOUSE_PROGRAM_ID,\n  AUCTION_HOUSE,\n  FEE_PAYER,\n  TREASURY,\n  WRAPPED_SOL_MINT,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  TOKEN_ENTANGLER,\n  ESCROW,\n  B,\n  A,\n} from './constants';\nimport * as anchor from '@project-serum/anchor';\n//import { Wallet } from '@solana/wallet-adapter-react';\nimport fs from 'fs';\n//import { createConfigAccount } from './instructions';\nimport { web3 } from '@project-serum/anchor';\nimport log from 'loglevel';\nimport { AccountLayout, u64 } from '@solana/spl-token';\n\nexport type AccountAndPubkey = {\n  pubkey: string;\n  account: AccountInfo<Buffer>;\n};\n\nexport type StringPublicKey = string;\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: anchor.BN;\n    symbol: string;\n    sellerFeeBasisPoints: number;\n    isMutable: boolean;\n    maxSupply: anchor.BN;\n    retainAuthority: boolean;\n    creators: {\n      address: PublicKey;\n      verified: boolean;\n      share: number;\n    }[];\n  },\n) {\n  const configAccount = Keypair.generate();\n  const uuid = uuidFromConfigPubkey(configAccount.publicKey);\n\n  if (!configData.creators || configData.creators.length === 0) {\n    throw new Error(`Invalid config, there must be at least one creator.`);\n  }\n\n  const totalShare = (configData.creators || []).reduce(\n    (acc, curr) => acc + curr.share,\n    0,\n  );\n\n  /*if (totalShare !== 100) {\n    throw new Error(`Invalid config, creators shares must add up to 100`);\n  }\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  };*/\n};\n\nexport function uuidFromConfigPubkey(configAccount: PublicKey) {\n  return configAccount.toBase58().slice(0, 6);\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunch = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), seq.toBuffer('le', 8)],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationToken = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n      Buffer.from('account'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getTreasury = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('treasury')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkPda = async (\n  mint: anchor.web3.PublicKey,\n  edition: number,\n): Promise<anchor.web3.PublicKey> => {\n  const editionNumber = Math.floor(edition / 248);\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(editionNumber.toString()),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getAuctionHouse = async (\n  creator: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), creator.toBuffer(), treasuryMint.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseProgramAsSigner = async (): Promise<\n  [PublicKey, number]\n> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), Buffer.from('signer')],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseFeeAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(FEE_PAYER),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTreasuryAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(TREASURY),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseBuyerEscrow = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  //console.log(\"get escrow inside\");\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTradeState = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n  tokenAccount: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n  tokenMint: anchor.web3.PublicKey,\n  tokenSize: anchor.BN,\n  buyPrice: anchor.BN,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      wallet.toBuffer(),\n      auctionHouse.toBuffer(),\n      tokenAccount.toBuffer(),\n      treasuryMint.toBuffer(),\n      tokenMint.toBuffer(),\n      //nmaz needed to change otherwise would crash (browserify compatibility)\n      //buyPrice.toBuffer('le', 8),\n      buyPrice.toArrayLike(Buffer,'le',8),\n      //tokenSize.toBuffer('le', 8),\n      tokenSize.toArrayLike(Buffer,'le',8),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglementEscrows = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number, PublicKey, number]> => {\n  return [\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(A),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(B),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n  ];\n};\n\n\n\nexport function loadWalletKey(keypair: any): Keypair {\n  if (!keypair || keypair == '') {\n    throw new Error('Keypair is required!');\n  }\n  const loaded = Keypair.fromSecretKey(\n    //new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n    //new Uint8Array(JSON.parse((keypair))),\n    new Uint8Array(keypair),\n  );\n  log.info(`wallet public key: ${loaded.publicKey}`);\n  //console.log(`wallet public key: ${loaded.publicKey}`);\n  return loaded;\n}\n\n/*\nexport async function loadCandyProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider);\n  log.debug('program id from anchor', program.programId.toBase58());\n  return program;\n}*/\n\n/*\nexport async function loadFairLaunchProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, FAIR_LAUNCH_PROGRAM_ID, provider);\n}\n*/\nexport async function loadAuctionHouseProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  \n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(AUCTION_HOUSE_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, AUCTION_HOUSE_PROGRAM_ID, provider);\n}\n\n/*\nexport async function loadTokenEntanglementProgream(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n*/\n\nexport async function getTokenAmount(\n  anchorProgram: anchor.Program,\n  account: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey,\n): Promise<number> {\n  let amount = 0;\n  if (!mint.equals(WRAPPED_SOL_MINT)) {\n    try {\n      const token =\n        await anchorProgram.provider.connection.getTokenAccountBalance(account);\n      amount = token.value.uiAmount * Math.pow(10, token.value.decimals);\n    } catch (e) {\n      log.error(e);\n      log.info(\n        'Account ',\n        account.toBase58(),\n        'didnt return value. Assuming 0 tokens.',\n      );\n    }\n  } else {\n    amount = await anchorProgram.provider.connection.getBalance(account);\n  }\n  return amount;\n}\n\nexport async function getProgramAccounts(\n  connection: anchor.web3.Connection,\n  programId: string,\n  configOrCommitment?: any,\n): Promise<AccountAndPubkey[]> {\n  const extra: any = {};\n  let commitment;\n  //let encoding;\n\n  if (configOrCommitment) {\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else {\n      commitment = configOrCommitment.commitment;\n      //encoding = configOrCommitment.encoding;\n\n      if (configOrCommitment.dataSlice) {\n        extra.dataSlice = configOrCommitment.dataSlice;\n      }\n\n      if (configOrCommitment.filters) {\n        extra.filters = configOrCommitment.filters;\n      }\n    }\n  }\n\n  const args = connection._buildArgs([programId], commitment, 'base64', extra);\n  const unsafeRes = await (connection as any)._rpcRequest(\n    'getProgramAccounts',\n    args,\n  );\n\n  return unsafeResAccounts(unsafeRes.result);\n}\n\n//function unsafeAccount(account: anchor.web3.AccountInfo<string[]>) {\nfunction unsafeAccount(account: anchor.web3.AccountInfo<[string, string]>) {\n    return {\n    // TODO: possible delay parsing could be added here\n    data: Buffer.from(account.data[0], 'base64'),\n    executable: account.executable,\n    lamports: account.lamports,\n    // TODO: maybe we can do it in lazy way? or just use string\n    owner: account.owner,\n  } as anchor.web3.AccountInfo<Buffer>;\n}\n\nfunction unsafeResAccounts(\n  data: Array<{\n    //account: anchor.web3.AccountInfo<string[]>;\n    account: anchor.web3.AccountInfo<[string, string]>;\n    pubkey: string;\n  }>,\n) {\n  return data.map(item => ({\n    account: unsafeAccount(item.account),\n    pubkey: item.pubkey,\n  }));\n}\n","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { styled } from '@mui/material/styles';\nimport { useSnackbar } from 'notistack';\n\nimport { \n    Dialog,\n    List,\n    ListItem,\n    ListItemButton,\n    ListItemText,\n    ListItemAvatar,\n    DialogTitle,\n    DialogContent,\n    Avatar,\n    Button,\n    Tooltip, \n    CardActionArea \n} from '@mui/material';\n\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport IosShareIcon from '@mui/icons-material/IosShare';\n\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    WhatsappShareButton,\n  } from \"react-share\";\n\n  import {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n  } from \"react-share\";\n\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\nexport default function ShareSocialURL(props:any){\n    const shareUrl = props.url;\n    const title = props.title;\n    const fontSize = props.fontSize || '20px';\n\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopyClick = () => {\n        enqueueSnackbar(`Copied!`,{ variant: 'success' });\n    };\n\n    const handleNavigatorShare = () => {\n        navigator.share({\n            title: title,\n            text: title,\n            url: shareUrl\n        });\n    }\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (value) => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Tooltip title={`Share`}>\n                <Button size=\"small\" variant=\"text\" onClick={handleClickOpen}\n                    sx={{borderRadius:'24px', color:'white'}}\n                >\n                    <IosShareIcon sx={{fontSize:{fontSize}}} />\n                </Button> \n            </Tooltip>\n            <BootstrapDialog \n                maxWidth={\"md\"}\n                open={open} onClose={handleClose}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Share\n                </DialogTitle>\n                <DialogContent>\n                    <List sx={{ pt: 0 }}>\n                        <ListItem>\n                            <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                <CopyToClipboard \n                                    text={shareUrl} \n                                    onCopy={handleCopyClick}\n                                    >\n                                    <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                        \n                                            <ListItemAvatar>\n                                                <Avatar sx={{ width: 32, height: 32 }}><ContentCopyIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={'Copy'} />\n                                        \n                                    </ListItemButton>\n                                </CopyToClipboard> \n                            </Button>\n                        </ListItem>\n                        {(navigator.share !== undefined) &&\n                            <ListItem>\n                                <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                    <CopyToClipboard \n                                        text={shareUrl} \n                                        onCopy={handleNavigatorShare}\n                                        >\n                                        <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                            \n                                                <ListItemAvatar>\n                                                    <Avatar sx={{ width: 32, height: 32 }}><IosShareIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={'Native Share'} />\n                                            \n                                        </ListItemButton>\n                                    </CopyToClipboard> \n                                </Button>\n                            </ListItem>\n                        }\n                        <ListItem>  \n                            <EmailShareButton\n                                    url={''}\n                                    subject={title}\n                                    body={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><EmailIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Email'} />\n                                    \n                                </ListItemButton>\n                            </EmailShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TwitterShareButton\n                                    url={shareUrl}\n                                    title={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TwitterIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Twitter'} />\n                                    \n                                </ListItemButton>\n                            </TwitterShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TelegramShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TelegramIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Telegram'} />\n                                    \n                                </ListItemButton>\n                            </TelegramShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <FacebookShareButton\n                                    url={shareUrl}\n                                    quote={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><FacebookIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Facebook'} />\n                                    \n                                </ListItemButton>\n                            </FacebookShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <ViberShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><ViberIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Viber'} />\n                                    \n                                </ListItemButton>\n                            </ViberShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <WhatsappShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><WhatsappIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'WhatsApp'} />\n                                    \n                                </ListItemButton>\n                            </WhatsappShareButton>\n                        </ListItem>\n\n                    </List>\n                </DialogContent>  \n            </BootstrapDialog>\n        </>\n        \n    ); \n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport function hashCode(s: string) {\n  let h = 0;\n  for (let i = 0; i < s.length; i++)\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n\n  return h.toString();\n}\n\nexport enum CachePrefix {\n  Message = \"message_\",\n  DecryptedMessage = \"decrypted_message_\",\n  Media = \"media_\",\n  DecryptedMedia = \"decrypted_media_\",\n  MessageCount = \"message_count_\",\n  RetrievedThread = \"retrieved_thread_\",\n  LastMsgCount = \"last_msg_count_\",\n  ProfilePicture = \"profile_pic_\",\n  Archive = \"archive_\",\n  CentralState = \"central_state_\",\n  Sha256 = \"sha256_\",\n  ProgramAddress = \"program_address_\",\n  IpfsHash = \"ipfs_hash_\",\n}\n\nexport class asyncCache {\n  static async get<T>(key: string): Promise<T | null> {\n    const cached = await AsyncStorage.getItem(hashCode(key));\n    if (!cached) {\n      return null;\n    }\n    return JSON.parse(cached);\n  }\n  static async set<T>(key: string, value: T) {\n    const stringified = JSON.stringify(value);\n    await AsyncStorage.setItem(hashCode(key), stringified);\n  }\n\n  static async sha256(data: ethers.utils.BytesLike): Promise<string> {\n    const cached = await asyncCache.get<string>(\n      CachePrefix.Sha256 + data.toString()\n    );\n    if (cached) {\n      return cached;\n    }\n    const result: string = await new Promise((resolve) =>\n      resolve(ethers.utils.sha256(data).slice(2))\n    );\n    await asyncCache.set(CachePrefix.Sha256 + data.toString(), result);\n    return result;\n  }\n}\n\nexport function useGetAsyncCache<T>(key: string, refresh?: boolean): T | null {\n  const [cached, setCached] = useState<T | null>(null);\n\n  const fn = useCallback(async () => {\n    return await asyncCache.get<T>(key);\n  }, [key]);\n\n  useEffect(() => {\n    let mounted = true;\n    fn().then((c) => {\n      if (!mounted) return null;\n      setCached(c);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [refresh, key]);\n  return cached;\n}","/** @solana/web3.js is not compatible with react-native */\nimport nacl from \"tweetnacl\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Buffer } from \"buffer\";\nimport BN from \"bn.js\";\nimport { asyncCache } from \"../cache\";\nimport { ethers } from \"ethers\";\n\nexport const MAX_SEED_LENGTH = 32;\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function createProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<PublicKey> {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([\n    buffer,\n    programId.toBuffer(),\n    Buffer.from(\"ProgramDerivedAddress\"),\n  ]);\n  const hash: string = await new Promise((resolve) =>\n    resolve(ethers.utils.sha256(new Uint8Array(buffer)).slice(2))\n  );\n  const publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n  if (is_on_curve(publicKeyBytes)) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n  const key = new PublicKey(publicKeyBytes);\n  return key;\n}\n\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<[PublicKey, number]> {\n  const cached = await asyncCache.get<{ address: string; nonce: number }>(\n    seeds.toString()\n  );\n  if (cached) {\n    return [new PublicKey(cached.address), cached.nonce];\n  }\n  let nonce = 255;\n  let address;\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = await createProgramAddress(seedsWithNonce, programId);\n      await asyncCache.set(seeds.toString(), {\n        address: address.toBase58(),\n        nonce: nonce,\n      });\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\n/* eslint-disable */\n//  @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/* eslint-enable */","import { Buffer } from \"buffer\";\nimport {\n  HASH_PREFIX,\n  NAME_PROGRAM_ID,\n  TWITTER_ROOT_PARENT_REGISTRY_KEY,\n  TWITTER_VERIFICATION_AUTHORITY,\n  ReverseTwitterRegistryState,\n} from \"@bonfida/spl-name-service\";\nimport { ethers } from \"ethers\";\nimport { PublicKey, Connection } from \"@solana/web3.js\";\nimport { findProgramAddress } from \"./program-address\";\nimport { asyncCache, CachePrefix } from \"../cache\";\n\nexport async function getHashedName(name: string) {\n  const input = HASH_PREFIX + name;\n  const cached = await asyncCache.get<string>(CachePrefix + name);\n  if (!cached) {\n    const buffer = ethers.utils.sha256(Buffer.from(input)).slice(2);\n    await asyncCache.set(CachePrefix + name, buffer);\n    return Buffer.from(buffer, \"hex\");\n  }\n  return Buffer.from(cached, \"hex\");\n}\n\nexport async function getNameAccountKey(\n  hashed_name: Buffer,\n  nameClass?: PublicKey,\n  nameParent?: PublicKey\n): Promise<PublicKey> {\n  const seeds = [hashed_name];\n  if (nameClass) {\n    seeds.push(nameClass.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  if (nameParent) {\n    seeds.push(nameParent.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  const [nameAccountKey] = await findProgramAddress(seeds, NAME_PROGRAM_ID);\n  return nameAccountKey;\n}\nexport async function getHandleAndRegistryKey(\n  connection: Connection,\n  verifiedPubkey: PublicKey\n): Promise<[string, PublicKey]> {\n  const hashedVerifiedPubkey = await getHashedName(verifiedPubkey.toString());\n  const reverseRegistryKey = await getNameAccountKey(\n    hashedVerifiedPubkey,\n    TWITTER_VERIFICATION_AUTHORITY,\n    TWITTER_ROOT_PARENT_REGISTRY_KEY\n  );\n\n  const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(\n    connection,\n    reverseRegistryKey\n  );\n  return [\n    reverseRegistryState.twitterHandle,\n    new PublicKey(reverseRegistryState.twitterRegistryKey),\n  ];\n}\n\nexport async function getDNSRecordAddress(\n  nameAccount: PublicKey,\n  type: string\n) {\n  const hashedName = await getHashedName(\"\\0\".concat(type));\n  const recordAccount = await getNameAccountKey(\n    hashedName,\n    undefined,\n    nameAccount\n  );\n  return recordAccount;\n}","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { NAME_PROGRAM_ID, NameRegistryState } from \"@bonfida/spl-name-service\";\nimport { getHashedName, getNameAccountKey } from \"./name-service\";\nimport BN from \"bn.js\";\n\nexport const PROGRAM_ID = new PublicKey(\n  \"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\"\n);\n\nexport const centralState = new PublicKey(\n  \"33m47vH6Eav6jr5Ry86XjhRft2jRBLDnDgPSHoquXi2Z\"\n);\n\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey\n): Promise<PublicKey[]> {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n    filters: filters,\n  });\n  return accounts.map((a) => a.pubkey);\n}\n\nexport async function performReverseLookup(\n  connection: Connection,\n  nameAccount: PublicKey\n): Promise<string> {\n  const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n  const reverseLookupAccount = await getNameAccountKey(\n    hashedReverseLookup,\n    centralState\n  );\n\n  const name = await NameRegistryState.retrieve(\n    connection,\n    reverseLookupAccount\n  );\n  if (!name.data) {\n    throw new Error(\"Could not retrieve name data\");\n  }\n  const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n  return name.data.slice(4, 4 + nameLength).toString();\n}\n\nexport async function performReverseLookupBatch(\n  connection: Connection,\n  nameAccounts: PublicKey[]\n): Promise<(string | undefined)[]> {\n  const [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID\n  );\n  const reverseLookupAccounts: PublicKey[] = [];\n  for (const nameAccount of nameAccounts) {\n    const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n    const reverseLookupAccount = await getNameAccountKey(\n      hashedReverseLookup,\n      centralState\n    );\n    reverseLookupAccounts.push(reverseLookupAccount);\n  }\n\n  const names = await NameRegistryState.retrieveBatch(\n    connection,\n    reverseLookupAccounts\n  );\n\n  return names.map((name) => {\n    if (name === undefined || name.data === undefined) {\n      return undefined;\n    }\n    const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n    return name.data.slice(4, 4 + nameLength).toString();\n  });\n}","import { PublicKey, Connection } from \"@solana/web3.js\";\n//import { useAsync } from \"./utils.native\";\nimport { asyncCache } from \"./cache\";\nimport {\n  findOwnedNameAccountsForUser,\n  performReverseLookupBatch,\n} from \"./web3/name-auctioning\";\nimport { getHandleAndRegistryKey } from \"./web3/name-service\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n//import { Profile } from \"./web3/jabber\";\n\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport const findDisplayName = async (\n  connection: Connection,\n  receiver: string\n) => {\n  let allNames: string[] = [];\n  let favoriteDisplayName: string | undefined = undefined;\n\n  try {\n      /*\n    try {\n      const profile = await Profile.retrieve(\n        connection,\n        new PublicKey(receiver)\n      );\n      favoriteDisplayName = profile.name.split(\":fdn:\")[1];\n      if (favoriteDisplayName) {\n        allNames.push(favoriteDisplayName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    const knownReceiver = await asyncCache.get<string[]>(receiver);\n    if (knownReceiver && knownReceiver?.length > 0) {\n      if (favoriteDisplayName && favoriteDisplayName !== knownReceiver[0]) {\n        await asyncCache.set(receiver, [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ]);\n        return [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ];\n      }\n      return knownReceiver;\n    }\n    */\n\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      new PublicKey(receiver)\n    );\n    domainsAddresses.sort((a, b) => a.toBase58().localeCompare(b.toBase58()));\n    if (domainsAddresses.length === 0) {\n      return [receiver];\n    }\n\n    const reverse = (\n      await performReverseLookupBatch(connection, domainsAddresses)\n    )\n      .filter((e) => !!e)\n      .map((e) => e + \".sol\") as string[];\n\n    allNames = [...allNames, ...reverse];\n\n    if (allNames.length > 0) {\n      await asyncCache.set(receiver, allNames);\n      return allNames;\n    }\n\n    try {\n      const [display] = await getHandleAndRegistryKey(\n        connection,\n        new PublicKey(receiver)\n      );\n      return [\"@\" + display];\n    } catch (err) {\n      console.log(err);\n    }\n\n    return [receiver];\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const useDisplayName = (contact: string | undefined) => {\n    const { connection } = useConnection();\n\n  const fn = async (): Promise<string[] | undefined> => {\n    if (!contact) return;\n    return await findDisplayName(connection, contact);\n  };\n\n  return false;\n  //return useAsync(fn, false);\n};\n\nexport const ownerHasDomain = async (\n  connection: Connection,\n  owner: PublicKey\n) => {\n  try {\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      owner\n    );\n    return domainsAddresses.length != 0;\n  } catch (err) {\n    console.log(err);\n  }\n  try {\n    await getHandleAndRegistryKey(connection, owner);\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return false;\n};\n\nexport const useUserHasDomainOrTwitter = () => {\n  const { publicKey } = useWallet();\n  const { connection } = useConnection();\n\n  const fn = async () => {\n    let hasDomain = false;\n    let hasTwitter = false;\n    if (!publicKey) return;\n    try {\n      const domainsAddresses = await findOwnedNameAccountsForUser(\n        connection,\n        publicKey\n      );\n      hasDomain = domainsAddresses.length !== 0;\n    } catch (err) {\n      console.log(err);\n    }\n\n    try {\n      await getHandleAndRegistryKey(connection, publicKey);\n      hasTwitter = true;\n    } catch (err) {\n      console.log(err);\n    }\n\n    return { hasTwitter: hasTwitter, hasDomain: hasDomain };\n  };\n  return false;\n  //return useAsync(fn, false);\n};\n","import { BasicUserInfo } from './types';\n\nexport const formatAddress = (address: string) => {\n  const len = address.length;\n  return address.substr(0, 5) + '...' + address.substring(len - 4, len);\n};\n\nexport const isValidAddr = (address: string) => {\n  const re = /^0x[a-fA-F0-9]{40}$/;\n  return address.match(re);\n};\n\nexport const removeDuplicate = (arr: BasicUserInfo[]) => {\n  return arr.filter(\n    (user, index, self) =>\n      index === self.findIndex((t) => t.address === user.address)\n  );\n};\n","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport { Button, CardActionArea } from '@mui/material';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport moment from 'moment';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { FEATURED_DAO_ARRAY } from './constants';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function timeAgo(blockTime:string){\n    try{\n        let prettydate = moment.unix(+blockTime).format(\"MMMM Do YYYY, h:mm a\");\n                    //console.log(\"prettyForSaleDate: \"+prettyForSaleDate)\n        let timeago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asDays().toFixed(0);\n        //console.log(\"Time Ago: \"+timeago);\n        if (+timeago >= 1){\n            prettydate = timeago+' days ago';\n        } else{\n            let hoursago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asHours().toFixed(0);\n            if (+hoursago >= 1){\n                prettydate = hoursago+' hours ago';\n            } else {\n                let minutesAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asMinutes().toFixed(0);\n                if (+minutesAgo >= 1){\n                    prettydate = minutesAgo+' minutes ago';\n                } else {\n                    let secondsAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asSeconds().toFixed(0);\n                    if (+secondsAgo >= 1){\n                        prettydate = minutesAgo+' seconds ago';\n                    }\n                }\n            }\n        }  \n\n        return prettydate;\n    }catch(e){\n        return blockTime;\n    }\n}\n\nexport function trimAddress(addr: any, trim:any) {\n    let start = addr.substring(0, trim);\n    let end = addr.substring(addr.length - trim);\n    return `${start}...${end}`;\n}\n\nexport function ValidateCurve(address:string){\n    return PublicKey.isOnCurve(new PublicKey(address).toBuffer());\n}\n\nexport function ValidateAddress(address:any){\n    try{\n        if (address){\n            //let base58 = useMemo(() => props?.toBase58(), [props]) || null;\n            if ((address.length >= 32) && \n                (address.length <= 45)){    \n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === address){\n                            return true;\n                        }\n                    }\n                    if ((address === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK'))\n                        return true;\n                return ValidateCurve(address);\n            }\n            return false;\n        }\n    } catch(e){console.log(\"ERR: \"+e)};\n    \n    return false;\n    \n}\n\nexport function MakeLinkableAddress(props:any){\n    const addr = props?.addr || \"\";\n    const trim = props?.trim;\n    const hasextlink = props?.hasextlink || false;\n    const hascopy = props?.hascopy || false;\n    const fontsize = props?.fontsize || \"16px\";\n    const permalink = props?.permalink || false;\n    const isDNS = props?.isDNS || null;\n    \n    let stri_addr = addr;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const handleCopyClick = () => {\n        setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n    \n    if (addr.length > 0){\n        if (trim>0)\n            stri_addr = trimAddress(addr, trim)\n    }\n\n    function ClipboardAction(){\n        if (hascopy){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={addr} \n                    onCopy={handleCopyClick}\n                    >\n                        <ContentCopyIcon sx={{fontSize:fontsize, mr:0 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n\n    function PermalinkAction(){\n        if (permalink){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={window.location.href} \n                    onCopy={handleCopyClick}\n                    >\n                        <InsertLinkIcon sx={{fontSize:fontsize, ml:1 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n    \n    if (addr.length > 0){\n        if (hasextlink){\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr} <OpenInNewIcon sx={{fontSize:fontsize, ml:1}} /></Button>\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        } else {\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    {isDNS ?\n                        <>{addr}</>\n                    :\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr}</Button>\n                    }\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        }\n    } else{\n        return (\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n}","import { LAMPORTS_PER_SOL, AccountInfo } from '@solana/web3.js';\nimport fs from 'fs';\nimport weighted from 'weighted';\nimport path from 'path';\nimport { Program, web3 } from '@project-serum/anchor';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\n//const { readFile } = fs.promises;\n\n/*export async function readJsonFile(fileName: string) {\n  const file = await readFile(fileName, 'utf-8');\n  return JSON.parse(file);\n}*/\n\nexport function shuffle(array: any) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex != 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\n/*export const assertValidBreakdown = breakdown => {\n  const total = Object.values(breakdown).reduce(\n    (sum: number, el: number) => (sum += el),\n    0,\n  );\n  if (total > 101 || total < 99) {\n    console.log(breakdown);\n    throw new Error('Breakdown not within 1% of 100! It is: ' + total);\n  }\n};\n\nexport const generateRandomSet = (breakdown, dnp) => {\n  let valid = true;\n  let tmp = {};\n\n  do {\n    valid = true;\n    const keys = shuffle(Object.keys(breakdown));\n    keys.forEach(attr => {\n      const breakdownToUse = breakdown[attr];\n\n      const formatted = Object.keys(breakdownToUse).reduce((f, key) => {\n        if (breakdownToUse[key]['baseValue']) {\n          f[key] = breakdownToUse[key]['baseValue'];\n        } else {\n          f[key] = breakdownToUse[key];\n        }\n        return f;\n      }, {});\n\n      assertValidBreakdown(formatted);\n      const randomSelection = weighted.select(formatted);\n      tmp[attr] = randomSelection;\n    });\n\n    keys.forEach(attr => {\n      let breakdownToUse = breakdown[attr];\n\n      keys.forEach(otherAttr => {\n        if (\n          tmp[otherAttr] &&\n          typeof breakdown[otherAttr][tmp[otherAttr]] != 'number' &&\n          breakdown[otherAttr][tmp[otherAttr]][attr]\n        ) {\n          breakdownToUse = breakdown[otherAttr][tmp[otherAttr]][attr];\n\n          console.log(\n            'Because this item got attr',\n            tmp[otherAttr],\n            'we are using different probabilites for',\n            attr,\n          );\n\n          assertValidBreakdown(breakdownToUse);\n          const randomSelection = weighted.select(breakdownToUse);\n          tmp[attr] = randomSelection;\n        }\n      });\n    });\n\n    Object.keys(tmp).forEach(attr1 => {\n      Object.keys(tmp).forEach(attr2 => {\n        if (\n          dnp[attr1] &&\n          dnp[attr1][tmp[attr1]] &&\n          dnp[attr1][tmp[attr1]][attr2] &&\n          dnp[attr1][tmp[attr1]][attr2].includes(tmp[attr2])\n        ) {\n          console.log('Not including', tmp[attr1], tmp[attr2], 'together');\n          valid = false;\n          tmp = {};\n        }\n      });\n    });\n  } while (!valid);\n  return tmp;\n};*/\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function fromUTF8Array(data: number[]) {\n  // array of bytes\n  let str = '',\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    const value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode(\n        ((value & 0x0f) << 12) |\n          ((data[i + 1] & 0x3f) << 6) |\n          (data[i + 2] & 0x3f),\n      );\n      i += 2;\n    } else {\n      // surrogate pair\n      const charCode =\n        (((value & 0x07) << 18) |\n          ((data[i + 1] & 0x3f) << 12) |\n          ((data[i + 2] & 0x3f) << 6) |\n          (data[i + 3] & 0x3f)) -\n        0x010000;\n\n      str += String.fromCharCode(\n        (charCode >> 10) | 0xd800,\n        (charCode & 0x03ff) | 0xdc00,\n      );\n      i += 3;\n    }\n  }\n\n  return str;\n}\n\nexport function parsePrice(price: string, mantissa: number = LAMPORTS_PER_SOL) {\n  return Math.ceil(parseFloat(price) * mantissa);\n}\n\nexport function parseDate(date: string) {\n  if (date === 'now') {\n    return Date.now() / 1000;\n  }\n  return Date.parse(date) / 1000;\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nexport function chunks(array: any, size: any) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index: any) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport function generateRandoms(\n  numberOfAttrs: number = 1,\n  total: number = 100,\n) {\n  const numbers = [];\n  const loose_percentage = total / numberOfAttrs;\n\n  for (let i = 0; i < numberOfAttrs; i++) {\n    const random = Math.floor(Math.random() * loose_percentage) + 1;\n    numbers.push(random);\n  }\n\n  const sum = numbers.reduce((prev, cur) => {\n    return prev + cur;\n  }, 0);\n\n  numbers.push(total - sum);\n  return numbers;\n}\n\nexport const getMetadata = (\n  name: string = '',\n  symbol: string = '',\n  index: number = 0,\n  creators: any,\n  description: string = '',\n  seller_fee_basis_points: number = 500,\n  attrs: any,\n  collection: any,\n) => {\n  const attributes = [];\n  for (const prop in attrs) {\n    attributes.push({\n      trait_type: prop,\n      value: path.parse(attrs[prop]).name,\n    });\n  }\n\n  return {\n    name: `${name}${index + 1}`,\n    symbol,\n    image: `${index}.png`,\n    properties: {\n      files: [\n        {\n          uri: `${index}.png`,\n          type: 'image/png',\n        },\n      ],\n      category: 'image',\n      creators,\n    },\n    description,\n    seller_fee_basis_points,\n    attributes,\n    collection,\n  };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport const getPriceWithMantissa = async (\n  price: number,\n  mint: web3.PublicKey,\n  walletKeyPair: any,\n  anchorProgram: Program,\n): Promise<number> => {\n  const token = new Token(\n    anchorProgram.provider.connection,\n    new web3.PublicKey(mint),\n    TOKEN_PROGRAM_ID,\n    walletKeyPair,\n  );\n\n  const mintInfo = await token.getMintInfo();\n\n  const mantissa = 10 ** mintInfo.decimals;\n\n  return Math.ceil(price * mantissa);\n};\n","import {\n    TextField\n} from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport React, { useCallback } from \"react\";\n\nexport const matchNothingRegex = /(?!)/;\n\nexport const RegexTextField = ({ regex, onChange, ...rest }) => {\n  const handleChange = useCallback(\n    (e) => {\n      e.currentTarget.value = e.currentTarget.value.replace(regex, \"\");\n      onChange(e);\n    },\n    [onChange, regex]\n  );\n\n  return <TextField onChange={handleChange} {...rest} />;\n};\n\nexport default React.memo(RegexTextField);\n\nRegexTextField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  regex: PropTypes.instanceOf(RegExp)\n};\n\nRegexTextField.defaultProps = {\n  regex: matchNothingRegex\n};\n","export default __webpack_public_path__ + \"static/media/App.91f250be.less\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport { makeStyles, styled, alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getMetadata,\n    getAuctionHouseProgramAsSigner,\n    loadWalletKey,\n    deserializeAccount,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Table,\n    TableContainer,\n    TableRow,\n    TableCell,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Container,\n} from '@mui/material';\n\nimport { red } from '@mui/material/colors';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport GrapeIcon from '../components/static/GrapeIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  function convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nexport default function OffersView(props:any){\n    const [offers, setOffers] = React.useState(null);\n    const [myoffers, setMyOffers] = React.useState(0);\n    const [listings, setListings] = React.useState(null);\n    const [ahbalance, setAHBalance] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [ahloading, setAHLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.pubkey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const connection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { publicKey, sendTransaction } = useWallet();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const [refresh, setRefresh] = React.useState(false);\n    const [counter, setCounter] = React.useState(0);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [page, setPage] = React.useState(1);\n    const [alertwithdrawopen, setAlertWithdrawOpen] = React.useState(false);\n    \n    const rowsperpage = 1500;\n    const selectedstate = props.selectedstate;\n\n    const handleAlertWithdrawClose = () => {\n        setAlertWithdrawOpen(false);\n    };\n    const handleAlertWithdrawOpen = () => {\n        setAlertWithdrawOpen(true);\n    };\n\n    const handleCancelOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);                \n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await connection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been canceled `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\t//handCancelWithdrawOffer was useful when only allowing one offer at a time\n    const handleCancelWithdrawOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            const signedTransaction = await sendTransaction(transaction, connection)\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar()\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n    \n    const handleWithdrawOffer = async (offerAmount: number, mint: string) => {\n\n        try {\n            \n            var allmints: any[] = [];\n            if (!mint){\n                for (var item of offers){\n                    if(item.state === 1){\n                        allmints.push({mint: item.mint, offerAmount: convertSolVal(item.offeramount)});\n                        if (!mint)\n                            mint = item.mint;\n                    }               \n                }\n            }\n\n            if (allmints.length <= 1){\n                if (mint){ // with mint allow calling cancel withdraw combo\n                    try {\n                        const mintKey = new web3.PublicKey(mint);\n                        let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                        const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                        let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                        const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                        const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        \n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    } \n                } else{ // no mint then just withdraw\n                    try {\n                        const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        \n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Withdrawal from Grapevine completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    }\n                }\n            } else {  \n                //enqueueSnackbar(`To withdraw from Grapevine you must first cancel all pending Offers.`,{ variant: 'warning' });\n                //several mints to cancel and finally withdraw\n                \n                    let cnt = 1;\n\n                    for (var item of allmints){  \n                        console.log(JSON.stringify(allmints));  \n                        try{ \n                            if (cnt <= allmints.length){\n                                //cancelOffer on specific mint in list\n                                const mintKey = new web3.PublicKey(item.mint);\n                                let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                                const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                //let numericAmmount = item.offerAmount;\n                                const transactionInstr = await cancelOffer(item.offerAmount, item.mint, publicKey, mintAccountInfoDs.owner);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                            \n                                enqueueSnackbar(`Preparing to cancel offer for ${item.offerAmount} SOL on mint ${item.mint}`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Offer cancel complete `,{ variant: 'success', action:snackaction });                 \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }\n\n                        try{\n                            if (cnt === allmints.length){\n                                const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                                enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Grapevine Withdrawal complete `,{ variant: 'success', action:snackaction });                     \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }    \n\n                        cnt++;\n                    }\n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                    });\n                    setTimeout(function() {\n                        closeSnackbar(eskey);\n                        setRefresh(true);\n                    }, GRAPE_RPC_REFRESH);\n         \n\t\t\t\t\n            }\n            \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const getOffers = async () => {\n        getEscrowBalance();\n\n        if (!loading){\n            setLoading(true);\n            setMaxPage(false);\n\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(thisPublicKey)).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n            \n            let result = await ggoconnection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 100});\n            \n            //let sale_result = await connection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 250});\n            //console.log(JSON.stringify(result));\n            \n            let offerResults: any[] = [];\n            let cancelStateResults: any[] = [];\n            let allListingResults: any[] = [];\n            let listingResults: any[] = [];\n            let mintArrayPDA: any[] = [];\n            let escrow_cache: any[] = [];\n            let exists = false;\n            let existSaleCancelAction = 0;\n            let cntr = 0;\n            let cnt = 0;\n\n\n            let sellerTradeStateArr: any[] = [];\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            for (var value of result){\n                if (value.err === null){\n                  \n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                //console.log(value.signature);\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n\n                            //if ( feePayer != mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                            {\n                                 \n                                let escrow_found = false;\n                                let escrow_found_index = 0;\n                                for (var i = 0; i < escrow_cache.length; i++){\n                                    if (escrow_cache[i].feePayer.toBase58() === feePayer.toBase58()){\n                                        escrow_found = true;\n                                        escrow_found_index = i;\n                                    }\n                                }\n\n                                let amount_on_escrow = 0;\n\n                                if (!escrow_found){\n                                    let escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                    amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n                                    escrow_cache.push(\n                                        {\n                                            //escrow: escrow,\n                                            amount_on_escrow: amount_on_escrow,\n                                            feePayer: feePayer\n                                        }\n                                    );\n                                    \n                                } else{\n                                    amount_on_escrow = escrow_cache[escrow_found_index].amount_on_escrow;\n                                }\n                                \n                                let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;\n                                //console.log('auctionMint: '+auctionMint);\n                                \n                                //if (auctionMint){\n                                //    console.log(\"value3: \"+JSON.stringify(value));\n                                \n                                // check if memo is an array\n                                \n                                // consider countering all brackets\n\n                                    {\n                                        exists = false;\n                                        //console.log('VAL '+JSON.stringify(value));\n                                        if ((value) && (value.memo)){\n                                            \n                                            let memo_arr: any[] = [];\n                                            let memo_str = value.memo;\n                                            let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                            if (memo_instances > 0) {\n                                                // multi memo\n                                                let mcnt = 0;\n                                                let submemo = memo_str;\n                                                //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                                for (var mx=0;mx<memo_instances;mx++){\n                                                    let init = submemo.indexOf('{');\n                                                    let fin = submemo.indexOf('}');\n                                                    memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                                    memo_arr.push(memo_str);\n                                                    submemo = submemo.replace(memo_str, \"\");\n                                                    //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                                    //console.log(\"submemo: \"+submemo);\n                                                }\n                                            } else{\n                                                let init = memo_str.indexOf('{');\n                                                let fin = memo_str.indexOf('}');\n                                                memo_str = memo_str.substr(init,fin); // include brackets\n                                                memo_arr.push(memo_str);\n                                            }\n                                            \n                                            for (var memo_item of memo_arr){\n                                                try{\n                                                    const memo_json = JSON.parse(memo_item);\n                                                    \n                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                \n                                                    //console.log(memo_json);\n                                                    if ((memo_json?.status === 0) || // withdraw\n                                                        (memo_json?.status === 1) || // offer\n                                                        (memo_json?.status === 2) || // sale\n                                                        (memo_json?.status === 3) || // listing/accept\n                                                        (memo_json?.status === 4) || // buy now\n                                                        (memo_json?.status === 5) || // cancel\n                                                        (memo_json?.state === 0) || // withdraw\n                                                        (memo_json?.state === 1) || // offer\n                                                        (memo_json?.state === 2) || // sale\n                                                        (memo_json?.state === 3) || // listing/accept\n                                                        (memo_json?.state === 4) || // buy now\n                                                        (memo_json?.state === 5)){ // cancel\n                                                        \n                                                        // consider checking amount vs memo_json.offer\n                                                        \n                                                        //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                                        let sale_state_exists = false;\n                                                        \n                                                        //console.log(memo_json?.state + ' ('+memo_json?.mint+') - ' + feePayer.toBase58() + ': ' + memo_json?.amount);\n                                                        //console.log(feePayer.toBase58() + ' v ' + thisPublicKey);\n                                                        \n                                                        if (feePayer.toBase58() === thisPublicKey){\n\n                                                            if ( feePayer.toBase58() === thisPublicKey && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && !sale_state_exists){\n                                                                \n                                                                if ((memo_json?.status === 0) ||\n                                                                    (memo_json?.status === 2) ||\n                                                                    (memo_json?.status === 3) ||\n                                                                    (memo_json?.status === 4) ||\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) ||\n                                                                    (memo_json?.state === 2) ||\n                                                                    (memo_json?.state === 3) ||\n                                                                    (memo_json?.state === 4) ||\n                                                                    (memo_json?.state === 5)){\n\n                                                                    if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                                        // check if exists\n                                                                        for (var i = 0; i < allListingResults.length; i++){\n                                                                            if (memo_json?.mint === allListingResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n                                                                        for (var i = 0; i < cancelStateResults.length; i++){\n                                                                            if (memo_json?.mint === cancelStateResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n\n                                                                        // push last sale state first\n                                                                        if ((!sale_state_exists)&&(selectedstate===2)){ // handle this only for sale tab\n                                                                            let mint_address = new PublicKey(memo_json?.mint)\n                                                                            mintArrayPDA.push(mint_address);\n\n                                                                            if (memo_json?.amount){\n                                                                                let ownerHasMint = false;\n                                                                                for (var wvalue of walletCollection){\n                                                                                    if (wvalue.account.data.parsed.info?.mint === memo_json?.mint)\n                                                                                        ownerHasMint = true;\n                                                                                }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check if this is a valid sale or offer first\n                                                                                if ((memo_json?.status === 2) || // sale\n                                                                                    (memo_json?.status === 5)  || // cancel\n                                                                                    (memo_json?.state === 2) || // sale\n                                                                                    (memo_json?.state === 5)){ // cancel\n                                                                                    \n                                                                                    if (memo_json?.state === 5){\n                                                                                        //sellerTradeStateArr.push(null);\n                                                                                        cancelStateResults.push({tradeStatePublicKey: null, buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: ownerHasMint, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status}); \n                                                                                    } else if (memo_json?.state === 2){\n                                                                                        let thisTokenOwner = new web3.PublicKey(thisPublicKey);\n                                                                                        if (!ownerHasMint){\n                                                                                            // owner does not have the mint\n                                                                                            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mint_address));\n                                                                                            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                                                                            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                                                                            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                                                                            thisTokenOwner = mintAccountInfoDs.owner;\n                                                                                        } \n                                                                                        //console.log(\"Check: \"+JSON.stringify(memo_json));\n                                                                                        \n                                                                                        if (ownerHasMint){\n                                                                                            const tokenAccountKey = (await getAtaForMint(mint_address, thisTokenOwner))[0];\n                                                                                            \n                                                                                            //const tokenAccountKey = (await getAtaForMint(mint_address, mintAccountInfoDs.owner))[0];\n                                                                                            const tokenSizeAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    1,\n                                                                                                    mint_address,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                                                            const buyPriceAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    convertSolVal(offerAmount),\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            \n                                                                                            const sellerTradeState = (\n                                                                                                await getAuctionHouseTradeState(\n                                                                                                    auctionHouseKey,\n                                                                                                    thisTokenOwner,\n                                                                                                    tokenAccountKey,\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    mint_address,\n                                                                                                    tokenSizeAdjusted,\n                                                                                                    buyPriceAdjusted,\n                                                                                                )\n                                                                                            )[0];\n                                                                                            \n                                                                                            sellerTradeStateArr.push(sellerTradeState);\n                                                                                            // THESE ARE REDUNDANT RPC CALLS WE ARE BATCHING AND CHECKING IN THE END\n                                                                                            //const sellerTradeStateInfo = await connection.getAccountInfo(sellerTradeState);    \n                                                                                            //console.log(\"sellerTradeStateInfo: \"+JSON.stringify(sellerTradeStateInfo));\n                                                                                            //if (sellerTradeStateInfo != null){   \n                                                                                                //console.log('ownerHasMint ('+ownerHasMint+'):', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                if (ownerHasMint) {\n                                                                                                    //console.log('ownerHasMint:', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                    if (thisPublicKey == feePayer)\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                    else\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                } else {\n                                                                                                    //console.log('owner does not have Mint:', memo_json?.mint, 'state:', memo_json?.state); \n                                                                                                    if (memo_json?.state != 5) {\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state});  \n                                                                                                    }\n                                                                                                }\n                                                                                            //}\n                                                                                        }\n                                                                                    }\n                                                                                    \n                                                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                                        }\n                                                                    }\n                                                                    \n                                                                }\n                                                            }\n                                                        }\n\n                                                        if ((memo_json?.status === 0) ||\n                                                            (memo_json?.status === 1) ||\n                                                            (memo_json?.status === 5) ||\n                                                            (memo_json?.state === 0) ||\n                                                            (memo_json?.state === 1) ||\n                                                            (memo_json?.state === 5)){\n                                                            \n                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                            //if ((memo_json?.amount === amount)||\n                                                            //    (memo_json?.offer === amount)){\n                                                            {\n                                                                //console.log('OFFER: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                if (memo_json?.amount >= 0){\n                                                                    exists = false;\n                                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                    for (var i = 0; i < offerResults.length; i++){\n                                                                        if (//(feePayer === offerResults[i].buyeraddress)&&\n                                                                            (memo_json?.mint === offerResults[i].mint)){\n                                                                            exists = true;\n                                                                        }\n                                                                    }\n                                                                    if (!exists){\n                                                                        \n                                                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                        \n                                                                        if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                            if (feePayer.toBase58() === thisPublicKey)\n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n\n                                                                            else   \n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }catch(e){console.log(\"ERR: \"+e)}\n                                            }\n                                        }\n                                    }\n                                //}\n                            }\n                        }\n                    }catch(ert){console.log(\"ERR: \"+ert)}\n                }\n                cnt++;\n                cntr++;\n                setCounter(cntr);\n            }\n\n            if (mintArrayPDA.length > 0){\n                /*\n                for (var y=0;y<mintArrayPDA.length;y++){\n                    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mintArrayPDA[y]).toBuffer(),\n                    ], MD_PUBKEY)\n                }\n\n                let final_mint_states = await connection.getParsedTransactions(mintArrayPDA);\n                let state_was_sold = false;\n                let final_sale_state = '';//memo_json?.state || memo_json?.status;\n                for (var x=0; x < listingResults.length; x++){\n                    \n                    // for each listing\n                    // check the final_mint_state (last transaction?)\n                    for (var r=0; r < final_mint_states.length; r++){\n                        \n                        console.log(\"Final Mint State: \"+JSON.stringify(final_mint_states[r]))\n\n                    }\n                    /*\n                    if ((listingResults[x]) && (listingResults[x].memo)){\n                    \n                        let sub_memo_str = listingResults[x].memo;\n                        let init = sub_memo_str.indexOf('{');\n                        let fin = sub_memo_str.indexOf('}');\n                        sub_memo_str = sub_memo_str.substr(init,fin);\n                        const sub_memo_json = JSON.parse(sub_memo_str);\n                        \n                        if ((sub_memo_json?.status === 3) ||\n                            (sub_memo_json?.status === 4) ||\n                            (sub_memo_json?.state === 3) ||\n                            (sub_memo_json?.state === 4)){\n                            state_was_sold = true;\n                            final_sale_state = sub_memo_json?.state || sub_memo_json?.status;\n                            //console.log(\"SOLD: \"+sub_memo_json?.state);\n                        }\n                    }\n                    */\n\n                    // if first instance of \n                //} \n            }\n            var j = 0;\n            for (var i = 0; i < offerResults.length; i++){\n                if ((offerResults[i].isowner && offerResults[i].state === 1)){\n                    j++;\n                }\n            }\n            setMyOffers(myoffers+j);\n\n            // check which tab we are in to avoid uneeded RPC call\n            const tradeStates = await ggoconnection.getMultipleAccountsInfo(sellerTradeStateArr, 'confirmed');\n            let x = 0;\n            for (var alrvalue of allListingResults){\n                // check if this has a trade \n                if ((alrvalue.tradeStatePublicKey) && (sellerTradeStateArr[x])){\n                    if (alrvalue.tradeStatePublicKey === sellerTradeStateArr[x].toBase58()){\n                        // check if this has an active trade state\n                        if (tradeStates[x]){\n                            //console.log(\"checking: \"+alrvalue.tradeStatePublicKey + \" vs \"+sellerTradeStateArr[x].toBase58());\n                            listingResults.push({\n                                buyeraddress: allListingResults[x].buyeraddress, offeramount: allListingResults[x].offeramount, mint: allListingResults[x].mint, isowner: allListingResults[x].isowner, timestamp: allListingResults[x].timestamp, state: allListingResults[x].state\n                            })\n                        }\n                    }\n                }\n                x++;\n            }\n            \n            if (offers){\n                setOffers(\n                    (offers:any) => [...offers,offerResults]\n                );\n            }else {\n                setOffers(\n                    offerResults\n                ); \n            }\n\n            if (listings){\n                setListings(\n                    (listings:any) => [...listings,listingResults]\n                );\n            }else {\n                setListings(\n                    listingResults\n                ); \n            }\n\n            setLoading(false);\n        }\n    }\n\n    const getEscrowBalance = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        \n        if (!ahloading){\n            setAHLoading(true);\n            let cntr = 0;\n            \n            const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey,))[0];\n            let amount = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n            setAHBalance(amount);\n\n            setAHLoading(false);\n            \n        }\n    }\n\n    React.useEffect(() => { \n        if (thisPublicKey){\n            if (!loading){\n                if ((!offers)||(refresh)){\n                    console.log(\"Getting offers for \"+thisPublicKey);\n                    getOffers();\n                }\n            }\n        }\n    }, [refresh, thisPublicKey]);\n    \n    if (loading){\n        return (\n            <Grid container\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                sx={{\n                }} \n            >\n                <CircularProgress />\n            </Grid>\n        );\n    } else {\n        if (selectedstate == 1){\n            return (\n                \n                <Container\n                    sx={{p:0,m:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:1,\n                                ml:0,\n                                mr:0\n                            }}\n                        >\n\n                            <BootstrapDialog \n                                fullWidth={true}\n                                maxWidth={\"sm\"}\n                                PaperProps={{\n                                    style: {\n                                        background: '#13151C',\n                                        border: '1px solid rgba(255,255,255,0.05)',\n                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                        borderRadius: '20px'\n                                    }\n                                }}\n                                open={alertwithdrawopen}\n                                onClose={handleAlertWithdrawClose}\n                                aria-labelledby=\"alert-bn-dialog-title\"\n                                aria-describedby=\"alert-bn-dialog-description\"\n                                >\n                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                    <Typography>\n                                        CONFIRMATION\n                                    </Typography>\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                    <br />\n                                    <Alert \n                                        severity=\"warning\" variant=\"outlined\"\n                                        sx={{backgroundColor:'black'}}\n                                        >\n                                            You currently have <strong>{myoffers}</strong> standing offer{(myoffers > 1 && <>s</>)}, it is recommended that you cancel all standing offers and then attempt to withdraw. If you are unable to cancel then click Withdraw to force cancel from the Grape Auction House\n                                            <br/><br/>\n                                            NOTE: By pressing Withdraw you will have to Accept <strong>{myoffers}</strong> additional transaction{(myoffers > 1 && <>s</>)} with your wallet\n                                    </Alert>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleAlertWithdrawClose}>Cancel</Button>\n                                    <Button \n                                        onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                        autoFocus>\n                                    Withdraw\n                                    </Button>\n                                </DialogActions>\n                            </BootstrapDialog>\n                            \n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => (myoffers > 0 ? setAlertWithdrawOpen(true) : handleWithdrawOffer(convertSolVal(ahbalance), null))}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n                \n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:0,\n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"offers\">\n                            {offers && offers.map((item: any,key:number) => (\n                                <>\n                                    {item.state === selectedstate && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell>\n                                                <Tooltip title={`Visit profile`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <AccountCircleOutlinedIcon sx={{fontSize:\"14px\", mr:1}} />\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.buyeraddress, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell  align=\"center\"><Typography variant=\"h6\">\n                                                {item.isowner ? (\n                                                    <Tooltip title={`Offer made`}>\n                                                        <IconButton>\n                                                            <ArrowForwardIcon color=\"success\" />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    ):(\n                                                    <Tooltip title={`Offer received`}>\n                                                        <IconButton>\n                                                            <ArrowBackIcon sx={{ color: red[500] }} />\n                                                        </IconButton>\n                                                    </Tooltip>)}\n                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\"> \n                                                {(publicKey.toBase58() === item.buyeraddress) && (\n                                                    <Tooltip title={`Cancel Offer`}>\n                                                        <Button \n                                                            color=\"error\"\n                                                            variant=\"text\"\n                                                            //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            onClick={() => handleCancelWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            //onClick={() => handleCancelOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            sx={{\n                                                                borderRadius: '24px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon />\n                                                        </Button>\n                                                    </Tooltip>\n                                                    )}\n                                            </TableCell>\n                                        </TableRow>\n                                        </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        } else {\n            return (\n                <Container\n                    sx={{p:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:2\n                            }}\n                        >\n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n\n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            \n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"listings\">\n                            {listings && listings.map((item: any,key:number) => (\n                                <>\n                                    {item.state === 2 && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell  align=\"right\"><Typography variant=\"caption\">\n                                            </Typography></TableCell>\n                                            <TableCell  align=\"right\"><Typography variant=\"h6\">\n                                                {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 4)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                            </TableCell>\n                                        </TableRow>\n                                    </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        }\n    }\n}\n","import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function GrapeIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n           <path d=\"M9.01656587,22 C7.35962231,22 6.01590977,20.6620342 6.01414706,19.0104197 C6.014381,18.6854574 6.0683383,18.3627546 6.17385019,18.0552822 C4.65355783,17.7078956 3.66088018,16.2486823 3.89967765,14.712301 C3.92491623,14.5431035 3.96663621,14.3767602 4.02424609,14.2156295 C3.4237021,14.0728659 2.88175433,13.7494098 2.47193169,13.2891462 C1.72849601,12.4624125 1.51596312,11.2886187 1.92255293,10.2549928 C0.574618257,9.74031484 -0.212717429,8.33995457 0.0504549418,6.92526737 C0.313627312,5.51058017 1.55231363,4.48469804 2.99575795,4.48596237 C3.70977051,4.48440525 4.40081639,4.73735035 4.94413611,5.19913169 C5.03896245,5.11514097 5.13926233,5.03749899 5.24437799,4.96671491 L5.36894643,4.89985528 L5.42643955,4.86801737 C5.5328774,4.80668234 5.64271625,4.75140804 5.755428,4.7024602 L5.89916081,4.65470333 L5.96304206,4.63560058 C6.07846122,4.5978584 6.19572768,4.56597948 6.31438894,4.54008683 L6.45173363,4.54008683 L6.51242082,4.54008683 C6.63409636,4.52251081 6.75680077,4.51293873 6.87973802,4.51143271 C6.93403708,4.51143271 6.97555989,4.51143271 7.02027677,4.51143271 L7.08096396,4.51143271 C7.2084816,4.51824383 7.33543563,4.53313157 7.4610574,4.55600579 C7.50980885,4.56536124 7.55783865,4.578128 7.60479022,4.59421129 L7.67186553,4.61331404 C7.78701504,4.64184071 7.90012381,4.67800422 8.01043616,4.72156295 C8.08070554,4.75021708 8.14458679,4.78523878 8.2116621,4.82026049 L8.27554336,4.8552822 L8.34900679,4.8934877 C8.40018906,4.9144998 8.44936418,4.94007388 8.49593367,4.9698987 C8.57259117,5.02402315 8.62369617,5.06541245 8.67160711,5.10361795 C8.35220086,3.6040521 7.7517171,1.62054993 6.04928175,1.07930535 C5.69874518,0.95068507 5.33014791,0.877632393 4.95691236,0.862807525 C4.0913214,0.862807525 3.21614826,1.35629522 1.73090917,2.67756874 C1.60080541,2.7887062 1.4167449,2.81179054 1.26307634,2.73624297 C1.10940777,2.66069541 1.01574927,2.501077 1.02502135,2.33053546 C1.0291406,2.21770958 1.08003178,2.11164293 1.1655601,2.03762663 C2.81050232,0.569898698 3.87412515,0 4.95371829,0 C5.42529916,0.0101105104 5.89178986,0.0994489882 6.33355332,0.264254703 C7.32371271,0.601736614 7.97849554,1.12387844 8.65244274,2.34327062 C9.08779739,2.41141279 9.52771094,2.44653527 9.96839651,2.44833575 C13.057055,2.44833575 13.9513925,0.538060781 13.9865272,0.461649783 C14.0566749,0.308273678 14.2102907,0.209927141 14.3793969,0.210130246 C14.439031,0.209865925 14.4979671,0.222920722 14.5518763,0.248335745 C14.6560393,0.293055164 14.7379381,0.377435376 14.7793339,0.48268504 C14.8207296,0.587934704 14.818185,0.705314118 14.7722666,0.808683068 C14.7275497,0.910564399 13.6287922,3.30795948 9.98117276,3.30795948 C9.66619319,3.30562385 9.35160204,3.2854272 9.03892431,3.24746744 C9.21808608,3.74708278 9.36530791,4.25751208 9.47970494,4.77568741 C9.88059439,4.59234413 10.3162601,4.49680589 10.75733,4.49551375 C11.3243112,4.49761987 11.8787106,4.6622996 12.3543612,4.9698987 C12.4592934,5.03719347 12.5586292,5.11278662 12.6514091,5.1959479 C13.7179784,4.28262725 15.2782426,4.23152348 16.4026614,5.0730821 C17.5270802,5.91464071 17.9130852,7.42240785 17.3307107,8.69811867 C17.1172335,9.18183803 16.7775078,9.59963239 16.3469394,9.90795948 C16.6475777,10.4422013 16.7747835,11.0561645 16.7110626,11.6654124 C16.5482745,13.0729395 15.4233048,14.1770605 14.0088856,14.3175109 C14.0783161,14.5238349 14.1233379,14.7375349 14.1430363,14.9542692 C14.1983201,15.7406538 13.9387581,16.5168358 13.4211781,17.1128799 C13.011662,17.5917696 12.4584577,17.9266434 11.8433112,18.0680174 C11.9511271,18.3749955 12.0061994,18.6979085 12.0062084,19.0231548 C11.9957344,20.6641175 10.6628326,21.9913138 9.01656587,22 Z M9.01656587,16.8740955 C8.23171201,16.8438771 7.49314811,17.2440165 7.09170769,17.9169457 C6.69026727,18.589875 6.69026727,19.4277805 7.09170769,20.1007098 C7.49314811,20.7736391 8.23171201,21.1737785 9.01656587,21.1435601 L9.10599962,21.1435601 C10.2609266,21.0820791 11.1585961,20.1182818 11.1344522,18.9656793 C11.1103083,17.8130768 10.1730609,16.8874693 9.01656587,16.8740955 L9.01656587,16.8740955 Z M6.85737958,13.0280753 C6.05016188,13.0307334 5.31291109,13.4852636 4.95002299,14.2039995 C4.58713489,14.9227355 4.66017012,15.7837503 5.13897392,16.4315485 C5.48253616,16.8938982 5.99820802,17.1990938 6.56991395,17.278437 C6.99079272,16.6921752 7.60828846,16.2754353 8.31067804,16.1036179 C8.22868139,15.8733861 8.17609802,15.633778 8.15416898,15.3904486 C8.10820215,14.8342868 8.21881781,14.2763714 8.47357523,13.7794501 C8.07018694,13.3065158 7.48012934,13.032196 6.85737958,13.0280753 Z M9.19543337,16.0303907 C10.0990762,16.0839079 10.9301277,16.5413885 11.4568297,17.2752533 C12.5753211,17.1251594 13.3846319,16.1350614 13.3061432,15.0128326 C13.2276545,13.8906038 12.2883473,13.022019 11.1597818,13.0280438 L10.9936906,13.0280438 C10.2984222,13.0788458 9.67153958,13.4640023 9.31361654,14.0603123 C8.9556935,14.6566223 8.91159606,15.3893377 9.19543337,16.0240232 L9.19543337,16.0303907 Z M13.7405844,13.4547033 C14.8780822,13.4527628 15.8159137,12.565379 15.877036,11.4331754 C15.9381583,10.3009717 15.1012771,9.3183948 13.9705569,9.19479016 C13.8918421,9.19003787 13.812911,9.19003787 13.7341963,9.19479016 C12.9945106,9.1954234 12.3075972,9.57676471 11.9176114,10.2032707 C11.5276256,10.8297767 11.4898678,11.6126082 11.8177587,12.2735166 C12.5405612,12.4358198 13.1776329,12.8587906 13.6064338,13.4610709 L13.7405844,13.4547033 Z M4.72374579,9.17884454 C4.20148452,9.17924802 3.69727793,9.3694154 3.30558201,9.71374819 C2.87716278,10.0884383 2.61611408,10.6177935 2.58015112,11.1847786 C2.54418815,11.7517638 2.73627321,12.309676 3.11393826,12.7351664 C3.43971725,13.1036746 3.88309651,13.3488295 4.36920485,13.429233 L4.4330861,13.429233 C4.60949986,13.1734096 4.82505364,12.9467316 5.07189861,12.757453 C5.37302433,12.5381021 5.7134479,12.3781636 6.07483425,12.2862518 C6.02685202,12.155471 5.988423,12.0214019 5.959848,11.8850941 C5.81421654,11.184587 5.92766234,10.4552146 6.27925426,9.83154848 C5.87169659,9.41171294 5.30983083,9.17595915 4.72374579,9.17884454 L4.72374579,9.17884454 Z M6.95958958,12.1875543 C7.72850039,12.2144165 8.4573458,12.536039 8.99420743,13.0853835 C9.49089257,12.5739091 10.154849,12.2565511 10.8659281,12.1907381 C10.6934499,11.6251251 10.6934499,11.0211846 10.8659281,10.4555716 C10.7054989,10.0520038 10.4230819,9.70818462 10.0578303,9.47178003 C9.06331223,8.83528333 7.73970584,9.11993277 7.09693427,10.1085384 C6.6832694,10.7311114 6.63573858,11.5268185 6.97236583,12.1939219 L6.95958958,12.1875543 Z M8.9111618,8.27785818 C9.47758191,8.27752686 10.0320808,8.4400253 10.5081931,8.74587554 C10.832384,8.95675707 11.1105046,9.23073462 11.3258731,9.55137482 C11.5046094,9.30756863 11.7200929,9.09277807 11.9646856,8.9146165 C11.8986018,8.80055244 11.8419848,8.6812936 11.7954003,8.55803184 C11.4402148,7.65636899 11.5499602,6.63854258 12.0892541,5.83270622 C12.0284575,5.77863236 11.9632907,5.72964822 11.8944162,5.68625181 C11.5499331,5.46119295 11.1468536,5.3416541 10.7349715,5.34237857 C10.0888731,5.3393669 9.47598473,5.62745989 9.0673192,6.12629538 C8.65865367,6.62513086 8.49796299,7.28130319 8.6300843,7.91172214 C8.66091664,8.03795321 8.70480374,8.16065534 8.76104086,8.27785818 L8.9111618,8.27785818 Z M2.99895201,5.33921852 C2.13350184,5.33989161 1.35365398,5.86009369 1.02297389,6.65730629 C0.69229379,7.4545189 0.875886268,8.37178556 1.48816042,8.98147612 C1.72949325,9.21958505 2.02391031,9.39741279 2.34736325,9.50043415 C2.46335995,9.34425557 2.59499407,9.20024368 2.74023294,9.07062229 C3.10844546,8.75890306 3.54675058,8.54045521 4.01785796,8.43386397 C3.9832349,8.33588154 3.95443836,8.2359493 3.93161827,8.13458755 L3.93161827,8.07727931 C3.89459608,7.90128014 3.87427739,7.72219782 3.87093109,7.54240232 C3.86246147,7.16185724 3.92864665,6.78332735 4.0657689,6.42807525 C4.0657689,6.39942113 4.08812734,6.370767 4.10090359,6.34211288 C4.16114472,6.20556893 4.22940295,6.07268078 4.30532359,5.94413893 C4.31851769,5.9156609 4.33345134,5.88801616 4.35004047,5.86136035 L4.35004047,5.8422576 C3.97109966,5.52471787 3.49394423,5.34706272 2.99895201,5.33921852 L2.99895201,5.33921852 Z M13.7405844,8.32879884 C13.8473438,8.3286875 13.9540106,8.33506693 14.0599907,8.34790159 C14.7362371,8.42120368 15.3671869,8.72218725 15.8486657,9.20115774 C16.6445011,8.63099229 16.9509333,7.59535695 16.5928823,6.68596237 C16.2784485,5.87998024 15.5081686,5.34193 14.6408215,5.32242346 C13.7734745,5.30291691 12.979633,5.80579021 12.6290506,6.59681621 C12.3989609,7.11471517 12.3863092,7.70284721 12.5939159,8.2301013 C12.628905,8.32212907 12.6705367,8.41150919 12.7184844,8.4975398 C13.0466542,8.38211147 13.3926035,8.32499787 13.7405844,8.32879884 L13.7405844,8.32879884 Z M4.90900142,8.32879884 C5.60879418,8.37101575 6.2713813,8.6572887 6.78072208,9.13748191 C7.09942652,8.82539619 7.48333645,8.5873112 7.9050321,8.44023155 C7.86365578,8.32221389 7.82847344,8.20212845 7.79962803,8.0804631 C7.63211174,7.30599095 7.7815741,6.49690552 8.21485617,5.83270622 L8.21485617,5.81678726 C7.82963121,5.50130197 7.34636748,5.32910199 6.84779739,5.3296599 C6.29830626,5.32822893 5.76996856,5.54071225 5.37533455,5.92185239 C4.72015515,6.54785756 4.53316477,7.51810213 4.90900142,8.34153401 L4.90900142,8.32879884 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function withdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    //const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n\n    const amountAdjusted = await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    const instructions = [instruction];\n    \n\n\n    //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:0, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint?.toString(), // mint\n      amount:amountAdjusted // price\n    };\n\n    if (mint){\n      const mintKey = new web3.PublicKey(mint);\n      let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedMintPDA[0],\n          lamports: 0,\n        })\n      );\n\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }else{\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }\n    /*\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );*/\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { removeDuplicate } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { Connection, PublicKey} from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { Button } from '@mui/material';\n\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Avatar,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    ListItemAvatar,\n} from '@mui/material';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nexport default function SocialView(props: any){\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [type, setType] = React.useState<number>(props.type || 0);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rpclimit = 100;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n\n    const NAME_SPACE = 'Grape';\n    const GLOBAL_NAME_SPACE = '';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 12; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        setLoading(true);\n        if (!pubkey) {\n            return;\n        }\n\n        const resp = await followListInfoQuery({\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n\n    const ProfilePicture = (props:any) => {\n        const followitem = props.followitem;\n        const [address, setAddress] = React.useState(followitem.address);\n        const [loadingpicture, setLoadingPicture] = React.useState(false);\n        const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n        const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n        const countRef = React.useRef(0);\n\n        const fetchProfilePicture = async () => {\n            setLoadingPicture(true);  \n                //console.log(\"trying: \"+address)\n                try{\n                    //console.log(countRef.current+\": \"+address+\" - \"+loadingpicture);\n                    const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(address));\n                    \n                    let img_url = url;\n                    if (url)\n                        img_url = url.replace(/width=100/g, 'width=256');\n                    setProfilePictureUrl(img_url);\n                    setHasProfilePicture(isAvailable);\n                    countRef.current++;\n                }catch(e){}\n            setLoadingPicture(false);\n        }\n\n        React.useEffect(() => {       \n            if (!loadingpicture){\n                //const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                //}, 500);\n            }\n        }, []);\n\n        /*\n        React.useEffect(() => { \n            if ((!loadingpicture)&&(countRef.current<1)){\n                const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                }, 500);\n                return () => clearInterval(interval); \n            }\n        }, []);\n        */\n\n        \n        if (loadingpicture){\n            return (\n                <Avatar sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                    <CircularProgress sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }} />\n                </Avatar>)\n        }else{\n            \n            if (hasProfilePicture){\n                return (  \n                    <Avatar alt={address} src={profilePictureUrl} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                        {address.substr(0,2)}\n                    </Avatar>\n                );\n            \n            } else{\n                return (\n                    <>\n                    {followitem.avatar ?\n                        <>\n                            <Avatar alt={followitem.address} src={followitem.avatar} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                                {followitem.address.substr(0,2)}\n                            </Avatar>\n                        </>\n                    :\n                        <>\n                        {jsNumberForAddress(followitem.address) ?\n                            <>\n                            <Jazzicon diameter={56} seed={jsNumberForAddress(followitem.address)} />\n                            </>\n                        :\n                            <>\n                            <Jazzicon diameter={56} seed={Math.round(Math.random() * 10000000)} />\n                            </>\n                        }\n                        </>\n                    }\n                    </>\n                );\n            }\n        }\n    }\n\n\n    const SocialItem = (props: any) => {\n        const [followitem, setFollowItem] = React.useState(props.followitem);\n        const [followitemkey, setFollowItemKey] = React.useState(props.followitemkey);\n        \n        if (loading){\n            return <Grid item xs={12} sm={6} md={4}><CircularProgress /></Grid>\n        } else{\n            return (\n                \n                <Grid item xs={12} sm={12} md={4} lg={3}>\n\n                    <ListItem \n                        key={followitemkey}\n                        sx={{ \n                            background:'rgba(0,0,0,0.5)',\n                            borderRadius:'17px' }}>\n                        <ListItemButton\n                            component={Link} \n                            to={`${GRAPE_PROFILE}${followitem.address}`}\n                            sx={{ \n                                m:1,\n                                borderRadius:'17px'}}\n                            >\n                            <ListItemAvatar>\n                                <ProfilePicture followitem={followitem} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                sx={{ml:1}}\n                                primary={followitem.ens || trimAddress(followitem.address,4)}  \n                                secondary={<Typography variant=\"caption\" color=\"#777\">From {followitem.namespace}</Typography>}\n                            />\n                        </ListItemButton>\n                    </ListItem>\n                </Grid>\n\n\n            )\n        }\n    }\n\n    React.useEffect(() => { \n        if (publicKey){\n            initFollowListInfo();\n        }\n    }, []);\n    \n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={2} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <> \n                <Box\n                    sx={{\n                        background: 'rgba(0, 0, 0, 0.6)',\n                        borderRadius: '17px',\n                        p:4\n                    }} \n                > \n                    <Grid container \n                        spacing={{ xs: 2, md: 3 }} \n                        justifyContent=\"center\"\n                        alignItems=\"center\">\n                        \n                        {type === 0 ?\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followers && followListInfo.followers.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            \n                            {followListInfo?.followers.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followers')}>more</Button>\n                            }\n                        </>\n                        :\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followings && followListInfo.followings.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            {followListInfo?.followings.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followings')}>more</Button>\n                            }\n                        </>\n                        }\n                    </Grid>\n\n                </Box>\n            </>\n        );\n    }\n}","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\n\nimport { Connection, PublicKey, } from '@solana/web3.js'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport ImageViewer from 'react-simple-image-viewer';\nimport { Helmet } from 'react-helmet';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { createSetProfilePictureTransaction } from '@solflare-wallet/pfp';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { \n    getTokenOwnerRecordForRealm, \n} from '@solana/spl-governance';\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    Avatar,\n    Chip,\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Paper,\n    Divider,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Card,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport FlagIcon from '@mui/icons-material/Flag';\nimport EmojiFlagsIcon from '@mui/icons-material/EmojiFlags';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport SegmentIcon from '@mui/icons-material/Segment';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport BlockIcon from '@mui/icons-material/Block';\nimport LockIcon from '@mui/icons-material/Lock';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { UPDATE_AUTHORITIES } from '../utils/grapeTools/mintverification';\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY\n} from '../utils/grapeTools/constants';\n\nimport ItemOffers from './ItemOffers';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport \"../App.less\";\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { decodeMetadata } from '../utils/auctionHouse/helpers/schema';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n  \n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction GrapeVerified(props:any){\n    const [loading, setLoading] = React.useState(false);\n    const [verifiedState, setVerifiedState] = React.useState(false);\n    const [verifiedPK, setVerificationPK] = React.useState(null);\n    const [collectionImage, setCollectionImage] = React.useState(null);\n    const [collectionName, setCollectionName] = React.useState(props.symbol);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    let updateAuthority = props?.updateAuthority;\n    let grape_verified = -1;\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async (collectionAddress:string) => {\n            try {\n                let mint_address = new PublicKey(collectionAddress)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                setCollectionName(metadata.name);\n                setCollectionImage(metadata.image) \n\n                return null;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n    React.useEffect(() => { \n        try{\n            if (updateAuthority && !loading){\n                let verified = false;\n                let verified_creator = false;\n\n                // first stage verification\n                for (var item of updateAuthority.data.creators){\n                    if (item.address === updateAuthority.updateAuthority)\n                        if (item.verified === 1){\n                            // now validate verify_collection in the collection results\n                            verified_creator = true;\n                        }\n                }\n                // second stage verification\n                if (verified_creator){\n                    if (updateAuthority?.collection?.verified){\n                        if (updateAuthority.collection.verified === 1){\n                            //console.log(\"updateAuthority: \"+JSON.stringify(updateAuthority));\n                            if (ValidateAddress(updateAuthority.collection.key)){\n                                setVerifiedState(true);\n                                if (!collectionImage){\n                                    setVerificationPK(updateAuthority.collection.key)\n                                    getCollectionData(updateAuthority.collection.key);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // third stage verification (coming soon)\n                grape_verified = UPDATE_AUTHORITIES.indexOf(updateAuthority);\n                //grape_verified = 1;\n                if (grape_verified > -1){\n\n                }\n            }\n        }catch(e){console.log(\"ERR: \"+e)}\n    }, [updateAuthority]);\n\n    if (verifiedState){\n        \n        return (\n            <Tooltip title={`${props.symbol}: Update Authority/Creator Verified on Metaplex`} placement=\"top\">\n                <Button \n                    href={`${GRAPE_PREVIEW}${verifiedPK}`}\n                    sx={{color:'white', borderRadius:'24px'}}>\n                    {collectionName}\n                    <Avatar \n                        component={Paper} \n                        elevation={4}\n                        alt={updateAuthority.data.symbol}\n                        src={collectionImage}\n                        sx={{ width: 20, height: 20, bgcolor: \"#222\",ml:1}}\n                    />\n                    {grape_verified > -1 &&\n                        <VerifiedIcon sx={{fontSize:\"20px\",ml:1}} />\n                    }\n                </Button>\n            </Tooltip>\n        );\n    \n    } else{\n        return <>{collectionName}</>\n    } \n}\n\nfunction SocialLikes(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isLiked, setIsLiked] = React.useState(false);\n    const [loadingLikedState, setLoadingLikedState] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!mint) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:mint,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST,\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n\n    const getLikeStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingLikedState(true);\n                setIsLiked(false);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        if ((socialconnection?.connections[0].type.toString() === \"LIKE\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsLiked(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingLikedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'LIKE',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    const likeWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.LIKE)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    const likeWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    \n    React.useEffect(() => {\n        initFollowListInfo();\n        getLikeStatus();\n    },[]);\n\n    return ( \n        <>\n        {loadingLikedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isLiked ?  \n                    <Tooltip title=\"Unlike\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteIcon sx={{fontSize:'24px', color:'red'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Like\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteBorderIcon sx={{fontSize:'24px'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction SocialFlags(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFlagged, setIsFlagged] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingFlaggedState, setLoadingFlaggedState] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n    \n    \n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const getFlagStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingFlaggedState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) { \n                        if ((socialconnection?.connections[0].type.toString() === \"REPORT\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsFlagged(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFlaggedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'REPORT',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n        return;\n        }\n        \n        setLoading(true);\n        const resp = await followListInfoQuery({\n            address:mint,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n        setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n\n    const flagWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n\n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.REPORT)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n    const flagWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n\n    React.useEffect(() => {\n        initFollowListInfo();\n        getFlagStatus();\n    },[]);\n    \n    return ( \n        <>\n        {loadingFlaggedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isFlagged ?  \n                    <Tooltip title=\"Unflag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'yellow'}}\n                            >\n                            <FlagIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Flag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <EmojiFlagsIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction GalleryItemMeta(props: any) {\n    const collectionrawprimer = props.collectionrawdata.meta_primer || [];\n    const collectionrawdata = props.collectionrawdata.meta_final || [];\n    const collectionitem = props.collectionitem.collectionmeta || [];\n    const [mint, setMint] = React.useState(props.mint || null);\n    const [refreshOwner, setRefreshOwner] = React.useState(false);\n    const [loadingOwner, setLoadingOwner] = React.useState(false);\n    const [mintAta, setMintATA] = React.useState(null);\n    const [tokenOwners, setTokenOwners] = React.useState(null);\n    const [grape_member_balance, setGrapeMemberBalance] = React.useState(null);\n    const [sol_portfolio_balance, setSolPortfolioBalance] = React.useState(0);\n    const [grape_weighted_score, setGrapeWeightedScore] = React.useState(0);\n    const [grape_governance_balance, setGrapeGovernanceBalance] = React.useState(null);\n    const [grape_offer_threshhold, setGrapeOfferThreshhold] = React.useState(TOKEN_VERIFICATION_AMOUNT);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const [grape_whitelisted, setGrapeWhitelisted] = React.useState(null);\n    const [open_creator_collapse, setOpenCreatorCollapse] = React.useState(false);\n    const [open_attribute_collapse, setOpenAttributeCollapse] = React.useState(false);\n    const [currentImage, setCurrentImage] = useState(0);\n    const [isViewerOpen, setIsViewerOpen] = useState(false);\n    const [collectionItemImages, setCollectionItemImages] = useState([]);\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [open_meta, setOpenMeta] = React.useState(false);\n    const [open_offers, setOpenOffers] = React.useState(false);\n    const [open_description, setOpenDescription] = React.useState(true);\n    const [open_traits, setOpenTraits] = React.useState(true);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const {publicKey, sendTransaction} = useWallet();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const navigate = useNavigate();\n    const { enqueueSnackbar, closeSnackbar} = useSnackbar();\n    \n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n\n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaAddress: string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow)\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    \n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n        \n    const salePrice = props.salePrice || null;\n    //console.log('GalleryItemMeta salePrice:', salePrice);\n    const handleClickOpenTraits = () => {\n        setOpenTraits(!open_traits);\n    }\n\n    const handleClickOpenMeta = () => {\n        setOpenMeta(!open_meta);\n    };\n\n    const handleClickOpenOffers = () => {\n        setOpenOffers(!open_offers);\n    };\n    const handleClickOpenDescription = () => {\n        setOpenDescription(!open_description);\n    };\n\n    const handleSendItem = () => {\n        \n    };\n\n    const openImageViewer = useCallback((index) => {\n        setCurrentImage(index);\n        setIsViewerOpen(true);\n    }, []);\n\n    const closeImageViewer = () => {\n        setCurrentImage(0);\n        setIsViewerOpen(false);\n    };\n\n    // after owner we can get the signatures for the \n\n    const getGovernanceBalance = async () => {\n        try{\n            const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n            const realmId = new PublicKey(TOKEN_REALM_ID);\n            const governingTokenMint = new PublicKey(TOKEN_VERIFICATION_ADDRESS);\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                ggoconnection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            \n            return ownerRecords;\n        } catch(e){console.log(\"ERR: \"+e);}\n    }\n\n    const fetchBalances = async () => {\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString(),\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n    \n          const response = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n          })\n          const json = await response.json();\n          const resultValues = json.result.value\n          return resultValues;\n    \n      };\n\n    const GetTokenOwner = async (tokenAddress:any) => {\n        //alert(\"HERE!\")\n        //let token_owner = await connection.getTokenLargestAccounts(new PublicKey(tokenAddress));//  Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"Token Owner: \"+JSON.stringify(token_owner));\n\n        const body = {\n          method: \"getAccountInfo\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            tokenAddress,\n            {\"encoding\":\"jsonParsed\",\n            \"commitment\":\"confirmed\"}\n            // add <object> (optional) Commitment\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const GetLargestTokenAccounts = async () => {\n        const body = {\n          method: \"getTokenLargestAccounts\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            mint,\n            {\"commitment\":\"confirmed\"}\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const fetchTokenAccountData = async () => {\n        let [flargestTokenAccounts] = await Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"settings setMintAta: \"+JSON.stringify(flargestTokenAccounts));\n        if (+flargestTokenAccounts[0].amount === 1){ // some NFTS are amount > 1\n            setMintATA(flargestTokenAccounts[0].address);\n        }\n    }\n\n    const fetchSOLBalance = async () => {\n        const body = {\n          method: \"getBalance\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString()\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value;\n        return resultValues;\n    };\n\n    const getFollowStatus = async (towner:string) => {\n        \n        if (publicKey){\n            if (towner){\n                //if (tokenOwners.data.parsed.info.owner){\n                    setLoadingFollowState(true);\n                    let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), towner);\n                    if (socialconnection){\n                        //if (socialconnection?.identity){\n                        if (socialconnection?.connections[0]?.followStatus) {  \n                            setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                        }\n                    }\n                    setLoadingFollowState(false);\n                //}\n            }\n        }\n    }\n\n    const getMintOwner = async () => {\n        setLoadingOwner(true);\n        let [tokenowner] = await Promise.all([GetTokenOwner(mintAta)]);\n        setTokenOwners(tokenowner);\n        fetchSolanaDomain(tokenowner?.data.parsed.info.owner);\n        getFollowStatus(tokenowner?.data.parsed.info.owner);\n        setLoadingOwner(false);\n    }\n\n    React.useEffect(() => {\n        if ((publicKey)&&(tokenOwners)){\n            getFollowStatus(tokenOwners?.data.parsed.info.owner);\n        }\n    }, [publicKey]);\n\n    const fetchTokenAccountOwnerHoldings = async () => {\n        if (publicKey){ \n            let [sol_rsp, portfolio_rsp, governance_rsp] = await Promise.all([fetchSOLBalance(), fetchBalances(), getGovernanceBalance()]);\n            //setGrapeWhitelisted(GRAPE_WHITELIST.indexOf(publicKey.toString()));\n            if (sol_rsp){ // use sol calc for balance\n                setSolPortfolioBalance(parseFloat(new TokenAmount(sol_rsp, 9).format()));\n            }\n            try{\n\n                if (governance_rsp?.account?.governingTokenDepositAmount){\n                    setGrapeGovernanceBalance(governance_rsp?.account?.governingTokenDepositAmount);\n                }else{    \n                    setGrapeGovernanceBalance(0);\n                }\n            }catch(e){\n                setGrapeGovernanceBalance(0);\n                console.log(\"ERR: \"+e);\n            }\n\n            try{\n                setGrapeMemberBalance(0);\n                let final_weighted_score = 0;\n                portfolio_rsp.map((token:any) => {\n                    let mint = token.account.data.parsed.info.mint;\n                    let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n                    if (mint === '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){ // check if wallet has sol\n                        if (governance_rsp?.account?.governingTokenDepositAmount){\n                            const total_grape = +balance + (+governance_rsp?.account?.governingTokenDepositAmount)/1000000\n                            setGrapeMemberBalance(total_grape);\n                            if (+total_grape >= 1000){\n                                const weighted_score = total_grape/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        } else{\n                            setGrapeMemberBalance(balance);\n                            if (+balance >= 1000){\n                                const weighted_score = +balance/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        }\n                    }\n                });\n            } catch(e){console.log(\"ERR: \"+e);}\n            \n        }\n    }\n\n    const HandleSetAvatar = async () => {\n        try{\n            const transaction = await createSetProfilePictureTransaction(publicKey, new PublicKey(mint), new PublicKey(mintAta));\n            //console.log(\"Transaction: \"+JSON.stringify(transaction));\n            enqueueSnackbar(`Preparing set your avatar with ${mint} mint`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Your avatar has been set `,{ variant: 'success', action:snackaction });\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n        } \n    }\n\n    const SearchForMint = (props: any) => {\n        const [open_dialog, setOpenPKDialog] = React.useState(false);\n        const [mintKey, setInputMintValue] = React.useState('');\n    \n        const handleClickOpenDialog = () => {\n            setOpenPKDialog(true);\n        };\n        \n        const handleCloseDialog = () => {\n            setOpenPKDialog(false);\n        };\n        \n        function HandleMintAddressSubmit(event: any) {\n            event.preventDefault();\n            if ((mintKey.length >= 32) && \n                (mintKey.length <= 44)){\n                // WalletId is base58 validate the type too later on\n                props.setMintPubkey(mintKey);\n                handleCloseDialog();\n            } else{\n                // Invalid Wallet ID\n                console.log(\"INVALID MINT\");\n            }\n        }\n        \n        return (\n          <React.Fragment>\n            <Button onClick={handleClickOpenDialog}\n                sx={{borderRadius:'24px',color:'white'}}\n            >\n                <SearchIcon />\n            </Button> \n             \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"md\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Mint\n                </DialogTitle>\n                <form onSubmit={HandleMintAddressSubmit}>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            autoComplete='off'\n                            margin=\"dense\"\n                            id=\"preview_mint_key\"\n                            label=\"Paste a mint address\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            value={mintKey}\n                            onChange={(e) => setInputMintValue(e.target.value)}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDialog}>Cancel</Button>\n                        <Button \n                            type=\"submit\"\n                            variant=\"text\" \n                            title=\"GO\">\n                                Go\n                        </Button>\n                    </DialogActions>\n                </form>\n            </BootstrapDialog>   \n          </React.Fragment>\n        );\n    }\n\n    const fetchSolanaDomain = async (ownerPublicKey:string) => {\n        if (ownerPublicKey){\n            //console.log(\"checking domains for \"+ownerPublicKey);\n            const domain = await findDisplayName(ggoconnection, ownerPublicKey);\n            if (domain){\n                if (domain[0] !== ownerPublicKey)\n                    setSolanaDomain(domain[0]);\n            }\n        }\n    }\n    \n    React.useEffect(() => { \n        if (refreshOwner){\n            //setTokenOwners(null);\n            props.setRefresh(true);\n        }\n        if ((mintAta)||(refreshOwner)){\n            getMintOwner();\n            fetchTokenAccountOwnerHoldings();\n        }\n        if (refreshOwner){\n            setRefreshOwner(!refreshOwner);\n        }\n    }, [mintAta, publicKey, refreshOwner]);\n    \n    React.useEffect(() => { \n        try{\n            ( collectionitem?.image && \n                collectionItemImages.push(collectionitem.image)\n            )\n        } catch(e){\n            console.log(\"ERR: \"+e);\n        }\n        \n        if (!tokenOwners){\n            fetchTokenAccountData();\n        }\n    }, [mint]);\n\n    try{\n        return (\n            <Grid>\n                <Helmet>\n                    <title>{`${collectionitem.name} | Grape Social. Stateless. Marketplace.`}</title>\n                    <meta property=\"og:title\" content={`${collectionitem.name} @Grape`} />\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:url\" content={window.location.href} />\n                    <meta property=\"og:image\" content={collectionitem.image} />\n                    <meta property=\"og:description\" content={collectionitem.name} />\n                    <meta name=\"theme-color\" content=\"#000000\" />\n\n                    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta name=\"twitter:site\" content={`${collectionitem.name} @Grape`} />\n                    <meta name=\"twitter:title\" content={collectionitem.name} />\n                    <meta name=\"twitter:description\" content={collectionitem.name} />\n                    <meta name=\"twitter:image\" content={collectionitem.image} />\n                </Helmet>\n\n                {isViewerOpen && (\n                    <ImageViewer\n                    src={ collectionItemImages }\n                    currentIndex={ currentImage }\n                    disableScroll={ false }\n                    closeOnClickOutside={ true }\n                    onClose={ closeImageViewer }\n                    />\n                )}\n\n                <Box\n                    sx={{\n                        mt: 2,\n                        \n                    }}\n                >\n                    <Box\n                        sx={{\n                            borderRadius: '17px',\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            mb: 4,\n                            pl: 3,\n                            pr: 3,\n                            pt: 1,\n                            pb: 1\n                        }}\n                        >\n                            <Grid container direction=\"row\" spacing={{ xs: 2, md: 3 }}>\n                                <Grid item xs={6} md={8}>\n                                    <ButtonGroup variant=\"text\">\n                                        <Button\n                                            className=\"button icon-left\"\n                                            onClick={() => navigate(-1)}\n                                            sx={{color:'white',borderRadius:'24px'}}\n                                        >\n                                            <ArrowBackIosIcon />\n                                            Back\n                                        </Button>\n                                        <SearchForMint setMintPubkey={props.setMintPubkey} />\n                                    </ButtonGroup>\n                                </Grid>\n                                <Grid item  xs={6} md={4}>\n                                    <Box display=\"flex\" justifyContent=\"flex-end\">\n                                        <ButtonGroup variant=\"text\">\n                                            <SocialLikes mint={mint} />\n                                            <SocialFlags mint={mint} />\n                                                <Grid item sx={{borderRadius:'24px',background:'none'}}>\n                                                    <Avatar \n                                                        component={Paper} \n                                                        elevation={4}\n                                                        alt={collectionitem.name}\n                                                        src={collectionitem.image}\n                                                        sx={{ width: 30, height: 30, bgcolor: \"#222\", ml:1,mr:0.5}}\n                                                    ></Avatar>\n                                                </Grid>\n                                                <Grid item>        \n                                                    <ShareSocialURL fontSize={'24px'} url={window.location.href} title={'Grape DEX | '+trimAddress(mint,4)} />\n                                                </Grid>\n\n                                        </ButtonGroup>\n                                    </Box>\n                                </Grid>\n                            </Grid> \n                    </Box>    \n                    <Box\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:3,\n                            pl:4,\n                            pr:4\n                        }} \n                    >              \n                        \n                        <Grid container spacing={{ xs: 2, md: 3 }} >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Box\n                                    sx={{ \n                                        width: '100%'\n                                    }}\n                                > \n                                    <List\n                                        sx={{ \n                                            width: '100%'\n                                        }}\n                                        component=\"nav\"\n                                        >\n                                        \n                                            <ListItemText>\n                                                <Grid \n                                                    container \n                                                    spacing={2}\n                                                    direction=\"column\"\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\">\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                                            <ListItemButton\n                                                                sx={{\n                                                                    width:'100%',\n                                                                    borderRadius:'25px',\n                                                                    p: '2px'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    src={`${collectionitem.image}`}\n                                                                    srcSet={`${collectionitem.image}`}\n                                                                    alt={collectionitem.name}\n                                                                    onClick={ () => openImageViewer(0) }\n                                                                    loading=\"lazy\"\n                                                                    height=\"auto\"\n                                                                    style={{\n                                                                        width:'100%',\n                                                                        borderRadius:'24px'\n                                                                    }}\n                                                                />\n                                                            </ListItemButton>\n                                                        </Grid>\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center', mt:'-15px'}}>\n                                                            <Button\n                                                                size=\"small\" variant=\"text\" \n                                                                onClick={ () => openImageViewer(0) }\n                                                                sx={{color:'white',borderRadius:'24px'}}\n                                                            >\n                                                                Preview <OpenInFullIcon sx={{ fontSize:'16px', ml:1 }}/></Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                \n                                            </ListItemText>\n                                        \n                                    </List>\n                                </Box>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                    }}\n                                    component=\"nav\"\n                                >\n\n                                    <Box\n                                        sx={{ \n                                            p: 1,\n                                            mb: 3, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        \n                                            <ListItemButton onClick={handleClickOpenDescription}\n                                                sx={{borderRadius:'20px'}}\n                                            >\n                                                <ListItemIcon>\n                                                <SegmentIcon />\n                                                </ListItemIcon>\n                                                <ListItemText primary=\"Description\" />\n                                                {open_description ? <ExpandLess /> : <ExpandMoreIcon />}\n                                            </ListItemButton>\n                                            <Collapse in={open_description} timeout=\"auto\" unmountOnExit>\n                                                <List component=\"div\" disablePadding>\n                                                    <ListItemText primary={collectionitem?.description} sx={{p:2}}  />\n                                                </List>\n                                            </Collapse>\n                                            \n                                    </Box>\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    >         \n                                        \n                                        <ListItemButton onClick={handleClickOpenMeta}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Details\" />\n                                            {open_meta ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_meta} timeout=\"auto\" unmountOnExit>\n                                            <List component=\"div\" sx={{ pl: 4 }}>\n                                                <ListItemText>\n\n                                                <TableContainer component={Paper}\n                                                    sx={{\n                                                        background: 'rgba(255,255,255,0.015)',\n                                                        boxShadow: 3,\n                                                        borderRadius: '20px'\n                                                    }}\n                                                >\n                                                    <StyledTable \n                                                        sx={{ }} \n                                                        size=\"small\" \n                                                        aria-label=\"NFT Meta\">\n                                                        \n                                                        {collectionitem?.attributes ?\n                                                            <React.Fragment>\n\n                                                                {collectionitem.attributes?.length  && collectionitem.attributes.length > 0 ? (\n                                                                    <></>\n                                                                    )\n                                                                :\n                                                                <>\n                                                                    <TableRow\n                                                                        onClick={() => setOpenAttributeCollapse(!open_attribute_collapse)}\n                                                                    >\n                                                                        <TableCell>\n                                                                        Attributes:\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {collectionitem.attributes.length}\n                                                                            <IconButton\n                                                                                aria-label=\"expand row\"\n                                                                                size=\"small\"\n                                                                                sx={{ textAlign:\"right\" }}\n                                                                            >\n                                                                                {open_attribute_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                            </IconButton>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    <TableRow>\n                                                                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                            <Collapse in={open_attribute_collapse} timeout=\"auto\" unmountOnExit>\n                                                                                <Box sx={{ margin: 1 }}>\n                                                                                    <Table size=\"small\" aria-label=\"purchases\">\n\n                                                                                        {collectionitem.attributes.length > 0 &&\n                                                                                        <TableHead>\n                                                                                            <TableRow>\n                                                                                                <TableCell><Typography variant=\"subtitle1\">Attribute</Typography></TableCell>\n                                                                                                <TableCell><Typography variant=\"subtitle1\" >Type</Typography></TableCell>\n                                                                                            </TableRow>\n                                                                                        </TableHead>\n                                                                                        }\n                                                                                        {collectionitem.attributes.length > 0 ? collectionitem.attributes?.map((item: any) => (\n                                                                                            <TableRow>\n                                                                                                <TableCell>{item?.trait_type}</TableCell>\n                                                                                                <TableCell>{item?.value}</TableCell>\n                                                                                            </TableRow>\n                                                                                        ))  \n                                                                                        :\n                                                                                        <TableRow>\n                                                                                            <TableCell>Attributes:</TableCell>\n                                                                                            <TableCell>\n                                                                                            {collectionitem.attributes.itemType?.length > 0 &&\n                                                                                                <Tooltip title={`Type`}>\n                                                                                                <Chip label={collectionitem.attributes?.itemType} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.category?.length > 0 &&\n                                                                                                <Tooltip title={`Category`}>\n                                                                                                <Chip label={collectionitem.attributes?.category} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.rarity?.length > 0 &&\n                                                                                                <Tooltip title={`Rarity`}>\n                                                                                                <Chip label={collectionitem.attributes?.rarity} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.spec?.length > 0 &&\n                                                                                                <Tooltip title={`Spec`}>\n                                                                                                <Chip label={collectionitem.attributes?.spec} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.class?.length > 0 &&\n                                                                                                <Tooltip title={`Class`}>\n                                                                                                <Chip label={collectionitem.attributes?.class} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            </TableCell>\n                                                                                        </TableRow> \n                                                                                        }\n                                                                                    </Table>\n                                                                                </Box>\n                                                                            </Collapse>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </>\n                                                                }\n                                                            </React.Fragment>\n                                                        : null }\n\n                                                        <TableRow>\n                                                            <TableCell>Mint:</TableCell>\n                                                            <TableCell>\n                                                                <MakeLinkableAddress addr={mint} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        <TableRow>\n                                                            <TableCell>Owner:</TableCell>\n                                                            <TableCell>\n                                                                \n                                                            {tokenOwners && (\n                                                                <MakeLinkableAddress addr={tokenOwners?.data.parsed.info.owner} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            )}  \n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        {collectionitem?.symbol ? \n                                                            <TableRow>\n                                                                <TableCell>Symbol:</TableCell>\n                                                                <TableCell>{collectionitem.symbol}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem.seller_fee_basis_points > 0 ?\n                                                            <TableRow>\n                                                                <TableCell>Royalty:</TableCell>\n                                                                <TableCell>\n                                                                {(+collectionitem.seller_fee_basis_points/100).toFixed(2)}%\n                                                                <Tooltip title={`This is the rate at which royalties are shared with creators if this asset is sold using the Metaplex Auction program`}><HelpOutlineIcon sx={{ fontSize:16, ml: 1  }}/></Tooltip>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n    {collectionitem.properties?.creators ?\n                                                            <React.Fragment>\n                                                                <TableRow\n                                                                    onClick={() => setOpenCreatorCollapse(!open_creator_collapse)}\n                                                                >\n                                                                    <TableCell>Creators:</TableCell>\n                                                                    <TableCell>\n                                                                        {collectionitem.properties.creators.length}\n                                                                        <IconButton\n                                                                            aria-label=\"expand row\"\n                                                                            size=\"small\"\n                                                                            sx={{ textAlign:\"right\" }}\n                                                                        >\n                                                                            {open_creator_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                        </IconButton>\n                                                                        \n                                                                    </TableCell>\n                                                                </TableRow>\n                                                                <TableRow>\n                                                                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                        <Collapse in={open_creator_collapse} timeout=\"auto\" unmountOnExit>\n                                                                            <Box sx={{ margin: 1 }}>\n                                                                                <Table size=\"small\" aria-label=\"purchases\">\n                                                                                    <TableHead>\n                                                                                        <TableRow>\n                                                                                            <TableCell><Typography variant=\"caption\">Creator Address</Typography></TableCell>\n                                                                                            <TableCell align=\"right\"><Typography variant=\"caption\">% Royalty</Typography></TableCell>\n                                                                                        </TableRow>\n                                                                                    </TableHead>\n                                                                                    {collectionitem.properties.creators.length > 0 && collectionitem.properties.creators.map((item: any) => (\n                                                                                        <TableRow>\n                                                                                            <TableCell>\n                                                                                            <Button\n                                                                                                title=\"Visit Profile\"\n                                                                                                component={Link} \n                                                                                                to={`${GRAPE_PROFILE}${item.address}`}\n                                                                                            >\n                                                                                                <AccountCircleOutlinedIcon sx={{fontSize:'14px'}}/>\n                                                                                            </Button>\n                                                                                                <MakeLinkableAddress addr={item.address} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                                            </TableCell>\n                                                                                            <TableCell align=\"right\">{item.share}%</TableCell>\n                                                                                        </TableRow>\n                                                                                    ))}\n                                                                                </Table>\n                                                                            </Box>\n                                                                        </Collapse>\n                                                                    </TableCell>\n                                                                </TableRow>\n                                                            </React.Fragment>\n                                                        : null }\n\n\n                                                        {collectionitem?.edition ?\n                                                            <TableRow>\n                                                                <TableCell>Edition:</TableCell>\n                                                                <TableCell>{collectionitem.edition}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.background_color ?\n                                                            <TableRow>\n                                                                <TableCell>Background:</TableCell>\n                                                                <TableCell>#{collectionitem.background_color}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionrawdata?.updateAuthority ?\n                                                            <TableRow>\n                                                                <TableCell>Update Authority:</TableCell>\n                                                                <TableCell>\n                                                                    <MakeLinkableAddress addr={collectionrawdata.updateAuthority} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawdata?.isMutable == 1 ?\n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><LockOpenIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><Tooltip title={`This is immutable`}><LockIcon /></Tooltip></TableCell>\n                                                            </TableRow> }\n                                                        {collectionrawdata?.primarySaleHappened ? \n                                                            <TableRow>\n                                                                <TableCell>Primary Sale:</TableCell>\n                                                                <TableCell><CheckCircleIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                        <TableRow>\n                                                            <TableCell>Primary Sale:</TableCell>\n                                                            <TableCell><Tooltip title={`Primary sale has not occured as of this fetch`}><BlockIcon /></Tooltip></TableCell>\n                                                        </TableRow>\n                                                        }\n\n                                                        {collectionitem?.createdAt ?\n                                                            <TableRow>\n                                                                <TableCell>Created At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.createdAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.updatedAt ?\n                                                            <TableRow>\n                                                                <TableCell>Updated At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.updatedAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.deactivated ?\n                                                            <TableRow>\n                                                                <TableCell>Deactivated:</TableCell>\n                                                                <TableCell><Tooltip title={`This is deactivated`}><CheckCircleIcon /></Tooltip></TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionitem.image ?\n                                                            \n                                                            <TableRow>\n                                                                <TableCell>Image:</TableCell>\n                                                                <TableCell>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${collectionitem.image}`} target=\"_blank\">\n                                                                        View Original <OpenInNewIcon sx={{fontSize:12, ml:1}} />\n                                                                    </Button>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null}\n\n                                                        {/*collectionrawprimer.owner ?\n                                                            <TableRow>\n                                                                <TableCell>Owner:</TableCell>\n                                                                <TableCell>{collectionrawprimer.owner}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawprimer.executable ?\n                                                            <TableRow>\n                                                                <TableCell>Executable:</TableCell>\n                                                                <TableCell>{collectionrawprimer.executable}</TableCell>\n                                                            </TableRow>\n                                                        : null */}\n                                                    </StyledTable>\n                                                </TableContainer>\n                                                \n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                </List>\n                            </Grid>\n                            <Grid item xs={12} sm={12} md={6}>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                        p: 2\n                                    }}\n                                    component=\"nav\"\n                                    >       \n                                    <ListItemText>\n\n                                        <Box>\n                                            <Typography component=\"div\" variant=\"subtitle1\">\n                                               <GrapeVerified updateAuthority={collectionrawdata} symbol={collectionitem.symbol} />\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>\n                                                {collectionitem.name}\n                                                </strong>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\">\n                                                {tokenOwners && \n                                                    (<>\n                                                        {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner).length > 0) ? (\n                                                            <>\n                                                                {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner)).map(filteredMarket => (\n                                                                <>\n                                                                Listed on \n                                                                    {(filteredMarket.name.length > 0) ? (\n                                                                        <>  \n                                                                            \n                                                                            {(filteredMarket.previewUrl.length > 0) ? (\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${filteredMarket.previewUrl}${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            ):(\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} \n                                                                                        <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            )}\n                                                                        </>\n                                                                    ):(\n                                                                        <>\n                                                                        {trimAddress(tokenOwners?.data.parsed.info.owner, 4)}\n                                                                        </>\n                                                                    )}\n                                                                </>\n                                                                ))}\n                                                            </>\n                                                        )\n                                                        :\n                                                        (\n                                                            <>\n                                                            {!loadingOwner ?\n                                                            <Grid container direction=\"row\">\n                                                                <Grid item>\n                                                                {solanaDomain && solanaDomain.length > 0 ?\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{solanaDomain}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{trimAddress(tokenOwners?.data.parsed.info.owner, 4)}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n\n                                                                </>\n                                                                }\n                                                                \n                                                                </Grid>\n                                                                <Grid item \n                                                                    sx={{ \n                                                                        display: \"flex\",\n                                                                        justifyContent: 'flex-end'\n                                                                    }}>\n                                                                    <Tooltip title={`Explorer`}>\n                                                                        <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${tokenOwners?.data.parsed.info.owner}`} target=\"_blank\" sx={{borderRadius:'24px', color:'white', pl:0, pr:0}}> <OpenInNewIcon sx={{fontSize:'14px'}} /></Button>\n                                                                    </Tooltip>\n                                                                    {publicKey && publicKey.toBase58() === tokenOwners?.data.parsed.info.owner ?\n                                                                        <Tooltip title={`Set this NFT as your avatar`}>\n                                                                            <Button \n                                                                                variant=\"text\" \n                                                                                onClick={HandleSetAvatar}\n                                                                                size=\"small\"\n                                                                                className=\"profileAvatarIcon\"\n                                                                                sx={{borderRadius:'24px', color:'white'}}\n                                                                                >\n                                                                                <AccountCircleOutlinedIcon \n                                                                                    sx={{\n                                                                                        fontSize:'14px',\n                                                                                    }} \n                                                                                />\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                    :\n                                                                    <>\n                                                                        {loadingFollowState ?\n                                                                            <Button \n                                                                                sx={{borderRadius:'24px'}}\n                                                                            >\n                                                                                <CircularProgress sx={{p:'14px',m:-2}} />\n                                                                            </Button>\n                                                                        :\n                                                                            <>\n                                                                            {isFollowing ?  \n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Unfollow\"\n                                                                                        onClick={() => followWalletDisconnect(tokenOwners?.data.parsed.info.owner)}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonRemoveOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                                :\n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Follow\"\n                                                                                        onClick={() => followWalletConnect(tokenOwners?.data.parsed.info.owner, solanaDomain || '')}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonAddOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                            }\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                    }\n\n                                                                </Grid>\n                                                                \n                                                            </Grid>\n                                                            :<>Loading owner</>}\n                                                            </>\n                                                        )\n                                                    }\n                                                    </>\n                                                    )\n                                                }  \n                                            </Typography>\n                                        </Box>\n                                    </ListItemText>\n                                </List>\n                                \n                                {tokenOwners?.data.parsed.info.owner &&\n                                    <ItemOffers\n                                        mintAta={mintAta} \n                                        mintOwner={tokenOwners?.data.parsed.info.owner} \n                                        mint={mint} \n                                        refreshOwner={refreshOwner}\n                                        setRefreshOwner={setRefreshOwner} \n                                        setRefresh={props.setRefresh} \n                                        grape_member_balance={grape_member_balance}\n                                        grape_governance_balance={grape_governance_balance}\n                                        grape_offer_threshhold={grape_offer_threshhold}\n                                        grape_weighted_score={grape_weighted_score}\n                                        grape_whitelisted={grape_whitelisted}\n                                        sol_portfolio_balance={sol_portfolio_balance}\n                                        />\n                                }\n                                \n\n                                {collectionitem.attributes?.length && collectionitem.attributes.length > 0 ? (\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        <ListItemButton onClick={handleClickOpenTraits}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Traits\" />\n                                            {open_traits ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_traits} timeout=\"auto\" unmountOnExit>\n                                            <List\n                                                sx={{ \n                                                    width: '100%'\n                                                }}\n                                                component=\"nav\"\n                                                >       \n                                                <ListItemText>\n                                                    <Grid item alignItems=\"center\">\n                                                        {collectionitem.attributes?.length && collectionitem.attributes.length > 0 && (\n                                                            <>\n                                                                {collectionitem.attributes?.map((item: any) => (\n                                                                    <Chip \n                                                                        sx={{\n                                                                            padding:'22.5px',\n                                                                            margin: '5px',\n                                                                            textAlign: 'center',\n                                                                            background: '#272727',\n                                                                            borderRadius: '10px'\n                                                                        }}\n                                                                        label={\n                                                                            <>\n                                                                                <strong>{item?.trait_type}</strong>\n                                                                                <Divider />\n                                                                                {item?.value}\n                                                                            </>} />\n                                                                        \n                                                                ))}\n                                                            </>  \n                                                            )\n                                                        }\n                                                    </Grid>\n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                )\n                                : <></>\n                                }\n                                    \n                            </Grid>\n                        </Grid>    \n                    \n                    </Box>\n                    {/*\n                    <CardActions\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: 'flex-end',\n                            padding: 1\n                        }}\n                    >\n                        <OfferPrompt mint={mint} />\n                    </CardActions>\n                    */}\n                </Box>  \n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e);\n        return null \n    }\n}\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nexport function PreviewView(this: any, props: any) {\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    //const [success, setSuccess] = React.useState(false);\n    const [mint, setMintPubkey] = React.useState(null);\n    const [refresh, setRefresh] = React.useState(false);\n    \n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"mint\") || handlekey;\n\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [walletPKId, setInputPKValue] = React.useState(null);\n    \n    const history = useNavigate();\n    //const location = useLocation();\n    \n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        console.log(\"Sending: \"+walletPKId);\n        \n        if (ValidateAddress(walletPKId)){\n            // WalletId is base58 validate the type too later on\n            setMintPubkey(walletPKId);\n            //setPubkey(walletPKId);\n            //props.setPubkey(walletPKId);\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID MINT ID\");\n        }\n    }\n    const CollectionProfileClear = (props: any) => {\n        // TODO:\n        // Add button next to collection to clear navigation address\n        // this should only appear if the user is logged in (has a pubkey from session)\n        return (\n            <React.Fragment></React.Fragment>\n        );\n    }\n\n    const PreviewItem = (props: any) => {\n        const [thismint, setThisMint] = React.useState(props.mint);\n        const [expanded, setExpanded] = React.useState(false);\n        const [loading, setLoading] = React.useState(false);\n        const [collectionmeta, setCollectionMeta] = React.useState(null);\n        const [collectionrawdata, setCollectionRaw] = React.useState(null);\n        const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n        const { connection } = useConnection();\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n        \n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let mint_address = new PublicKey(mint)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                setCollectionRaw({meta_final,meta_response});\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n        \n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n    \n                setLoading(false);\n            }\n        }\n    \n        useEffect(() => {\n            const interval = setTimeout(() => {\n                getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [thismint]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            \n            return (\n                <Card\n                    sx={{\n                        borderRadius: '20px',\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius: '20px',\n                        }}\n                        variant=\"rectangular\" width=\"100%\" height={325} />\n                </Card>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                        <GalleryItemMeta collectionitem={collectionmeta} collectionrawdata={collectionrawdata} mint={mint} setRefresh={setRefresh} setMintPubkey={setMintPubkey} />\n                );\n            }\n            //}\n        }\n    }\n\n    React.useEffect(() => { \n        if (refresh)\n            setRefresh(!refresh);\n        \n        if (mint && ValidateAddress(mint)){\n            //props.history.push({\n            history({\n                pathname: GRAPE_PREVIEW+mint\n            },\n                { replace: true }\n            );\n        } else {\n            history({\n                pathname: '/preview'\n            },\n                { replace: true }\n            );\n        } \n        \n    }, [mint, refresh]);\n\n    if (!mint){\n        if (urlParams?.length > 0){\n            setMintPubkey(urlParams);\n        }\n    }\n\n    return (\n        <React.Fragment>\n                { mint && ValidateAddress(mint) ?\n                    <PreviewItem mint={mint} />\n                : \n                <>\n                    <React.Fragment>\n                        <Box\n                            sx={{ \n                                p: 1, \n                                mb: 3, \n                                width: '100%',\n                                background: '#13151C',\n                                borderRadius: '24px'\n                            }}\n                        > \n                                <Grid \n                                    container \n                                    direction=\"column\" \n                                    spacing={2} \n                                    alignItems=\"center\"\n                                    justifyContent={'center'}\n                                    rowSpacing={8}\n                                >\n                                    \n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2,mb:3}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                        </Typography>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        >ooops... you entered an invalid address!</Typography>\n\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                    </React.Fragment>\n                </>\n                }\n                \n        </React.Fragment>\n    );\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\n  export async function sellNowListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const thisWalletPublicKey = new web3.PublicKey(walletPublicKey);\n    \n    let sellerWalletKey = thisWalletPublicKey;\n    if (daoPublicKey){\n      sellerWalletKey = new web3.PublicKey(daoPublicKey);\n    }\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        +offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const [programAsSigner, programAsSignerBump] =\n        await getAuctionHouseProgramAsSigner();\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n        auctionHouseKey,\n        sellerWalletKey,\n        tokenAccountKey,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted,\n        buyPriceAdjusted,\n    );\n    const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      new BN(0),\n    );\n\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.sell(\n      tradeBump,\n      freeTradeBump,\n      programAsSignerBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n      accounts: {\n          wallet: sellerWalletKey,\n          metadata: await getMetadata(mintKey),\n          tokenAccount: tokenAccountKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          sellerTradeState: tradeState,\n          freeSellerTradeState: freeTradeState1,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n      },\n    ); \n\n    const instructions = [instruction];\n    console.log(\"sellerWalletKey: \"+sellerWalletKey.toBase58());\n    \n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:2, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber(), // price\n      score:weightedScore, // spam protection for our feed/higher score weight higher feed visibility\n    };\n    \n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n  }","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nimport { Button } from '@mui/material';\n\nimport {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { web3 } from '@project-serum/anchor';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ListItemButton,\n    Container,\n} from '@mui/material';\n\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nexport default function FeedView(props: any){\n    const [loading, setLoading] = React.useState(false);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [featured, setFeatured] = React.useState(null);\n    const [featuredmeta, setFeaturedMeta] = React.useState(null);\n    const [mergedfeaturedmeta, setMergedFeaturedMeta] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    \n    const statestruct = ['Withdraw', 'Offer', 'Sale', 'Accepted from listing', 'Buy Now', 'Cancel', ''];\n\n    const FeaturedItem = (props: any) => {\n        const [finalMeta, setFinalMeta] = React.useState(null);\n        const itemraw = props.itemmeta;\n        //const itemdata = props.itemdata;\n\n        const getCollectionItemData = async () => {\n            try {\n                //console.log(\"RAW: \"+JSON.stringify(itemraw));\n                let meta_primer = itemraw;\n                let buf = Buffer.from(itemraw.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                //setCollectionRaw({meta_final,meta_primer});\n    \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getMeta = async () => {\n            let final_meta = await getCollectionItemData();\n            setFinalMeta(final_meta);\n        }\n\n        React.useEffect(() => { \n            if ((itemraw)&&(!finalMeta)){\n                getMeta();\n            }\n        }, [itemraw]);\n\n\n        //console.log(\"HERE: \"+JSON.stringify(item));\n\n        if (!finalMeta){\n            return <><CircularProgress /></>\n        } else{\n            return (\n                <Container\n                    style={{overflow:'hidden', position:'relative', margin:0, padding:0}}\n                >\n                    <Container\n                        sx={{\n                            position:'relative',\n                            background: 'rgba(0, 0, 0, 0.1)',\n                            borderRadius: '26px',\n                            overflow:'hidden',\n                            mt:2,\n                            mb:2,\n                            ml:0,\n                            mr:0,\n                            p:0,\n                            backgroundSize: \"cover\",\n                        }} \n                    >\n                    <img\n                        src={finalMeta?.image}\n                        alt=\"\"\n                        style={{\n                            opacity: '0.1',\n                            position: 'absolute',\n                            borderRadius: '26px',\n                            marginTop:2,\n                            marginBottom:2,\n                            padding:1,\n                            top:'-20%',\n                            left:'-20%',\n                            width:'150%'\n                        }}\n                    />\n                    \n                    <Grid \n                        container \n                        direction='row'\n                        >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Grid \n                                    container \n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    <Grid item sx={{display:'column',justifyContent:'center',alignItems:'center', p:0}}>\n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.6)',\n                                                borderRadius: '26px',\n                                                width:'100%',\n                                                p:'2px',\n                                            }} \n                                        >\n                                            <ListItemButton\n                                                component={Link} to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                                sx={{\n                                                    borderRadius:'25px',\n                                                    p: 0\n                                                }}\n                                            >\n                                                <img\n                                                    src={`${finalMeta?.image}`}\n                                                    srcSet={`${finalMeta?.image}`}\n                                                    alt={finalMeta?.name}\n                                                    //onClick={ () => openImageViewer(0) }\n                                                    loading=\"lazy\"\n                                                    height=\"auto\"\n                                                    style={{\n                                                        width:'100%',\n                                                        borderRadius:'24px',\n                                                        padding:0\n                                                    }}\n                                                />\n                                            </ListItemButton>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            \n                            <Grid item xs={12} sm={12} md={6}>\n                                <Container\n                                    sx={{\n                                        minWidth: '100%',\n                                        minHeight:'100%',\n                                        m:1,\n                                        p:0\n                                    }} \n                                >\n                                    <Container>\n                                    {finalMeta?.symbol &&\n                                        <Typography variant=\"caption\">\n                                            {finalMeta?.symbol}\n                                        </Typography>\n                                        }\n                                        <Typography variant=\"h4\">\n                                            {finalMeta?.name}\n                                        </Typography>\n                                        \n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.9)',\n                                                minWidth: '100%',\n                                                minHeight:'100%',\n                                                p:1.5,\n                                                mt:1,\n                                                borderRadius:'24px',\n                                            }} \n                                        >\n                                            <Typography sx={{fontSize:'30px'}}>\n                                                {statestruct[itemraw.memo.state]} <strong>{itemraw.memo.amount}</strong> <SolCurrencyIcon sx={{fontSize:\"18px\", mr:0.5 }}/>\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                            - {itemraw.memo.timestamp} \n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <Button size=\"small\" sx={{fontSize:'10px'}} component=\"a\" href={`https://explorer.solana.com/address/${itemraw.memo.mint}`} target=\"_blank\">{trimAddress(itemraw.memo.mint,5)} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} /></Button>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\" sx={{mt:1,mb:1}}>\n                                            {finalMeta?.description}\n                                            </Typography>\n                                            \n                                            <Button \n                                                className=\"buyNowButton\"\n                                                component={Link} \n                                                to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                            >\n                                                View\n                                            </Button>\n                                        </Box>\n                                    </Container>\n                                </Container>\n                            </Grid>\n                            \n                        </Grid>\n                    </Container>\n                </Container>\n            )\n        }\n    }\n    \n    const getCollectionData = async (mintarr:string[]) => {\n        try {\n            let mintsPDAs = new Array();\n            \n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                \n                try{\n                    let meta_primer = metavalue;\n                    let buf = Buffer.from(metavalue.data);\n                    let meta_final = decodeMetadata(buf);\n                    \n                }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFeatured = async () => {\n        \n        if (!loading){\n            setLoading(true);\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n        \n            let result = await ggoconnection.getSignaturesForAddress(auctionHouseKey, {limit: 100});\n            let ahListings: any[] = [];\n            let ahListingsMints: any[] =[];\n            let exists = false;\n            let cntr = 0;\n            let cnt = 0;\n\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            let featured = null;\n            for (var value of result){\n\n                if (value.err === null){\n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n                            \n                            exists = false;\n                            if ((value) && (value.memo)){\n                                \n                                let memo_arr: any[] = [];\n                                let memo_str = value.memo;\n                                let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                if (memo_instances > 0) {\n                                    // multi memo\n                                    let mcnt = 0;\n                                    let submemo = memo_str;\n                                    //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                    for (var mx=0;mx<memo_instances;mx++){\n                                        let init = submemo.indexOf('{');\n                                        let fin = submemo.indexOf('}');\n                                        memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                        memo_arr.push(memo_str);\n                                        submemo = submemo.replace(memo_str, \"\");\n                                        //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                        //console.log(\"submemo: \"+submemo);\n                                    }\n                                } else{\n                                    let init = memo_str.indexOf('{');\n                                    let fin = memo_str.indexOf('}');\n                                    memo_str = memo_str.substr(init,fin); // include brackets\n                                    memo_arr.push(memo_str);\n                                }\n                                \n\n                                for (var memo_item of memo_arr){\n                                    try{\n                                        const memo_json = JSON.parse(memo_item);\n\n                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                        for (var i = 0; i < ahListings.length; i++){\n                                            if ((memo_json?.mint === ahListings[i].mint)){ // match same\n                                                // if match then add\n                                                if (memo_json.state === 1)\n                                                    ahListings[i].offers = ahListings[i].offers+1;\n                                                exists = true;\n                                            }\n                                        }\n\n                                        if (!exists){\n                                            let forSaleDate = ''+value.blockTime;\n                                            if (forSaleDate){\n                                                let timeago = timeAgo(''+value.blockTime);\n                                                forSaleDate = timeago;\n                                            }\n\n                                            let solvalue = convertSolVal(memo_json?.amount || memo_json?.offer);\n                                            if (memo_json?.mint){\n                                                let offer = 0;\n                                                if (memo_json.state === 1)\n                                                    offer = 1;\n                                                ahListings.push({amount: solvalue, mint: memo_json?.mint, timestamp: forSaleDate, blockTime:value.blockTime, state: memo_json?.state || memo_json?.status, offers: offer, score: memo_json?.score || 0});  \n                                                ahListingsMints.push(memo_json.mint);\n                                                \n                                            }\n                                        }\n                                    }catch(merr){console.log(\"ERR: \"+merr)}\n                                }\n                            }\n                        }\n                    } catch (e){console.log(\"ERR: \"+e)}\n                }\n            } \n\n            let collectionmeta = await getCollectionData(ahListingsMints);\n\n            setFeaturedMeta(collectionmeta);\n            setFeatured(ahListings);\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                collectionmeta[i][\"memo\"] = ahListings[i];\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                finalmeta.sort((a:any,b:any) => (b.memo.score - a.memo.score) || (b.memo.blockTime - a.memo.blockTime));\n                setMergedFeaturedMeta(finalmeta);\n            }catch(e){\n                setMergedFeaturedMeta(collectionmeta);\n            }\n            \n            \n            setLoading(false);                                      \n        }\n    }\n\n    //React.useEffect(() => { \n        if ((!loading) && (!featured))\n            getFeatured();\n    //}, []);\n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n                width=\"100%\"\n                minWidth=\"400px\"\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        <CircularProgress />\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        {mergedfeaturedmeta &&\n                            <>\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 2 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 1 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n                            </>\n                        }\n                    </Box>\n                </Grid>\n            </Grid>\n        );\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log('instruction:', instruction);\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","\nimport React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport { PublicKey } from '@solana/web3.js';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    ListItemButton,\n} from '@mui/material';\n\nimport { GRAPE_PREVIEW } from '../utils/grapeTools/constants';\n\nconst GalleryItem = (props: any) => {\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account.data.parsed.info.mint || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n\n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let meta_primer = collectionitem;\n                let buf = Buffer.from(meta_primer.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                    \n                        <Grid \n                            container \n                            alignItems=\"center\"\n                            justifyContent=\"center\">\n                            <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                <ListItemButton\n                                    component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                    sx={{\n                                        width:'100%',\n                                        borderRadius:'25px',\n                                        p: '2px'\n                                    }}\n                                >\n                                    <img\n                                        src={`${image}`}\n                                        srcSet={`${image}`}\n                                        alt={collectionmeta.collectionmeta?.name}\n                                        //onClick={ () => openImageViewer(0) }\n                                        loading=\"lazy\"\n                                        height=\"auto\"\n                                        style={{\n                                            width:'100%',\n                                            borderRadius:'24px'\n                                        }}\n                                    />\n                                </ListItemButton>\n                            </Grid>\n                            <Grid item sx={{display:'flex'}}>\n                                <Box\n                                    sx={{p:1}}\n                                >\n                                    <Typography variant=\"caption\">\n                                        {collectionmeta.collectionmeta?.name}\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                );\n            }\n            //}\n        }\n}\n\nexport default function GalleryView(props: any){\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const finalCollection = props.finalCollection;\n    const walletCollection = props.walletCollection;\n\n    return (\n        <>\n        {finalCollection && finalCollection.length > 0 && (\n            <Box\n                sx={{\n                    background: 'rgba(0, 0, 0, 0.6)',\n                    borderRadius: '17px',\n                    p:4\n                }} \n            > \n                <Grid container \n                    spacing={{ xs: 2, md: 3 }} \n                    justifyContent=\"center\"\n                    alignItems=\"center\">\n                    \n                    { (finalCollection.length > 0 ? finalCollection\n                        .slice((page - 1) * rowsperpage, page * rowsperpage):finalCollection)\n                        .map((collectionInfo: any, key: any) => {\n                            return(\n                                <Grid item xs={12} sm={12} md={4} lg={3} key={key}>\n                                    <Box\n                                        sx={{\n                                            background: 'rgba(0, 0, 0, 0.6)',\n                                            borderRadius: '26px',\n                                            minWidth: '175px'\n                                        }} \n                                    >\n                                    <GalleryItem collectionitem={collectionInfo} listed={true} count={key} />\n                                    \n                                    </Box>\n                                </Grid>\n                                    \n                            )\n                        }\n                    )}\n                </Grid>\n                \n                { walletCollection.length > rowsperpage && \n                    <Grid container justifyContent=\"flex-end\" sx={{ mt: 2 }}>\n                        <Stack spacing={2}>\n                            <Pagination\n                                count={(Math.ceil(walletCollection.length / rowsperpage))}\n                                page={page}\n                                //onChange={handlePageChange}\n                                defaultPage={1}\n                                color=\"primary\"\n                                size=\"small\"\n                                showFirstButton\n                                showLastButton\n                                //classes={{ ul: classes.paginator }}\n                                />\n                        </Stack>\n                    </Grid>\n                }\n            </Box>\n            \n        )}\n        </>);\n}","export const VERIFIED_CREATORS = [];\n\nexport const UPDATE_AUTHORITIES = [];\n/*\nexport const UPDATE_AUTHORITIES = [\n    'trshC9cTgL3BPXoAbp5w9UfnUMWEJx5G61vUijXPMLH', // DTP\n    '4kovSxtW7oZ3J12VpUAV6JLBydebvLUV7ZYSAfndQr6E', // Tired Turtles\n    'DC2mkgwhy56w3viNtHDjJQmc7SGu2QX785bS4aexojwX', // Degen Apes\n    'DsuFKHaT2VWTQZhWAVJnoj7uJyB65PWDLEuP6dGn2sae', // Groms\n    '8GV2kiCxbKjEGwLVfRa2Xdrb7sELL83cSx9jsPjMqrrd', // NWM\n    'BHRFPSHHtLqjbcvVCmGrCjgbUagwnKDxp4CbUgoED3tT', // PIT\n];*/","import React, { useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport moment from 'moment';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport HowToVoteIcon from '@mui/icons-material/HowToVote';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport BallotIcon from '@mui/icons-material/Ballot';\nimport SellIcon from '@mui/icons-material/Sell';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY\n} from '../utils/grapeTools/constants';\nimport { RegexTextField } from '../utils/grapeTools/RegexTextField';\nimport { MakeLinkableAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\nimport { submitOffer } from '../utils/auctionHouse/submitOffer';\nimport { acceptOffer } from '../utils/auctionHouse/acceptOffer';\nimport { cancelListing } from '../utils/auctionHouse/cancelListing';\nimport { sellNowListing } from '../utils/auctionHouse/sellNowListing';\nimport { buyNowListing } from '../utils/auctionHouse/buyNowListing';\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { depositInGrapeVine } from '../utils/auctionHouse/depositInGrapeVine';\nimport { createDAOProposal } from '../utils/auctionHouse/createDAOProposal';\n\nimport \"../App.less\";\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from \"@solana/wallet-adapter-react-ui\";\n\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n\nfunction convertSolVal(sol: any){\n    sol = parseFloat(new TokenAmount(sol, 9).format());\n    return sol;\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction SellNowVotePrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const [daoPublicKey, setDaoPublicKey] = React.useState(null);\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                const transaction = new Transaction();\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey);\n                \n                const instructionsArray = [transactionInstr.instructions].flat();        \n                \n                // we need to pass the transactions to realms not to the wallet, and then with the instructoin set we pass to the wallet only the ones from realms\n                if (daoPublicKey){\n                    const transactionInstr2 = await createDAOProposal(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey, connection, transactionInstr, sendTransaction);\n                    \n                    console.log(\"transactionInstr2: \"+JSON.stringify(transactionInstr2));\n                    const instructionsArray2 = [transactionInstr2.instructions].flat();\n                    console.log(\"instructionsArray2: \"+ JSON.stringify(instructionsArray2));\n                    transaction.add(...instructionsArray2);\n                } else {\n                    transaction.add(\n                        ...instructionsArray\n                    );\n                }\n                \n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n                \n            \n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n\n    React.useEffect(() => {\n        for (var featured of FEATURED_DAO_ARRAY){\n            if (featured.address === mintOwner){\n                setDaoPublicKey(featured.address);\n            }\n        } \n        // static grape test (remove after testing)\n        if (mintOwner === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK')\n            setDaoPublicKey(featured.address);\n    },[]);\n\n    return (\n        <React.Fragment>\n            \n            {daoPublicKey ?\n               <> \n        \n                    <Button \n                        size=\"large\" \n                        variant=\"outlined\" \n                        sx={{\n                            borderRadius: '10px',\n                        }}\n                        value=\"Sell Now Instructions\" onClick={handleClickOpenDialog}>\n                        <HowToVoteIcon sx={{mr:1}}/> VOTE TO LIST\n                    </Button>            \n                    <BootstrapDialog \n                        fullWidth={true}\n                        maxWidth={\"sm\"}\n                        open={open_dialog} onClose={handleCloseDialog}\n                        PaperProps={{\n                            style: {\n                                background: '#13151C',\n                                border: '1px solid rgba(255,255,255,0.05)',\n                                borderTop: '1px solid rgba(255,255,255,0.1)',\n                                borderRadius: '20px'\n                            }\n                        }}\n                    >\n                        <DialogTitle>\n                            PROPOSE A SELL NOW PRICE\n                        </DialogTitle>\n                        <form onSubmit={handleSellNow}>\n                        <DialogContent>\n                            <RegexTextField\n                                regex={/[^0-9]+\\.?[^0-9]/gi}\n                                autoFocus\n                                autoComplete='off'\n                                margin=\"dense\"\n                                id=\"preview_sell_now_id\"\n                                label=\"Set your sale price\"\n                                type=\"text\"\n                                fullWidth\n                                variant=\"standard\"\n                                value={sell_now_amount}\n                                onChange={(e: any) => {\n                                    setSellNowAmount(e.target.value)}\n                                }\n                                inputProps={{\n                                    style: { \n                                        textAlign:'center', \n                                        fontSize: '34px'\n                                    }\n                                }}\n                            />\n                            <Grid \n                                container\n                                alignContent='flex-end'\n                                justifyContent='flex-end'\n                            >\n                                <Grid item\n                                    sx={{textAlign:'right'}}\n                                >\n                                    <Typography\n                                        variant=\"caption\"\n                                    >\n                                        Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDialog}>Cancel</Button>\n                            <Button \n                                type=\"submit\"\n                                variant=\"text\" \n                                disabled={+sell_now_amount < 0.001}\n                                title=\"Submit\">\n                                    SUBMIT\n                            </Button>\n                        </DialogActions>\n                        </form>\n                    </BootstrapDialog> \n                </>\n            :\n            <>\n                <Grid item>\n                    <Tooltip title={`This NFT is currently owned by a program and may be listed at a marketplace`}>\n                        <Button sx={{borderRadius:'10px'}}>\n                            <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                            LISTED/PROGRAM OWNED NFT\n                            </Alert>\n                        </Button>\n                    </Tooltip>\n                </Grid>  \n            </>\n            }  \n        </React.Fragment>\n    );\n}\n\nfunction SellNowPrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                //START SELL NOW / LIST\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, null);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    return (\n        <React.Fragment>\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                sx={{\n                    borderRadius: '10px',\n                }}\n                value=\"Sell Now\" onClick={handleClickOpenDialog}>\n                <AccountBalanceWalletIcon sx={{mr:1}}/> Sell Now\n            </Button>            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                }}\n            >\n                <DialogTitle>\n                    SET SELL NOW PRICE\n                </DialogTitle>\n                <form onSubmit={handleSellNow}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_sell_now_id\"\n                        label=\"Set your sale price\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={sell_now_amount}\n                        onChange={(e: any) => {\n                            setSellNowAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={+sell_now_amount < 0.001}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n}\n\nexport function OfferPrompt(props: any) {\n    const [open_dialog, setOpenOPDialog] = React.useState(false);\n    const [offer_amount, setOfferAmount] = React.useState('');\n    //const [sol_balance, setSolBalance] = React.useState(props.solBalance);\n    const sol_balance = props.solBalance;  \n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;  \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n\n    // using wallet-adapter\n    const buyerPublicKey = publicKey;\n    \n    const handleClickOpenDialog = () => {\n        setOfferAmount('');\n        setOpenOPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenOPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    async function HandleOfferSubmit(event: any) {\n        event.preventDefault();\n        if (+offer_amount > 0) {\n            handleCloseDialog();\n            //check the buyerwallet offer balance and that no other pending offer exists\n            /*const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const balance = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n            if (balance === 0) {    \n\t\t\t*/\n\t\t\t//no need allowing for multiple offers\n                try {\n                    const transactionInstr = await submitOffer(+offer_amount, mint, publicKey.toString(), mintOwner);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n\n                    enqueueSnackbar(`Preparing to make an offer for ${+offer_amount} SOL`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection)\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Offer sent `,{ variant: 'success', action:snackaction });\n                    \n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            props.setRefreshOffers(true);\n                        }, GRAPE_RPC_REFRESH);\n                } catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                    console.log(\"Error: \"+e);\n                    //console.log(\"Error: \"+JSON.stringify(e));\n                }\n            /*}\n            else {\n                enqueueSnackbar(`To make a new offer you must first cancel the existing offer of ${convertSolVal(balance)} SOL.`,{ variant: 'warning' });\n            } */       \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    \n    return (\n\n        <React.Fragment>\n\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                value=\"Make Offer\" \n                onClick={handleClickOpenDialog}\n                sx={{\n                    color: '#fff',\n                    borderColor: '#fff',\n                    borderRadius: '10px',\n                }}\n            >\n                <SellIcon sx={{mr:1}}/> Make offer\n            </Button> \n            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    /*\n                    style: {\n                        \n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },*/\n                    }}\n                >\n                <DialogTitle>\n                    MAKE AN OFFER\n                </DialogTitle>\n                <form onSubmit={HandleOfferSubmit}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        //regex={/[^0-9]+\\.?[0-9]/gi}\n                        //regex={/^[+-]?([0-9]+\\.?[0-9]*|\\.[0-9]+)$/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_offer_id\"\n                        label={`Set your offer`}\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={offer_amount}\n                        onChange={(e: any) => {\n                            setOfferAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Available Balance: {sol_balance} <SolCurrencyIcon sx={{fontSize:\"10px\"}} />\n                                <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                    <Button \n                                        onClick={() => {\n                                            setOfferAmount((String)(sol_balance))}}\n                                    > \n                                        Max \n                                    </Button>\n                                    <Button  \n                                        onClick={() => {\n                                            setOfferAmount((String)(+sol_balance/2))}}\n                                    > \n                                        Half\n                                    </Button>\n                                </ButtonGroup>\n                                {(props.highestOffer > 0) && (\n                                    <>\n                                    <br/>Highest Offer: \n                                        {(props.highestOffer < sol_balance+0.001) ?\n                                            <Button \n                                                onClick={() => {\n                                                    setOfferAmount((String)(+props.highestOffer+0.001))}}\n                                            > \n                                                {props.highestOffer}\n                                            </Button>\n                                        : \n                                            <>\n                                                {props.highestOffer}\n                                            </>\n                                        }\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={((+offer_amount > sol_balance) || (+offer_amount < 0.001) || (+offer_amount < props.highestOffer))}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n\n}\n\nexport default function ItemOffers(props: any) {\n    const [mintAta, setMintAta] = React.useState(props.mintAta);\n    const [offers, setOffers] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const pubkey = props.pubkey || null;\n    const mintOwner = props.mintOwner;\n    \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const walletPublicKey = publicKey;\n    const mint = props.mint; \n    const [refreshOffers, setRefreshOffers] = React.useState(false);\n    const anchorWallet = useAnchorWallet();\n    const [alertopen, setAlertOpen] = React.useState(false); \n    const [alertbuynowopen, setAlertBuyNowOpen] = React.useState(false);\n    const [final_offeramount, setFinalOfferAmount] = React.useState(null);\n    const [final_offerfrom, setFinalOfferFrom] = React.useState(null);\n    const [salePrice, setSalePrice] = React.useState(props.salePrice);\n    const [saleDate, setSaleDate] = React.useState(null);\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const [highestOffer, setHighestOffer] = React.useState(0);\n    const [openOffers, setOpenOffers] = React.useState(0);\n    const grape_governance_balance = props.grape_governance_balance;\n    const grape_offer_threshhold = props.grape_offer_threshhold;\n    const grape_member_balance = props.grape_member_balance;\n    const grape_whitelisted = props.grape_whitelisted;\n    const grape_weighted_score = props.grape_weighted_score;\n    const sol_portfolio_balance = props.sol_portfolio_balance;\n    \n    const handleAlertBuyNowClose = () => {\n        setAlertBuyNowOpen(false);\n    };\n    const handleAlertBuyNowOpen = () => {\n        setAlertBuyNowOpen(true);\n    };\n    const setBuyNowPrompt = () => {\n        handleAlertBuyNowOpen();\n    }\n    \n    const handleAlertClickOpen = () => {\n        setAlertOpen(true);\n    };\n    \n    const handleAlertClose = () => {\n        setAlertOpen(false);\n    };\n    const handleClick = () => {\n        setOpenOffersCollapse(!open_offers_collapse);\n    }\n\n    const setAcceptPrompt = (offeramount:any, offerfrom:any) => {\n        setFinalOfferAmount(offeramount);\n        setFinalOfferFrom(offerfrom);\n        handleAlertClickOpen();\n    }\n\n    const handleAcceptOffer = async (offerAmount: number, buyerAddress: any) => {\n        handleAlertClose();\n\n        try {\n            const transactionInstr = await acceptOffer(offerAmount, mint, walletPublicKey, buyerAddress.toString());\n            const instructionsArray = [transactionInstr.instructions].flat();  \n            const transaction = new Transaction()\n            .add(...instructionsArray);\n\n            enqueueSnackbar(`Preparing to accept offer of: ${offerAmount} SOL from: ${buyerAddress.toString()}`,{ variant: 'info' });\n            const signedTransaction2 = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction2}\n                </Button>\n            );\n            enqueueSnackbar(`NFT transaction completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                props.setRefresh(true);\n                //props.refreshOffers(true);\n                //props.setRefreshOwner(true);\n            }, GRAPE_RPC_REFRESH);\n                \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n        \n    }\n\n    const handleCancelListing =  async (salePrice: number) => {\n        try {\n            //START CANCEL LISTING\n            const transactionInstr = await cancelListing(salePrice, mint, walletPublicKey.toString(), mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Canceling Sell Now Price for ${salePrice} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Sell Now Price Removed `,{ variant: 'success', action:snackaction });\n            //END CANCEL LISTING\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleWithdrawOffer = async (offerAmount: number) => {\n        try {\n            //const transactionInstr = await withdrawOffer(offerAmount, mint, walletPublicKey.toString(), mintOwner);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n\n            enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection)\n           \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Withdrawal complete `,{ variant: 'success', action:snackaction });\n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleCancelOffer = async (offerAmount: number) => {\n        try {\n\n            //const transactionInstr = await cancelOffer(offerAmount, mint, walletPublicKey, mintOwner);\n\t\t\tconst transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been cancelled `,{ variant: 'success', action:snackaction });\n                \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center',\n              },\n              persist: true,\n            });\n            setTimeout(function() {\n              closeSnackbar(eskey);\n              setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    //console.log('mintowner: ', mintOwner);\n    const GetSignatureOffers = async (spkey: string, until: any, slimit: Number)  => { // made this more generic of a function\n        const gslimit = slimit || 25;\n        const body = {\n          method: \"getSignaturesForAddress\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            spkey,\n            {\n                \"limit\":gslimit,\n                \"commitment\":\"confirmed\",\n                //\"before\":beforeSignature,\n                //\"until\":until \n            }\n          ],\n          \"id\":1,\n        };\n\n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result\n        return resultValues;\n    };\n\n    const getOffers = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(pubkey, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n        \n        //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n        //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n        \n        /*\n        console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n        console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n        */\n\n        //console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        \n        let [result] = await Promise.all([GetSignatureOffers(derivedMintPDA[0].toString(),'', 25)]);\n        let offerResults: any[] = [];\n\t\tlet offerResultsCancelled: any[] = [];\n\t\tlet exists = false;\n        //let salePrice = 0;\n        let existSaleCancelAction = 0;\n        let cnt = 0;\n        let open_offers = 0;\n        var forSale = 0;\n        var forSaleDate = null;\n        var forSaleTimeAgo = null;\n        //console.log('derivedMintPDA[0]: '+derivedMintPDA[0].toString());\n\n        if (!loading){\n            setLoading(true);\n            \n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            setOpenOffers(0);\n            for (var value of result){\n                if (value.err === null){                   \n                    \n                    const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n\n                    try{\n                        //console.log(\"value: \"+JSON.stringify(value));\n                        //console.log(\"gtai (\"+getTransactionAccountInputs2.length+\"): \"+JSON.stringify(getTransactionAccountInputs2[cnt]));\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();\n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n                            let instructionType = getTransactionAccountInputs.meta.logMessages[1];\n                            let allLogMessages = getTransactionAccountInputs.meta.logMessages;\n\n                            //console.log(\"feePayer: \"+feePayer.toBase58());\n\n                            //console.log('getTransactionAccountInputs:', getTransactionAccountInputs);\n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.meta.preTokenBalances));\n                            let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;                        \n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.transaction.feePayer));\n                            //if (auctionMint){\n                            {    \n                                    \n                                if ((value) && (value?.memo)){\n\n                                    let memo_arr: any[] = [];\n                                    let memo_str = value.memo;\n                                    let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                    if (memo_instances > 0) {\n                                        // multi memo\n                                        let mcnt = 0;\n                                        let submemo = memo_str;\n                                        //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                        for (var mx=0;mx<memo_instances;mx++){\n                                            let init = submemo.indexOf('{');\n                                            let fin = submemo.indexOf('}');\n                                            memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                            memo_arr.push(memo_str);\n                                            submemo = submemo.replace(memo_str, \"\");\n                                            //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                            //console.log(\"submemo: \"+submemo);\n                                        }\n                                    } else{\n                                        let init = memo_str.indexOf('{');\n                                        let fin = memo_str.indexOf('}');\n                                        memo_str = memo_str.substr(init,fin); // include brackets\n                                        memo_arr.push(memo_str);\n                                    }\n                                    \n                                    for (var memo_item of memo_arr){\n                                        try{\n                                            const memo_json = JSON.parse(memo_item);\n                                    \n                                            /*\n                                            if ((memo_json?.status === 3) || \n                                                (memo_json?.status === 4) ||\n                                                (memo_json?.state === 3) ||\n                                                (memo_json?.state === 4)){\n                                                if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                    //let sol = parseFloat(new TokenAmount(memo_json?.amount, 9).format());\n                                                    //console.log(\"Sold for: \"+sol);\n                                                    offerResults.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: getTransactionAccountInputs.meta.preTokenBalances[0].mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                }\n                                            }*/\n\n                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                            if ( feePayer.toBase58() !== mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                                                \n                                                //console.log(\"value: \"+JSON.stringify(value));\n                                                const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                                let amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,); // total amount on escrow\n                                                // we need to now get the amount of the offer\n                                                //console.log(amount);\n                                                //let amount = await getTokenAmount(anchorProgram, escrow, new PublicKey(auctionMint),);\n                                                // we need to filter to find the amount that was offered to the specific mint\n                                                \n                                                if (amount_on_escrow >= 0) {\n                                                //{\n                                                    //let [inner_result] = await Promise.all([GetSignatureOffers(mintAta, '')]); // making this call again to get the memos                                       \n                                                    exists = false;                   \n                                                    {\n                                                        try{    \n                                                            if ((memo_json?.status === 0)||\n                                                                (memo_json?.status === 5) ||\n                                                                (memo_json?.state === 0)||\n                                                                (memo_json?.state === 5)){ // add to an array to search against other offers and cancel them out\n                                                                offerResultsCancelled.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                            }\n                                                            \n                                                            //console.log('memo_json: ' + memo_str);\n                                                            \n                                                            //if (memo_json.mint === getTransactionAccountInputs.meta.preTokenBalances[0].mint){\n                                                            {  \n                                                                //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n\n                                                                if ((memo_json?.status === 0) || // withdraw\n                                                                    (memo_json?.status === 1) || // offer\n                                                                    (memo_json?.status === 2) || // sale\n                                                                    (memo_json?.status === 3) || // listing/accept\n                                                                    //(memo_json?.status === 4) || // buy now\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) || // withdraw\n                                                                    (memo_json?.state === 1) || // offer\n                                                                    (memo_json?.state === 2) || // sale\n                                                                    (memo_json?.state === 3) || // listing/accept\n                                                                    //(memo_json?.state === 4) || // buy now\n                                                                    (memo_json?.state === 5)){ // cancel\n                                                                    \n                                                                    //console.log(feePayer.toBase58() + \": \"+memo_str);\n\n                                                                    /*if ((memo_json?.amount <= amount_on_escrow)||\n                                                                        (memo_json?.offer <= amount_on_escrow)){ //.offer used in beta*/\n                                                                        \n                                                                        let found = false;\n                                                                        //console.log(feePayer+\": \"+JSON.stringify(memo_str));\n                                                                        for (var cancelled of offerResultsCancelled){\n                                                                            if ((cancelled.buyeraddress === feePayer.toBase58())&&\n                                                                                (cancelled.offeramount === amount_on_escrow)){\n                                                                                    found = true;\n                                                                            }\n                                                                        }\n                                                                        \n                                                                        if (!found){\n                                                                            //if (amount_on_escrow > highestOffer){\n                                                                                let sol = parseFloat(new TokenAmount(highestOffer, 9).format());\n                                                                                setHighestOffer(sol);\n                                                                            //}\n\n                                                                            exists = false;\n                                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                            for (var i = 0; i < offerResults.length; i++){\n                                                                                if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                                                    exists = true;\n                                                                                }\n                                                                            }\n                                                                            \n                                                                            if (!exists){\n                                                                                if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                                    //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                                    \n                                                                                    if (memo_json?.state === 1 || memo_json?.status === 1){\n                                                                                        open_offers++;\n                                                                                    }\n\n                                                                                    if (feePayer.toBase58() === mintOwner)\n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                    else   \n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    // }\n                                                                }\n                                                            }\n                                                        }catch(e){console.log(\"ERR: \"+e)}\n                                                    }\n                                                }\n                                            }\n                                            //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                            if ( feePayer.toBase58() === mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && existSaleCancelAction === 0){\n                                                //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                                                                    \n                                                for (var i = 0; i < offerResults.length; i++){\n                                                    if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                        exists = true;\n                                                    }\n                                                }\n\n                                                if (!exists){\n                                                    //console.log(feePayer+\": \"+JSON.stringify(memo_str)); \n                                                    if ((memo_json?.status === 2) ||\n                                                        (memo_json?.state === 2)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//make a final check for seller trade state\n                                                            const mintOwnerPK = new PublicKey(mintOwner);\n                                                            const mintKey = new PublicKey(mint);\n                                                            const tokenAccountKey = (await getAtaForMint(mintKey, mintOwnerPK))[0];\n                                                            const tokenSizeAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  1,\n                                                                  mintKey,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                            //console.log('offerAmount', offerAmount);\n                                                            const buyPriceAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  convertSolVal(offerAmount),\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n\n                                                            const sellerTradeState = (\n                                                                await getAuctionHouseTradeState(\n                                                                  auctionHouseKey,\n                                                                  mintOwnerPK,\n                                                                  tokenAccountKey,\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintKey,\n                                                                  tokenSizeAdjusted,\n                                                                  buyPriceAdjusted,\n                                                                )\n                                                            )[0];\n                                                            const sellerTradeStateInfo = await ggoconnection.getAccountInfo(sellerTradeState);        \n                                                            //console.log('sellerTradeStateInfo:', sellerTradeStateInfo);\n                                                            if (sellerTradeStateInfo != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSale = memo_json?.amount || memo_json?.sellPrice;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSaleDate = value.blockTime;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                        //console.log('Saleprice:', salePrice);\n                                                    }\n                                                }\n                                                existSaleCancelAction = 1;\n                                            }\n                                        } catch(ert){console.log(\"ERR: \"+ert);}\n                                    }\n                                }\n                            }\n                        }\n                    }catch(er){console.log(\"ERR: \"+er)}\n                    cnt++;\n                }\n            }\n\n            setOpenOffers(open_offers);\n            // sort offers by highest offeramount\n            //console.log(\"offerResults pre: \"+JSON.stringify(offerResults));\n            offerResults.sort((a,b) => (a.offeramount < b.offeramount) ? 1 : -1);\n            //console.log(\"offerResults post: \"+JSON.stringify(offerResults));\n            setOffers(\n                offerResults\n            );\n            setSalePrice(\n                convertSolVal(forSale)\n            );\n        \n            if (forSaleDate){\n                let prettyForSaleDate = moment.unix(+forSaleDate).format(\"MMMM Do YYYY, h:mm a\");\n                setSaleDate(\n                    prettyForSaleDate\n                );\n                if (forSaleDate){\n                    let timeago = timeAgo(forSaleDate);\n                    setSaleTimeAgo(timeago);                                          \n                }\n            }\n            setLoading(false);\n        }\n    }\n\n    const handleBuyNow =  async (salePrice: number) => {\n\n        const buyerPublicKey = publicKey;\n        const sellerWalletKey = new web3.PublicKey(mintOwner);\n        handleAlertBuyNowClose();\n\n        try {\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n\t\t\tconst escrowAmount = convertSolVal(amount);\n            //if (amount === 0){\n                const transactionInstr = await buyNowListing(salePrice, mint, sellerWalletKey.toString(), buyerPublicKey);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                \n                enqueueSnackbar(`Preparing to BUY NOW: ${salePrice} SOL from: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                //const signedTransaction = await sendTransaction(transaction, connection);\n                //await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Executing transfer for: ${mint.toString()}`,{ variant: 'info' });\n                const signedTransaction2 = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction2}\n                    </Button>\n                );\n                enqueueSnackbar(`NFT transaction complete `,{ variant: 'success', action:snackaction });\n                \n                if (escrowAmount > 0){\n                    //check the amount to redeposit \n                    let depositAmount = 0;\n                    if (escrowAmount > salePrice){\n                        depositAmount = salePrice;\n                    } else {\n                        depositAmount = escrowAmount;\n                    }\n                    const transactionInstr = await depositInGrapeVine(depositAmount, buyerPublicKey);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n                    \n                    enqueueSnackbar(`Preparing to Deposit amount back in GrapeVine: ${depositAmount} SOL to: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection);\n                    \n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Deposit back to GrapeVine completed`,{ variant: 'success', action:snackaction });\n                }\n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                });\n                \n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefresh(true);\n                }, GRAPE_RPC_REFRESH);\n\n            /*}\n            else {\n                enqueueSnackbar(`To BUY NOW you must first cancel the existing offer of ${convertSolVal(amount)} SOL.`,{ variant: 'warning' });\n            }*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }     \n    }\n\n    const setSolanaPay = (props: any) => {\n        /* // NATIVE SOL\n            console.log('2. 🛍 Simulate a customer checkout \\n');\n            const amount = new BigNumber(20);\n            const reference = new Keypair().publicKey;\n            const label = 'Jungle Cats store';\n            const message = 'Jungle Cats store - your order - #001234';\n            const memo = 'JC#4098';\n        */\n\n        /* // SPL TOKEN\n        console.log('2. 🛍 Simulate a customer checkout \\n');\n        const amount = new BigNumber(20);\n        const reference = new Keypair().publicKey;\n        const label = 'Jungle Cats store';\n        const message = 'Jungle Cats store - your order - #001234';\n        const memo = 'JC#4098';\n        const splToken = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v)';\n        \n        */\n\n        /* // CREATE LINK\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo, splToken });\n        */\n\n        /*// ENCODE TO QR\n        \n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        */\n\n\n        /* // ADD QR TO PAGE\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        // get a handle of the element\n        const element = document.getElementById('qr-code');\n\n        // append QR code to the element\n        qrCode.append(element);\n        */\n\n        return \n\n    }\n    \n    const ItemTools = (props: any) => {\n        \n        return (\n            <>\n            {(OTHER_MARKETPLACES.filter(e => e.address === mintOwner).length > 0) ? (\n                <></>\n            ):(\n                <Box\n                    sx={{ \n                        p: 1, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px',\n                        mb: 3\n                    }}\n                > \n                    <List\n                        sx={{ \n                            width: '100%'\n                        }}\n                        component=\"nav\"\n                        >       \n                        <ListItemText>\n                        \n                        {publicKey ? (\n                            <>\n                                {publicKey.toString() !== mintOwner ? (\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Buy now: \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                ):(\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Selling now: \n                                            \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                )}\n    \n                                <Grid \n                                    container \n                                    spacing={2}\n                                    direction=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    \n                                    {publicKey.toString() !== mintOwner ? (\n                                            <Grid \n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\">\n                                                <>\n                                                            <BootstrapDialog \n                                                                fullWidth={true}\n                                                                maxWidth={\"sm\"}\n                                                                PaperProps={{\n                                                                    style: {\n                                                                        background: '#13151C',\n                                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                                        borderRadius: '20px'\n                                                                    }\n                                                                }}\n                                                                open={alertbuynowopen}\n                                                                onClose={handleAlertBuyNowClose}\n                                                                aria-labelledby=\"alert-bn-dialog-title\"\n                                                                aria-describedby=\"alert-bn-dialog-description\"\n                                                                >\n                                                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                                                    <Typography>\n                                                                        BUY NOW CONFIRMATION\n                                                                    </Typography>\n                                                                </DialogTitle>\n                                                                <DialogContent>\n                                                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                                                    <br />\n                                                                    <Alert \n                                                                        severity=\"info\" variant=\"outlined\"\n                                                                        sx={{backgroundColor:'black'}}\n                                                                        >\n                                                                        Amount: {salePrice}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                                        Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                                        Owner: <MakeLinkableAddress addr={mintOwner} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                                        <Typography sx={{textAlign:'center'}}>\n                                                                        Make sure the above is correct<br/>press Accept to proceed\n                                                                        </Typography>\n                                                                    </Alert>\n                                                                    \n                                                                    </DialogContentText>\n                                                                </DialogContent>\n                                                                <DialogActions>\n                                                                    <Button onClick={handleAlertBuyNowClose}>Cancel</Button>\n                                                                    <Button \n                                                                        onClick={() => handleBuyNow(salePrice)}\n                                                                        autoFocus>\n                                                                    Accept\n                                                                    </Button>\n                                                                </DialogActions>\n                                                            </BootstrapDialog>\n                                                            \n                                                            <Grid item>\n                                                                {( (salePrice > 0) ?\n                                                                    <>\n                                                                        {/*\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Use Solana Pay\" \n                                                                            onClick={() => setSolanaPay(true)}\n                                                                            sx={{\n                                                                                background: 'linear-gradient(268.11deg, #00F0DD 3.12%, #DC1FFF 96.88%)',\n                                                                                borderRadius: '10px',\n                                                                                color: '#fff',\n                                                                                mr:1,\n                                                                            }}\n                                                                        >\n                                                                            <QrCodeIcon />\n                                                                        </Button>\n                                                                        */}\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Buy Now\" \n                                                                            className=\"buyNowButton\"\n                                                                            onClick={() => setAlertBuyNowOpen(true)}\n                                                                            sx={{\n                                                                                \n                                                                            }}\n                                                                        >\n                                                                            <AccountBalanceWalletIcon sx={{mr:1}}/> Buy Now\n                                                                        </Button>\n                                                                    </>\n                                                                :<></>)}\n                                                            </Grid>\n\n                                                        {((grape_whitelisted > -1) ||\n                                                            (grape_member_balance > grape_offer_threshhold)) ? (\n                                                            <Grid item>\n                                                                {ValidateCurve(mintOwner) ?\n                                                                    <OfferPrompt mint={mint} mintOwner={mintOwner} setRefreshOffers={setRefreshOffers} solBalance={sol_portfolio_balance} highestOffer={highestOffer} />\n                                                                :\n                                                                    <SellNowVotePrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                                }\n                                                            </Grid>\n                                                        ) : (\n                                                            <Grid item>\n                                                                <Tooltip title={`The Marketplace requires ${TOKEN_VERIFICATION_AMOUNT} ${TOKEN_VERIFICATION_NAME} to make an offer`}>\n                                                                    <Button sx={{borderRadius:'10px'}}>\n                                                                        <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                                                                        Offers limited to {TOKEN_VERIFICATION_NAME} holders\n                                                                        </Alert>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                        )}\n                                                </>\n                                            </Grid>\n                                    )\n                                    :\n                                        <Grid \n                                        container\n                                        spacing={2}\n                                        alignItems=\"center\"\n                                        justifyContent=\"center\">\n                                            <Grid item>\n                                                \n                                                {( (salePrice > 0) ?\n                                                    <>\n                                                        <Button \n                                                            size=\"large\" \n                                                            color=\"error\"\n                                                            variant='outlined'\n                                                            onClick={() => handleCancelListing(salePrice)}\n                                                            sx={{\n                                                                borderRadius: '10px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon sx={{mr:1}}/> Cancel Listing\n                                                        </Button>   \n                                                    </>\n                                                    : \n                                                    <>\n                                                        <SellNowPrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                    </>\n                                                )}\n                                            </Grid>\n                                        </Grid>\n                                }\n                                </Grid>\n                            </>\n                            )\n                        :(\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                            >\n                                <Grid item>\n                                <WalletConnectButton />\n                                </Grid>\n                            </Grid>\n                        )\n                        }\n                        </ListItemText>\n                    </List>\n                </Box>\n            )}\n            </>\n        );\n    }   \n\n    React.useEffect(() => {\n        if (refreshOffers){\n            //setOffers(null);\n            setRefreshOffers(!refreshOffers);\n        }\n\n        if (mintAta){\n            //if (!offers){\n                getOffers();\n            //}\n        }\n    }, [mintAta, refreshOffers]);\n\n    if ((!offers)||(loading)){\n        return (\n            <Box\n                sx={{ \n                    p: 1, \n                    mb: 3, \n                    width: '100%',\n                    background: '#13151C',\n                    borderRadius: '24px'\n                }}\n            > \n                <Skeleton\n                    sx={{ \n                        height: '100%',\n                        width: '100%'\n                    }}\n                />\n            </Box>\n        )\n    } else{      \n        return ( \n            <>\n                <ItemTools />\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                    <ListItemButton onClick={handleClick}\n                        sx={{borderRadius:'20px'}}\n                    >\n                        <ListItemIcon>\n                        <BallotIcon />\n                        </ListItemIcon>\n                        <ListItemText \n                            primary='Offers'\n                        />\n                            <Typography variant=\"caption\"><strong>{openOffers}</strong></Typography>\n                            {open_offers_collapse ? <ExpandLess /> : <ExpandMoreIcon />}\n                    </ListItemButton>\n                    <Collapse in={open_offers_collapse} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" \n                            sx={{ \n                                width: '100%',\n                            }}>\n                            <ListItemText>\n                                <Box sx={{ margin: 1 }}>\n                                    {/*<div style={{width: 'auto', overflowX: 'scroll'}}>*/}\n                                    <TableContainer>\n                                        <Table size=\"small\" aria-label=\"purchases\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell><Typography variant=\"caption\">Address</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Offer</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Date</Typography></TableCell>\n                                                    <TableCell></TableCell>\n                                                </TableRow>\n                                            </TableHead>\n\n                                            <BootstrapDialog \n                                                fullWidth={true}\n                                                maxWidth={\"sm\"}\n                                                PaperProps={{\n                                                    style: {\n                                                        background: '#13151C',\n                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                        borderRadius: '20px'\n                                                    }\n                                                    /*\n                                                    style: {\n                                                        \n                                                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                                                        boxShadow: '3',\n                                                        border: '1px solid rgba(255,255,255,0.15)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                                                        borderRadius: '20px',\n                                                        padding:'4'\n                                                        },*/\n                                                    }}\n                                                \n                                                    open={alertopen}\n                                                    onClose={handleAlertClose}\n                                                    aria-labelledby=\"alert-dialog-title\"\n                                                    aria-describedby=\"alert-dialog-description\"\n                                                    >\n                                                    <DialogTitle id=\"alert-dialog-title\">\n                                                        <Typography>\n                                                            CONFIRMATION\n                                                        </Typography>\n                                                    </DialogTitle>\n                                                    <DialogContent>\n                                                        <DialogContentText id=\"alert-dialog-description\">\n                                                        <br />\n                                                        <Alert severity=\"info\" variant=\"outlined\" sx={{backgroundColor:'black'}} >\n                                                            Amount: {final_offeramount}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                            Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                            From: <MakeLinkableAddress addr={final_offerfrom} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                            <Typography sx={{textAlign:'center'}}>\n                                                            Make sure the above is correct<br/>press Accept to proceed\n                                                            </Typography><br/>\n                                                        </Alert>\n                                                        \n                                                        </DialogContentText>\n                                                    </DialogContent>\n                                                    <DialogActions>\n                                                        <Button onClick={handleAlertClose}>Cancel</Button>\n                                                        <Button \n                                                            onClick={() => handleAcceptOffer(final_offeramount, final_offerfrom)}\n                                                            autoFocus>\n                                                        Accept\n                                                        </Button>\n                                                    </DialogActions>\n                                                </BootstrapDialog>\n\n                                            {offers && offers.map((item: any) => (\n                                                <>\n\n                                                    {(item.state === 1) ? (\n                                                        <TableRow>\n                                                            <TableCell><Typography variant=\"body2\">\n                                                                <Tooltip title='View Profile'>\n                                                                    <Button size=\"small\" variant=\"text\" component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        {trimAddress(item.buyeraddress,4)}\n                                                                    </Button>\n                                                                </Tooltip>\n                                                                <Tooltip title='Visit Explorer'>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        <OpenInNewIcon sx={{fontSize:'14px'}} />\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Typography></TableCell>\n                                                            <TableCell  align=\"right\">\n                                                                <Typography variant=\"body2\">\n                                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                                <Typography variant=\"caption\">\n                                                                    <Tooltip\n                                                                        title={formatBlockTime(item.timestamp, true, true)}\n                                                                    >\n                                                                        <Button size=\"small\">{timeAgo(item.timestamp)}</Button>\n                                                                    </Tooltip>\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                            \n                                                            <>\n                                                                {publicKey && publicKey.toBase58() === mintOwner && (\n                                                                    <div>\n                                                                    <Button\n                                                                        onClick={() => setAcceptPrompt(convertSolVal(item.offeramount), item.buyeraddress)} //acceptOfferWrapper(convertSolVal(item.offeramount), item.buyeraddress)} //handleAcceptOffer(convertSolVal(item.offeramount), item.buyeraddress)}\n                                                                        className='buyNowButton'\n                                                                        sx={{\n                                                                        }}\n                                                                    >\n                                                                        ACCEPT\n                                                                    </Button>\n                                                                </div>\n                                                                )}\n                                                                \n                                                                {publicKey && publicKey.toBase58() === item.buyeraddress && (\n                                                                    <Button \n                                                                        color=\"error\"\n                                                                        variant=\"text\"\n                                                                        //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount))}\n                                                                        onClick={() => handleCancelOffer(convertSolVal(item.offeramount))}\n                                                                        sx={{\n                                                                            borderRadius: '10px',\n                                                                        }}\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </Button>\n                                                                )}\n                                                            </>\n                                                            \n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ):(<></>)}\n                                                </>\n                                            ))}\n                                        </Table>\n                                    </TableContainer>\n                                </Box>\n                            </ListItemText>\n                        </List>\n                    </Collapse>\n                </Box>\n            </>\n        )\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\n  export async function submitOffer(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n    //console.log('escrow_amount:',escrowSolAmount, 'offerAmount:', offerAmount);\n    //execute BUY\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n          offerAmount,\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    );\n\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n          tokenSize,\n          mintKey,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    ); \n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey, \n    );\n\n    const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey);    \n  \n    //const tokenAccountKey: web3.PublicKey = tokenAccount ? new web3.PublicKey(tokenAccount) : results.value[0].address;\n    const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      buyerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n    const ata = (\n        await getAtaForMint(\n            //@ts-ignore\n            auctionHouseObj.treasuryMint,\n            buyerWalletKey,\n        )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.buy(\n      tradeBump,\n      escrowBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n          accounts: {\n              wallet: buyerWalletKey,\n              paymentAccount: isNative ? buyerWalletKey : ata,\n              transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n              metadata: await getMetadata(mintKey),\n              tokenAccount: tokenAccountKey,\n              escrowPaymentAccount,\n              //@ts-ignore\n              treasuryMint: auctionHouseObj.treasuryMint,\n              //@ts-ignore\n              authority: auctionHouseObj.authority,\n              auctionHouse: auctionHouseKey,\n              //@ts-ignore\n              auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n              buyerTradeState: tradeState,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              systemProgram: web3.SystemProgram.programId,\n              rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n      }\n    );\n    \n    //const instructions = [instruction];\n    const instructions = [\n      ...(isNative\n          ? []\n          : [\n              Token.createApproveInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  transferAuthority.publicKey,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n                  buyPriceAdjusted.toNumber(),\n              ),\n          ]),\n      instruction,\n      ...(isNative\n          ? []\n          : [\n              Token.createRevokeInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n              ),\n          ]),\n      ];\n    //END BUY\n\n    //CHECK IF DEPOSIT INSTRUCTTION IS NECESSARY\n    if (escrowSolAmount > 0){\n      //calculate how much more to deposit\n      let depositAmount = 0;\n      if (offerAmount < escrowSolAmount){\n          depositAmount = offerAmount;\n      } else {\n          depositAmount = (offerAmount - (offerAmount - escrowSolAmount));\n      }\n      //console.log('depositAmount:', depositAmount);\n      const amountAdjusted = await getPriceWithMantissa(\n        depositAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      );\n\n      const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n        auctionHouseKey,\n        buyerWalletKey,\n      );\n\n      const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n      const ata = (\n        await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n        )\n      )[0];\n\n      const transferAuthority = web3.Keypair.generate();\n      //const signers = isNative ? [] : [transferAuthority];\n\n      const instruction2 = anchorProgram.instruction.deposit(\n        escrowBump,\n        new BN(amountAdjusted),\n        {\n          accounts: {\n            wallet: buyerWalletKey,\n            paymentAccount: isNative ? buyerWalletKey : ata,\n            transferAuthority: isNative\n              ? web3.SystemProgram.programId\n              : transferAuthority.publicKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n        },\n      );\n      instructions.push(instruction2);\n    }\n    // END ADDING DEPOSIT\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:1, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n  \n\n\n  }","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function acceptOffer(offerAmount: number, mint: string, sellerWalletKey: PublicKey, buyerAddress: any): Promise<InstructionsAndSignersSet> {\n  //START SELL\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n  );\n  const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    sellerWalletKey,\n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    new BN(0),\n  );\n\n  const signers: any[] = [];\n\n  const instruction = anchorProgram.instruction.sell(\n    tradeBump,\n    freeTradeBump,\n    programAsSignerBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n      accounts: {\n        wallet: sellerWalletKey,\n        metadata: await getMetadata(mintKey),\n        tokenAccount: tokenAccountKey,\n        //@ts-ignore\n        authority: auctionHouseObj.authority,\n        auctionHouse: auctionHouseKey,\n        //@ts-ignore\n        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n        sellerTradeState: tradeState,\n        freeSellerTradeState: freeTradeState1,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        programAsSigner,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n    },\n  ); \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const instructions = [instruction];\n  //END SELL\n  \n  //START EXECUTE SALE\n\n  const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerWalletKey,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey,);\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    bump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerWalletKey,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerWalletKey)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:4, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n  \n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('tokenSizeAdjusted:', tokenSizeAdjusted);\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    //console.log('tokenAccountKey:', tokenAccountKey.toBase58());\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              sellerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: sellerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    //is it withdraw here or cancel (we are removing the listing we made)\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nexport async function buyNowListing(offerAmount: number, mint: string, walletPublicKey: string, buyerAddress: PublicKey): Promise<InstructionsAndSignersSet> {\n  //START BUY\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n\n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n    auctionHouseKey,\n    buyerAddress, \n  );\n\n  const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey); \n\n  const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    buyerAddress, \n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    buyPriceAdjusted,\n  );\n\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const ata = (\n      await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerAddress, \n      )\n  )[0];\n\n  const transferAuthority = web3.Keypair.generate();\n  const signers = isNative ? [] : [transferAuthority];\n\n  const instruction = anchorProgram.instruction.buy(\n    tradeBump,\n    escrowBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n        accounts: {\n            wallet: buyerAddress,\n            paymentAccount: isNative ? buyerAddress : ata,\n            transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n            metadata: await getMetadata(mintKey),\n            tokenAccount: tokenAccountKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            buyerTradeState: tradeState,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n    }\n  );\n\n  const instructions = [\n    ...(isNative\n        ? []\n        : [\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                transferAuthority.publicKey,\n                buyerAddress,\n                [],\n                buyPriceAdjusted.toNumber(),\n            ),\n        ]),\n    instruction,\n    ...(isNative\n        ? []\n        : [\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                buyerAddress,\n                [],\n            ),\n        ]),\n  ];\n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  //const instructions = [instruction];\n  //END BUY\n  \n  //START EXECUTE SALE\n  //const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerAddress,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    escrowBump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerAddress,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerAddress)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:3, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n\n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: buyerAddress, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function depositInGrapeVine(escrowAmount: number, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n\n    const amountAdjusted = await getPriceWithMantissa(\n        escrowAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.deposit(\n      escrowBump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          paymentAccount: isNative ? buyerWalletKey : ata,\n          transferAuthority: isNative\n            ? web3.SystemProgram.programId\n            : transferAuthority.publicKey,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n      },\n    );\n\n    const instructions = [instruction];\n  \n    const GRAPE_AH_MEMO = {\n      state:6, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel, 6: deposit)\n      ah:auctionHouseKey.toString(), // pk\n      mint:null, // mint\n      amount:amountAdjusted // price\n    };\n      \n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n    instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import { PublicKey, SystemProgram, TransactionInstruction, Transaction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\nimport { \n  getRealms, \n  getVoteRecordsByVoter, \n  getTokenOwnerRecordAddress,\n  getTokenOwnerRecordForRealm, \n  getTokenOwnerRecordsByOwner, \n  getGovernanceAccounts, \n  pubkeyFilter, \n  TokenOwnerRecord, \n  withCreateProposal,\n  VoteType, \n  getGovernanceProgramVersion,\n  serializeInstructionToBase64,\n  createInstructionData,\n  withInsertTransaction,\n  InstructionData,\n  AccountMetaData,\n} from '@solana/spl-governance';\n\nimport { \n  TOKEN_REALM_PROGRAM_ID,\n} from '../grapeTools/constants';\nimport { AnyMxRecord } from 'dns';\n\n// Converts TransactionInstruction to InstructionData format\n/*export const createInstructionData2 = (instruction: TransactionInstruction) => {\n  return new InstructionData({\n    programId: instruction.programId,\n    data: instruction.data,\n    accounts: instruction.keys.map(\n      k =>\n        new AccountMetaData({\n          pubkey: k.pubkey,\n          isSigner: k.isSigner,\n          //isSigner: false,\n          isWritable: k.isWritable,\n          //isWritable: false,\n        }),\n    ),\n  });\n};*/\n\n  export async function createDAOProposal(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string, connection: any, transactionInstr: InstructionsAndSignersSet, sendTransaction: any): Promise<InstructionsAndSignersSet> {\n    \n    //console.log('inDAOProposal instructionArray before adding DAO Instructions:'+JSON.stringify(transactionInstr));\n    let instructions: TransactionInstruction[] = [];\n    //let initialInstructions: TransactionInstruction[] = [];\n    const signers: any[] = [];\n    // fetch realms information on the dao\n    const voteType = VoteType.SINGLE_CHOICE;\n    const options = ['Approve'];\n    const useDenyOption = true;\n    const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n    const realmPk = new PublicKey('DcR6g5EawaEoTRYcnuBjtD26VSVjWNoi1C1hKJWwvcup');\n    const governancePk = new PublicKey('JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK');\n    const name = 'Sale of NFT: '+mint+' for '+offerAmount+'sol on grape.art';\n    const descriptionLink = '';\n    const governingTokenMint = new PublicKey('9Z7SQ1WMiDNaHu2cX823sZxD2SQpscoLGkyeLAHEqy9r');\n    const governanceAuthority = new PublicKey(walletPublicKey);\n    const proposalIndex = 0;\n    const programVersion = await getGovernanceProgramVersion(\n      connection,\n      //new PublicKey(daoPublicKey),\n      programId,\n    );\n    console.log('programVersion:',programVersion);\n\n    const tokenOwnerRecordPk = await getTokenOwnerRecordAddress(\n      programId,\n      realmPk,\n      governingTokenMint,\n      governancePk\n    );\n    console.log('tokenOwnerRecordPK:', tokenOwnerRecordPk.toBase58());\n    const proposalPk = await withCreateProposal(\n      instructions,\n      //new PublicKey(daoPublicKey), \n      programId,\n      programVersion,\n      realmPk,\n      governancePk,\n      tokenOwnerRecordPk,\n      name,\n      descriptionLink,\n      governingTokenMint,\n      governanceAuthority,\n      proposalIndex,\n      voteType,\n      options,\n      useDenyOption,\n      governanceAuthority,\n  );\n  \n  let instructionData: InstructionData[]=[]; //createInstructionData([transactionInstr.instructions]);\n  \n  //to add all 5 instructions from sellNowListing\n  let j = 0;\n  for (var instruction of transactionInstr.instructions){\n    //instructionData.push(instruction);\n    \n    if (j < 2){\n      //instructionData.push(createInstructionData2(instruction));\n      instructionData.push(createInstructionData(instruction));\n      console.log(\"instructionData: \"+JSON.stringify(instructionData));\n    }\n    j++;\n  }\n\n  //console.log('instruction in position 0'+JSON.stringify(instructionData[0]));\n  //const instructionData2 = createInstructionData(instruction);\n  //instructionData.push(instructionData2);\n\n  //just adding the first instruction instead \n  //const instructionData2 = createInstructionData(transactionInstr.instructions[0]);\n  \n\n  const wit = await withInsertTransaction(\n    instructions,\n    //new PublicKey(daoPublicKey),\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    governanceAuthority,\n    0,\n    0,\n    0,\n    instructionData,\n    //[instructionData2],\n    governanceAuthority,\n  );\n  \n    //console.log(\"instructions: \"+JSON.stringify(instructions));\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n\n}"],"sourceRoot":""}