{"version":3,"sources":["components/static/SolCurrencyIcon.tsx","Featured/Featured.tsx","Header/Header.tsx","components/ConfirmDialog/ConfirmDialog.tsx","utils/config/theme.tsx","App.tsx","reportWebVitals.js","index.js","utils/cyberConnect/query.ts","utils/grapeTools/safe-math.ts","utils/cyberConnect/types.ts","Profile/Profile.tsx","utils/auctionHouse/helpers/schema.ts","utils/auctionHouse/cancelWithdrawOffer.ts","utils/auctionHouse/helpers/constants.ts","utils/grapeTools/constants.ts","utils/auctionHouse/helpers/accounts.ts","utils/grapeTools/ShareUrl.tsx","utils/grapeTools/utils.ts","utils/cyberConnect/helper.ts","utils/grapeTools/WalletAddress.tsx","utils/auctionHouse/helpers/various.ts","utils/cache.tsx","utils/web3/program-address.tsx","utils/web3/name-service.tsx","utils/web3/name-auctioning.tsx","utils/name-service.tsx","utils/grapeTools/RegexTextField.jsx","App.less","Profile/OffersView.tsx","components/static/GrapeIcon.tsx","utils/auctionHouse/withdrawOffer.ts","Profile/SocialView.tsx","Preview/Preview.tsx","utils/auctionHouse/sellNowListing.ts","Profile/FeedView.tsx","utils/auctionHouse/cancelOffer.ts","utils/grapeTools/mintverification.ts","Preview/ItemOffers.tsx","utils/auctionHouse/submitOffer.ts","utils/auctionHouse/acceptOffer.ts","utils/auctionHouse/cancelListing.ts","utils/auctionHouse/buyNowListing.ts","utils/auctionHouse/depositInGrapeVine.ts","utils/auctionHouse/createDAOProposal.ts"],"names":["SolCurrencyIcon","props","d","id","FeaturedView","FEATURED_DAO_ARRAY","map","featured","key","Card","sx","borderRadius","mb","CardActionArea","component","Link","to","GRAPE_PROFILE","address","CardMedia","image","img","alt","title","maxHeight","background","m","p","CardContent","Typography","gutterBottom","variant","color","text","src","style","opacity","position","marginTop","marginBottom","padding","top","left","width","CardActions","Grid","container","direction","justifyContent","alignContent","pr","ButtonGroup","Button","size","href","daourl","target","url","trimAddress","getParam","param","URLSearchParams","window","location","search","get","require","Search","styled","theme","border","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","breakpoints","up","SearchIconWrapper","height","pointerEvents","display","alignItems","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","Header","open_menu","React","anchorEl","Boolean","newinputpkvalue","setNewInputPKValue","navigate","useNavigate","useLocation","pathname","useSnackbar","enqueueSnackbar","Toolbar","Box","flexGrow","NavLink","className","Container","onSubmit","event","preventDefault","length","ValidateAddress","replace","placeholder","inputProps","onChange","e","value","useConfirmDialogStore","set","message","undefined","close","ConfirmDialog","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","IconButton","onClick","Close","DialogContent","DialogActions","createTheme","typography","fontFamily","join","mode","default","paper","Copyright","align","DashboardContent","useState","setOpen","network","WalletAdapterNetwork","Mainnet","endpoint","FREE_RPC_ENDPOINT","wallets","useMemo","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","ThemeProvider","grapeTheme","ConnectionProvider","WalletProvider","autoConnect","flex","CssBaseline","AppBar","toggleDrawer","mt","path","element","Profile","index","Preview","NotFound","overflow","Paper","item","Dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","endPoint","querySchemas","operationName","query","variables","namespace","followingFirst","followingAfter","followerFirst","followerAfter","fromAddr","toAddr","request","a","data","fetch","method","cache","headers","referrerPolicy","body","JSON","stringify","response","json","handleQuery","followListInfoQuery","schema","resp","identity","searchUserInfoQuery","TokenAmount","wei","decimals","isWei","_decimals","this","BigNumber","exponentiatedBy","multipliedBy","dividedBy","vaule","toFormat","isInteger","toFixed","isNaN","isZero","Network","Table","borderBottom","expand","other","transform","duration","shortest","GalleryItem","collectionitem","mint","wallet","account","parsed","info","loading","setLoading","collectionmeta","setCollectionMeta","getCollectionData","PublicKey","meta_primer","buf","Buffer","from","meta_final","decodeMetadata","uri","res","metadata","console","log","getCollectionMeta","Promise","all","useEffect","interval","setTimeout","clearInterval","GRAPE_PREVIEW","srcSet","name","TabPanel","children","role","hidden","SpeedDial","bottom","right","MainMenu","pubkey","publicKey","useWallet","toBase58","disablePadding","primary","disabled","TabActiveContext","createContext","activeTab","setActiveTab","at","TabActiveProvider","initialActiveKey","Provider","MainPanel","thisPublicKey","closeSnackbar","wallet_collection","walletCollection","wallet_collection_meta","walletCollectionMeta","finalCollection","final_collection","page","rowsperpage","tabvalue","setTabValue","a11yProps","xs","sm","md","lg","xl","minHeight","scrollButtons","newValue","icon","smUp","fontSize","label","smDown","minWidth","slice","collectionInfo","listed","count","Math","ceil","defaultPage","showFirstButton","showLastButton","type","selectedstate","GroupGalleryList","collection","setCollectionMetaFinal","ggoconnection","Connection","GRAPE_RPC_ENDPOINT","useConnection","connection","featuredObj","setFeaturedObj","profilePictureUrl","setProfilePicutureUrl","hasProfilePicture","setHasProfilePicture","solanaDomain","setSolanaDomain","isFollowing","setIsFollowing","loadCount","setLoadCount","loadingFollowState","setLoadingFollowState","followListInfo","setFollowListInfo","setSearchAddrInfo","solanaProvider","NAME_SPACE","NETWORK","SOLANA","cyberConnect","CyberConnect","env","Env","PRODUCTION","chain","Blockchain","provider","chainRef","solana","SOLANA_MAINNET_CHAIN_REF","signingMessageEntity","initFollowListInfo","fetchSearchAddrInfo","followWalletConnect","followAddress","connect","catch","error","getFollowStatus","followWalletDisconnect","disconnect","fetchProfilePicture","getProfilePicture","isAvailable","img_url","fetchSolanaDomain","findDisplayName","domain","MD_PUBKEY","start","mintsPDAs","Array","mintarr","mint_address","findProgramAddress","toBuffer","pda","push","getMultipleAccountsInfo","metavalue","etfm","socialconnection","connections","followStatus","loops","x","tmpcollectionmeta","concat","i","finalmeta","parse","Fragment","rowSpacing","pb","pl","mr","diameter","seed","jsNumberForAddress","addr","trim","hasextlink","hascopy","permalink","fontsize","textTransform","pt","followingCount","followerCount","ProfileView","gallery","setCollection","setPubkey","handlekey","useParams","useSearchParams","searchParams","urlParams","fetchWalletCollection","jsonrpc","params","programId","encoding","commitment","resultValues","result","tokenAmount","amount","getWalletGallery","CollectionProfile","ml","MetadataKey","Creator","args","verified","share","TokenStandard","NonFungible","FungibleAsset","Fungible","NonFungibleEdition","Collection","Data","symbol","sellerFeeBasisPoints","creators","CreateMetadataArgs","instruction","isMutable","UpdateMetadataArgs","updateAuthority","primarySaleHappened","CreateMasterEditionArgs","maxSupply","Metadata","editionNonce","edition","masterEdition","tokenStandard","MetadataV1","METADATA_SCHEMA","Map","kind","fields","METADATA_REPLACE","RegExp","buffer","deserializeUnchecked","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","convertSolVal","sol","cancelWithdrawOffer","offerAmount","buyerWalletKey","mintOwner","tokenSize","auctionHouseKey","web3","AUCTION_HOUSE_ADDRESS","mintKey","loadAuctionHouseProgram","ENV_AH","anchorProgram","auctionHouse","auctionHouseObj","sellerWalletKey","getAuctionHouseBuyerEscrow","escrow","getTokenAmount","treasuryMint","escrow_amount","escrowSolAmount","BN","getPriceWithMantissa","buyPriceAdjusted","tokenSizeAdjusted","getAtaForMint","tokenAccountKey","getAuctionHouseTradeState","tradeState","signers","cancel","accounts","tokenAccount","tokenMint","authority","auctionHouseFeeAccount","tokenProgram","TOKEN_PROGRAM_ID","instructions","withdrawAmmount","amountAdjusted","escrowPaymentAccount","bump","isNative","equals","WRAPPED_SOL_MINT","ata","Keypair","generate","instruction2","withdraw","receiptAccount","systemProgram","SystemProgram","rent","SYSVAR_RENT_PUBKEY","ataProgram","ASSOCIATED_TOKEN_PROGRAM_ID","GRAPE_AH_MEMO","state","ah","toString","toNumber","derivedMintPDA","derivedBuyerPDA","derivedOwnerPDA","transfer","fromPubkey","toPubkey","lamports","TransactionInstruction","keys","isSigner","isWritable","CANDY_MACHINE","AUCTION_HOUSE","TOKEN_ENTANGLER","ESCROW","A","B","FEE_PAYER","TREASURY","CANDY_MACHINE_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","FAIR_LAUNCH_PROGRAM_ID","AUCTION_HOUSE_PROGRAM_ID","TOKEN_ENTANGLEMENT_PROGRAM_ID","process","GRAPE_RPC_REFRESH","TOKEN_VERIFICATION_ADDRESS","TOKEN_VERIFICATION_NAME","TOKEN_VERIFICATION_AMOUNT","TOKEN_REALM_ID","TOKEN_REALM_PROGRAM_ID","OTHER_MARKETPLACES","logo","previewUrl","deserializeAccount","accountInfo","AccountLayout","owner","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","isFrozen","isNativeOption","rentExemptReserve","closeAuthorityOption","closeAuthority","buyer","anchor","getMetadata","getAuctionHouseProgramAsSigner","buyPrice","toArrayLike","walletKeyPair","customRpcUrl","solConnection","clusterApiUrl","walletWrapper","preflightCommitment","fetchIdl","idl","getTokenAccountBalance","token","uiAmount","pow","getBalance","BootstrapDialog","ShareSocialURL","shareUrl","PaperProps","borderTop","onCopy","navigator","subject","round","quote","MetadataCategory","MasterEditionV1","supply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV2","EditionMarker","ledger","editionOffset","indexOffset","floor","Error","positionInBitsetFromRight","mask","Edition","parent","EditionV1","removeDuplicate","arr","filter","user","self","findIndex","t","Alert","forwardRef","ref","elevation","timeAgo","blockTime","prettydate","moment","unix","format","timeago","Date","diff","asDays","hoursago","asHours","minutesAgo","asMinutes","asSeconds","substring","end","ValidateCurve","isOnCurve","MakeLinkableAddress","isDNS","stri_addr","open_snackbar","setSnackbarState","handleCopyClick","handleCloseSnackbar","reason","ClipboardAction","autoHideDuration","severity","PermalinkAction","price","Token","getMintInfo","mintInfo","mantissa","CachePrefix","hashCode","s","h","imul","charCodeAt","asyncCache","AsyncStorage","getItem","cached","stringified","setItem","Sha256","resolve","ethers","utils","sha256","isBuffer","Uint8Array","byteOffset","byteLength","createProgramAddress","seeds","alloc","forEach","TypeError","hash","is_on_curve","publicKeyBytes","toArray","nonce","seedsWithNonce","naclLowLevel","nacl","lowlevel","r","gf","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","pow2523","neq25519","I","b","c","pack25519","crypto_verify_32","getHashedName","input","HASH_PREFIX","getNameAccountKey","hashed_name","nameClass","nameParent","NAME_PROGRAM_ID","nameAccountKey","getHandleAndRegistryKey","verifiedPubkey","hashedVerifiedPubkey","TWITTER_VERIFICATION_AUTHORITY","TWITTER_ROOT_PARENT_REGISTRY_KEY","reverseRegistryKey","ReverseTwitterRegistryState","retrieve","reverseRegistryState","twitterHandle","twitterRegistryKey","PROGRAM_ID","findOwnedNameAccountsForUser","userAccount","filters","memcmp","offset","bytes","getProgramAccounts","performReverseLookupBatch","nameAccounts","centralState","reverseLookupAccounts","nameAccount","hashedReverseLookup","reverseLookupAccount","NameRegistryState","retrieveBatch","names","nameLength","receiver","allNames","domainsAddresses","sort","localeCompare","reverse","RegexTextField","regex","rest","handleChange","useCallback","currentTarget","defaultProps","parseFloat","formatBlockTime","date","epoch","time","date_str","toLocaleDateString","toLocaleString","OffersView","offers","setOffers","myoffers","setMyOffers","listings","setListings","ahbalance","setAHBalance","ahloading","setAHLoading","sendTransaction","refresh","setRefresh","setCounter","limit","setMaxPage","setBeforeSignature","alertwithdrawopen","setAlertWithdrawOpen","handleAlertWithdrawClose","handleCancelWithdrawOffer","getTokenLargestAccounts","tokenKey","getAccountInfo","mintAccountInfo","mintAccountInfoDs","transactionInstr","instructionsArray","flat","transaction","Transaction","add","signedTransaction","cnfrmkey","action","persist","confirmTransaction","eskey","anchorOrigin","vertical","horizontal","handleWithdrawOffer","allmints","offeramount","withdrawOffer","cnt","cancelOffer","getOffers","getEscrowBalance","getSignaturesForAddress","offerResults","cancelStateResults","allListingResults","listingResults","mintArrayPDA","escrow_cache","exists","cntr","sellerTradeStateArr","signatures","signature","getParsedTransactions","getTransactionAccountInputs2","err","getTransactionAccountInputs","feePayer","accountKeys","progAddress","meta","logMessages","escrow_found","escrow_found_index","amount_on_escrow","preTokenBalances","memo","memo_arr","memo_str","memo_instances","match","submemo","mx","init","indexOf","fin","substr","memo_item","memo_json","status","sale_state_exists","sellPrice","ownerHasMint","wvalue","tradeStatePublicKey","buyeraddress","isowner","timestamp","thisTokenOwner","sellerTradeState","j","tradeStates","alrvalue","autoFocus","red","GrapeIcon","transferAuthority","SocialView","fetchMore","followers","pageInfo","endCursor","followings","list","ProfilePicture","followitem","loadingpicture","setLoadingPicture","setProfilePictureUrl","countRef","useRef","current","bgcolor","avatar","random","SocialItem","followitemkey","ens","secondary","columns","hasNextPage","StyledTable","GrapeVerified","verifiedState","setVerifiedState","verifiedPK","setVerificationPK","collectionImage","setCollectionImage","collectionName","setCollectionName","grape_verified","collectionAddress","meta_response","verified_creator","UPDATE_AUTHORITIES","placement","SocialLikes","isLiked","setIsLiked","loadingLikedState","setLoadingLikedState","getLikeStatus","likeWalletConnect","tofollow","ConnectionType","LIKE","likeWalletDisconnect","liked","SocialFlags","isFlagged","setIsFlagged","loadingFlaggedState","setLoadingFlaggedState","getFlagStatus","flagWalletConnect","REPORT","flagWalletDisconnect","reported","GalleryItemMeta","collectionrawdata","refreshOwner","setRefreshOwner","loadingOwner","setLoadingOwner","mintAta","setMintATA","tokenOwners","setTokenOwners","grape_member_balance","setGrapeMemberBalance","sol_portfolio_balance","setSolPortfolioBalance","grape_weighted_score","setGrapeWeightedScore","grape_governance_balance","setGrapeGovernanceBalance","grape_offer_threshhold","grape_whitelisted","open_creator_collapse","setOpenCreatorCollapse","open_attribute_collapse","setOpenAttributeCollapse","currentImage","setCurrentImage","isViewerOpen","setIsViewerOpen","collectionItemImages","open_meta","setOpenMeta","open_description","setOpenDescription","open_traits","setOpenTraits","openImageViewer","salePrice","getGovernanceBalance","realmId","governingTokenMint","governingTokenOwner","getTokenOwnerRecordForRealm","ownerRecords","fetchBalances","GetTokenOwner","tokenAddress","GetLargestTokenAccounts","fetchTokenAccountData","flargestTokenAccounts","fetchSOLBalance","towner","getMintOwner","tokenowner","fetchTokenAccountOwnerHoldings","sol_rsp","portfolio_rsp","governance_rsp","governingTokenDepositAmount","final_weighted_score","balance","total_grape","weighted_score","HandleSetAvatar","createSetProfilePictureTransaction","SearchForMint","open_dialog","setOpenPKDialog","setInputMintValue","handleCloseDialog","setMintPubkey","autoComplete","margin","ownerPublicKey","property","content","currentIndex","disableScroll","closeOnClickOutside","in","timeout","unmountOnExit","description","boxShadow","attributes","textAlign","paddingBottom","paddingTop","colSpan","trait_type","itemType","category","rarity","spec","class","seller_fee_basis_points","properties","background_color","createdAt","updatedAt","deactivated","fontWeight","filteredMarket","PreviewView","history","PreviewItem","thismint","setCollectionRaw","sellNowListing","walletPublicKey","weightedScore","daoPublicKey","thisWalletPublicKey","programAsSigner","programAsSignerBump","tradeBump","freeTradeState1","freeTradeBump","freeSellerTradeState","sell","score","FeedView","setFeatured","setFeaturedMeta","mergedfeaturedmeta","setMergedFeaturedMeta","statestruct","FeaturedItem","finalMeta","setFinalMeta","itemraw","itemmeta","getCollectionItemData","getMeta","final_meta","backgroundSize","getFeatured","ahListings","ahListingsMints","forSaleDate","offer","solvalue","merr","SellNowVotePrompt","setOpenSPDialog","sell_now_amount","setSellNowAmount","setDaoPublicKey","grapeWeightedScore","createDAOProposal","transactionInstr2","instructionsArray2","snackaction","setRefreshOffers","SellNowPrompt","OfferPrompt","setOpenOPDialog","offer_amount","setOfferAmount","sol_balance","solBalance","submitOffer","borderColor","String","highestOffer","ItemOffers","open_offers_collapse","setOpenOffersCollapse","refreshOffers","useAnchorWallet","alertopen","setAlertOpen","alertbuynowopen","setAlertBuyNowOpen","final_offeramount","setFinalOfferAmount","final_offerfrom","setFinalOfferFrom","setSalePrice","saleDate","setSaleDate","saleTimeAgo","setSaleTimeAgo","setHighestOffer","openOffers","setOpenOffers","handleAlertBuyNowClose","handleAlertClose","setAcceptPrompt","offerfrom","handleAcceptOffer","buyerAddress","acceptOffer","signedTransaction2","handleCancelListing","cancelListing","handleCancelOffer","GetSignatureOffers","spkey","until","slimit","offerResultsCancelled","existSaleCancelAction","open_offers","forSale","found","cancelled","mintOwnerPK","prettyForSaleDate","handleBuyNow","buyerPublicKey","escrowAmount","buyNowListing","depositAmount","depositInGrapeVine","ItemTools","RefreshOffers","escrowBump","results","paymentAccount","buyerTradeState","buy","createApproveInstruction","createRevokeInstruction","deposit","k","buyPriceAdjusted2","tokenSizeAdjusted2","tokenAccountKey2","freeTradeState","freeTradeStateBump","metadataObj","metadataDecoded","remainingAccounts","tMint","auctionHouseTreasury","seller","sellerPaymentReceiptAccount","buyerReceiptTokenAccount","executeSale","voteType","VoteType","SINGLE_CHOICE","options","useDenyOption","realmPk","governancePk","descriptionLink","governanceAuthority","proposalIndex","getGovernanceProgramVersion","programVersion","getTokenOwnerRecordAddress","tokenOwnerRecordPk","withCreateProposal","proposalPk","instructionData","createInstructionData","withInsertTransaction"],"mappings":"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","file":"static/js/main.6c498d9b.chunk.js","sourcesContent":["import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function SolCurrencyIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n            <path d=\"M12,24 C10.3434343,24 8.78787879,23.6868695 7.33333333,23.0606069 C5.8989899,22.4545463 4.62626263,21.6060614 3.51515152,20.5151524 C2.42424242,19.4040412 1.56565657,18.121213 0.939393939,16.6666675 C0.313131313,15.2121221 -2.8035935e-16,13.6565665 -2.8035935e-16,12 C-2.8035935e-16,10.3434352 0.313131313,8.78787963 0.939393939,7.33333418 C1.56565657,5.87878872 2.42424242,4.60606145 3.51515152,3.51515236 C4.62626263,2.40404125 5.8989899,1.54545539 7.33333333,0.939394781 C8.78787879,0.313132155 10.3434343,-3.73812466e-16 12,-3.73812466e-16 C13.6565657,-3.73812466e-16 15.2121212,0.313132155 16.6666667,0.939394781 C18.1212121,1.54545539 19.3939394,2.40404125 20.4848485,3.51515236 C21.5959596,4.60606145 22.4545455,5.87878872 23.0606061,7.33333418 C23.6868687,8.78787963 24,10.3434352 24,12 C24,13.6565665 23.6868687,15.2121221 23.0606061,16.6666675 C22.4545455,18.121213 21.5959596,19.4040412 20.4848485,20.5151524 C19.3939394,21.6060614 18.1212121,22.4545463 16.6666667,23.0606069 C15.2121212,23.6868695 13.6565657,24 12,24 Z M12,21.9090918 C13.3737374,21.9090918 14.6565657,21.6565665 15.8484848,21.151516 C17.040404,20.6262635 18.0909091,19.9090918 19,19.0000008 C19.9090909,18.0909099 20.6161616,17.0404049 21.1212121,15.8484857 C21.6464646,14.6565665 21.9090909,13.3737382 21.9090909,12.0000008 C21.9090909,10.6262635 21.6464646,9.34343519 21.1212121,8.15151599 C20.6161616,6.9595968 19.9090909,5.90909175 19,5.00000084 C18.0909091,4.09090993 17.040404,3.38383923 15.8484848,2.87878872 C14.6565657,2.3535362 13.3737374,2.09090993 12,2.09090993 C10.6262626,2.09090993 9.34343434,2.3535362 8.15151515,2.87878872 C6.95959596,3.38383923 5.90909091,4.09090993 5,5.00000084 C4.09090909,5.90909175 3.37373737,6.9595968 2.84848485,8.15151599 C2.34343434,9.34343519 2.09090909,10.6262635 2.09090909,12.0000008 C2.09090909,13.3737382 2.34343434,14.6565665 2.84848485,15.8484857 C3.37373737,17.0404049 4.09090909,18.0909099 5,19.0000008 C5.90909091,19.9090918 6.95959596,20.6262635 8.15151515,21.151516 C9.34343434,21.6565665 10.6262626,21.9090918 12,21.9090918 Z M12,20.4545463 C10.8282828,20.4545463 9.72727273,20.2424251 8.6969697,19.8181827 C7.68686869,19.3737382 6.78787879,18.7676776 6,18.0000008 C5.23232323,17.2121221 4.62626263,16.3131322 4.18181818,15.3030311 C3.75757576,14.2727281 3.54545455,13.171718 3.54545455,12.0000008 C3.54545455,10.8282837 3.75757576,9.73737458 4.18181818,8.72727357 C4.62626263,7.69697054 5.23232323,6.79798064 6,6.03030387 C6.78787879,5.24242508 7.68686869,4.63636448 8.6969697,4.21212205 C9.72727273,3.76767761 10.8282828,3.54545539 12,3.54545539 C13.1717172,3.54545539 14.2727273,3.76767761 15.3030303,4.21212205 C16.3333333,4.63636448 17.2323232,5.24242508 18,6.03030387 C18.7878788,6.79798064 19.3939394,7.69697054 19.8181818,8.72727357 C20.2626263,9.73737458 20.4848485,10.8282837 20.4848485,12.0000008 C20.4848485,13.171718 20.2626263,14.2727281 19.8181818,15.3030311 C19.3939394,16.3131322 18.7878788,17.2121221 18,18.0000008 C17.2323232,18.7676776 16.3333333,19.3737382 15.3030303,19.8181827 C14.2727273,20.2424251 13.1717172,20.4545463 12,20.4545463 Z M12,18.3636372 C13.1919192,18.3636372 14.2626263,18.0808089 15.2121212,17.5151524 C16.1818182,16.9494958 16.9494949,16.181819 17.5151515,15.2121221 C18.1010101,14.2424251 18.3939394,13.171718 18.3939394,12.0000008 C18.3939394,10.8080816 18.1010101,9.73737458 17.5151515,8.78787963 C16.9494949,7.81818266 16.1818182,7.05050589 15.2121212,6.48484933 C14.2626263,5.91919276 13.1919192,5.63636448 12,5.63636448 C10.8282828,5.63636448 9.75757576,5.91919276 8.78787879,6.48484933 C7.81818182,7.05050589 7.05050505,7.81818266 6.48484848,8.78787963 C5.91919192,9.73737458 5.63636364,10.8080816 5.63636364,12.0000008 C5.63636364,13.171718 5.91919192,14.2424251 6.48484848,15.2121221 C7.05050505,16.181819 7.81818182,16.9494958 8.78787879,17.5151524 C9.75757576,18.0808089 10.8282828,18.3636372 12,18.3636372 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\n\nimport { GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\n\nimport {\n    Grid,\n    Button,\n    ButtonGroup,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Typography,\n} from '@mui/material';\n\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { CardActionArea } from '@mui/material';\n\nexport function FeaturedView(props: any) {\n    \n  return (\n        <>\n            {FEATURED_DAO_ARRAY.map((featured: any, key: number) => (\n            <Card sx={{borderRadius:'26px',mb:2}}>\n                <CardActionArea\n                    component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                >\n                    \n                    <CardMedia\n                        component=\"img\"\n                        image={featured.img}\n                        alt={featured.title}\n                            sx={{\n                                maxHeight: '250',\n                                background: 'rgba(0, 0, 0, 1)',\n                                m:0,\n                                p:0,\n                            }} \n                        />\n                        \n                    <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {featured.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.primary\">\n                        {featured.text}\n                    </Typography>\n                        <img\n                            src={featured.img}\n                            alt=\"\"\n                            style={{\n                                opacity: '0.025',\n                                position: 'absolute',\n                                marginTop:2,\n                                marginBottom:2,\n                                padding:1,\n                                top:'-20%',\n                                left:'-20%',\n                                width:'150%'\n                            }}\n                        />\n                    </CardContent>\n                \n                </CardActionArea>\n                <CardActions>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justifyContent='flex-end'\n                        alignContent='flex-end'\n                        sx={{\n                            p:1,pr:1.25\n                        }}\n                    >\n                        <ButtonGroup variant=\"text\">\n                            <Button size=\"small\" \n                                component=\"a\" href={`${featured.daourl}`} target=\"_blank\"\n                                sx={{borderRadius:'24px', color:'white'}}>\n                                View DAO</Button>\n                            <Button size=\"small\"    \n                                component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                                sx={{borderRadius:'24px', color:'white'}}\n                            >View Collection</Button>\n                            <ShareSocialURL url={'https://grape.art'+GRAPE_PROFILE+featured.address} title={'Grape Profile | '+trimAddress(featured.address,4)} />\n                        </ButtonGroup>\n                    </Grid>\n                </CardActions>\n            </Card> \n            ))}\n        </>\n  );\n}","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\nimport { useNavigate } from 'react-router';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nimport { useSnackbar } from 'notistack';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\n\nimport {\n    MenuItem,\n    Menu,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    InputBase,\n    Paper,\n    Container,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\n\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport IconButton from '@mui/material/IconButton';\n\nimport DashboardOutlinedIcon from '@mui/icons-material/DashboardOutlined';\n\nimport { ValidateAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nexport interface State extends SnackbarOrigin {\n    open: boolean;\n}\n\nfunction getParam(param: string) {\n    //return new URLSearchParams(document.location.search).get(param);\n    return new URLSearchParams(window.location.search).get(param);\n}\n\ninterface HeaderProps{\n    children?:React.ReactNode;\n}\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    border: '1px solid rgba(255,255,255,0.25)',\n    borderRadius: '17px',\n    backgroundColor: alpha(theme.palette.common.white, 0.015),\n    '&:hover': {\n        border: '1px solid rgba(255,255,255,0.75)',\n        backgroundColor: alpha(theme.palette.common.white, 0.1),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    marginTop: 5,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        width: 'auto',\n        marginLeft: 5,\n    },\n  }));\n\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: alpha(theme.palette.common.white, 0.25),\n  }));\n  \n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '100%',\n      },\n    },\n  }));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function Header(props: any) {\n    const { open_menu } = props;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom','Solflare']);\n    const [open_wallet, setOpenWallet] = React.useState(false);\n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isWalletOpen = Boolean(anchorEl);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const currPath = location.pathname;\n    const searchParams = new URLSearchParams(location.search);\n    //const currPath = location?.pathname ?? \"\";\n    const { enqueueSnackbar } = useSnackbar();\n\n    const routes = [\n        { name: \"Home\", path: \"/\" },\n        // { name: \"Servers\", path: \"/servers\" },\n\n        // { name: \"Settings\", path: \"/settings\" }\n    ]\n    \n    /*\n    const toggleDrawer = () => {\n        //setOpenDrawer(!open);\n        open = !open;//setOpen(!open);\n    };\n    */\n\n    \n    /*\n    async function connect() {\n        let wallet = new Wallet();\n        wallet.onChange = (wallet) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n\n    async function connectPhantom() {\n        let wallet = new PhantomWallet();\n        wallet.onChange = (wallet: any) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function connectSolflare() {\n        let wallet = new SolflareWallet();\n        wallet.onChange = () => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function onWalletConnect(wallet: any){\n        if(wallet){\n            let session = await wallet.signMessage('$GRAPE');\n            if(session){\n                setSession(session);\n            }\n        }\n    }\n    */\n    \n\n    //Menu\n    const menuId = 'primary-wallet-account-menu';\n    const menuWalletId = 'primary-fullwallet-account-menu';\n\n    const handleProfileMenuOpen = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        // this.props.parentCallback(\"Data from child\");\n    };\n\n    const handleWalletConnectClickOpen = (type: string, callback: any) => {\n        /*\n        switch(type) {\n            case \"sollet\":\n                connect();\n                break;\n            case \"phantom\":\n                connectPhantom();\n                break;\n            case \"solflare\":\n                connectSolflare();\n                break;\n            default:\n                break;\n        }\n        */\n       \n        callback && callback();\n    };\n\n    const handleCloseWallet = (value: any) => {\n        setOpenWallet(false);\n\n    };\n\n    function SimpleDialog(props: any) {\n        const { onClose, selectedValue, open_wallet } = props;\n\n        const handleCloseWallet = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: any) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleCloseWallet} aria-labelledby=\"simple-dialog-title\" open={open_wallet}>\n                <DialogTitle id=\"simple-dialog-title\">Select Wallet</DialogTitle>\n                <List>\n                    {providers.map((provider) => (\n                        <ListItem button onClick={() => handleListItemClick(provider)} key={provider}>\n                            <ListItemText primary={provider} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n\n    const handleClickSnackbar = () => {\n        enqueueSnackbar(`Copied...`,{ variant: 'success' });\n        \n        handleMenuClose();\n        //setSnackbarState(true);\n    };\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n\n        if (newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue)){\n            navigate({\n                pathname: '/profile/'+newinputpkvalue\n            },\n                { replace: true }\n            );\n            \n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n\n\n    return (\n\n        <Toolbar\n            color=\"inherit\"\n            sx={{\n                pr: '24px', // keep right padding when drawer closed\n                background: 'none'\n            }}\n            >\n\n            <Box display='flex' flexGrow={1}>\n                <Button\n                    variant=\"text\"\n                    component={NavLink} color=\"inherit\" to=\"/\"\n                >\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        display='flex'\n                    >\n                        <img src=\"/grape_white_logo.svg\" height=\"40px\" width=\"137px\" className=\"header-logo\" alt=\"Grape\" />\n                    </Typography>\n                </Button>\n                    <Container\n                        component=\"form\"\n                        onSubmit={handlePublicKeySubmit}\n                        sx={{background:'none'}}\n                        >\n                        <Search\n                            sx={{height:'40px'}}\n                        >\n                            <SearchIconWrapper>\n                                <SearchIcon />\n                            </SearchIconWrapper>\n                            <StyledInputBase\n                                sx={{height:'40px', width:'100%'}}\n                                placeholder=\"Search Wallet\"\n                                inputProps={{ 'aria-label': 'search' }}\n                                onChange={(e) => setNewInputPKValue(e.target.value)}\n                            />\n                        </Search>\n                    </Container>\n\n\n            </Box>\n            <div>\n                <WalletModalProvider>\n                    <WalletMultiButton />\n                </WalletModalProvider>\n            </div>\n        </Toolbar>\n        \n    );\n}\n\nexport default Header;\n","import React from 'react';\n// material ui\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\n// zustand\nimport create from 'zustand';\n\ntype ConfirmDialogStore = {\n  message: string;\n  onSubmit?: () => void;\n  close: () => void;\n};\n\nconst useConfirmDialogStore = create<ConfirmDialogStore>((set) => ({\n  message: '',\n  onSubmit: undefined,\n  close: () => set({ onSubmit: undefined }),\n}));\n\nexport const confirmDialog = (message: string, onSubmit: () => void) => {\n  useConfirmDialogStore.setState({\n    message,\n    onSubmit,\n  });\n};\n\nconst ConfirmDialog = () => {\n  const { message, onSubmit, close } = useConfirmDialogStore();\n  //return new Promise((res) => {\n  return (\n    <Dialog open={Boolean(onSubmit)} onClose={close} maxWidth=\"sm\" fullWidth>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <DialogTitle>Confirm the action</DialogTitle>\n        <IconButton onClick={close}>\n          <Close />\n        </IconButton>\n      </Box>\n      <DialogContent>\n        <Typography>{message}</Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={close}>\n          Cancel\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            if (onSubmit) {\n              onSubmit();\n            }\n            close();\n          }}\n        >\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n  //});\n};\n\nexport default ConfirmDialog;","import { createTheme, makeStyles } from '@mui/material/styles';\n// paper: #12151B\n\n//background: rgb(18,21,28);\n//background: linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%);\n\n \n//background: #F0F2F0;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #000C40, #F0F2F0);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #000C40, #F0F2F0); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n//background: #141E30;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #243B55, #141E30);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n\nconst themeInstance = {\n  background: 'linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%)',//'#0A1D30',\n\n};\n\nconst theme = createTheme({\n//const useStyles = makeStyles((theme: typeof themeInstance) => ({\n  typography: {\n    fontFamily: [\n      'GrapeFont',\n      'sans-serif',\n    ].join(','),\n  },  \n  palette: {\n    mode: \"dark\",\n    background: {\n      default: '#0A1D30',\n      paper: \"#000000\"\n    },\n  }\n});\n\nexport default theme;","import React, { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n//import { LogView } from \"./Log/Log\";\nimport { ProfileView } from \"./Profile/Profile\";\nimport { PreviewView } from \"./Preview/Preview\";\nimport { FeaturedView } from \"./Featured/Featured\";\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\n\nimport {\n  Box,\n  Grid,\n  Paper,\n  Container,\n  Typography,\n  AppBar,\n} from '@mui/material';\n\nimport Header from './Header/Header';\nimport { SnackbarProvider } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Connection, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\nimport { Helmet } from 'react-helmet';\n\nimport { useSnackbar } from 'notistack';\n\nimport ConfirmDialog from './components/ConfirmDialog/ConfirmDialog';\n\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n\n/*\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n*/\n\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    //getTorusWallet,\n  } from '@solana/wallet-adapter-wallets';\n\n\n//import { mainListItems, secondaryListItems } from './components/SidebarList/SidebarList';\nimport grapeTheme from  './utils/config/theme'\nimport \"./App.less\";\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from './utils/grapeTools/constants';\n\nfunction Copyright(props: any) {\n  return (\n    <Typography sx={{background:'transparent'}} variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      Powered by Grape on Solana\n      {/*\n      <Link color=\"inherit\" href=\"https://verify.grapes.network\">\n        Grape Network | Dashboard v1.1.5\n      </Link>\n      */}\n    </Typography>\n  );\n}\n\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  //const endpoint =  useMemo(() => clusterApiUrl(network), [network]); // GRAPE_RPC_ENDPOINT;\n  //const endpoint =  GRAPE_RPC_ENDPOINT;\n  const endpoint =  FREE_RPC_ENDPOINT;\n  const wallets = useMemo(() => [\n  \n    getPhantomWallet(),\n    getSolflareWallet(),\n    getSlopeWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n    getLedgerWallet(),\n  \n    //getTorusWallet({\n    //  options: { clientId: 'BCX2hQWDez2_qJhmSuQC7DXD4OG0VfGEFjCZfLar2EA5NvKyudCxOOlOcQ4YZbPGQhdwLonSXZr3i_siIJVhtwI' }\n    //}),\n  /*  \n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n  */  \n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n  \n  /*\n  const { enqueueSnackbar } = useSnackbar();\n  const onError = useCallback(\n      (error) => {\n          enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n          console.error(error);\n      },\n      [enqueueSnackbar]\n  );\n  */\n\n  return (\n    <>\n        <ThemeProvider theme={grapeTheme}>\n            <div className=\"grape-gradient-background\">\n            <SnackbarProvider>\n                <ConnectionProvider endpoint={endpoint}>\n                    <WalletProvider wallets={wallets} autoConnect>\n                    \n                    <Grid \n                        //color={grapeTheme.palette.primary.light}\n                        sx={{ \n                          flex: 1\n                        }}>\n                        <CssBaseline />\n                        <Router>\n                        <AppBar position=\"fixed\" color=\"primary\" style={{ background: 'rgba(0,0,0,0.5)' }}>\n                            <Header\n                                open={open} \n                                toggleDrawer={toggleDrawer}\n                            />\n                        </AppBar>\n                            \n                          <Grid\n                            component=\"main\"\n                            sx={{\n                                mt: 6,\n                                display: 'flex',\n                                flexGrow: 1\n                            }}\n                            >\n                            <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4}}>\n                                <ConfirmDialog />\n                                <Routes>\n\n                                  <Route path=\"/featured\" element={<FeaturedView/>} />\n\n                                  <Route path=\"/\" element={<ProfileView/>}>\n                                    <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  <Route index element={<ProfileView/>} />\n                                  \n                                  <Route path=\"profile/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n\n                                  <Route path=\"collection/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  \n                                  <Route path=\"preview/*\" element={<PreviewView />}>\n                                      <Route path=\":handlekey\" element={<PreviewView />} />\n                                  </Route>\n\n                                  <Route path=\"*\" element={<NotFound />} />\n                                </Routes>\n                                \n                                <Copyright sx={{ mt: 4 }} />\n                            </Container>\n                          </Grid>\n                        </Router>\n                    </Grid>\n                    \n                    </WalletProvider>\n                </ConnectionProvider>\n            </SnackbarProvider>\n            </div>\n        </ThemeProvider>\n    </>\n  );\n}\n\nexport const NotFound = () => {\n  return (\n    <div style={{ height: \"100%\", overflow: \"auto\" }}>\n      <Paper className=\"grape-paper-background\">\n        <Grid \n          className=\"grape-paper\" \n          container\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\">\n          <Grid item>\n            <Typography \n              align=\"center\"\n              variant=\"h3\">\n              {'No Grapes Here...'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n  </div>\n  )\n}\n\n//export const Dashboard: FC<{ children: ReactNode }> = ({ children }) => {\nexport default function Dashboard() {\n  return <DashboardContent />;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n  FollowListInfoArgs,\n  SearchUserInfoArgs,\n  FollowListInfoResp,\n  SearchUserInfoResp,\n} from \"./types\";\n\nconst endPoint = \"https://api.cybertino.io/connect/\";\n\nexport const followListInfoSchema = ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  return {\n    operationName: \"followListInfo\",\n    query: `query followListInfo($address: String!, $namespace: String, $network: Network, $followingFirst: Int, $followingAfter: String, $followerFirst: Int, $followerAfter: String) {\n      identity(address: $address, network: $network) {\n        followingCount(namespace: $namespace)\n        followerCount(namespace: $namespace)\n        like: followingCount(namespace: $namespace, type: LIKE)\n        liked: followerCount(namespace: $namespace, type: LIKE)\n        report: followingCount(namespace: $namespace, type: REPORT)\n        reported: followerCount(namespace: $namespace, type: REPORT)\n        followings(namespace: $namespace, first: $followingFirst, after: $followingAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n        followers(namespace: $namespace, first: $followerFirst, after: $followerAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n      }\n    }`,\n    variables: {\n      address,\n      namespace,\n      network,\n      followingFirst,\n      followingAfter,\n      followerFirst,\n      followerAfter,\n    },\n  };\n};\n\nexport const searchUserInfoSchema = ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  return {\n    operationName: \"searchUserInfo\",\n    query: `query searchUserInfo($fromAddr: String!, $toAddr: String!, $network: Network) {\n      identity(address: $toAddr, network: $network) {\n        address\n        ens\n        avatar\n      }\n      connections(fromAddr: $fromAddr, toAddrList: [$toAddr], network: $network) {\n        type\n        followStatus {\n          isFollowed\n          isFollowing\n        }\n      }\n    }`,\n    variables: {\n      fromAddr,\n      toAddr,\n      network,\n    },\n  };\n};\n\nexport const querySchemas = {\n  followListInfo: followListInfoSchema,\n  searchUserInfo: searchUserInfoSchema,\n};\n\nexport const request = async (url = \"\", data = {}) => {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    referrerPolicy: \"no-referrer\",\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const handleQuery = (\n  data: {\n    query: string;\n    variables: object;\n    operationName: string;\n  },\n  url: string\n) => {\n  return request(url, data);\n};\n\nexport const followListInfoQuery = async ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  const schema = querySchemas[\"followListInfo\"]({\n    address,\n    namespace,\n    network,\n    followingFirst,\n    followingAfter,\n    followerFirst,\n    followerAfter,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data?.identity as FollowListInfoResp) || null;\n};\n\nexport const searchUserInfoQuery = async ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  const schema = querySchemas[\"searchUserInfo\"]({\n    fromAddr,\n    toAddr,\n    network,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data as SearchUserInfoResp) || null;\n};","import BigNumber from 'bignumber.js'\n\n// https://github.com/MikeMcl/bignumber.js\n// https://blog.csdn.net/shenxianhui1995/article/details/103985434\nexport class TokenAmount {\n  public wei: BigNumber\n\n  public decimals: number\n  public _decimals: BigNumber\n\n  constructor(wei: number | string | BigNumber, decimals: number = 0, isWei = true) {\n    this.decimals = decimals\n    this._decimals = new BigNumber(10).exponentiatedBy(decimals)\n\n    if (isWei) {\n      this.wei = new BigNumber(wei)\n    } else {\n      this.wei = new BigNumber(wei).multipliedBy(this._decimals)\n    }\n  }\n\n  toEther() {\n    return this.wei.dividedBy(this._decimals)\n  }\n\n  toWei() {\n    return this.wei\n  }\n\n  format() {\n    const vaule = this.wei.dividedBy(this._decimals)\n    return vaule.toFormat(vaule.isInteger() ? 0 : this.decimals)\n  }\n\n  fixed() {\n    return this.wei.dividedBy(this._decimals).toFixed(this.decimals)\n  }\n\n  isNullOrZero() {\n    return this.wei.isNaN() || this.wei.isZero()\n  }\n  // + plus\n  // - minus\n  // × multipliedBy\n  // ÷ dividedBy\n}\n\n// >\nexport function gt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThan(valueB)\n}\n\n// >=\nexport function gte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThanOrEqualTo(valueB)\n}\n\n// <\nexport function lt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThan(valueB)\n}\n\n// <=\nexport function lte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThanOrEqualTo(valueB)\n}\n\nexport function isNullOrZero(value: string | number) {\n  const amount = new BigNumber(value)\n\n  return amount.isNaN() || amount.isZero()\n}\n","export interface FollowListInfoArgs {\n    address: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n    alias?: string,\n    followingFirst?: number;\n    followingAfter?: string;\n    followerFirst?: number;\n    followerAfter?: string;\n  }\n  \n  export interface SearchUserInfoArgs {\n    fromAddr: string;\n    toAddr: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n  }\n  \n  export interface BasicUserInfo {\n    ens: string;\n    address: string;\n    avatar: string;\n  }\n  \n  export interface FollowListInfo {\n    pageInfo: {\n      endCursor: string;\n      hasNextPage: boolean;\n    };\n    list: BasicUserInfo[];\n  }\n  \n  export interface FollowListInfoResp {\n    followingCount: number;\n    followerCount: number;\n    followings: FollowListInfo;\n    followers: FollowListInfo;\n    like?: string,\n    liked?: string,\n    report?: string,\n    reported?: string, \n  }\n  \n  export interface SearchUserInfoResp {\n    connections: {\n      followStatus: {\n        isFollowing: boolean;\n        isFollowed: boolean;\n      };\n      type: ConnectionType;\n    }[];\n    identity: {\n      ens: string;\n      address: string;\n      avatar: string;\n    };\n  }\n  \n  export enum Network {\n    ETH = 'ETH',\n    SOLANA = 'SOLANA',\n  }","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { findDisplayName } from '../utils/name-service';\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { formatAddress, removeDuplicate, isValidAddr } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    Avatar,\n    Table,\n    Card,\n    CardActionArea,\n    CardMedia,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    Tab,\n    Tabs,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Paper,\n    Container,\n    ListItemIcon,\n    SpeedDial,\n    Hidden,\n    ButtonGroup,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport CollectionsOutlinedIcon from '@mui/icons-material/CollectionsOutlined';\nimport RssFeedOutlinedIcon from '@mui/icons-material/RssFeedOutlined';\nimport GavelOutlinedIcon from '@mui/icons-material/GavelOutlined';\nimport ArrowCircleLeftOutlinedIcon from '@mui/icons-material/ArrowCircleLeftOutlined';\nimport ArrowCircleRightOutlinedIcon from '@mui/icons-material/ArrowCircleRightOutlined';\nimport ExploreIcon from '@mui/icons-material/Explore';\nimport MessageIcon from '@mui/icons-material/Message';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport HomeIcon from '@mui/icons-material/Home';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport FeedView from './FeedView';\nimport OffersView from './OffersView';\nimport SocialView from './SocialView';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nconst PubKeyDialog = (props: any) => {\n    const [open_dialog, setOpenPKDialog] = React.useState(false);\n    const [walletPKId, setInputPKValue] = React.useState('');\n\n    const handleClickOpenDialog = () => {\n        setOpenPKDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setInputPKValue(\"\");\n        setOpenPKDialog(false);\n    };\n\n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        if ((walletPKId.length >= 32) && \n            (walletPKId.length <= 44)){\n            // WalletId is base58 validate the type too later on\n            props.setPubkey(walletPKId);\n            handleCloseDialog();\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID WALLET ID\");\n        }\n    }\n    \n    return (\n      <React.Fragment>\n        <Button size=\"small\" variant=\"text\" value=\"Search with WalletID\" onClick={handleClickOpenDialog}\n            sx={{borderRadius:'24px'}}\n        >\n            <SearchIcon />\n        </Button> \n         \n        <BootstrapDialog \n            fullWidth={true}\n            maxWidth={\"md\"}\n            open={open_dialog} onClose={handleCloseDialog}\n            PaperProps={{\n                style: {\n                    background: '#13151C',\n                    border: '1px solid rgba(255,255,255,0.05)',\n                    borderTop: '1px solid rgba(255,255,255,0.1)',\n                    borderRadius: '20px'\n                }\n                }}\n            >\n            <DialogTitle>\n                Public Key\n            </DialogTitle>\n            <form onSubmit={HandlePKSubmit}>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    autoComplete='off'\n                    margin=\"dense\"\n                    id=\"collection_wallet_id\"\n                    label=\"Paste a public key\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                    value={walletPKId}\n                    onChange={(e) => setInputPKValue(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDialog}>Cancel</Button>\n                <Button \n                    type=\"submit\"\n                    variant=\"text\" \n                    title=\"GO\">\n                        Go\n                </Button>\n            </DialogActions>\n            </form>\n        </BootstrapDialog>   \n      </React.Fragment>\n    );\n}\n\n\n/*\n  LAYOUT:\n    0 ['key', 'u8'] (Uninitialized=0, MetadataV1=4)\n    1 ['updateAuthority', 'pubkey'], (ignore)\n    33 ['mint', 'pubkey'], (filter)\n    65 ['data', Data],\n    72+0 name (borsh string)\n    72+x symbol (borsh string)\n    72+x uri (borsh string)\n */\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nconst GalleryItem = (props: any) => {\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account.data.parsed.info.mint || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n\n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let meta_primer = collectionitem;\n                let buf = Buffer.from(meta_primer.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                    \n                        <Grid \n                            container \n                            alignItems=\"center\"\n                            justifyContent=\"center\">\n                            <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                <ListItemButton\n                                    component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                    sx={{\n                                        width:'100%',\n                                        borderRadius:'25px',\n                                        p: '2px'\n                                    }}\n                                >\n                                    <img\n                                        src={`${image}`}\n                                        srcSet={`${image}`}\n                                        alt={collectionmeta.collectionmeta?.name}\n                                        //onClick={ () => openImageViewer(0) }\n                                        loading=\"lazy\"\n                                        height=\"auto\"\n                                        style={{\n                                            width:'100%',\n                                            borderRadius:'24px'\n                                        }}\n                                    />\n                                </ListItemButton>\n                            </Grid>\n                            <Grid item sx={{display:'flex'}}>\n                                <Box\n                                    sx={{p:1}}\n                                >\n                                    <Typography variant=\"caption\">\n                                        {collectionmeta.collectionmeta?.name}\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                );\n            }\n            //}\n        }\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n    <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n    >\n        {value === index && (\n        <Box sx={{ p: 0 }}>\n            <Typography>{children}</Typography>\n        </Box>\n        )}\n    </div>\n    );\n}\n\nconst StyledSpeedDial = styled(SpeedDial)(({ theme }) => ({\n    position: 'absolute',\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n      top: theme.spacing(2),\n      left: theme.spacing(2),\n    },\n  }));\n  \nconst MainMenu = (props:any) => {\n    const pubkey = props.pubkey;\n    const { publicKey } = useWallet();\n\n    if ((publicKey) && (publicKey.toBase58() != pubkey)){\n        return (\n        \n            <List\n                sx={{m:1,p:1}}\n            >\n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Back Home\"\n                        component={Link} to={`${GRAPE_PROFILE}${publicKey.toBase58()}`}\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <HomeIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Home\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Visit Solana Explorer\"\n                        component=\"a\" href={`https://explorer.solana.com/address/${publicKey.toBase58()}`} target=\"_blank\"\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <ExploreIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Explore\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Messaging coming soon\"\n                        disabled\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <MessageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={`Messages`} />\n                    </ListItemButton>\n                </ListItem>\n            </List>\n    \n        );\n    } else{\n        return (<></>);\n    }\n    \n    /*\n    const actions = [\n        { icon: <HomeIcon />, name: 'Home' },\n        { icon: <ExploreIcon />, name: 'Explore' },\n        { icon: <MessageIcon />, name: 'Messages *coming soon' },\n    ];\n    \n    return (\n        <Box sx={{ height: 230, transform: 'translateZ(0px)', flexGrow: 1 }}>\n            <SpeedDial\n                ariaLabel=\"Menu\"\n                sx={{ position: 'absolute', bottom: 16, left: 16 }}\n                icon={<SpeedDialIcon sx={{color:'white'}} />}\n                direction='down'\n            >\n                {actions.map((action) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                />\n                ))}\n            </SpeedDial>\n        </Box>\n    )\n    */\n}\n\nexport const TabActiveContext = React.createContext({\n    activeTab: 0,\n    setActiveTab: (at:number) => {}\n});\n\nexport const TabActiveProvider = ({ children, initialActiveKey }) => {\n    const [activeTab, setActiveTab] = useState(initialActiveKey);\n    return (\n      <TabActiveContext.Provider\n        value={{\n          activeTab,\n          setActiveTab\n        }}\n      >\n        {children}\n      </TabActiveContext.Provider>\n    );\n};\n\nconst MainPanel = (props: any) => {\n    const [loading, setLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.thisPublicKey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const finalCollection = props.final_collection || null;\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    //const { activeTab, setActiveTab } = React.useContext(TabActiveContext);\n    const [tabvalue, setTabValue] = React.useState(props?.activeTab || 0);\n    \n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n        setTabValue(newValue);\n    };\n\n    function a11yProps(index: number) {\n        return {\n            id: `grapeart-tab-${index}`,\n            'aria-controls': `grapeart-tabpanel-${index}`,\n        };\n    }\n\n    React.useEffect(() => { \n        if (tabvalue!=props?.activeTab){\n            setTabValue(props?.activeTab);\n        }\n    }, [props?.activeTab]);\n    \n    if(loading){\n        return (\n            <Grid item xs='auto' sm='auto' md='auto' lg='auto' xl='auto'>\n                <Box\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    sx={{\n                    }} \n                >\n                    <CircularProgress />\n                </Box>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid item xs={12} sm={6} md={8} lg={9} xl={9}>\n                <Container\n                    sx={{\n                        minHeight: '225px',\n                        m:0,\n                        p:0,\n                    }} \n                >\n                    <TabActiveProvider initialActiveKey=\"0\">   \n                        <Tabs \n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            value={tabvalue} \n                            onChange={handleTabChange} \n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.6)',\n                                borderRadius: '17px',\n                                mb:1,\n                            }} \n                        >\n                            <Tab icon={<Hidden smUp><CollectionsOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Collection</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(0)} />\n                            <Tab icon={<Hidden smUp><RssFeedOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Feed</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(1)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleLeftOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Followers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(2)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleRightOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Following</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(3)} />\n                            {/*<Tab label=\"Bids\" sx={{color:'white'}} {...a11yProps(4)} />*/}\n                            <Tab icon={<Hidden smUp><GavelOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Offers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(5)} />\n                            <Tab icon={<Hidden smUp><SolCurrencyIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Selling</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(6)} />\n                        </Tabs>\n                    \n                    \n                        <TabPanel value={tabvalue} index={1}>\n                            <Box\n                                sx={{\n                                    borderRadius: '17px',\n                                }} \n                                > \n                                <FeedView />\n                            </Box>\n                        </TabPanel>\n\n                        <TabPanel value={tabvalue} index={0}>\n                            {finalCollection && finalCollection.length > 0 && (\n                                <Box\n                                    sx={{\n                                        background: 'rgba(0, 0, 0, 0.6)',\n                                        borderRadius: '17px',\n                                        p:4\n                                    }} \n                                > \n                                    <Grid container \n                                        spacing={{ xs: 2, md: 3 }} \n                                        justifyContent=\"center\"\n                                        alignItems=\"center\">\n                                        \n                                        { (finalCollection.length > 0 ? finalCollection\n                                            .slice((page - 1) * rowsperpage, page * rowsperpage):finalCollection)\n                                            .map((collectionInfo: any, key: any) => {\n                                                return(\n                                                    <Grid item xs={12} sm={12} md={4} lg={3} key={key}>\n                                                        <Box\n                                                            sx={{\n                                                                background: 'rgba(0, 0, 0, 0.6)',\n                                                                borderRadius: '26px',\n                                                                minWidth: '175px'\n                                                            }} \n                                                        >\n                                                        <GalleryItem collectionitem={collectionInfo} listed={true} count={key} />\n                                                        \n                                                        </Box>\n                                                    </Grid>\n                                                        \n                                                )\n                                            }\n                                        )}\n                                    </Grid>\n                                    \n                                    { walletCollection.length > rowsperpage && \n                                        <Grid container justifyContent=\"flex-end\" sx={{ mt: 2 }}>\n                                            <Stack spacing={2}>\n                                                <Pagination\n                                                    count={(Math.ceil(walletCollection.length / rowsperpage))}\n                                                    page={page}\n                                                    //onChange={handlePageChange}\n                                                    defaultPage={1}\n                                                    color=\"primary\"\n                                                    size=\"small\"\n                                                    showFirstButton\n                                                    showLastButton\n                                                    //classes={{ ul: classes.paginator }}\n                                                    />\n                                            </Stack>\n                                        </Grid>\n                                    }\n                                </Box>\n                                \n                            )}\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={2}>\n                            <SocialView pubkey={thisPublicKey} type={0} />\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={3}>\n                            <SocialView pubkey={thisPublicKey} type={1} />\n                        </TabPanel>\n\n                        <TabPanel value={tabvalue} index={4}>\n                            <OffersView selectedstate={1} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                        <TabPanel value={tabvalue} index={5}>\n                            <OffersView selectedstate={2} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                    </TabActiveProvider>\n                </Container>\n            </Grid>\n        );\n    }\n}\n\nconst GroupGalleryList = (props: any) => {\n    const [expanded_collection, setExpandedCollection] = React.useState(true);\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const rpclimit = 100;\n    //const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection)\n    //const [wallet_collection] = React.useState(props.collection.collection);\n    const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection);\n    const [wallet_collection_meta, setCollectionMeta] = React.useState(null);\n    const [final_collection, setCollectionMetaFinal] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [featuredObj, setFeaturedObj] = React.useState(null);\n    const [profilePictureUrl, setProfilePicutureUrl] = React.useState(null);\n    const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n    //const { setActiveTab } = React.useContext(TabActiveContext);\n    const [activeTab, setActiveTab] = React.useState(0);\n\n    let ref = React.createRef()\n\n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!pubkey) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:pubkey,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n  \n\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: NAME_SPACE,\n            network: NETWORK,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaDomain:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(followAddress, solanaDomain)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n\n        let promise = await cyberConnect.disconnect(followAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        getCollectionMeta(value);\n        //count={(Math.ceil(wallet_collection.length / rowsperpage))}\n    };\n\n    const handleExpandCollectionClick = () => {\n        setExpandedCollection(!expanded_collection);\n    };\n    \n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n        setProfilePicutureUrl(img_url);\n        setHasProfilePicture(isAvailable);\n    }\n\n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            if (domain[0] !== pubkey)\n                setSolanaDomain(domain[0]);\n        }\n    }\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    const getCollectionData = async (start:number) => {\n        try {\n            let mintsPDAs = new Array();\n            //console.log(\"RPClim: \"+rpclimit);\n            //console.log(\"Paging \"+(rpclimit*(start))+\" - \"+(rpclimit*(start+1)));\n            \n            let mintarr = wallet_collection.slice(rpclimit*(start), rpclimit*(start+1)).map((value:any, index:number) => {\n                //console.log(\"mint: \"+JSON.stringify(value.account.data.parsed.info.mint));\n                return value.account.data.parsed.info.mint;\n            });\n\n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            //console.log(\"pushed pdas: \"+JSON.stringify(mintsPDAs));\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            //console.log(\"returned: \"+JSON.stringify(metadata));\n\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                //console.log(\"Metaplex val: \"+JSON.stringify(metavalue));\n                if (metavalue?.data){\n                    try{\n                        let meta_primer = metavalue;\n                        let buf = Buffer.from(metavalue.data);\n                        let meta_final = decodeMetadata(buf);\n                        //console.log(\"meta_final: \"+JSON.stringify(meta_final));\n                    }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n                } else{\n                    console.log(\"Something not right...\");\n                }\n                //setCollectionRaw({meta_final,meta_primer});\n                \n                /*\n                const finalmetadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                */\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFollowStatus = async () => {\n        if (publicKey){\n            if (pubkey){\n                setLoadingFollowState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), pubkey);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFollowState(false);\n            }\n        }\n    }\n\n    const getCollectionMeta = async (start:number) => {\n        if (!loading){\n            setLoading(true);\n            // see how many loops we will need to conduct\n            let wallletlength = wallet_collection.length;\n            \n            let loops = (Math.ceil(wallet_collection.length/rpclimit));\n            let collectionmeta: any[] = [];\n\n            console.log(\"lps: \"+loops);\n            for (var x=0;x<loops;x++){\n                //const interval = setTimeout(() => {\n                    let tmpcollectionmeta = await getCollectionData(x);\n                    //collectionmeta.push(tmpcollectionmeta);\n                    collectionmeta = collectionmeta.concat(tmpcollectionmeta);\n                //}, 200);\n                \n            }\n            \n            console.log(collectionmeta.length + ' vs '+wallet_collection.length);\n\n            setLoadCount(loadCount+1);\n            setCollectionMeta({collectionmeta});\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                //console.log(i+\": \"+JSON.stringify(collectionmeta[i])+\" --- with --- \"+JSON.stringify(wallet_collection[i]));\n                if (collectionmeta[i]){\n                    collectionmeta[i][\"wallet\"] = wallet_collection[i];\n                }\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                setCollectionMetaFinal(finalmeta);\n            }catch(e){}\n            // setCollectionMetaFinal(); // add both arrays\n\n            setLoading(false);\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            if (ValidateAddress(pubkey)){\n                if (loadCount < 1){\n                    fetchProfilePicture();\n                    getCollectionMeta(0);\n                    fetchSolanaDomain();\n                    getFollowStatus();\n                    initFollowListInfo();\n\n                    // get featured\n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === pubkey){\n                            setFeaturedObj(featured);\n                        }\n                    }\n                }\n            }\n        }\n    }, [pubkey]);\n\n    if (loading){\n        return <>Loading...</>\n    } else {\n\n        return (\n            <React.Fragment>\n                <Box>\n                        <Box\n                            sx={{\n                                mb:4,\n                                mt:3,\n                                //background:'green'\n                            }}\n                        >\n                            {featuredObj && (\n                                <Card sx={{borderRadius:'26px',mb:2}}>\n\n                                        {/*component={Link} to={`${GRAPE_PROFILE}${featuredObj.address}`}*/}\n                                    <CardActionArea\n                                        component=\"a\" href={`${featuredObj.daourl}`} target=\"_blank\"\n                                    >\n                                        <CardMedia\n                                        component=\"img\"\n                                        image={featuredObj.img}\n                                        alt={featuredObj.title}\n                                            sx={{\n                                                maxHeight: '250',\n                                                background: 'rgba(0, 0, 0, 1)',\n                                                m:0,\n                                                p:0,\n                                            }} \n                                        />\n                                    </CardActionArea>\n                                </Card>\n                            )}\n\n                                <Grid \n                                    container \n                                    spacing={2}\n                                    rowSpacing={3}\n                                    >    \n                                    <Grid item xs={12} sm={6} md={4} lg={3} xl={3}\n                                    sx={{\n                                    }}\n                                    >\n                                    \n                                    <Box\n                                        className='grape-profile-background'\n                                        sx={{\n                                            //background: 'rgba(0, 0, 0, 0.6)',\n                                            position:'relative',\n                                            borderRadius: '17px',\n                                            minHeight: '225px',\n                                            minWidth:'250px',\n                                            overflow:'hidden',\n                                            pb:3,\n                                            pl:4,\n                                            pr:4\n                                        }} \n                                    >\n                                    {featuredObj ? (  \n                                        <img\n                                            src={featuredObj.img}\n                                            alt=\"\"\n                                            style={{\n                                                opacity: '0.21',\n                                                position: 'absolute',\n                                                marginTop:2,\n                                                marginBottom:2,\n                                                padding:1,\n                                                top:'-5%',\n                                                right:'-5%',\n                                                height:'110%'\n                                            }}\n                                        />\n                                    )\n                                    :(\n                                        <>\n                                            {(hasProfilePicture && profilePictureUrl) &&\n                                                <img\n                                                    src={profilePictureUrl}\n                                                    alt=\"\"\n                                                    style={{\n                                                        opacity: '0.03',\n                                                        position: 'absolute',\n                                                        marginTop:2,\n                                                        marginBottom:2,\n                                                        padding:1,\n                                                        top:'-5%',\n                                                        left:'-50%',\n                                                        height:'200%'\n                                                    }}\n                                                />\n                                            }\n                                        </>\n                                        )\n                                    }\n                                    \n                                        \n                                        <List\n                                            sx={{ \n                                                width: '100%',\n                                                pl: 2,\n                                                pr: 2,\n                                                pb: 2\n                                            }}\n                                            component=\"nav\"\n                                            >       \n                                            <ListItemText>\n\n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"flex-end\"\n                                                justifyContent=\"flex-end\"\n                                            >\n                                                <Grid item>\n                                                    <Box sx={{ mt:-1.5,mr:-6 }}>\n                                                        \n                                                        <Typography component=\"div\" variant=\"caption\" alignItems=\"flex-end\" justifyContent=\"flex-end\">\n\n                                                            <ButtonGroup variant=\"text\">\n                                                            <ShareSocialURL url={'https://grape.art'+GRAPE_PROFILE+pubkey} title={'Grape Profile | '+trimAddress(pubkey,4)} />\n\n                                                            {publicKey && publicKey.toBase58() !== pubkey &&\n                                                                <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                {loadingFollowState ?\n                                                                    <>\n                                                                        <CircularProgress sx={{p:'14px',m:-0.75}} />\n                                                                    </>\n                                                                :\n                                                                    <>\n                                                                        {isFollowing ?  \n                                                                            <Tooltip title={`Unfollow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletDisconnect(pubkey)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonRemoveOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                            :\n                                                                            <Tooltip title={`Follow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletConnect(pubkey, solanaDomain)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonAddOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                                </Typography>\n                                                            }\n                                                            </ButtonGroup>\n                                                        </Typography>\n                                                    </Box>\n                                                </Grid>  \n                                            </Grid>  \n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\"\n                                                sx={{mt:2}}\n                                            >\n                                                <Grid item>\n                                                {(hasProfilePicture && profilePictureUrl) ?\n                                                    <Avatar sx={{ width: 100, height: 100 }} alt=\"Profile\" src={profilePictureUrl} />\n                                                :\n                                                    <Jazzicon diameter={100} seed={jsNumberForAddress(pubkey)} />\n                                                }\n                                                </Grid>\n                                                <Grid item\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\"\n                                                >\n                                                    <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>\n                                                        {solanaDomain && solanaDomain.length > 0 ?\n                                                        \n                                                            <Button sx={{borderRadius:'17px'}} size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${pubkey}`} target=\"_blank\">\n                                                                <Grid \n                                                                container \n                                                                direction=\"column\"\n                                                                alignItems=\"center\"\n                                                                justifyContent=\"center\"\n                                                                >\n                                                                    <Grid item>\n                                                                        <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}><strong>{solanaDomain}</strong></Typography>\n                                                                    </Grid>\n                                                                    <Grid item sx={{mt:-1.5}}>\n                                                                        <Typography gutterBottom variant=\"caption\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>{trimAddress(pubkey,4)}</Typography>\n                                                                    </Grid>\n                                                                </Grid>\n                                                            </Button>\n                                                        :\n                                                            <MakeLinkableAddress addr={pubkey} trim={5} hasextlink={true} hascopy={false} permalink={false} fontsize={14} />\n                                                        }\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item sx={{mt:1}}>\n                                                    \n                                                    {followListInfo && \n                                                        <>\n                                                            \n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(2)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followingCount}</strong>&nbsp;  \n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Following</Typography>&nbsp; \n                                                                </Button>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(3)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followerCount}</strong>&nbsp;\n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Followers</Typography>\n                                                                </Button>\n                                                            </Typography>\n                                                        </>\n                                                    }\n                                                    \n                                                    { final_collection && final_collection.length > 0 && (\n                                                        <>\n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" color=\"#aaa\"  sx={{ flexGrow: 1, mt:3 }}>\n                                                                <strong>{final_collection.length}</strong> items collected\n                                                            </Typography>\n                                                        </>\n                                                    )}\n                                                    \n                                                    \n                                                            \n                                                </Grid>\n                                            </Grid>\n                                            </ListItemText>\n                                        </List>\n                                    </Box>\n                                    <MainMenu pubkey={pubkey} />\n                                </Grid>\n                                \n                                <MainPanel activeTab={activeTab} thisPublicKey={pubkey} final_collection={final_collection} wallet_collection={wallet_collection} wallet_collection_meta={wallet_collection_meta} />\n                            </Grid>\n                        </Box>\n                        \n                    </Box>\n            </React.Fragment>\n        );\n    }\n    \n}\n\n/*\nexport async function performReverseLookup(\n    connection: Connection,\n    nameAccount: PublicKey\n  ): Promise<string> {\n    const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n    const reverseLookupAccount = await getNameAccountKey(\n      hashedReverseLookup,\n      centralState\n    );\n  \n    const name = await NameRegistryState.retrieve(\n      connection,\n      reverseLookupAccount\n    );\n    if (!name.data) {\n      throw new Error(\"Could not retrieve name data\");\n    }\n    const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n    return name.data.slice(4, 4 + nameLength).toString();\n  }\n*/\n\nexport async function findOwnedNameAccountsForUser(\n    connection: Connection,\n    userAccount: PublicKey\n  ): Promise<PublicKey[]> {\n    const NAME_PROGRAM_ID = new PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\n    const filters = [\n      {\n        memcmp: {\n          offset: 32,\n          bytes: userAccount.toBase58(),\n        },\n      },\n    ];\n    const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n      filters,\n    });\n    \n    return accounts.map((a) => a.pubkey);    \n}\n\n\nexport function ProfileView(this: any, props: any) {\n    //const [provider, setProvider] = React.useState(getParam('provider'));\n    const [gallery, setGallery] = React.useState(null);\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    //const [success, setSuccess] = React.useState(false);\n    const [pubkey, setPubkey] = React.useState(null);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const { publicKey } = useWallet();\n    //const { handlekey } = useParams() as { \n    //    handlekey: string;\n    //}\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || handlekey;\n\n    // console.log(\"SP: \"+searchParams.get(\"pkey\") + \" vs \"+ urlParams);\n\n    const navigate = useNavigate();\n    //const location = useLocation();\n    \n    const fetchWalletCollection = async () => { \n        /*\n        TokenAccountsFilter\n        const response = await connection.getTokenAccountsByOwner(\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" }\n        );*/\n\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            pubkey,\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d4\",\n        };\n        \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n    \n        const json = await response.json();\n        try{\n            //const err = json?.result || true;\n            //if (!err){\n            //    return [];\n            //} else{\n                const resultValues = json.result.value\n                \n                let walletCollection = new Array();\n                let wallet = resultValues && resultValues?.map((collectionInfo: any) => {\n                    (+collectionInfo.account.data.parsed.info.tokenAmount.amount >= 1) &&\n                        (+collectionInfo.account.data.parsed.info.tokenAmount.decimals === 0) && \n                            walletCollection.push(collectionInfo);    \n                            return collectionInfo;\n                });\n                return walletCollection;\n            //}\n        } catch(e){console.log(e);}\n        return [];\n    };\n\n    const getWalletGallery = async () => {\n        if (!loading){\n            setLoading(true);\n            setLoadCount(loadCount+1);\n\n            let [collection] = await Promise.all([fetchWalletCollection()]);\n            setCollection({\n                collection\n            })\n            setLoading(false);\n        } else{\n            return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <CircularProgress color=\"inherit\" />\n                    </Grid>\n                </Grid>\n            )\n        }\n    }\n\n    const CollectionProfile = (props: any) => {\n        return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <Box\n                            height=\"100%\"\n                            display=\"flex-grow\"\n                            justifyContent=\"center\"\n                        >\n                            <GroupGalleryList gallery={gallery} collection={collection} pubkey={pubkey} setPubkey={setPubkey} />\n                        </Box>\n                    </Grid>\n                </Grid>\n        );\n    }\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n\n        if (newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue)){\n            //console.log(\"SETTER MANUAL: \"+newinputpkvalue);\n            //setNewInputPKValue(null);\n\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            \n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            if (ValidateAddress(pubkey)){\n                //props.history.push({\n                navigate({\n                    pathname: GRAPE_PROFILE+pubkey\n                },\n                    { replace: true }\n                );\n                console.log(loadCount);\n                getWalletGallery();\n            } else {\n                navigate({\n                    pathname: '/profile'\n                },\n                    { replace: true }\n                );\n            } \n        }\n    }, [pubkey]);\n    \n    /*\n    if (urlParams)\n        console.log(\"urlParams: \"+urlParams+ \" v: \"+ValidateAddress(urlParams));\n    if (pubkey)\n        console.log(\"pubkey: \"+pubkey);\n    if (publicKey)\n        console.log(\"publicKey: \"+publicKey.toBase58());\n    */\n\n    if ((urlParams) && (pubkey)){\n        //console.log(\"SETTER 1: \"+urlParams + \" vs \"+ pubkey);\n        if (urlParams != pubkey){\n            if (ValidateAddress(urlParams))\n                setPubkey(urlParams);\n        }\n    } else if ((publicKey)&&(!pubkey)&&(!urlParams)){\n        //console.log(\"SETTER 3: \"+urlParams + \" vs \"+ pubkey);\n        if (ValidateAddress(publicKey.toBase58()))\n            setPubkey(publicKey.toBase58());\n    }\n\n    if (!pubkey){\n        if (urlParams?.length > 0){\n            //console.log(\"SETTER 2: \"+urlParams);\n            if (ValidateAddress(urlParams))\n                setPubkey(urlParams);\n        } else{\n            // should we set the pubkey here based on if you are logged in?\n            if (publicKey){\n                if (ValidateAddress(publicKey.toBase58())){\n                    if (publicKey !== pubkey){\n                        if (!urlParams){\n                            navigate({\n                                pathname: GRAPE_PROFILE+publicKey.toBase58()\n                            },\n                                { replace: true }\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        if(((!gallery) && (!collection))||\n            (loading)){\n            return (\n            <React.Fragment>\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                        <Grid \n                            container \n                            direction=\"column\" \n                            spacing={2} \n                            alignItems=\"center\"\n                            rowSpacing={8}\n                        >\n                            <Grid \n                                item xs={12}\n                            >\n                                <Box\n                                    height=\"100%\"\n                                    display=\"flex\"\n                                    justifyContent=\"center\"\n                                >\n                                    <CircularProgress color=\"inherit\" />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                </Box>\n            </React.Fragment>\n            )\n        }\n    }\n    \n    return (\n        <React.Fragment>\n            <Box\n                sx={{\n                    mt: 2,\n                    \n                }}\n            >\n                <Box>  \n\n                        { pubkey && ValidateAddress(pubkey) ?\n                            <CollectionProfile />\n                        : \n                        <>\n                            <React.Fragment>\n                                <Box\n                                    sx={{ \n                                        p: 1, \n                                        mb: 3, \n                                        width: '100%',\n                                        background: '#13151C',\n                                        borderRadius: '24px'\n                                    }}\n                                > \n                                        <Grid \n                                            container \n                                            direction=\"column\" \n                                            spacing={2} \n                                            alignItems=\"center\"\n                                            rowSpacing={8}\n                                        >\n                                            \n                                            <Grid \n                                                item xs={12}\n                                            >\n                                                <Paper\n                                                    component=\"form\"\n                                                    onSubmit={handlePublicKeySubmit}\n                                                    sx={{ m:2, p: 1, display: 'flex', alignItems: 'center', borderRadius: '24px' }}\n                                                >\n                                                    <InputBase\n                                                        fullWidth\n                                                        sx={{ ml: 1, flex: 1 }}\n                                                        placeholder=\"Enter a wallet address\"\n                                                        inputProps={{ 'aria-label': 'wallet address' }}\n                                                        value={newinputpkvalue}\n                                                        onChange={(e) => setNewInputPKValue(e.target.value)}\n                                                    />\n                                                    <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n                                                        <SearchIcon />\n                                                    </IconButton>\n                                                </Paper>\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                            </React.Fragment>\n                        </>\n                        }\n\n                </Box>\n            </Box>\n        </React.Fragment>\n    );\n}\n","import { BinaryReader, BinaryWriter, deserializeUnchecked } from 'borsh';\nimport base58 from 'bs58';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\ntype StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: number;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: number;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\nexport class TokenStandard {\n  NonFungible: number;\n  FungibleAsset: number;\n  Fungible: number;\n  NonFungibleEdition: number;\n\n  constructor(args: {\n    NonFungible: number;\n    FungibleAsset: number;\n    Fungible: number;\n    NonFungibleEdition: number;\n  }) {\n    this.NonFungible = args.NonFungible;\n    this.FungibleAsset = args.FungibleAsset;\n    this.Fungible = args.Fungible;\n    this.NonFungibleEdition = args.NonFungibleEdition;\n  }\n}\nexport class Collection {\n  verified: boolean;\n  key: StringPublicKey;\n\n  constructor(args: {\n    verified: boolean;\n    key: StringPublicKey;\n  }) {\n    this.verified = args.verified;\n    this.key = args.key;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\n\nexport class UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n  }\n}\n\nexport class CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n  edition?: StringPublicKey | null;\n  // set lazy\n  masterEdition?: StringPublicKey;\n  tokenStandard?: TokenStandard;\n  collection?: Collection;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n    //tokenStandard: TokenStandard | null;\n    collection: Collection | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce ?? null;\n    //this.tokenStandard = args.tokenStandard ?? null;\n    this.collection = args.collection ?? null;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', Data],\n        ['isMutable', 'u8'], // bool\n      ],\n    },\n  ],\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', { kind: 'option', type: Data }],\n        ['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n        ['primarySaleHappened', { kind: 'option', type: 'u8' }],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', 'pubkeyAsString'],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Collection,\n    {\n      kind: 'struct',\n      fields: [\n        ['verified', 'u8'], // bool\n        ['key', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TokenStandard,\n    {\n      kind: 'struct',\n      fields: [\n        ['NonFungible', 'u8'],\n        ['FungibleAsset', 'u8'],\n        ['Fungible', 'u8'],\n        ['NonFungibleEdition', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', 'pubkeyAsString'],\n        ['mint', 'pubkeyAsString'],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'], // bool\n        ['isMutable', 'u8'], // bool\n        ['editionNonce', { kind: 'option', type: 'u8' }],\n        ['tokenStandard', { kind: 'option', type: TokenStandard }],\n        ['collection', { kind: 'option', type: Collection }],\n      ],\n    },\n  ],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer,\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n  return metadata;\n};\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { getPriceWithMantissa } from './helpers/various';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\nexport async function cancelWithdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n    //START CANCEL\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    \n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    \n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    \n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    \n    const instructions = [instruction];\n    //END CANCEL\n\n    //START WITHDRAW\n    let withdrawAmmount = 0;\n    if (escrowSolAmount < offerAmount){\n      withdrawAmmount = escrowSolAmount;\n    } else {\n      withdrawAmmount = offerAmount;\n    }\n    const amountAdjusted = await getPriceWithMantissa(\n      withdrawAmmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerWalletKey,\n      anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    //const signers = isNative ? [] : [transferAuthority];\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction2 = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    instructions.push(instruction2);\n\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import { PublicKey } from '@solana/web3.js';\nimport 'dotenv/config.js';\n\nexport const CANDY_MACHINE = 'candy_machine';\nexport const AUCTION_HOUSE = 'auction_house';\nexport const TOKEN_ENTANGLER = 'token_entangler';\nexport const ESCROW = 'escrow';\nexport const A = 'A';\nexport const B = 'B';\nexport const FEE_PAYER = 'fee_payer';\nexport const TREASURY = 'treasury';\nexport const LAMPORT = 1000000000;\nexport const MAX_NAME_LENGTH = 32;\nexport const MAX_URI_LENGTH = 200;\nexport const MAX_SYMBOL_LENGTH = 10;\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\n\nexport const ARWEAVE_PAYMENT_WALLET = new PublicKey(\n  '6FKvsq4ydWFci6nGq9ckbjYMtnmaqAoatz5c9XWjiDuS',\n);\nexport const METAPLEX_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\nexport const CANDY_MACHINE_PROGRAM_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\nexport const FAIR_LAUNCH_PROGRAM_ID = new PublicKey(\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\n);\nexport const AUCTION_HOUSE_PROGRAM_ID = new PublicKey(\n  'hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk',\n);\nexport const TOKEN_ENTANGLEMENT_PROGRAM_ID = new PublicKey(\n  'qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd',\n);\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\nexport const GUMDROP_DISTRIBUTOR_ID = new PublicKey(\n  'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'\n);\nexport const GUMDROP_TEMPORAL_SIGNER = new PublicKey(\n  'MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV'\n);\n\nexport const CONFIG_ARRAY_START =\n  32 + // authority\n  4 +\n  6 + // uuid + u32 len\n  4 +\n  10 + // u32 len + symbol\n  2 + // seller fee basis points\n  1 +\n  4 +\n  5 * 34 + // optional + u32 len + actual vec\n  8 + //max supply\n  1 + //is mutable\n  1 + // retain authority\n  4; // max number of lines;\nexport const CONFIG_LINE_SIZE = 4 + 32 + 4 + 200;\n\nexport const CACHE_PATH = './.cache';\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const EXTENSION_PNG = '.png';\nexport const EXTENSION_JSON = '.json';\n\nexport const ENV_AH = \"mainnet-beta\";\n\nexport const AUCTION_HOUSE_ADDRESS = process.env.REACT_APP_API_AUCTION_HOUSE_ADDRESS || \"4w2BVBfV86NBm3ytL1AuHxToBV7Kx5YahdMRgyyYFoRj\";","\nexport const FREE_RPC_ENDPOINT = process.env.REACT_APP_API_FREE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\nexport const GRAPE_RPC_ENDPOINT = process.env.REACT_APP_API_GRAPE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\n\n//export const GRAPE_PREVIEW = '/preview/';\n//export const GRAPE_PROFILE = '/profile/';\n\nexport const GRAPE_PREVIEW = '/preview?pkey=';\nexport const GRAPE_PROFILE = '/profile?pkey=';\n\nexport const GRAPE_RPC_REFRESH = 25000;\nexport const GRAPE_TREASURY = 'GrapevviL94JZRiZwn2LjpWtmDacXU8QhAJvzpUMMFdL';\n\nexport const TOKEN_VERIFICATION_ADDRESS = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\nexport const TOKEN_VERIFICATION_NAME = 'Grape';\nexport const TOKEN_VERIFICATION_AMOUNT = 1000;\nexport const TOKEN_REALM_ID = 'By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip';\nexport const TOKEN_REALM_PROGRAM_ID = 'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw';\n\nexport const FEATURED_DAO_ARRAY = [{\n    address:'66pJhhESDjdeBBDdkKmxYYd7q6GUggYPWjxpMKNX39KV',\n    daourl:'https://realms.today/dao/Ukraine',\n    img:'/solana4ukraine.png',\n    title:'Solana for Ukraine',\n    text:'NFT Artists come together in the DAO made exlusively to help out Ukraine, all proceeds of these NFT\\'s will be donated to help the Ukrainian people'\n}]\n\nexport const OTHER_MARKETPLACES = new Array(\n    {\n        name: 'Magic Eden',\n        logo: 'https://magiceden.io/static/media/logo.ca418d75.svg',\n        //logo: 'https://magiceden.io/img/logo.png',\n        address: 'GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp',\n        previewUrl: 'https://www.magiceden.io/item-details/',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'SolanArt',\n        logo: 'https://solanart.io/static/media/logo.0054f7e7.png',\n        address: '3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK',\n        previewUrl: 'https://solanart.io/search/?token=',\n        url: 'https://solanart.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/favicon-32x32.png',\n        address: 'F4ghBzHFNgJxV4wEQDchU5i7n4XWWMBSaq7CuswGiVsr',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/favicon-32x32.png',\n        address: 'BweTPKW9QsWZTJnfbLz88ekKaWw7HrBJsStrduHryPgk',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Alph Art',\n        //logo: 'https://alpha.art/icon-root.svg',\n        logo: 'https://alpha.art/logo_192.png',\n        address: '4pUQS4Jo2dsfWzt3VgHXy3H6RYnEDd11oWPiaM2rdAPw',\n        previewUrl: 'https://alpha.art/t/',\n        url: 'https://www.alpha.art'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: '73tF8uN3BwVzUzwETv59WNAafuEBct2zTgYbYXLggQiU',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HHvnfyY7vNWhjeHqCVyMPr4UjDp3ptqu3QbuFoCkrm8r',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HznNaC2cz1iXMtHMG3HAgMH2xkrt2iTXfUKz6wwAAVPB',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'G6xptnrkj4bxg9H9ZyPzmAnNsGghSxZ7oBCL1KNKJUza',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: '7Ppgch9d4XRAygVNJP4bDkc7V6htYXGfghX4zzG9r4cH',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'EQEpTS8SiVPUxyqRgT2Jdx9dHEwbpcbSZ2sotiAUZ7i7',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'CPo76cw52gKMTyvCS9GpnnZfvmkQQxovLwQFxonZrCRU',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    }\n);","import {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  AccountInfo,\n} from '@solana/web3.js';\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  FAIR_LAUNCH_PROGRAM_ID,\n  AUCTION_HOUSE_PROGRAM_ID,\n  AUCTION_HOUSE,\n  FEE_PAYER,\n  TREASURY,\n  WRAPPED_SOL_MINT,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  TOKEN_ENTANGLER,\n  ESCROW,\n  B,\n  A,\n} from './constants';\nimport * as anchor from '@project-serum/anchor';\n//import { Wallet } from '@solana/wallet-adapter-react';\nimport fs from 'fs';\n//import { createConfigAccount } from './instructions';\nimport { web3 } from '@project-serum/anchor';\nimport log from 'loglevel';\nimport { AccountLayout, u64 } from '@solana/spl-token';\n\nexport type AccountAndPubkey = {\n  pubkey: string;\n  account: AccountInfo<Buffer>;\n};\n\nexport type StringPublicKey = string;\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: anchor.BN;\n    symbol: string;\n    sellerFeeBasisPoints: number;\n    isMutable: boolean;\n    maxSupply: anchor.BN;\n    retainAuthority: boolean;\n    creators: {\n      address: PublicKey;\n      verified: boolean;\n      share: number;\n    }[];\n  },\n) {\n  const configAccount = Keypair.generate();\n  const uuid = uuidFromConfigPubkey(configAccount.publicKey);\n\n  if (!configData.creators || configData.creators.length === 0) {\n    throw new Error(`Invalid config, there must be at least one creator.`);\n  }\n\n  const totalShare = (configData.creators || []).reduce(\n    (acc, curr) => acc + curr.share,\n    0,\n  );\n\n  /*if (totalShare !== 100) {\n    throw new Error(`Invalid config, creators shares must add up to 100`);\n  }\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  };*/\n};\n\nexport function uuidFromConfigPubkey(configAccount: PublicKey) {\n  return configAccount.toBase58().slice(0, 6);\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunch = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), seq.toBuffer('le', 8)],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationToken = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n      Buffer.from('account'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getTreasury = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('treasury')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkPda = async (\n  mint: anchor.web3.PublicKey,\n  edition: number,\n): Promise<anchor.web3.PublicKey> => {\n  const editionNumber = Math.floor(edition / 248);\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(editionNumber.toString()),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getAuctionHouse = async (\n  creator: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), creator.toBuffer(), treasuryMint.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseProgramAsSigner = async (): Promise<\n  [PublicKey, number]\n> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), Buffer.from('signer')],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseFeeAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(FEE_PAYER),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTreasuryAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(TREASURY),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseBuyerEscrow = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  //console.log(\"get escrow inside\");\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTradeState = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n  tokenAccount: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n  tokenMint: anchor.web3.PublicKey,\n  tokenSize: anchor.BN,\n  buyPrice: anchor.BN,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      wallet.toBuffer(),\n      auctionHouse.toBuffer(),\n      tokenAccount.toBuffer(),\n      treasuryMint.toBuffer(),\n      tokenMint.toBuffer(),\n      //nmaz needed to change otherwise would crash (browserify compatibility)\n      //buyPrice.toBuffer('le', 8),\n      buyPrice.toArrayLike(Buffer,'le',8),\n      //tokenSize.toBuffer('le', 8),\n      tokenSize.toArrayLike(Buffer,'le',8),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglementEscrows = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number, PublicKey, number]> => {\n  return [\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(A),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(B),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n  ];\n};\n\n\n\nexport function loadWalletKey(keypair: any): Keypair {\n  if (!keypair || keypair == '') {\n    throw new Error('Keypair is required!');\n  }\n  const loaded = Keypair.fromSecretKey(\n    //new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n    //new Uint8Array(JSON.parse((keypair))),\n    new Uint8Array(keypair),\n  );\n  log.info(`wallet public key: ${loaded.publicKey}`);\n  //console.log(`wallet public key: ${loaded.publicKey}`);\n  return loaded;\n}\n\n/*\nexport async function loadCandyProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider);\n  log.debug('program id from anchor', program.programId.toBase58());\n  return program;\n}*/\n\n/*\nexport async function loadFairLaunchProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, FAIR_LAUNCH_PROGRAM_ID, provider);\n}\n*/\nexport async function loadAuctionHouseProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  \n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(AUCTION_HOUSE_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, AUCTION_HOUSE_PROGRAM_ID, provider);\n}\n\n/*\nexport async function loadTokenEntanglementProgream(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n*/\n\nexport async function getTokenAmount(\n  anchorProgram: anchor.Program,\n  account: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey,\n): Promise<number> {\n  let amount = 0;\n  if (!mint.equals(WRAPPED_SOL_MINT)) {\n    try {\n      const token =\n        await anchorProgram.provider.connection.getTokenAccountBalance(account);\n      amount = token.value.uiAmount * Math.pow(10, token.value.decimals);\n    } catch (e) {\n      log.error(e);\n      log.info(\n        'Account ',\n        account.toBase58(),\n        'didnt return value. Assuming 0 tokens.',\n      );\n    }\n  } else {\n    amount = await anchorProgram.provider.connection.getBalance(account);\n  }\n  return amount;\n}\n\nexport async function getProgramAccounts(\n  connection: anchor.web3.Connection,\n  programId: string,\n  configOrCommitment?: any,\n): Promise<AccountAndPubkey[]> {\n  const extra: any = {};\n  let commitment;\n  //let encoding;\n\n  if (configOrCommitment) {\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else {\n      commitment = configOrCommitment.commitment;\n      //encoding = configOrCommitment.encoding;\n\n      if (configOrCommitment.dataSlice) {\n        extra.dataSlice = configOrCommitment.dataSlice;\n      }\n\n      if (configOrCommitment.filters) {\n        extra.filters = configOrCommitment.filters;\n      }\n    }\n  }\n\n  const args = connection._buildArgs([programId], commitment, 'base64', extra);\n  const unsafeRes = await (connection as any)._rpcRequest(\n    'getProgramAccounts',\n    args,\n  );\n\n  return unsafeResAccounts(unsafeRes.result);\n}\n\n//function unsafeAccount(account: anchor.web3.AccountInfo<string[]>) {\nfunction unsafeAccount(account: anchor.web3.AccountInfo<[string, string]>) {\n    return {\n    // TODO: possible delay parsing could be added here\n    data: Buffer.from(account.data[0], 'base64'),\n    executable: account.executable,\n    lamports: account.lamports,\n    // TODO: maybe we can do it in lazy way? or just use string\n    owner: account.owner,\n  } as anchor.web3.AccountInfo<Buffer>;\n}\n\nfunction unsafeResAccounts(\n  data: Array<{\n    //account: anchor.web3.AccountInfo<string[]>;\n    account: anchor.web3.AccountInfo<[string, string]>;\n    pubkey: string;\n  }>,\n) {\n  return data.map(item => ({\n    account: unsafeAccount(item.account),\n    pubkey: item.pubkey,\n  }));\n}\n","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { styled } from '@mui/material/styles';\nimport { useSnackbar } from 'notistack';\n\nimport { \n    Dialog,\n    List,\n    ListItem,\n    ListItemButton,\n    ListItemText,\n    ListItemAvatar,\n    DialogTitle,\n    DialogContent,\n    Avatar,\n    Button,\n    Tooltip, \n    CardActionArea \n} from '@mui/material';\n\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport IosShareIcon from '@mui/icons-material/IosShare';\n\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    WhatsappShareButton,\n  } from \"react-share\";\n\n  import {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n  } from \"react-share\";\n\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\nexport default function ShareSocialURL(props:any){\n    const shareUrl = props.url;\n    const title = props.title;\n    const fontSize = props.fontSize || '20px';\n\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopyClick = () => {\n        enqueueSnackbar(`Copied!`,{ variant: 'success' });\n    };\n\n    const handleNavigatorShare = () => {\n        navigator.share({\n            title: title,\n            text: title,\n            url: shareUrl\n        });\n    }\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (value) => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Tooltip title={`Share`}>\n                <Button size=\"small\" variant=\"text\" onClick={handleClickOpen}\n                    sx={{borderRadius:'24px', color:'white'}}\n                >\n                    <IosShareIcon sx={{fontSize:{fontSize}}} />\n                </Button> \n            </Tooltip>\n            <BootstrapDialog \n                maxWidth={\"md\"}\n                open={open} onClose={handleClose}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Share\n                </DialogTitle>\n                <DialogContent>\n                    <List sx={{ pt: 0 }}>\n                        <ListItem>\n                            <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                <CopyToClipboard \n                                    text={shareUrl} \n                                    onCopy={handleCopyClick}\n                                    >\n                                    <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                        \n                                            <ListItemAvatar>\n                                                <Avatar sx={{ width: 32, height: 32 }}><ContentCopyIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={'Copy'} />\n                                        \n                                    </ListItemButton>\n                                </CopyToClipboard> \n                            </Button>\n                        </ListItem>\n                        {(navigator.share !== undefined) &&\n                            <ListItem>\n                                <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                    <CopyToClipboard \n                                        text={shareUrl} \n                                        onCopy={handleNavigatorShare}\n                                        >\n                                        <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                            \n                                                <ListItemAvatar>\n                                                    <Avatar sx={{ width: 32, height: 32 }}><IosShareIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={'Native Share'} />\n                                            \n                                        </ListItemButton>\n                                    </CopyToClipboard> \n                                </Button>\n                            </ListItem>\n                        }\n                        <ListItem>  \n                            <EmailShareButton\n                                    url={''}\n                                    subject={title}\n                                    body={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><EmailIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Email'} />\n                                    \n                                </ListItemButton>\n                            </EmailShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TwitterShareButton\n                                    url={shareUrl}\n                                    title={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TwitterIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Twitter'} />\n                                    \n                                </ListItemButton>\n                            </TwitterShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TelegramShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TelegramIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Telegram'} />\n                                    \n                                </ListItemButton>\n                            </TelegramShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <FacebookShareButton\n                                    url={shareUrl}\n                                    quote={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><FacebookIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Facebook'} />\n                                    \n                                </ListItemButton>\n                            </FacebookShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <ViberShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><ViberIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Viber'} />\n                                    \n                                </ListItemButton>\n                            </ViberShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <WhatsappShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><WhatsappIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'WhatsApp'} />\n                                    \n                                </ListItemButton>\n                            </WhatsappShareButton>\n                        </ListItem>\n\n                    </List>\n                </DialogContent>  \n            </BootstrapDialog>\n        </>\n        \n    ); \n}","import { deserializeUnchecked, serialize, BinaryReader, BinaryWriter } from 'borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js'\nconst base58 = require('bs58');\n\nexport type StringPublicKey = string;\n\nexport const extendBorsh = () => {\n\t(BinaryReader.prototype as any).readPubkey = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn new PublicKey(array);\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(value.toBuffer());\n\t};\n\n\t(BinaryReader.prototype as any).readPubkeyAsString = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn base58.encode(array) as StringPublicKey;\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkeyAsString = function (\n\t\tvalue: StringPublicKey,\n\t) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(base58.decode(value));\n\t};\n};\n\nextendBorsh();\n\nexport const METADATA_PREFIX = 'metadata';\nexport const EDITION = 'edition';\nexport const RESERVATION = 'reservation';\n\nexport const MAX_NAME_LENGTH = 32;\n\nexport const MAX_SYMBOL_LENGTH = 10;\n\nexport const MAX_URI_LENGTH = 200;\n\nexport const MAX_CREATOR_LIMIT = 5;\n\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\nexport const MAX_METADATA_LEN =\n\t1 +\n\t32 +\n\t32 +\n\tMAX_NAME_LENGTH +\n\tMAX_SYMBOL_LENGTH +\n\tMAX_URI_LENGTH +\n\tMAX_CREATOR_LIMIT * MAX_CREATOR_LEN +\n\t2 +\n\t1 +\n\t1 +\n\t198;\n\nexport const MAX_EDITION_LEN = 1 + 32 + 8 + 200;\n\nexport const EDITION_MARKER_BIT_SIZE = 248;\n\n\nexport enum MetadataKey {\n\tUninitialized = 0,\n\tMetadataV1 = 4,\n\tEditionV1 = 1,\n\tMasterEditionV1 = 2,\n\tMasterEditionV2 = 6,\n\tEditionMarker = 7,\n}\n\nexport enum MetadataCategory {\n\tAudio = 'audio',\n\tVideo = 'video',\n\tImage = 'image',\n\tVR = 'vr',\n}\n\nexport type MetadataFile = {\n\turi: string;\n\ttype: string;\n};\n\nexport type FileOrString = MetadataFile | String;\n\nexport type Attribute = {\n\ttrait_type?: string;\n\tdisplay_type?: string;\n\tvalue: string | number;\n};\n\nexport interface IMetadataExtension {\n\tname: string;\n\tsymbol: string;\n\n\tcreators: Creator[] | null;\n\tdescription: string;\n\t// preview image absolute URI\n\timage: string;\n\tanimation_url?: string;\n\n\tattributes?: Attribute[];\n\n\t// stores link to item on meta\n\texternal_url: string;\n\n\tseller_fee_basis_points: number;\n\n\tproperties: {\n\t\tfiles?: FileOrString[];\n\t\tcategory: MetadataCategory;\n\t\tmaxSupply?: number;\n\t\tcreators?: {\n\t\t\taddress: string;\n\t\t\tshares: number;\n\t\t}[];\n\t};\n}\n\nexport class MasterEditionV1 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\t/// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n\tprintingMint: StringPublicKey;\n\t/// If you don't know how many printing tokens you are going to need, but you do know\n\t/// you are going to need some amount in the future, you can use a token from this mint.\n\t/// Coming back to token metadata with one of these tokens allows you to mint (one time)\n\t/// any number of printing tokens you want. This is used for instance by Auction Manager\n\t/// with participation NFTs, where we dont know how many people will bid and need participation\n\t/// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n\t/// because when the auction begins we just dont know how many printing tokens we will need,\n\t/// but at the end we will. At the end it then burns this token with token-metadata to\n\t/// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n\t/// to get their limited editions.\n\toneTimePrintingAuthorizationMint: StringPublicKey;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tsupply: typeof BN;\n\t\tmaxSupply?: typeof BN;\n\t\tprintingMint: StringPublicKey;\n\t\toneTimePrintingAuthorizationMint: StringPublicKey;\n\t}) {\n\t\tthis.key = MetadataKey.MasterEditionV1;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t\tthis.printingMint = args.printingMint;\n\t\tthis.oneTimePrintingAuthorizationMint =\n\t\t\targs.oneTimePrintingAuthorizationMint;\n\t}\n}\n\nexport class MasterEditionV2 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\n\tconstructor(args: { key: MetadataKey; supply: typeof BN; maxSupply?: typeof BN }) {\n\t\tthis.key = MetadataKey.MasterEditionV2;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nexport class EditionMarker {\n\tkey: MetadataKey;\n\tledger: number[];\n\n\tconstructor(args: { key: MetadataKey; ledger: number[] }) {\n\t\tthis.key = MetadataKey.EditionMarker;\n\t\tthis.ledger = args.ledger;\n\t}\n\n\teditionTaken(edition: number) {\n\t\tconst editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n\t\tconst indexOffset = Math.floor(editionOffset / 8);\n\n\t\tif (indexOffset > 30) {\n\t\t\tthrow Error('bad index for edition');\n\t\t}\n\n\t\tconst positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n\t\tconst mask = Math.pow(2, positionInBitsetFromRight);\n\n\t\tconst appliedMask = this.ledger[indexOffset] & mask;\n\n\t\treturn appliedMask !== 0;\n\t}\n}\n\nexport class Edition {\n\tkey: MetadataKey;\n\t/// Points at MasterEdition struct\n\tparent: StringPublicKey;\n\t/// Starting at 0 for master record, this is incremented for each edition minted.\n\tedition: typeof BN;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tparent: StringPublicKey;\n\t\tedition: typeof BN;\n\t}) {\n\t\tthis.key = MetadataKey.EditionV1;\n\t\tthis.parent = args.parent;\n\t\tthis.edition = args.edition;\n\t}\n}\nexport class Creator {\n\taddress: StringPublicKey;\n\tverified: boolean;\n\tshare: number;\n\n\tconstructor(args: {\n\t\taddress: StringPublicKey;\n\t\tverified: boolean;\n\t\tshare: number;\n\t}) {\n\t\tthis.address = args.address;\n\t\tthis.verified = args.verified;\n\t\tthis.share = args.share;\n\t}\n}\n\nexport class Data {\n\tname: string;\n\tsymbol: string;\n\turi: string;\n\tsellerFeeBasisPoints: number;\n\tcreators: Creator[] | null;\n\tconstructor(args: {\n\t\tname: string;\n\t\tsymbol: string;\n\t\turi: string;\n\t\tsellerFeeBasisPoints: number;\n\t\tcreators: Creator[] | null;\n\t}) {\n\t\tthis.name = args.name;\n\t\tthis.symbol = args.symbol;\n\t\tthis.uri = args.uri;\n\t\tthis.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n\t\tthis.creators = args.creators;\n\t}\n}\n\nexport class Metadata {\n\tkey: MetadataKey;\n\tupdateAuthority: StringPublicKey;\n\tmint: StringPublicKey;\n\tdata: Data;\n\tprimarySaleHappened: boolean;\n\tisMutable: boolean;\n\teditionNonce: number | null;\n\n\t// set lazy\n\tmasterEdition?: StringPublicKey;\n\tedition?: StringPublicKey;\n\n\tconstructor(args: {\n\t\tupdateAuthority: StringPublicKey;\n\t\tmint: StringPublicKey;\n\t\tdata: Data;\n\t\tprimarySaleHappened: boolean;\n\t\tisMutable: boolean;\n\t\teditionNonce: number | null;\n\t}) {\n\t\tthis.key = MetadataKey.MetadataV1;\n\t\tthis.updateAuthority = args.updateAuthority;\n\t\tthis.mint = args.mint;\n\t\tthis.data = args.data;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t\tthis.isMutable = args.isMutable;\n\t\tthis.editionNonce = args.editionNonce;\n\t}\n}\n\nclass CreateMetadataArgs {\n\tinstruction: number = 0;\n\tdata: Data;\n\tisMutable: boolean;\n\n\tconstructor(args: { data: Data; isMutable: boolean }) {\n\t\tthis.data = args.data;\n\t\tthis.isMutable = args.isMutable;\n\t}\n}\nclass UpdateMetadataArgs {\n\tinstruction: number = 1;\n\tdata: Data | null;\n\t// Not used by this app, just required for instruction\n\tupdateAuthority: StringPublicKey | null;\n\tprimarySaleHappened: boolean | null;\n\tconstructor(args: {\n\t\tdata?: Data;\n\t\tupdateAuthority?: string;\n\t\tprimarySaleHappened: boolean | null;\n\t}) {\n\t\tthis.data = args.data ? args.data : null;\n\t\tthis.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t}\n}\n\nclass CreateMasterEditionArgs {\n\tinstruction: number = 10;\n\tmaxSupply: typeof BN | null;\n\tconstructor(args: { maxSupply: typeof BN | null }) {\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nclass MintPrintingTokensArgs {\n\tinstruction: number = 9;\n\tsupply: typeof BN;\n\n\tconstructor(args: { supply: typeof BN }) {\n\t\tthis.supply = args.supply;\n\t}\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n\t[\n\t\tCreateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', Data],\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tUpdateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', { kind: 'option', type: Data }],\n\t\t\t\t['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n\t\t\t\t['primarySaleHappened', { kind: 'option', type: 'u8' }],\n\t\t\t],\n\t\t},\n\t],\n\n\t[\n\t\tCreateMasterEditionArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMintPrintingTokensArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV1,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t\t['printingMint', 'pubkeyAsString'],\n\t\t\t\t['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV2,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEdition,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['parent', 'pubkeyAsString'],\n\t\t\t\t['edition', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tData,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['name', 'string'],\n\t\t\t\t['symbol', 'string'],\n\t\t\t\t['uri', 'string'],\n\t\t\t\t['sellerFeeBasisPoints', 'u16'],\n\t\t\t\t['creators', { kind: 'option', type: [Creator] }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tCreator,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['address', 'pubkeyAsString'],\n\t\t\t\t['verified', 'u8'],\n\t\t\t\t['share', 'u8'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMetadata,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['updateAuthority', 'pubkeyAsString'],\n\t\t\t\t['mint', 'pubkeyAsString'],\n\t\t\t\t['data', Data],\n\t\t\t\t['primarySaleHappened', 'u8'], // bool\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEditionMarker,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['ledger', [31]],\n\t\t\t],\n\t\t},\n\t],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n\tconst metadata = deserializeUnchecked(\n\t\tMETADATA_SCHEMA,\n\t\tMetadata,\n\t\tbuffer,\n\t) as Metadata;\n\tmetadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n\tmetadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n\tmetadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n\treturn metadata;\n};\n","import { BasicUserInfo } from './types';\n\nexport const formatAddress = (address: string) => {\n  const len = address.length;\n  return address.substr(0, 5) + '...' + address.substring(len - 4, len);\n};\n\nexport const isValidAddr = (address: string) => {\n  const re = /^0x[a-fA-F0-9]{40}$/;\n  return address.match(re);\n};\n\nexport const removeDuplicate = (arr: BasicUserInfo[]) => {\n  return arr.filter(\n    (user, index, self) =>\n      index === self.findIndex((t) => t.address === user.address)\n  );\n};\n","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport { Button, CardActionArea } from '@mui/material';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport moment from 'moment';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { FEATURED_DAO_ARRAY } from './constants';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function timeAgo(blockTime:string){\n    try{\n        let prettydate = moment.unix(+blockTime).format(\"MMMM Do YYYY, h:mm a\");\n                    //console.log(\"prettyForSaleDate: \"+prettyForSaleDate)\n        let timeago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asDays().toFixed(0);\n        //console.log(\"Time Ago: \"+timeago);\n        if (+timeago >= 1){\n            prettydate = timeago+' days ago';\n        } else{\n            let hoursago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asHours().toFixed(0);\n            if (+hoursago >= 1){\n                prettydate = hoursago+' hours ago';\n            } else {\n                let minutesAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asMinutes().toFixed(0);\n                if (+minutesAgo >= 1){\n                    prettydate = minutesAgo+' minutes ago';\n                } else {\n                    let secondsAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asSeconds().toFixed(0);\n                    if (+secondsAgo >= 1){\n                        prettydate = minutesAgo+' seconds ago';\n                    }\n                }\n            }\n        }  \n\n        return prettydate;\n    }catch(e){\n        return blockTime;\n    }\n}\n\nexport function trimAddress(addr: any, trim:any) {\n    let start = addr.substring(0, trim);\n    let end = addr.substring(addr.length - trim);\n    return `${start}...${end}`;\n}\n\nexport function ValidateCurve(address:string){\n    return PublicKey.isOnCurve(new PublicKey(address).toBuffer());\n}\n\nexport function ValidateAddress(address:any){\n    try{\n        if (address){\n            //let base58 = useMemo(() => props?.toBase58(), [props]) || null;\n            if ((address.length >= 32) && \n                (address.length <= 45)){    \n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === address){\n                            return true;\n                        }\n                    }\n                    if ((address === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK'))\n                        return true;\n                return ValidateCurve(address);\n            }\n            return false;\n        }\n    } catch(e){console.log(\"ERR: \"+e)};\n    \n    return false;\n    \n}\n\nexport function MakeLinkableAddress(props:any){\n    const addr = props?.addr || \"\";\n    const trim = props?.trim;\n    const hasextlink = props?.hasextlink || false;\n    const hascopy = props?.hascopy || false;\n    const fontsize = props?.fontsize || \"16px\";\n    const permalink = props?.permalink || false;\n    const isDNS = props?.isDNS || null;\n    \n    let stri_addr = addr;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const handleCopyClick = () => {\n        setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n    \n    if (addr.length > 0){\n        if (trim>0)\n            stri_addr = trimAddress(addr, trim)\n    }\n\n    function ClipboardAction(){\n        if (hascopy){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={addr} \n                    onCopy={handleCopyClick}\n                    >\n                        <ContentCopyIcon sx={{fontSize:fontsize, mr:0 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n\n    function PermalinkAction(){\n        if (permalink){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={window.location.href} \n                    onCopy={handleCopyClick}\n                    >\n                        <InsertLinkIcon sx={{fontSize:fontsize, ml:1 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n    \n    if (addr.length > 0){\n        if (hasextlink){\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr} <OpenInNewIcon sx={{fontSize:fontsize, ml:1}} /></Button>\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        } else {\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    {isDNS ?\n                        <>{addr}</>\n                    :\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr}</Button>\n                    }\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        }\n    } else{\n        return (\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n}","import { LAMPORTS_PER_SOL, AccountInfo } from '@solana/web3.js';\nimport fs from 'fs';\nimport weighted from 'weighted';\nimport path from 'path';\nimport { Program, web3 } from '@project-serum/anchor';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\n//const { readFile } = fs.promises;\n\n/*export async function readJsonFile(fileName: string) {\n  const file = await readFile(fileName, 'utf-8');\n  return JSON.parse(file);\n}*/\n\nexport function shuffle(array: any) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex != 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\n/*export const assertValidBreakdown = breakdown => {\n  const total = Object.values(breakdown).reduce(\n    (sum: number, el: number) => (sum += el),\n    0,\n  );\n  if (total > 101 || total < 99) {\n    console.log(breakdown);\n    throw new Error('Breakdown not within 1% of 100! It is: ' + total);\n  }\n};\n\nexport const generateRandomSet = (breakdown, dnp) => {\n  let valid = true;\n  let tmp = {};\n\n  do {\n    valid = true;\n    const keys = shuffle(Object.keys(breakdown));\n    keys.forEach(attr => {\n      const breakdownToUse = breakdown[attr];\n\n      const formatted = Object.keys(breakdownToUse).reduce((f, key) => {\n        if (breakdownToUse[key]['baseValue']) {\n          f[key] = breakdownToUse[key]['baseValue'];\n        } else {\n          f[key] = breakdownToUse[key];\n        }\n        return f;\n      }, {});\n\n      assertValidBreakdown(formatted);\n      const randomSelection = weighted.select(formatted);\n      tmp[attr] = randomSelection;\n    });\n\n    keys.forEach(attr => {\n      let breakdownToUse = breakdown[attr];\n\n      keys.forEach(otherAttr => {\n        if (\n          tmp[otherAttr] &&\n          typeof breakdown[otherAttr][tmp[otherAttr]] != 'number' &&\n          breakdown[otherAttr][tmp[otherAttr]][attr]\n        ) {\n          breakdownToUse = breakdown[otherAttr][tmp[otherAttr]][attr];\n\n          console.log(\n            'Because this item got attr',\n            tmp[otherAttr],\n            'we are using different probabilites for',\n            attr,\n          );\n\n          assertValidBreakdown(breakdownToUse);\n          const randomSelection = weighted.select(breakdownToUse);\n          tmp[attr] = randomSelection;\n        }\n      });\n    });\n\n    Object.keys(tmp).forEach(attr1 => {\n      Object.keys(tmp).forEach(attr2 => {\n        if (\n          dnp[attr1] &&\n          dnp[attr1][tmp[attr1]] &&\n          dnp[attr1][tmp[attr1]][attr2] &&\n          dnp[attr1][tmp[attr1]][attr2].includes(tmp[attr2])\n        ) {\n          console.log('Not including', tmp[attr1], tmp[attr2], 'together');\n          valid = false;\n          tmp = {};\n        }\n      });\n    });\n  } while (!valid);\n  return tmp;\n};*/\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function fromUTF8Array(data: number[]) {\n  // array of bytes\n  let str = '',\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    const value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode(\n        ((value & 0x0f) << 12) |\n          ((data[i + 1] & 0x3f) << 6) |\n          (data[i + 2] & 0x3f),\n      );\n      i += 2;\n    } else {\n      // surrogate pair\n      const charCode =\n        (((value & 0x07) << 18) |\n          ((data[i + 1] & 0x3f) << 12) |\n          ((data[i + 2] & 0x3f) << 6) |\n          (data[i + 3] & 0x3f)) -\n        0x010000;\n\n      str += String.fromCharCode(\n        (charCode >> 10) | 0xd800,\n        (charCode & 0x03ff) | 0xdc00,\n      );\n      i += 3;\n    }\n  }\n\n  return str;\n}\n\nexport function parsePrice(price: string, mantissa: number = LAMPORTS_PER_SOL) {\n  return Math.ceil(parseFloat(price) * mantissa);\n}\n\nexport function parseDate(date: string) {\n  if (date === 'now') {\n    return Date.now() / 1000;\n  }\n  return Date.parse(date) / 1000;\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nexport function chunks(array: any, size: any) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index: any) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport function generateRandoms(\n  numberOfAttrs: number = 1,\n  total: number = 100,\n) {\n  const numbers = [];\n  const loose_percentage = total / numberOfAttrs;\n\n  for (let i = 0; i < numberOfAttrs; i++) {\n    const random = Math.floor(Math.random() * loose_percentage) + 1;\n    numbers.push(random);\n  }\n\n  const sum = numbers.reduce((prev, cur) => {\n    return prev + cur;\n  }, 0);\n\n  numbers.push(total - sum);\n  return numbers;\n}\n\nexport const getMetadata = (\n  name: string = '',\n  symbol: string = '',\n  index: number = 0,\n  creators: any,\n  description: string = '',\n  seller_fee_basis_points: number = 500,\n  attrs: any,\n  collection: any,\n) => {\n  const attributes = [];\n  for (const prop in attrs) {\n    attributes.push({\n      trait_type: prop,\n      value: path.parse(attrs[prop]).name,\n    });\n  }\n\n  return {\n    name: `${name}${index + 1}`,\n    symbol,\n    image: `${index}.png`,\n    properties: {\n      files: [\n        {\n          uri: `${index}.png`,\n          type: 'image/png',\n        },\n      ],\n      category: 'image',\n      creators,\n    },\n    description,\n    seller_fee_basis_points,\n    attributes,\n    collection,\n  };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport const getPriceWithMantissa = async (\n  price: number,\n  mint: web3.PublicKey,\n  walletKeyPair: any,\n  anchorProgram: Program,\n): Promise<number> => {\n  const token = new Token(\n    anchorProgram.provider.connection,\n    new web3.PublicKey(mint),\n    TOKEN_PROGRAM_ID,\n    walletKeyPair,\n  );\n\n  const mintInfo = await token.getMintInfo();\n\n  const mantissa = 10 ** mintInfo.decimals;\n\n  return Math.ceil(price * mantissa);\n};\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport function hashCode(s: string) {\n  let h = 0;\n  for (let i = 0; i < s.length; i++)\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n\n  return h.toString();\n}\n\nexport enum CachePrefix {\n  Message = \"message_\",\n  DecryptedMessage = \"decrypted_message_\",\n  Media = \"media_\",\n  DecryptedMedia = \"decrypted_media_\",\n  MessageCount = \"message_count_\",\n  RetrievedThread = \"retrieved_thread_\",\n  LastMsgCount = \"last_msg_count_\",\n  ProfilePicture = \"profile_pic_\",\n  Archive = \"archive_\",\n  CentralState = \"central_state_\",\n  Sha256 = \"sha256_\",\n  ProgramAddress = \"program_address_\",\n  IpfsHash = \"ipfs_hash_\",\n}\n\nexport class asyncCache {\n  static async get<T>(key: string): Promise<T | null> {\n    const cached = await AsyncStorage.getItem(hashCode(key));\n    if (!cached) {\n      return null;\n    }\n    return JSON.parse(cached);\n  }\n  static async set<T>(key: string, value: T) {\n    const stringified = JSON.stringify(value);\n    await AsyncStorage.setItem(hashCode(key), stringified);\n  }\n\n  static async sha256(data: ethers.utils.BytesLike): Promise<string> {\n    const cached = await asyncCache.get<string>(\n      CachePrefix.Sha256 + data.toString()\n    );\n    if (cached) {\n      return cached;\n    }\n    const result: string = await new Promise((resolve) =>\n      resolve(ethers.utils.sha256(data).slice(2))\n    );\n    await asyncCache.set(CachePrefix.Sha256 + data.toString(), result);\n    return result;\n  }\n}\n\nexport function useGetAsyncCache<T>(key: string, refresh?: boolean): T | null {\n  const [cached, setCached] = useState<T | null>(null);\n\n  const fn = useCallback(async () => {\n    return await asyncCache.get<T>(key);\n  }, [key]);\n\n  useEffect(() => {\n    let mounted = true;\n    fn().then((c) => {\n      if (!mounted) return null;\n      setCached(c);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [refresh, key]);\n  return cached;\n}","/** @solana/web3.js is not compatible with react-native */\nimport nacl from \"tweetnacl\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Buffer } from \"buffer\";\nimport BN from \"bn.js\";\nimport { asyncCache } from \"../cache\";\nimport { ethers } from \"ethers\";\n\nexport const MAX_SEED_LENGTH = 32;\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function createProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<PublicKey> {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([\n    buffer,\n    programId.toBuffer(),\n    Buffer.from(\"ProgramDerivedAddress\"),\n  ]);\n  const hash: string = await new Promise((resolve) =>\n    resolve(ethers.utils.sha256(new Uint8Array(buffer)).slice(2))\n  );\n  const publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n  if (is_on_curve(publicKeyBytes)) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n  const key = new PublicKey(publicKeyBytes);\n  return key;\n}\n\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<[PublicKey, number]> {\n  const cached = await asyncCache.get<{ address: string; nonce: number }>(\n    seeds.toString()\n  );\n  if (cached) {\n    return [new PublicKey(cached.address), cached.nonce];\n  }\n  let nonce = 255;\n  let address;\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = await createProgramAddress(seedsWithNonce, programId);\n      await asyncCache.set(seeds.toString(), {\n        address: address.toBase58(),\n        nonce: nonce,\n      });\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\n/* eslint-disable */\n//  @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/* eslint-enable */","import { Buffer } from \"buffer\";\nimport {\n  HASH_PREFIX,\n  NAME_PROGRAM_ID,\n  TWITTER_ROOT_PARENT_REGISTRY_KEY,\n  TWITTER_VERIFICATION_AUTHORITY,\n  ReverseTwitterRegistryState,\n} from \"@bonfida/spl-name-service\";\nimport { ethers } from \"ethers\";\nimport { PublicKey, Connection } from \"@solana/web3.js\";\nimport { findProgramAddress } from \"./program-address\";\nimport { asyncCache, CachePrefix } from \"../cache\";\n\nexport async function getHashedName(name: string) {\n  const input = HASH_PREFIX + name;\n  const cached = await asyncCache.get<string>(CachePrefix + name);\n  if (!cached) {\n    const buffer = ethers.utils.sha256(Buffer.from(input)).slice(2);\n    await asyncCache.set(CachePrefix + name, buffer);\n    return Buffer.from(buffer, \"hex\");\n  }\n  return Buffer.from(cached, \"hex\");\n}\n\nexport async function getNameAccountKey(\n  hashed_name: Buffer,\n  nameClass?: PublicKey,\n  nameParent?: PublicKey\n): Promise<PublicKey> {\n  const seeds = [hashed_name];\n  if (nameClass) {\n    seeds.push(nameClass.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  if (nameParent) {\n    seeds.push(nameParent.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  const [nameAccountKey] = await findProgramAddress(seeds, NAME_PROGRAM_ID);\n  return nameAccountKey;\n}\nexport async function getHandleAndRegistryKey(\n  connection: Connection,\n  verifiedPubkey: PublicKey\n): Promise<[string, PublicKey]> {\n  const hashedVerifiedPubkey = await getHashedName(verifiedPubkey.toString());\n  const reverseRegistryKey = await getNameAccountKey(\n    hashedVerifiedPubkey,\n    TWITTER_VERIFICATION_AUTHORITY,\n    TWITTER_ROOT_PARENT_REGISTRY_KEY\n  );\n\n  const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(\n    connection,\n    reverseRegistryKey\n  );\n  return [\n    reverseRegistryState.twitterHandle,\n    new PublicKey(reverseRegistryState.twitterRegistryKey),\n  ];\n}\n\nexport async function getDNSRecordAddress(\n  nameAccount: PublicKey,\n  type: string\n) {\n  const hashedName = await getHashedName(\"\\0\".concat(type));\n  const recordAccount = await getNameAccountKey(\n    hashedName,\n    undefined,\n    nameAccount\n  );\n  return recordAccount;\n}","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { NAME_PROGRAM_ID, NameRegistryState } from \"@bonfida/spl-name-service\";\nimport { getHashedName, getNameAccountKey } from \"./name-service\";\nimport BN from \"bn.js\";\n\nexport const PROGRAM_ID = new PublicKey(\n  \"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\"\n);\n\nexport const centralState = new PublicKey(\n  \"33m47vH6Eav6jr5Ry86XjhRft2jRBLDnDgPSHoquXi2Z\"\n);\n\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey\n): Promise<PublicKey[]> {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n    filters: filters,\n  });\n  return accounts.map((a) => a.pubkey);\n}\n\nexport async function performReverseLookup(\n  connection: Connection,\n  nameAccount: PublicKey\n): Promise<string> {\n  const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n  const reverseLookupAccount = await getNameAccountKey(\n    hashedReverseLookup,\n    centralState\n  );\n\n  const name = await NameRegistryState.retrieve(\n    connection,\n    reverseLookupAccount\n  );\n  if (!name.data) {\n    throw new Error(\"Could not retrieve name data\");\n  }\n  const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n  return name.data.slice(4, 4 + nameLength).toString();\n}\n\nexport async function performReverseLookupBatch(\n  connection: Connection,\n  nameAccounts: PublicKey[]\n): Promise<(string | undefined)[]> {\n  const [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID\n  );\n  const reverseLookupAccounts: PublicKey[] = [];\n  for (const nameAccount of nameAccounts) {\n    const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n    const reverseLookupAccount = await getNameAccountKey(\n      hashedReverseLookup,\n      centralState\n    );\n    reverseLookupAccounts.push(reverseLookupAccount);\n  }\n\n  const names = await NameRegistryState.retrieveBatch(\n    connection,\n    reverseLookupAccounts\n  );\n\n  return names.map((name) => {\n    if (name === undefined || name.data === undefined) {\n      return undefined;\n    }\n    const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n    return name.data.slice(4, 4 + nameLength).toString();\n  });\n}","import { PublicKey, Connection } from \"@solana/web3.js\";\n//import { useAsync } from \"./utils.native\";\nimport { asyncCache } from \"./cache\";\nimport {\n  findOwnedNameAccountsForUser,\n  performReverseLookupBatch,\n} from \"./web3/name-auctioning\";\nimport { getHandleAndRegistryKey } from \"./web3/name-service\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n//import { Profile } from \"./web3/jabber\";\n\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport const findDisplayName = async (\n  connection: Connection,\n  receiver: string\n) => {\n  let allNames: string[] = [];\n  let favoriteDisplayName: string | undefined = undefined;\n\n  try {\n      /*\n    try {\n      const profile = await Profile.retrieve(\n        connection,\n        new PublicKey(receiver)\n      );\n      favoriteDisplayName = profile.name.split(\":fdn:\")[1];\n      if (favoriteDisplayName) {\n        allNames.push(favoriteDisplayName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    const knownReceiver = await asyncCache.get<string[]>(receiver);\n    if (knownReceiver && knownReceiver?.length > 0) {\n      if (favoriteDisplayName && favoriteDisplayName !== knownReceiver[0]) {\n        await asyncCache.set(receiver, [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ]);\n        return [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ];\n      }\n      return knownReceiver;\n    }\n    */\n\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      new PublicKey(receiver)\n    );\n    domainsAddresses.sort((a, b) => a.toBase58().localeCompare(b.toBase58()));\n    if (domainsAddresses.length === 0) {\n      return [receiver];\n    }\n\n    const reverse = (\n      await performReverseLookupBatch(connection, domainsAddresses)\n    )\n      .filter((e) => !!e)\n      .map((e) => e + \".sol\") as string[];\n\n    allNames = [...allNames, ...reverse];\n\n    if (allNames.length > 0) {\n      await asyncCache.set(receiver, allNames);\n      return allNames;\n    }\n\n    try {\n      const [display] = await getHandleAndRegistryKey(\n        connection,\n        new PublicKey(receiver)\n      );\n      return [\"@\" + display];\n    } catch (err) {\n      console.log(err);\n    }\n\n    return [receiver];\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const useDisplayName = (contact: string | undefined) => {\n    const { connection } = useConnection();\n\n  const fn = async (): Promise<string[] | undefined> => {\n    if (!contact) return;\n    return await findDisplayName(connection, contact);\n  };\n\n  return false;\n  //return useAsync(fn, false);\n};\n\nexport const ownerHasDomain = async (\n  connection: Connection,\n  owner: PublicKey\n) => {\n  try {\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      owner\n    );\n    return domainsAddresses.length != 0;\n  } catch (err) {\n    console.log(err);\n  }\n  try {\n    await getHandleAndRegistryKey(connection, owner);\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return false;\n};\n\nexport const useUserHasDomainOrTwitter = () => {\n  const { publicKey } = useWallet();\n  const { connection } = useConnection();\n\n  const fn = async () => {\n    let hasDomain = false;\n    let hasTwitter = false;\n    if (!publicKey) return;\n    try {\n      const domainsAddresses = await findOwnedNameAccountsForUser(\n        connection,\n        publicKey\n      );\n      hasDomain = domainsAddresses.length !== 0;\n    } catch (err) {\n      console.log(err);\n    }\n\n    try {\n      await getHandleAndRegistryKey(connection, publicKey);\n      hasTwitter = true;\n    } catch (err) {\n      console.log(err);\n    }\n\n    return { hasTwitter: hasTwitter, hasDomain: hasDomain };\n  };\n  return false;\n  //return useAsync(fn, false);\n};\n","import {\n    TextField\n} from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport React, { useCallback } from \"react\";\n\nexport const matchNothingRegex = /(?!)/;\n\nexport const RegexTextField = ({ regex, onChange, ...rest }) => {\n  const handleChange = useCallback(\n    (e) => {\n      e.currentTarget.value = e.currentTarget.value.replace(regex, \"\");\n      onChange(e);\n    },\n    [onChange, regex]\n  );\n\n  return <TextField onChange={handleChange} {...rest} />;\n};\n\nexport default React.memo(RegexTextField);\n\nRegexTextField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  regex: PropTypes.instanceOf(RegExp)\n};\n\nRegexTextField.defaultProps = {\n  regex: matchNothingRegex\n};\n","export default __webpack_public_path__ + \"static/media/App.91f250be.less\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport { makeStyles, styled, alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getMetadata,\n    getAuctionHouseProgramAsSigner,\n    loadWalletKey,\n    deserializeAccount,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Table,\n    TableContainer,\n    TableRow,\n    TableCell,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Container,\n} from '@mui/material';\n\nimport { red } from '@mui/material/colors';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport GrapeIcon from '../components/static/GrapeIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  function convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nexport default function OffersView(props:any){\n    const [offers, setOffers] = React.useState(null);\n    const [myoffers, setMyOffers] = React.useState(0);\n    const [listings, setListings] = React.useState(null);\n    const [ahbalance, setAHBalance] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [ahloading, setAHLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.pubkey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const connection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { publicKey, sendTransaction } = useWallet();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const [refresh, setRefresh] = React.useState(false);\n    const [counter, setCounter] = React.useState(0);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [page, setPage] = React.useState(1);\n    const [alertwithdrawopen, setAlertWithdrawOpen] = React.useState(false);\n    \n    const rowsperpage = 1500;\n    const selectedstate = props.selectedstate;\n\n    const handleAlertWithdrawClose = () => {\n        setAlertWithdrawOpen(false);\n    };\n    const handleAlertWithdrawOpen = () => {\n        setAlertWithdrawOpen(true);\n    };\n\n    const handleCancelOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);                \n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await connection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been canceled `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\t//handCancelWithdrawOffer was useful when only allowing one offer at a time\n    const handleCancelWithdrawOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            const signedTransaction = await sendTransaction(transaction, connection)\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar()\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n    \n    const handleWithdrawOffer = async (offerAmount: number, mint: string) => {\n\n        try {\n            \n            var allmints: any[] = [];\n            if (!mint){\n                for (var item of offers){\n                    if(item.state === 1){\n                        allmints.push({mint: item.mint, offerAmount: convertSolVal(item.offeramount)});\n                        if (!mint)\n                            mint = item.mint;\n                    }               \n                }\n            }\n\n            if (allmints.length <= 1){\n                if (mint){ // with mint allow calling cancel withdraw combo\n                    try {\n                        const mintKey = new web3.PublicKey(mint);\n                        let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                        const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                        let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                        const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                        const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        \n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    } \n                } else{ // no mint then just withdraw\n                    try {\n                        const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        \n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Withdrawal from Grapevine completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    }\n                }\n            } else {  \n                //enqueueSnackbar(`To withdraw from Grapevine you must first cancel all pending Offers.`,{ variant: 'warning' });\n                //several mints to cancel and finally withdraw\n                \n                    let cnt = 1;\n\n                    for (var item of allmints){  \n                        console.log(JSON.stringify(allmints));  \n                        try{ \n                            if (cnt <= allmints.length){\n                                //cancelOffer on specific mint in list\n                                const mintKey = new web3.PublicKey(item.mint);\n                                let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                                const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                //let numericAmmount = item.offerAmount;\n                                const transactionInstr = await cancelOffer(item.offerAmount, item.mint, publicKey, mintAccountInfoDs.owner);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                            \n                                enqueueSnackbar(`Preparing to cancel offer for ${item.offerAmount} SOL on mint ${item.mint}`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Offer cancel complete `,{ variant: 'success', action:snackaction });                 \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }\n\n                        try{\n                            if (cnt === allmints.length){\n                                const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                                enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Grapevine Withdrawal complete `,{ variant: 'success', action:snackaction });                     \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }    \n\n                        cnt++;\n                    }\n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                    });\n                    setTimeout(function() {\n                        closeSnackbar(eskey);\n                        setRefresh(true);\n                    }, GRAPE_RPC_REFRESH);\n         \n\t\t\t\t\n            }\n            \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const getOffers = async () => {\n        getEscrowBalance();\n\n        if (!loading){\n            setLoading(true);\n            setMaxPage(false);\n\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(thisPublicKey)).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n            \n            let result = await ggoconnection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 100});\n            \n            //let sale_result = await connection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 250});\n            //console.log(JSON.stringify(result));\n            \n            let offerResults: any[] = [];\n            let cancelStateResults: any[] = [];\n            let allListingResults: any[] = [];\n            let listingResults: any[] = [];\n            let mintArrayPDA: any[] = [];\n            let escrow_cache: any[] = [];\n            let exists = false;\n            let existSaleCancelAction = 0;\n            let cntr = 0;\n            let cnt = 0;\n\n\n            let sellerTradeStateArr: any[] = [];\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            for (var value of result){\n                if (value.err === null){\n                  \n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                //console.log(value.signature);\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n\n                            //if ( feePayer != mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                            {\n                                 \n                                let escrow_found = false;\n                                let escrow_found_index = 0;\n                                for (var i = 0; i < escrow_cache.length; i++){\n                                    if (escrow_cache[i].feePayer.toBase58() === feePayer.toBase58()){\n                                        escrow_found = true;\n                                        escrow_found_index = i;\n                                    }\n                                }\n\n                                let amount_on_escrow = 0;\n\n                                if (!escrow_found){\n                                    let escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                    amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n                                    escrow_cache.push(\n                                        {\n                                            //escrow: escrow,\n                                            amount_on_escrow: amount_on_escrow,\n                                            feePayer: feePayer\n                                        }\n                                    );\n                                    \n                                } else{\n                                    amount_on_escrow = escrow_cache[escrow_found_index].amount_on_escrow;\n                                }\n                                \n                                let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;\n                                //console.log('auctionMint: '+auctionMint);\n                                \n                                //if (auctionMint){\n                                //    console.log(\"value3: \"+JSON.stringify(value));\n                                \n                                // check if memo is an array\n                                \n                                // consider countering all brackets\n\n                                    {\n                                        exists = false;\n                                        //console.log('VAL '+JSON.stringify(value));\n                                        if ((value) && (value.memo)){\n                                            \n                                            let memo_arr: any[] = [];\n                                            let memo_str = value.memo;\n                                            let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                            if (memo_instances > 0) {\n                                                // multi memo\n                                                let mcnt = 0;\n                                                let submemo = memo_str;\n                                                //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                                for (var mx=0;mx<memo_instances;mx++){\n                                                    let init = submemo.indexOf('{');\n                                                    let fin = submemo.indexOf('}');\n                                                    memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                                    memo_arr.push(memo_str);\n                                                    submemo = submemo.replace(memo_str, \"\");\n                                                    //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                                    //console.log(\"submemo: \"+submemo);\n                                                }\n                                            } else{\n                                                let init = memo_str.indexOf('{');\n                                                let fin = memo_str.indexOf('}');\n                                                memo_str = memo_str.substr(init,fin); // include brackets\n                                                memo_arr.push(memo_str);\n                                            }\n                                            \n                                            for (var memo_item of memo_arr){\n                                                try{\n                                                    const memo_json = JSON.parse(memo_item);\n                                                    \n                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                \n                                                    //console.log(memo_json);\n                                                    if ((memo_json?.status === 0) || // withdraw\n                                                        (memo_json?.status === 1) || // offer\n                                                        (memo_json?.status === 2) || // sale\n                                                        (memo_json?.status === 3) || // listing/accept\n                                                        (memo_json?.status === 4) || // buy now\n                                                        (memo_json?.status === 5) || // cancel\n                                                        (memo_json?.state === 0) || // withdraw\n                                                        (memo_json?.state === 1) || // offer\n                                                        (memo_json?.state === 2) || // sale\n                                                        (memo_json?.state === 3) || // listing/accept\n                                                        (memo_json?.state === 4) || // buy now\n                                                        (memo_json?.state === 5)){ // cancel\n                                                        \n                                                        // consider checking amount vs memo_json.offer\n                                                        \n                                                        //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                                        let sale_state_exists = false;\n                                                        \n                                                        //console.log(memo_json?.state + ' ('+memo_json?.mint+') - ' + feePayer.toBase58() + ': ' + memo_json?.amount);\n                                                        //console.log(feePayer.toBase58() + ' v ' + thisPublicKey);\n                                                        \n                                                        if (feePayer.toBase58() === thisPublicKey){\n\n                                                            if ( feePayer.toBase58() === thisPublicKey && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && !sale_state_exists){\n                                                                \n                                                                if ((memo_json?.status === 0) ||\n                                                                    (memo_json?.status === 2) ||\n                                                                    (memo_json?.status === 3) ||\n                                                                    (memo_json?.status === 4) ||\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) ||\n                                                                    (memo_json?.state === 2) ||\n                                                                    (memo_json?.state === 3) ||\n                                                                    (memo_json?.state === 4) ||\n                                                                    (memo_json?.state === 5)){\n\n                                                                    if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                                        // check if exists\n                                                                        for (var i = 0; i < allListingResults.length; i++){\n                                                                            if (memo_json?.mint === allListingResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n                                                                        for (var i = 0; i < cancelStateResults.length; i++){\n                                                                            if (memo_json?.mint === cancelStateResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n\n                                                                        // push last sale state first\n                                                                        if ((!sale_state_exists)&&(selectedstate===2)){ // handle this only for sale tab\n                                                                            let mint_address = new PublicKey(memo_json?.mint)\n                                                                            mintArrayPDA.push(mint_address);\n\n                                                                            if (memo_json?.amount){\n                                                                                let ownerHasMint = false;\n                                                                                for (var wvalue of walletCollection){\n                                                                                    if (wvalue.account.data.parsed.info?.mint === memo_json?.mint)\n                                                                                        ownerHasMint = true;\n                                                                                }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check if this is a valid sale or offer first\n                                                                                if ((memo_json?.status === 2) || // sale\n                                                                                    (memo_json?.status === 5)  || // cancel\n                                                                                    (memo_json?.state === 2) || // sale\n                                                                                    (memo_json?.state === 5)){ // cancel\n                                                                                    \n                                                                                    if (memo_json?.state === 5){\n                                                                                        //sellerTradeStateArr.push(null);\n                                                                                        cancelStateResults.push({tradeStatePublicKey: null, buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: ownerHasMint, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status}); \n                                                                                    } else if (memo_json?.state === 2){\n                                                                                        let thisTokenOwner = new web3.PublicKey(thisPublicKey);\n                                                                                        if (!ownerHasMint){\n                                                                                            // owner does not have the mint\n                                                                                            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mint_address));\n                                                                                            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                                                                            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                                                                            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                                                                            thisTokenOwner = mintAccountInfoDs.owner;\n                                                                                        } \n                                                                                        //console.log(\"Check: \"+JSON.stringify(memo_json));\n                                                                                        \n                                                                                        if (ownerHasMint){\n                                                                                            const tokenAccountKey = (await getAtaForMint(mint_address, thisTokenOwner))[0];\n                                                                                            \n                                                                                            //const tokenAccountKey = (await getAtaForMint(mint_address, mintAccountInfoDs.owner))[0];\n                                                                                            const tokenSizeAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    1,\n                                                                                                    mint_address,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                                                            const buyPriceAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    convertSolVal(offerAmount),\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            \n                                                                                            const sellerTradeState = (\n                                                                                                await getAuctionHouseTradeState(\n                                                                                                    auctionHouseKey,\n                                                                                                    thisTokenOwner,\n                                                                                                    tokenAccountKey,\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    mint_address,\n                                                                                                    tokenSizeAdjusted,\n                                                                                                    buyPriceAdjusted,\n                                                                                                )\n                                                                                            )[0];\n                                                                                            \n                                                                                            sellerTradeStateArr.push(sellerTradeState);\n                                                                                            // THESE ARE REDUNDANT RPC CALLS WE ARE BATCHING AND CHECKING IN THE END\n                                                                                            //const sellerTradeStateInfo = await connection.getAccountInfo(sellerTradeState);    \n                                                                                            //console.log(\"sellerTradeStateInfo: \"+JSON.stringify(sellerTradeStateInfo));\n                                                                                            //if (sellerTradeStateInfo != null){   \n                                                                                                //console.log('ownerHasMint ('+ownerHasMint+'):', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                if (ownerHasMint) {\n                                                                                                    //console.log('ownerHasMint:', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                    if (thisPublicKey == feePayer)\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                    else\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                } else {\n                                                                                                    //console.log('owner does not have Mint:', memo_json?.mint, 'state:', memo_json?.state); \n                                                                                                    if (memo_json?.state != 5) {\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state});  \n                                                                                                    }\n                                                                                                }\n                                                                                            //}\n                                                                                        }\n                                                                                    }\n                                                                                    \n                                                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                                        }\n                                                                    }\n                                                                    \n                                                                }\n                                                            }\n                                                        }\n\n                                                        if ((memo_json?.status === 0) ||\n                                                            (memo_json?.status === 1) ||\n                                                            (memo_json?.status === 5) ||\n                                                            (memo_json?.state === 0) ||\n                                                            (memo_json?.state === 1) ||\n                                                            (memo_json?.state === 5)){\n                                                            \n                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                            //if ((memo_json?.amount === amount)||\n                                                            //    (memo_json?.offer === amount)){\n                                                            {\n                                                                //console.log('OFFER: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                if (memo_json?.amount >= 0){\n                                                                    exists = false;\n                                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                    for (var i = 0; i < offerResults.length; i++){\n                                                                        if (//(feePayer === offerResults[i].buyeraddress)&&\n                                                                            (memo_json?.mint === offerResults[i].mint)){\n                                                                            exists = true;\n                                                                        }\n                                                                    }\n                                                                    if (!exists){\n                                                                        \n                                                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                        \n                                                                        if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                            if (feePayer.toBase58() === thisPublicKey)\n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n\n                                                                            else   \n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }catch(e){console.log(\"ERR: \"+e)}\n                                            }\n                                        }\n                                    }\n                                //}\n                            }\n                        }\n                    }catch(ert){console.log(\"ERR: \"+ert)}\n                }\n                cnt++;\n                cntr++;\n                setCounter(cntr);\n            }\n\n            if (mintArrayPDA.length > 0){\n                /*\n                for (var y=0;y<mintArrayPDA.length;y++){\n                    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mintArrayPDA[y]).toBuffer(),\n                    ], MD_PUBKEY)\n                }\n\n                let final_mint_states = await connection.getParsedTransactions(mintArrayPDA);\n                let state_was_sold = false;\n                let final_sale_state = '';//memo_json?.state || memo_json?.status;\n                for (var x=0; x < listingResults.length; x++){\n                    \n                    // for each listing\n                    // check the final_mint_state (last transaction?)\n                    for (var r=0; r < final_mint_states.length; r++){\n                        \n                        console.log(\"Final Mint State: \"+JSON.stringify(final_mint_states[r]))\n\n                    }\n                    /*\n                    if ((listingResults[x]) && (listingResults[x].memo)){\n                    \n                        let sub_memo_str = listingResults[x].memo;\n                        let init = sub_memo_str.indexOf('{');\n                        let fin = sub_memo_str.indexOf('}');\n                        sub_memo_str = sub_memo_str.substr(init,fin);\n                        const sub_memo_json = JSON.parse(sub_memo_str);\n                        \n                        if ((sub_memo_json?.status === 3) ||\n                            (sub_memo_json?.status === 4) ||\n                            (sub_memo_json?.state === 3) ||\n                            (sub_memo_json?.state === 4)){\n                            state_was_sold = true;\n                            final_sale_state = sub_memo_json?.state || sub_memo_json?.status;\n                            //console.log(\"SOLD: \"+sub_memo_json?.state);\n                        }\n                    }\n                    */\n\n                    // if first instance of \n                //} \n            }\n            var j = 0;\n            for (var i = 0; i < offerResults.length; i++){\n                if ((offerResults[i].isowner && offerResults[i].state === 1)){\n                    j++;\n                }\n            }\n            setMyOffers(myoffers+j);\n\n            // check which tab we are in to avoid uneeded RPC call\n            const tradeStates = await ggoconnection.getMultipleAccountsInfo(sellerTradeStateArr, 'confirmed');\n            let x = 0;\n            for (var alrvalue of allListingResults){\n                // check if this has a trade \n                if ((alrvalue.tradeStatePublicKey) && (sellerTradeStateArr[x])){\n                    if (alrvalue.tradeStatePublicKey === sellerTradeStateArr[x].toBase58()){\n                        // check if this has an active trade state\n                        if (tradeStates[x]){\n                            //console.log(\"checking: \"+alrvalue.tradeStatePublicKey + \" vs \"+sellerTradeStateArr[x].toBase58());\n                            listingResults.push({\n                                buyeraddress: allListingResults[x].buyeraddress, offeramount: allListingResults[x].offeramount, mint: allListingResults[x].mint, isowner: allListingResults[x].isowner, timestamp: allListingResults[x].timestamp, state: allListingResults[x].state\n                            })\n                        }\n                    }\n                }\n                x++;\n            }\n            \n            if (offers){\n                setOffers(\n                    (offers:any) => [...offers,offerResults]\n                );\n            }else {\n                setOffers(\n                    offerResults\n                ); \n            }\n\n            if (listings){\n                setListings(\n                    (listings:any) => [...listings,listingResults]\n                );\n            }else {\n                setListings(\n                    listingResults\n                ); \n            }\n\n            setLoading(false);\n        }\n    }\n\n    const getEscrowBalance = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        \n        if (!ahloading){\n            setAHLoading(true);\n            let cntr = 0;\n            \n            const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey,))[0];\n            let amount = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n            setAHBalance(amount);\n\n            setAHLoading(false);\n            \n        }\n    }\n\n    React.useEffect(() => { \n        if (thisPublicKey){\n            if (!loading){\n                if ((!offers)||(refresh)){\n                    console.log(\"Getting offers for \"+thisPublicKey);\n                    getOffers();\n                }\n            }\n        }\n    }, [refresh, thisPublicKey]);\n    \n    if (loading){\n        return (\n            <Grid container\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                sx={{\n                }} \n            >\n                <CircularProgress />\n            </Grid>\n        );\n    } else {\n        if (selectedstate == 1){\n            return (\n                \n                <Container\n                    sx={{p:0,m:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:1,\n                                ml:0,\n                                mr:0\n                            }}\n                        >\n\n                            <BootstrapDialog \n                                fullWidth={true}\n                                maxWidth={\"sm\"}\n                                PaperProps={{\n                                    style: {\n                                        background: '#13151C',\n                                        border: '1px solid rgba(255,255,255,0.05)',\n                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                        borderRadius: '20px'\n                                    }\n                                }}\n                                open={alertwithdrawopen}\n                                onClose={handleAlertWithdrawClose}\n                                aria-labelledby=\"alert-bn-dialog-title\"\n                                aria-describedby=\"alert-bn-dialog-description\"\n                                >\n                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                    <Typography>\n                                        CONFIRMATION\n                                    </Typography>\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                    <br />\n                                    <Alert \n                                        severity=\"warning\" variant=\"outlined\"\n                                        sx={{backgroundColor:'black'}}\n                                        >\n                                            You currently have <strong>{myoffers}</strong> standing offer{(myoffers > 1 && <>s</>)}, it is recommended that you cancel all standing offers and then attempt to withdraw. If you are unable to cancel then click Withdraw to force cancel from the Grape Auction House\n                                            <br/><br/>\n                                            NOTE: By pressing Withdraw you will have to Accept <strong>{myoffers}</strong> additional transaction{(myoffers > 1 && <>s</>)} with your wallet\n                                    </Alert>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleAlertWithdrawClose}>Cancel</Button>\n                                    <Button \n                                        onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                        autoFocus>\n                                    Withdraw\n                                    </Button>\n                                </DialogActions>\n                            </BootstrapDialog>\n                            \n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => (myoffers > 0 ? setAlertWithdrawOpen(true) : handleWithdrawOffer(convertSolVal(ahbalance), null))}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n                \n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:0,\n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"offers\">\n                            {offers && offers.map((item: any,key:number) => (\n                                <>\n                                    {item.state === selectedstate && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell>\n                                                <Tooltip title={`Visit profile`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <AccountCircleOutlinedIcon sx={{fontSize:\"14px\", mr:1}} />\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.buyeraddress, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell  align=\"center\"><Typography variant=\"h6\">\n                                                {item.isowner ? (\n                                                    <Tooltip title={`Offer made`}>\n                                                        <IconButton>\n                                                            <ArrowForwardIcon color=\"success\" />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    ):(\n                                                    <Tooltip title={`Offer received`}>\n                                                        <IconButton>\n                                                            <ArrowBackIcon sx={{ color: red[500] }} />\n                                                        </IconButton>\n                                                    </Tooltip>)}\n                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\"> \n                                                {(publicKey.toBase58() === item.buyeraddress) && (\n                                                    <Tooltip title={`Cancel Offer`}>\n                                                        <Button \n                                                            color=\"error\"\n                                                            variant=\"text\"\n                                                            //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            onClick={() => handleCancelWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            //onClick={() => handleCancelOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            sx={{\n                                                                borderRadius: '24px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon />\n                                                        </Button>\n                                                    </Tooltip>\n                                                    )}\n                                            </TableCell>\n                                        </TableRow>\n                                        </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        } else {\n            return (\n                <Container\n                    sx={{p:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:2\n                            }}\n                        >\n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n\n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            \n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"listings\">\n                            {listings && listings.map((item: any,key:number) => (\n                                <>\n                                    {item.state === 2 && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell  align=\"right\"><Typography variant=\"caption\">\n                                            </Typography></TableCell>\n                                            <TableCell  align=\"right\"><Typography variant=\"h6\">\n                                                {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 4)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                            </TableCell>\n                                        </TableRow>\n                                    </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        }\n    }\n}\n","import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function GrapeIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n           <path d=\"M9.01656587,22 C7.35962231,22 6.01590977,20.6620342 6.01414706,19.0104197 C6.014381,18.6854574 6.0683383,18.3627546 6.17385019,18.0552822 C4.65355783,17.7078956 3.66088018,16.2486823 3.89967765,14.712301 C3.92491623,14.5431035 3.96663621,14.3767602 4.02424609,14.2156295 C3.4237021,14.0728659 2.88175433,13.7494098 2.47193169,13.2891462 C1.72849601,12.4624125 1.51596312,11.2886187 1.92255293,10.2549928 C0.574618257,9.74031484 -0.212717429,8.33995457 0.0504549418,6.92526737 C0.313627312,5.51058017 1.55231363,4.48469804 2.99575795,4.48596237 C3.70977051,4.48440525 4.40081639,4.73735035 4.94413611,5.19913169 C5.03896245,5.11514097 5.13926233,5.03749899 5.24437799,4.96671491 L5.36894643,4.89985528 L5.42643955,4.86801737 C5.5328774,4.80668234 5.64271625,4.75140804 5.755428,4.7024602 L5.89916081,4.65470333 L5.96304206,4.63560058 C6.07846122,4.5978584 6.19572768,4.56597948 6.31438894,4.54008683 L6.45173363,4.54008683 L6.51242082,4.54008683 C6.63409636,4.52251081 6.75680077,4.51293873 6.87973802,4.51143271 C6.93403708,4.51143271 6.97555989,4.51143271 7.02027677,4.51143271 L7.08096396,4.51143271 C7.2084816,4.51824383 7.33543563,4.53313157 7.4610574,4.55600579 C7.50980885,4.56536124 7.55783865,4.578128 7.60479022,4.59421129 L7.67186553,4.61331404 C7.78701504,4.64184071 7.90012381,4.67800422 8.01043616,4.72156295 C8.08070554,4.75021708 8.14458679,4.78523878 8.2116621,4.82026049 L8.27554336,4.8552822 L8.34900679,4.8934877 C8.40018906,4.9144998 8.44936418,4.94007388 8.49593367,4.9698987 C8.57259117,5.02402315 8.62369617,5.06541245 8.67160711,5.10361795 C8.35220086,3.6040521 7.7517171,1.62054993 6.04928175,1.07930535 C5.69874518,0.95068507 5.33014791,0.877632393 4.95691236,0.862807525 C4.0913214,0.862807525 3.21614826,1.35629522 1.73090917,2.67756874 C1.60080541,2.7887062 1.4167449,2.81179054 1.26307634,2.73624297 C1.10940777,2.66069541 1.01574927,2.501077 1.02502135,2.33053546 C1.0291406,2.21770958 1.08003178,2.11164293 1.1655601,2.03762663 C2.81050232,0.569898698 3.87412515,0 4.95371829,0 C5.42529916,0.0101105104 5.89178986,0.0994489882 6.33355332,0.264254703 C7.32371271,0.601736614 7.97849554,1.12387844 8.65244274,2.34327062 C9.08779739,2.41141279 9.52771094,2.44653527 9.96839651,2.44833575 C13.057055,2.44833575 13.9513925,0.538060781 13.9865272,0.461649783 C14.0566749,0.308273678 14.2102907,0.209927141 14.3793969,0.210130246 C14.439031,0.209865925 14.4979671,0.222920722 14.5518763,0.248335745 C14.6560393,0.293055164 14.7379381,0.377435376 14.7793339,0.48268504 C14.8207296,0.587934704 14.818185,0.705314118 14.7722666,0.808683068 C14.7275497,0.910564399 13.6287922,3.30795948 9.98117276,3.30795948 C9.66619319,3.30562385 9.35160204,3.2854272 9.03892431,3.24746744 C9.21808608,3.74708278 9.36530791,4.25751208 9.47970494,4.77568741 C9.88059439,4.59234413 10.3162601,4.49680589 10.75733,4.49551375 C11.3243112,4.49761987 11.8787106,4.6622996 12.3543612,4.9698987 C12.4592934,5.03719347 12.5586292,5.11278662 12.6514091,5.1959479 C13.7179784,4.28262725 15.2782426,4.23152348 16.4026614,5.0730821 C17.5270802,5.91464071 17.9130852,7.42240785 17.3307107,8.69811867 C17.1172335,9.18183803 16.7775078,9.59963239 16.3469394,9.90795948 C16.6475777,10.4422013 16.7747835,11.0561645 16.7110626,11.6654124 C16.5482745,13.0729395 15.4233048,14.1770605 14.0088856,14.3175109 C14.0783161,14.5238349 14.1233379,14.7375349 14.1430363,14.9542692 C14.1983201,15.7406538 13.9387581,16.5168358 13.4211781,17.1128799 C13.011662,17.5917696 12.4584577,17.9266434 11.8433112,18.0680174 C11.9511271,18.3749955 12.0061994,18.6979085 12.0062084,19.0231548 C11.9957344,20.6641175 10.6628326,21.9913138 9.01656587,22 Z M9.01656587,16.8740955 C8.23171201,16.8438771 7.49314811,17.2440165 7.09170769,17.9169457 C6.69026727,18.589875 6.69026727,19.4277805 7.09170769,20.1007098 C7.49314811,20.7736391 8.23171201,21.1737785 9.01656587,21.1435601 L9.10599962,21.1435601 C10.2609266,21.0820791 11.1585961,20.1182818 11.1344522,18.9656793 C11.1103083,17.8130768 10.1730609,16.8874693 9.01656587,16.8740955 L9.01656587,16.8740955 Z M6.85737958,13.0280753 C6.05016188,13.0307334 5.31291109,13.4852636 4.95002299,14.2039995 C4.58713489,14.9227355 4.66017012,15.7837503 5.13897392,16.4315485 C5.48253616,16.8938982 5.99820802,17.1990938 6.56991395,17.278437 C6.99079272,16.6921752 7.60828846,16.2754353 8.31067804,16.1036179 C8.22868139,15.8733861 8.17609802,15.633778 8.15416898,15.3904486 C8.10820215,14.8342868 8.21881781,14.2763714 8.47357523,13.7794501 C8.07018694,13.3065158 7.48012934,13.032196 6.85737958,13.0280753 Z M9.19543337,16.0303907 C10.0990762,16.0839079 10.9301277,16.5413885 11.4568297,17.2752533 C12.5753211,17.1251594 13.3846319,16.1350614 13.3061432,15.0128326 C13.2276545,13.8906038 12.2883473,13.022019 11.1597818,13.0280438 L10.9936906,13.0280438 C10.2984222,13.0788458 9.67153958,13.4640023 9.31361654,14.0603123 C8.9556935,14.6566223 8.91159606,15.3893377 9.19543337,16.0240232 L9.19543337,16.0303907 Z M13.7405844,13.4547033 C14.8780822,13.4527628 15.8159137,12.565379 15.877036,11.4331754 C15.9381583,10.3009717 15.1012771,9.3183948 13.9705569,9.19479016 C13.8918421,9.19003787 13.812911,9.19003787 13.7341963,9.19479016 C12.9945106,9.1954234 12.3075972,9.57676471 11.9176114,10.2032707 C11.5276256,10.8297767 11.4898678,11.6126082 11.8177587,12.2735166 C12.5405612,12.4358198 13.1776329,12.8587906 13.6064338,13.4610709 L13.7405844,13.4547033 Z M4.72374579,9.17884454 C4.20148452,9.17924802 3.69727793,9.3694154 3.30558201,9.71374819 C2.87716278,10.0884383 2.61611408,10.6177935 2.58015112,11.1847786 C2.54418815,11.7517638 2.73627321,12.309676 3.11393826,12.7351664 C3.43971725,13.1036746 3.88309651,13.3488295 4.36920485,13.429233 L4.4330861,13.429233 C4.60949986,13.1734096 4.82505364,12.9467316 5.07189861,12.757453 C5.37302433,12.5381021 5.7134479,12.3781636 6.07483425,12.2862518 C6.02685202,12.155471 5.988423,12.0214019 5.959848,11.8850941 C5.81421654,11.184587 5.92766234,10.4552146 6.27925426,9.83154848 C5.87169659,9.41171294 5.30983083,9.17595915 4.72374579,9.17884454 L4.72374579,9.17884454 Z M6.95958958,12.1875543 C7.72850039,12.2144165 8.4573458,12.536039 8.99420743,13.0853835 C9.49089257,12.5739091 10.154849,12.2565511 10.8659281,12.1907381 C10.6934499,11.6251251 10.6934499,11.0211846 10.8659281,10.4555716 C10.7054989,10.0520038 10.4230819,9.70818462 10.0578303,9.47178003 C9.06331223,8.83528333 7.73970584,9.11993277 7.09693427,10.1085384 C6.6832694,10.7311114 6.63573858,11.5268185 6.97236583,12.1939219 L6.95958958,12.1875543 Z M8.9111618,8.27785818 C9.47758191,8.27752686 10.0320808,8.4400253 10.5081931,8.74587554 C10.832384,8.95675707 11.1105046,9.23073462 11.3258731,9.55137482 C11.5046094,9.30756863 11.7200929,9.09277807 11.9646856,8.9146165 C11.8986018,8.80055244 11.8419848,8.6812936 11.7954003,8.55803184 C11.4402148,7.65636899 11.5499602,6.63854258 12.0892541,5.83270622 C12.0284575,5.77863236 11.9632907,5.72964822 11.8944162,5.68625181 C11.5499331,5.46119295 11.1468536,5.3416541 10.7349715,5.34237857 C10.0888731,5.3393669 9.47598473,5.62745989 9.0673192,6.12629538 C8.65865367,6.62513086 8.49796299,7.28130319 8.6300843,7.91172214 C8.66091664,8.03795321 8.70480374,8.16065534 8.76104086,8.27785818 L8.9111618,8.27785818 Z M2.99895201,5.33921852 C2.13350184,5.33989161 1.35365398,5.86009369 1.02297389,6.65730629 C0.69229379,7.4545189 0.875886268,8.37178556 1.48816042,8.98147612 C1.72949325,9.21958505 2.02391031,9.39741279 2.34736325,9.50043415 C2.46335995,9.34425557 2.59499407,9.20024368 2.74023294,9.07062229 C3.10844546,8.75890306 3.54675058,8.54045521 4.01785796,8.43386397 C3.9832349,8.33588154 3.95443836,8.2359493 3.93161827,8.13458755 L3.93161827,8.07727931 C3.89459608,7.90128014 3.87427739,7.72219782 3.87093109,7.54240232 C3.86246147,7.16185724 3.92864665,6.78332735 4.0657689,6.42807525 C4.0657689,6.39942113 4.08812734,6.370767 4.10090359,6.34211288 C4.16114472,6.20556893 4.22940295,6.07268078 4.30532359,5.94413893 C4.31851769,5.9156609 4.33345134,5.88801616 4.35004047,5.86136035 L4.35004047,5.8422576 C3.97109966,5.52471787 3.49394423,5.34706272 2.99895201,5.33921852 L2.99895201,5.33921852 Z M13.7405844,8.32879884 C13.8473438,8.3286875 13.9540106,8.33506693 14.0599907,8.34790159 C14.7362371,8.42120368 15.3671869,8.72218725 15.8486657,9.20115774 C16.6445011,8.63099229 16.9509333,7.59535695 16.5928823,6.68596237 C16.2784485,5.87998024 15.5081686,5.34193 14.6408215,5.32242346 C13.7734745,5.30291691 12.979633,5.80579021 12.6290506,6.59681621 C12.3989609,7.11471517 12.3863092,7.70284721 12.5939159,8.2301013 C12.628905,8.32212907 12.6705367,8.41150919 12.7184844,8.4975398 C13.0466542,8.38211147 13.3926035,8.32499787 13.7405844,8.32879884 L13.7405844,8.32879884 Z M4.90900142,8.32879884 C5.60879418,8.37101575 6.2713813,8.6572887 6.78072208,9.13748191 C7.09942652,8.82539619 7.48333645,8.5873112 7.9050321,8.44023155 C7.86365578,8.32221389 7.82847344,8.20212845 7.79962803,8.0804631 C7.63211174,7.30599095 7.7815741,6.49690552 8.21485617,5.83270622 L8.21485617,5.81678726 C7.82963121,5.50130197 7.34636748,5.32910199 6.84779739,5.3296599 C6.29830626,5.32822893 5.76996856,5.54071225 5.37533455,5.92185239 C4.72015515,6.54785756 4.53316477,7.51810213 4.90900142,8.34153401 L4.90900142,8.32879884 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function withdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    //const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n\n    const amountAdjusted = await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    const instructions = [instruction];\n    \n\n\n    //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:0, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint?.toString(), // mint\n      amount:amountAdjusted // price\n    };\n\n    if (mint){\n      const mintKey = new web3.PublicKey(mint);\n      let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedMintPDA[0],\n          lamports: 0,\n        })\n      );\n\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }else{\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }\n    /*\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );*/\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { removeDuplicate } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { Connection, PublicKey} from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { Button } from '@mui/material';\n\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Avatar,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    ListItemAvatar,\n} from '@mui/material';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nexport default function SocialView(props: any){\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [type, setType] = React.useState<number>(props.type || 0);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rpclimit = 100;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n\n    const NAME_SPACE = 'Grape';\n    const GLOBAL_NAME_SPACE = '';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 12; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        setLoading(true);\n        if (!pubkey) {\n            return;\n        }\n\n        const resp = await followListInfoQuery({\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n\n    const ProfilePicture = (props:any) => {\n        const followitem = props.followitem;\n        const [address, setAddress] = React.useState(followitem.address);\n        const [loadingpicture, setLoadingPicture] = React.useState(false);\n        const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n        const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n        const countRef = React.useRef(0);\n\n        const fetchProfilePicture = async () => {\n            setLoadingPicture(true);  \n                //console.log(\"trying: \"+address)\n                try{\n                    //console.log(countRef.current+\": \"+address+\" - \"+loadingpicture);\n                    const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(address));\n                    \n                    let img_url = url;\n                    if (url)\n                        img_url = url.replace(/width=100/g, 'width=256');\n                    setProfilePictureUrl(img_url);\n                    setHasProfilePicture(isAvailable);\n                    countRef.current++;\n                }catch(e){}\n            setLoadingPicture(false);\n        }\n\n        React.useEffect(() => {       \n            if (!loadingpicture){\n                //const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                //}, 500);\n            }\n        }, []);\n\n        /*\n        React.useEffect(() => { \n            if ((!loadingpicture)&&(countRef.current<1)){\n                const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                }, 500);\n                return () => clearInterval(interval); \n            }\n        }, []);\n        */\n\n        \n        if (loadingpicture){\n            return (\n                <Avatar sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                    <CircularProgress sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }} />\n                </Avatar>)\n        }else{\n            \n            if (hasProfilePicture){\n                return (  \n                    <Avatar alt={address} src={profilePictureUrl} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                        {address.substr(0,2)}\n                    </Avatar>\n                );\n            \n            } else{\n                return (\n                    <>\n                    {followitem.avatar ?\n                        <>\n                            <Avatar alt={followitem.address} src={followitem.avatar} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                                {followitem.address.substr(0,2)}\n                            </Avatar>\n                        </>\n                    :\n                        <>\n                        {jsNumberForAddress(followitem.address) ?\n                            <>\n                            <Jazzicon diameter={56} seed={jsNumberForAddress(followitem.address)} />\n                            </>\n                        :\n                            <>\n                            <Jazzicon diameter={56} seed={Math.round(Math.random() * 10000000)} />\n                            </>\n                        }\n                        </>\n                    }\n                    </>\n                );\n            }\n        }\n    }\n\n\n    const SocialItem = (props: any) => {\n        const [followitem, setFollowItem] = React.useState(props.followitem);\n        const [followitemkey, setFollowItemKey] = React.useState(props.followitemkey);\n        \n        if (loading){\n            return <Grid item xs={12} sm={6} md={4}><CircularProgress /></Grid>\n        } else{\n            return (\n                \n                <Grid item xs={12} sm={12} md={4} lg={3}>\n\n                    <ListItem \n                        key={followitemkey}\n                        sx={{ \n                            background:'rgba(0,0,0,0.5)',\n                            borderRadius:'17px' }}>\n                        <ListItemButton\n                            component={Link} \n                            to={`${GRAPE_PROFILE}${followitem.address}`}\n                            sx={{ \n                                m:1,\n                                borderRadius:'17px'}}\n                            >\n                            <ListItemAvatar>\n                                <ProfilePicture followitem={followitem} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                sx={{ml:1}}\n                                primary={followitem.ens || trimAddress(followitem.address,4)}  \n                                secondary={<Typography variant=\"caption\" color=\"#777\">From {followitem.namespace}</Typography>}\n                            />\n                        </ListItemButton>\n                    </ListItem>\n                </Grid>\n\n\n            )\n        }\n    }\n\n    React.useEffect(() => { \n        if (publicKey){\n            initFollowListInfo();\n        }\n    }, []);\n    \n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={2} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <> \n                <Box\n                    sx={{\n                        background: 'rgba(0, 0, 0, 0.6)',\n                        borderRadius: '17px',\n                        p:4\n                    }} \n                > \n                    <Grid container \n                        spacing={{ xs: 2, md: 3 }} \n                        justifyContent=\"center\"\n                        alignItems=\"center\">\n                        \n                        {type === 0 ?\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followers && followListInfo.followers.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            \n                            {followListInfo?.followers.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followers')}>more</Button>\n                            }\n                        </>\n                        :\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followings && followListInfo.followings.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            {followListInfo?.followings.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followings')}>more</Button>\n                            }\n                        </>\n                        }\n                    </Grid>\n\n                </Box>\n            </>\n        );\n    }\n}","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\n\nimport { Connection, PublicKey, } from '@solana/web3.js'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport ImageViewer from 'react-simple-image-viewer';\nimport { Helmet } from 'react-helmet';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { createSetProfilePictureTransaction } from '@solflare-wallet/pfp';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { \n    getTokenOwnerRecordForRealm, \n} from '@solana/spl-governance';\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    Avatar,\n    Chip,\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Paper,\n    Divider,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Card,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport FlagIcon from '@mui/icons-material/Flag';\nimport EmojiFlagsIcon from '@mui/icons-material/EmojiFlags';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport SegmentIcon from '@mui/icons-material/Segment';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport BlockIcon from '@mui/icons-material/Block';\nimport LockIcon from '@mui/icons-material/Lock';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { UPDATE_AUTHORITIES } from '../utils/grapeTools/mintverification';\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY\n} from '../utils/grapeTools/constants';\n\nimport ItemOffers from './ItemOffers';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport \"../App.less\";\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { decodeMetadata } from '../utils/auctionHouse/helpers/schema';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n  \n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction GrapeVerified(props:any){\n    const [loading, setLoading] = React.useState(false);\n    const [verifiedState, setVerifiedState] = React.useState(false);\n    const [verifiedPK, setVerificationPK] = React.useState(null);\n    const [collectionImage, setCollectionImage] = React.useState(null);\n    const [collectionName, setCollectionName] = React.useState(props.symbol);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    let updateAuthority = props?.updateAuthority;\n    let grape_verified = -1;\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async (collectionAddress:string) => {\n            try {\n                let mint_address = new PublicKey(collectionAddress)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                setCollectionName(metadata.name);\n                setCollectionImage(metadata.image) \n\n                return null;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n    React.useEffect(() => { \n        try{\n            if (updateAuthority && !loading){\n                let verified = false;\n                let verified_creator = false;\n\n                // first stage verification\n                for (var item of updateAuthority.data.creators){\n                    if (item.address === updateAuthority.updateAuthority)\n                        if (item.verified === 1){\n                            // now validate verify_collection in the collection results\n                            verified_creator = true;\n                        }\n                }\n\n                // second stage verification\n                if (verified_creator){\n                    if (updateAuthority?.collection?.verified){\n                        if (updateAuthority.collection.verified === 1){\n                            if (ValidateAddress(updateAuthority.collection.key)){\n                                setVerifiedState(true);\n                                if (!collectionImage){\n                                    setVerificationPK(updateAuthority.collection.key)\n                                    getCollectionData(updateAuthority.collection.key);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // third stage verification (coming soon)\n                grape_verified = UPDATE_AUTHORITIES.indexOf(updateAuthority);\n                //grape_verified = 1;\n                if (grape_verified > -1){\n\n                }\n            }\n        }catch(e){console.log(\"ERR: \"+e)}\n    }, [updateAuthority]);\n\n    if (verifiedState){\n        \n        return (\n            <Tooltip title={`${props.symbol}: Update Authority/Creator Verified on Metaplex`} placement=\"top\">\n                <Button \n                    href={`${GRAPE_PREVIEW}${verifiedPK}`}\n                    sx={{color:'white', borderRadius:'24px'}}>\n                    {collectionName}\n                    <Avatar \n                        component={Paper} \n                        elevation={4}\n                        alt={updateAuthority.data.symbol}\n                        src={collectionImage}\n                        sx={{ width: 20, height: 20, bgcolor: \"#222\",ml:1}}\n                    />\n                    {grape_verified > -1 &&\n                        <VerifiedIcon sx={{fontSize:\"20px\",ml:1}} />\n                    }\n                </Button>\n            </Tooltip>\n        );\n    \n    } else{\n        return <>{collectionName}</>\n    } \n}\n\nfunction SocialLikes(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isLiked, setIsLiked] = React.useState(false);\n    const [loadingLikedState, setLoadingLikedState] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!mint) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:mint,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST,\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n\n    const getLikeStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingLikedState(true);\n                setIsLiked(false);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        if ((socialconnection?.connections[0].type.toString() === \"LIKE\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsLiked(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingLikedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'LIKE',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    const likeWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.LIKE)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    const likeWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    \n    React.useEffect(() => {\n        initFollowListInfo();\n        getLikeStatus();\n    },[]);\n\n    return ( \n        <>\n        {loadingLikedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isLiked ?  \n                    <Tooltip title=\"Unlike\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteIcon sx={{fontSize:'24px', color:'red'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Like\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteBorderIcon sx={{fontSize:'24px'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction SocialFlags(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFlagged, setIsFlagged] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingFlaggedState, setLoadingFlaggedState] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n    \n    \n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const getFlagStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingFlaggedState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) { \n                        if ((socialconnection?.connections[0].type.toString() === \"REPORT\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsFlagged(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFlaggedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'REPORT',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n        return;\n        }\n        \n        setLoading(true);\n        const resp = await followListInfoQuery({\n            address:mint,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n        setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n\n    const flagWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n\n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.REPORT)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n    const flagWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n\n    React.useEffect(() => {\n        initFollowListInfo();\n        getFlagStatus();\n    },[]);\n    \n    return ( \n        <>\n        {loadingFlaggedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isFlagged ?  \n                    <Tooltip title=\"Unflag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'yellow'}}\n                            >\n                            <FlagIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Flag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <EmojiFlagsIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction GalleryItemMeta(props: any) {\n    const collectionrawprimer = props.collectionrawdata.meta_primer || [];\n    const collectionrawdata = props.collectionrawdata.meta_final || [];\n    const collectionitem = props.collectionitem.collectionmeta || [];\n    const [mint, setMint] = React.useState(props.mint || null);\n    const [refreshOwner, setRefreshOwner] = React.useState(false);\n    const [loadingOwner, setLoadingOwner] = React.useState(false);\n    const [mintAta, setMintATA] = React.useState(null);\n    const [tokenOwners, setTokenOwners] = React.useState(null);\n    const [grape_member_balance, setGrapeMemberBalance] = React.useState(null);\n    const [sol_portfolio_balance, setSolPortfolioBalance] = React.useState(0);\n    const [grape_weighted_score, setGrapeWeightedScore] = React.useState(0);\n    const [grape_governance_balance, setGrapeGovernanceBalance] = React.useState(null);\n    const [grape_offer_threshhold, setGrapeOfferThreshhold] = React.useState(TOKEN_VERIFICATION_AMOUNT);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const [grape_whitelisted, setGrapeWhitelisted] = React.useState(null);\n    const [open_creator_collapse, setOpenCreatorCollapse] = React.useState(false);\n    const [open_attribute_collapse, setOpenAttributeCollapse] = React.useState(false);\n    const [currentImage, setCurrentImage] = useState(0);\n    const [isViewerOpen, setIsViewerOpen] = useState(false);\n    const [collectionItemImages, setCollectionItemImages] = useState([]);\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [open_meta, setOpenMeta] = React.useState(false);\n    const [open_offers, setOpenOffers] = React.useState(false);\n    const [open_description, setOpenDescription] = React.useState(true);\n    const [open_traits, setOpenTraits] = React.useState(true);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const {publicKey, sendTransaction} = useWallet();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const navigate = useNavigate();\n    const { enqueueSnackbar, closeSnackbar} = useSnackbar();\n    \n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n\n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow)\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    \n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n        \n    const salePrice = props.salePrice || null;\n    //console.log('GalleryItemMeta salePrice:', salePrice);\n    const handleClickOpenTraits = () => {\n        setOpenTraits(!open_traits);\n    }\n\n    const handleClickOpenMeta = () => {\n        setOpenMeta(!open_meta);\n    };\n\n    const handleClickOpenOffers = () => {\n        setOpenOffers(!open_offers);\n    };\n    const handleClickOpenDescription = () => {\n        setOpenDescription(!open_description);\n    };\n\n    const handleSendItem = () => {\n        \n    };\n\n    const openImageViewer = useCallback((index) => {\n        setCurrentImage(index);\n        setIsViewerOpen(true);\n    }, []);\n\n    const closeImageViewer = () => {\n        setCurrentImage(0);\n        setIsViewerOpen(false);\n    };\n\n    // after owner we can get the signatures for the \n\n    const getGovernanceBalance = async () => {\n        try{\n            const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n            const realmId = new PublicKey(TOKEN_REALM_ID);\n            const governingTokenMint = new PublicKey(TOKEN_VERIFICATION_ADDRESS);\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                ggoconnection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            \n            return ownerRecords;\n        } catch(e){console.log(\"ERR: \"+e);}\n    }\n\n    const fetchBalances = async () => {\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString(),\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n    \n          const response = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n          })\n          const json = await response.json();\n          const resultValues = json.result.value\n          return resultValues;\n    \n      };\n\n    const GetTokenOwner = async (tokenAddress:any) => {\n        //alert(\"HERE!\")\n        //let token_owner = await connection.getTokenLargestAccounts(new PublicKey(tokenAddress));//  Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"Token Owner: \"+JSON.stringify(token_owner));\n\n        const body = {\n          method: \"getAccountInfo\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            tokenAddress,\n            {\"encoding\":\"jsonParsed\",\n            \"commitment\":\"confirmed\"}\n            // add <object> (optional) Commitment\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const GetLargestTokenAccounts = async () => {\n        const body = {\n          method: \"getTokenLargestAccounts\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            mint,\n            {\"commitment\":\"confirmed\"}\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const fetchTokenAccountData = async () => {\n        let [flargestTokenAccounts] = await Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"settings setMintAta: \"+JSON.stringify(flargestTokenAccounts));\n        if (+flargestTokenAccounts[0].amount === 1){ // some NFTS are amount > 1\n            setMintATA(flargestTokenAccounts[0].address);\n        }\n    }\n\n    const fetchSOLBalance = async () => {\n        const body = {\n          method: \"getBalance\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString()\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value;\n        return resultValues;\n    };\n\n    const getFollowStatus = async (towner:string) => {\n        \n        if (publicKey){\n            if (towner){\n                //if (tokenOwners.data.parsed.info.owner){\n                    setLoadingFollowState(true);\n                    let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), towner);\n                    if (socialconnection){\n                        //if (socialconnection?.identity){\n                        if (socialconnection?.connections[0]?.followStatus) {  \n                            setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                        }\n                    }\n                    setLoadingFollowState(false);\n                //}\n            }\n        }\n    }\n\n    const getMintOwner = async () => {\n        setLoadingOwner(true);\n        let [tokenowner] = await Promise.all([GetTokenOwner(mintAta)]);\n        setTokenOwners(tokenowner);\n        fetchSolanaDomain(tokenowner?.data.parsed.info.owner);\n        getFollowStatus(tokenowner?.data.parsed.info.owner);\n        setLoadingOwner(false);\n    }\n\n    React.useEffect(() => {\n        if ((publicKey)&&(tokenOwners)){\n            getFollowStatus(tokenOwners?.data.parsed.info.owner);\n        }\n    }, [publicKey]);\n\n    const fetchTokenAccountOwnerHoldings = async () => {\n        if (publicKey){ \n            let [sol_rsp, portfolio_rsp, governance_rsp] = await Promise.all([fetchSOLBalance(), fetchBalances(), getGovernanceBalance()]);\n            //setGrapeWhitelisted(GRAPE_WHITELIST.indexOf(publicKey.toString()));\n            if (sol_rsp){ // use sol calc for balance\n                setSolPortfolioBalance(parseFloat(new TokenAmount(sol_rsp, 9).format()));\n            }\n            try{\n\n                if (governance_rsp?.account?.governingTokenDepositAmount){\n                    setGrapeGovernanceBalance(governance_rsp?.account?.governingTokenDepositAmount);\n                }else{    \n                    setGrapeGovernanceBalance(0);\n                }\n            }catch(e){\n                setGrapeGovernanceBalance(0);\n                console.log(\"ERR: \"+e);\n            }\n\n            try{\n                setGrapeMemberBalance(0);\n                let final_weighted_score = 0;\n                portfolio_rsp.map((token:any) => {\n                    let mint = token.account.data.parsed.info.mint;\n                    let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n                    if (mint === '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){ // check if wallet has sol\n                        if (governance_rsp?.account?.governingTokenDepositAmount){\n                            const total_grape = +balance + (+governance_rsp?.account?.governingTokenDepositAmount)/1000000\n                            setGrapeMemberBalance(total_grape);\n                            if (+total_grape >= 1000){\n                                const weighted_score = total_grape/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        } else{\n                            setGrapeMemberBalance(balance);\n                            if (+balance >= 1000){\n                                const weighted_score = +balance/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        }\n                    }\n                });\n            } catch(e){console.log(\"ERR: \"+e);}\n            \n        }\n    }\n\n    const HandleSetAvatar = async () => {\n        try{\n            const transaction = await createSetProfilePictureTransaction(publicKey, new PublicKey(mint), new PublicKey(mintAta));\n            //console.log(\"Transaction: \"+JSON.stringify(transaction));\n            enqueueSnackbar(`Preparing set your avatar with ${mint} mint`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Your avatar has been set `,{ variant: 'success', action:snackaction });\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n        } \n    }\n\n    const SearchForMint = (props: any) => {\n        const [open_dialog, setOpenPKDialog] = React.useState(false);\n        const [mintKey, setInputMintValue] = React.useState('');\n    \n        const handleClickOpenDialog = () => {\n            setOpenPKDialog(true);\n        };\n        \n        const handleCloseDialog = () => {\n            setOpenPKDialog(false);\n        };\n        \n        function HandleMintAddressSubmit(event: any) {\n            event.preventDefault();\n            if ((mintKey.length >= 32) && \n                (mintKey.length <= 44)){\n                // WalletId is base58 validate the type too later on\n                props.setMintPubkey(mintKey);\n                handleCloseDialog();\n            } else{\n                // Invalid Wallet ID\n                console.log(\"INVALID MINT\");\n            }\n        }\n        \n        return (\n          <React.Fragment>\n            <Button onClick={handleClickOpenDialog}\n                sx={{borderRadius:'24px',color:'white'}}\n            >\n                <SearchIcon />\n            </Button> \n             \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"md\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Mint\n                </DialogTitle>\n                <form onSubmit={HandleMintAddressSubmit}>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            autoComplete='off'\n                            margin=\"dense\"\n                            id=\"preview_mint_key\"\n                            label=\"Paste a mint address\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            value={mintKey}\n                            onChange={(e) => setInputMintValue(e.target.value)}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDialog}>Cancel</Button>\n                        <Button \n                            type=\"submit\"\n                            variant=\"text\" \n                            title=\"GO\">\n                                Go\n                        </Button>\n                    </DialogActions>\n                </form>\n            </BootstrapDialog>   \n          </React.Fragment>\n        );\n    }\n\n    const fetchSolanaDomain = async (ownerPublicKey:string) => {\n        if (ownerPublicKey){\n            //console.log(\"checking domains for \"+ownerPublicKey);\n            const domain = await findDisplayName(ggoconnection, ownerPublicKey);\n            if (domain){\n                if (domain[0] !== ownerPublicKey)\n                    setSolanaDomain(domain[0]);\n            }\n        }\n    }\n    \n    React.useEffect(() => { \n        if (refreshOwner){\n            //setTokenOwners(null);\n            props.setRefresh(true);\n        }\n        if ((mintAta)||(refreshOwner)){\n            getMintOwner();\n            fetchTokenAccountOwnerHoldings();\n        }\n        if (refreshOwner){\n            setRefreshOwner(!refreshOwner);\n        }\n    }, [mintAta, publicKey, refreshOwner]);\n    \n    React.useEffect(() => { \n        try{\n            ( collectionitem?.image && \n                collectionItemImages.push(collectionitem.image)\n            )\n        } catch(e){\n            console.log(\"ERR: \"+e);\n        }\n        \n        if (!tokenOwners){\n            fetchTokenAccountData();\n        }\n    }, [mint]);\n\n    try{\n        return (\n            <Grid>\n                <Helmet>\n                    <title>{`${collectionitem.name} | Grape Social. Stateless. Marketplace.`}</title>\n                    <meta property=\"og:title\" content={`${collectionitem.name} @Grape`} />\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:url\" content={window.location.href} />\n                    <meta property=\"og:image\" content={collectionitem.image} />\n                    <meta property=\"og:description\" content={collectionitem.name} />\n                    <meta name=\"theme-color\" content=\"#000000\" />\n\n                    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta name=\"twitter:site\" content={`${collectionitem.name} @Grape`} />\n                    <meta name=\"twitter:title\" content={collectionitem.name} />\n                    <meta name=\"twitter:description\" content={collectionitem.name} />\n                    <meta name=\"twitter:image\" content={collectionitem.image} />\n                </Helmet>\n\n                {isViewerOpen && (\n                    <ImageViewer\n                    src={ collectionItemImages }\n                    currentIndex={ currentImage }\n                    disableScroll={ false }\n                    closeOnClickOutside={ true }\n                    onClose={ closeImageViewer }\n                    />\n                )}\n\n                <Box\n                    sx={{\n                        mt: 2,\n                        \n                    }}\n                >\n                    <Box\n                        sx={{\n                            borderRadius: '17px',\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            mb: 4,\n                            pl: 3,\n                            pr: 3,\n                            pt: 1,\n                            pb: 1\n                        }}\n                        >\n                            <Grid container direction=\"row\" spacing={{ xs: 2, md: 3 }}>\n                                <Grid item xs={6} md={8}>\n                                    <ButtonGroup variant=\"text\">\n                                        <Button\n                                            className=\"button icon-left\"\n                                            onClick={() => navigate(-1)}\n                                            sx={{color:'white',borderRadius:'24px'}}\n                                        >\n                                            <ArrowBackIosIcon />\n                                            Back\n                                        </Button>\n                                        <SearchForMint setMintPubkey={props.setMintPubkey} />\n                                    </ButtonGroup>\n                                </Grid>\n                                <Grid item  xs={6} md={4}>\n                                    <Box display=\"flex\" justifyContent=\"flex-end\">\n                                        <ButtonGroup variant=\"text\">\n                                            <SocialLikes mint={mint} />\n                                            <SocialFlags mint={mint} />\n                                                <Grid item sx={{borderRadius:'24px',background:'none'}}>\n                                                    <Avatar \n                                                        component={Paper} \n                                                        elevation={4}\n                                                        alt={collectionitem.name}\n                                                        src={collectionitem.image}\n                                                        sx={{ width: 30, height: 30, bgcolor: \"#222\", ml:1,mr:0.5}}\n                                                    ></Avatar>\n                                                </Grid>\n                                                <Grid item>        \n                                                    <ShareSocialURL fontSize={'24px'} url={'https://grape.art'+GRAPE_PREVIEW+mint} title={'Grape DEX | '+trimAddress(mint,4)} />\n                                                </Grid>\n\n                                        </ButtonGroup>\n                                    </Box>\n                                </Grid>\n                            </Grid> \n                    </Box>    \n                    <Box\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:3,\n                            pl:4,\n                            pr:4\n                        }} \n                    >              \n                        \n                        <Grid container spacing={{ xs: 2, md: 3 }} >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Box\n                                    sx={{ \n                                        width: '100%'\n                                    }}\n                                > \n                                    <List\n                                        sx={{ \n                                            width: '100%'\n                                        }}\n                                        component=\"nav\"\n                                        >\n                                        \n                                            <ListItemText>\n                                                <Grid \n                                                    container \n                                                    spacing={2}\n                                                    direction=\"column\"\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\">\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                                            <ListItemButton\n                                                                sx={{\n                                                                    width:'100%',\n                                                                    borderRadius:'25px',\n                                                                    p: '2px'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    src={`${collectionitem.image}`}\n                                                                    srcSet={`${collectionitem.image}`}\n                                                                    alt={collectionitem.name}\n                                                                    onClick={ () => openImageViewer(0) }\n                                                                    loading=\"lazy\"\n                                                                    height=\"auto\"\n                                                                    style={{\n                                                                        width:'100%',\n                                                                        borderRadius:'24px'\n                                                                    }}\n                                                                />\n                                                            </ListItemButton>\n                                                        </Grid>\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center', mt:'-15px'}}>\n                                                            <Button\n                                                                size=\"small\" variant=\"text\" \n                                                                onClick={ () => openImageViewer(0) }\n                                                                sx={{color:'white',borderRadius:'24px'}}\n                                                            >\n                                                                Preview <OpenInFullIcon sx={{ fontSize:'16px', ml:1 }}/></Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                \n                                            </ListItemText>\n                                        \n                                    </List>\n                                </Box>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                    }}\n                                    component=\"nav\"\n                                >\n\n                                    <Box\n                                        sx={{ \n                                            p: 1,\n                                            mb: 3, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        \n                                            <ListItemButton onClick={handleClickOpenDescription}\n                                                sx={{borderRadius:'20px'}}\n                                            >\n                                                <ListItemIcon>\n                                                <SegmentIcon />\n                                                </ListItemIcon>\n                                                <ListItemText primary=\"Description\" />\n                                                {open_description ? <ExpandLess /> : <ExpandMoreIcon />}\n                                            </ListItemButton>\n                                            <Collapse in={open_description} timeout=\"auto\" unmountOnExit>\n                                                <List component=\"div\" disablePadding>\n                                                    <ListItemText primary={collectionitem?.description} sx={{p:2}}  />\n                                                </List>\n                                            </Collapse>\n                                            \n                                    </Box>\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    >         \n                                        \n                                        <ListItemButton onClick={handleClickOpenMeta}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Details\" />\n                                            {open_meta ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_meta} timeout=\"auto\" unmountOnExit>\n                                            <List component=\"div\" sx={{ pl: 4 }}>\n                                                <ListItemText>\n\n                                                <TableContainer component={Paper}\n                                                    sx={{\n                                                        background: 'rgba(255,255,255,0.015)',\n                                                        boxShadow: 3,\n                                                        borderRadius: '20px'\n                                                    }}\n                                                >\n                                                    <StyledTable \n                                                        sx={{ }} \n                                                        size=\"small\" \n                                                        aria-label=\"NFT Meta\">\n                                                        \n                                                        {collectionitem?.attributes ?\n                                                            <React.Fragment>\n\n                                                                {collectionitem.attributes?.length  && collectionitem.attributes.length > 0 ? (\n                                                                    <></>\n                                                                    )\n                                                                :\n                                                                <>\n                                                                    <TableRow\n                                                                        onClick={() => setOpenAttributeCollapse(!open_attribute_collapse)}\n                                                                    >\n                                                                        <TableCell>\n                                                                        Attributes:\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {collectionitem.attributes.length}\n                                                                            <IconButton\n                                                                                aria-label=\"expand row\"\n                                                                                size=\"small\"\n                                                                                sx={{ textAlign:\"right\" }}\n                                                                            >\n                                                                                {open_attribute_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                            </IconButton>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    <TableRow>\n                                                                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                            <Collapse in={open_attribute_collapse} timeout=\"auto\" unmountOnExit>\n                                                                                <Box sx={{ margin: 1 }}>\n                                                                                    <Table size=\"small\" aria-label=\"purchases\">\n\n                                                                                        {collectionitem.attributes.length > 0 &&\n                                                                                        <TableHead>\n                                                                                            <TableRow>\n                                                                                                <TableCell><Typography variant=\"subtitle1\">Attribute</Typography></TableCell>\n                                                                                                <TableCell><Typography variant=\"subtitle1\" >Type</Typography></TableCell>\n                                                                                            </TableRow>\n                                                                                        </TableHead>\n                                                                                        }\n                                                                                        {collectionitem.attributes.length > 0 ? collectionitem.attributes?.map((item: any) => (\n                                                                                            <TableRow>\n                                                                                                <TableCell>{item?.trait_type}</TableCell>\n                                                                                                <TableCell>{item?.value}</TableCell>\n                                                                                            </TableRow>\n                                                                                        ))  \n                                                                                        :\n                                                                                        <TableRow>\n                                                                                            <TableCell>Attributes:</TableCell>\n                                                                                            <TableCell>\n                                                                                            {collectionitem.attributes.itemType?.length > 0 &&\n                                                                                                <Tooltip title={`Type`}>\n                                                                                                <Chip label={collectionitem.attributes?.itemType} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.category?.length > 0 &&\n                                                                                                <Tooltip title={`Category`}>\n                                                                                                <Chip label={collectionitem.attributes?.category} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.rarity?.length > 0 &&\n                                                                                                <Tooltip title={`Rarity`}>\n                                                                                                <Chip label={collectionitem.attributes?.rarity} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.spec?.length > 0 &&\n                                                                                                <Tooltip title={`Spec`}>\n                                                                                                <Chip label={collectionitem.attributes?.spec} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.class?.length > 0 &&\n                                                                                                <Tooltip title={`Class`}>\n                                                                                                <Chip label={collectionitem.attributes?.class} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            </TableCell>\n                                                                                        </TableRow> \n                                                                                        }\n                                                                                    </Table>\n                                                                                </Box>\n                                                                            </Collapse>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </>\n                                                                }\n                                                            </React.Fragment>\n                                                        : null }\n\n                                                        <TableRow>\n                                                            <TableCell>Mint:</TableCell>\n                                                            <TableCell>\n                                                                <MakeLinkableAddress addr={mint} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        <TableRow>\n                                                            <TableCell>Owner:</TableCell>\n                                                            <TableCell>\n                                                                \n                                                            {tokenOwners && (\n                                                                <MakeLinkableAddress addr={tokenOwners?.data.parsed.info.owner} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            )}  \n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        {collectionitem?.symbol ? \n                                                            <TableRow>\n                                                                <TableCell>Symbol:</TableCell>\n                                                                <TableCell>{collectionitem.symbol}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem.seller_fee_basis_points > 0 ?\n                                                            <TableRow>\n                                                                <TableCell>Royalty:</TableCell>\n                                                                <TableCell>\n                                                                {(+collectionitem.seller_fee_basis_points/100).toFixed(2)}%\n                                                                <Tooltip title={`This is the rate at which royalties are shared with creators if this asset is sold using the Metaplex Auction program`}><HelpOutlineIcon sx={{ fontSize:16, ml: 1  }}/></Tooltip>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n    {collectionitem.properties?.creators ?\n                                                            <React.Fragment>\n                                                                <TableRow\n                                                                    onClick={() => setOpenCreatorCollapse(!open_creator_collapse)}\n                                                                >\n                                                                    <TableCell>Creators:</TableCell>\n                                                                    <TableCell>\n                                                                        {collectionitem.properties.creators.length}\n                                                                        <IconButton\n                                                                            aria-label=\"expand row\"\n                                                                            size=\"small\"\n                                                                            sx={{ textAlign:\"right\" }}\n                                                                        >\n                                                                            {open_creator_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                        </IconButton>\n                                                                        \n                                                                    </TableCell>\n                                                                </TableRow>\n                                                                <TableRow>\n                                                                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                        <Collapse in={open_creator_collapse} timeout=\"auto\" unmountOnExit>\n                                                                            <Box sx={{ margin: 1 }}>\n                                                                                <Table size=\"small\" aria-label=\"purchases\">\n                                                                                    <TableHead>\n                                                                                        <TableRow>\n                                                                                            <TableCell><Typography variant=\"caption\">Creator Address</Typography></TableCell>\n                                                                                            <TableCell align=\"right\"><Typography variant=\"caption\">% Royalty</Typography></TableCell>\n                                                                                        </TableRow>\n                                                                                    </TableHead>\n                                                                                    {collectionitem.properties.creators.length > 0 && collectionitem.properties.creators.map((item: any) => (\n                                                                                        <TableRow>\n                                                                                            <TableCell>\n                                                                                            <Button\n                                                                                                title=\"Visit Profile\"\n                                                                                                component={Link} \n                                                                                                to={`${GRAPE_PROFILE}${item.address}`}\n                                                                                            >\n                                                                                                <AccountCircleOutlinedIcon sx={{fontSize:'14px'}}/>\n                                                                                            </Button>\n                                                                                                <MakeLinkableAddress addr={item.address} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                                            </TableCell>\n                                                                                            <TableCell align=\"right\">{item.share}%</TableCell>\n                                                                                        </TableRow>\n                                                                                    ))}\n                                                                                </Table>\n                                                                            </Box>\n                                                                        </Collapse>\n                                                                    </TableCell>\n                                                                </TableRow>\n                                                            </React.Fragment>\n                                                        : null }\n\n\n                                                        {collectionitem?.edition ?\n                                                            <TableRow>\n                                                                <TableCell>Edition:</TableCell>\n                                                                <TableCell>{collectionitem.edition}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.background_color ?\n                                                            <TableRow>\n                                                                <TableCell>Background:</TableCell>\n                                                                <TableCell>#{collectionitem.background_color}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionrawdata?.updateAuthority ?\n                                                            <TableRow>\n                                                                <TableCell>Update Authority:</TableCell>\n                                                                <TableCell>\n                                                                    <MakeLinkableAddress addr={collectionrawdata.updateAuthority} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawdata?.isMutable == 1 ?\n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><LockOpenIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><Tooltip title={`This is immutable`}><LockIcon /></Tooltip></TableCell>\n                                                            </TableRow> }\n                                                        {collectionrawdata?.primarySaleHappened ? \n                                                            <TableRow>\n                                                                <TableCell>Primary Sale:</TableCell>\n                                                                <TableCell><CheckCircleIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                        <TableRow>\n                                                            <TableCell>Primary Sale:</TableCell>\n                                                            <TableCell><Tooltip title={`Primary sale has not occured as of this fetch`}><BlockIcon /></Tooltip></TableCell>\n                                                        </TableRow>\n                                                        }\n\n                                                        {collectionitem?.createdAt ?\n                                                            <TableRow>\n                                                                <TableCell>Created At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.createdAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.updatedAt ?\n                                                            <TableRow>\n                                                                <TableCell>Updated At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.updatedAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.deactivated ?\n                                                            <TableRow>\n                                                                <TableCell>Deactivated:</TableCell>\n                                                                <TableCell><Tooltip title={`This is deactivated`}><CheckCircleIcon /></Tooltip></TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionitem.image ?\n                                                            \n                                                            <TableRow>\n                                                                <TableCell>Image:</TableCell>\n                                                                <TableCell>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${collectionitem.image}`} target=\"_blank\">\n                                                                        View Original <OpenInNewIcon sx={{fontSize:12, ml:1}} />\n                                                                    </Button>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null}\n\n                                                        {/*collectionrawprimer.owner ?\n                                                            <TableRow>\n                                                                <TableCell>Owner:</TableCell>\n                                                                <TableCell>{collectionrawprimer.owner}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawprimer.executable ?\n                                                            <TableRow>\n                                                                <TableCell>Executable:</TableCell>\n                                                                <TableCell>{collectionrawprimer.executable}</TableCell>\n                                                            </TableRow>\n                                                        : null */}\n                                                    </StyledTable>\n                                                </TableContainer>\n                                                \n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                </List>\n                            </Grid>\n                            <Grid item xs={12} sm={12} md={6}>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                        p: 2\n                                    }}\n                                    component=\"nav\"\n                                    >       \n                                    <ListItemText>\n\n                                        <Box>\n                                            <Typography component=\"div\" variant=\"subtitle1\">\n                                               <GrapeVerified updateAuthority={collectionrawdata} symbol={collectionitem.symbol} />\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>\n                                                {collectionitem.name}\n                                                </strong>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\">\n                                                {tokenOwners && \n                                                    (<>\n                                                        {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner).length > 0) ? (\n                                                            <>\n                                                                {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner)).map(filteredMarket => (\n                                                                <>\n                                                                Listed on \n                                                                    {(filteredMarket.name.length > 0) ? (\n                                                                        <>  \n                                                                            \n                                                                            {(filteredMarket.previewUrl.length > 0) ? (\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${filteredMarket.previewUrl}${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            ):(\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} \n                                                                                        <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            )}\n                                                                        </>\n                                                                    ):(\n                                                                        <>\n                                                                        {trimAddress(tokenOwners?.data.parsed.info.owner, 4)}\n                                                                        </>\n                                                                    )}\n                                                                </>\n                                                                ))}\n                                                            </>\n                                                        )\n                                                        :\n                                                        (\n                                                            <>\n                                                            {!loadingOwner ?\n                                                            <Grid container direction=\"row\">\n                                                                <Grid item>\n                                                                {solanaDomain && solanaDomain.length > 0 ?\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{solanaDomain}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{trimAddress(tokenOwners?.data.parsed.info.owner, 4)}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n\n                                                                </>\n                                                                }\n                                                                \n                                                                </Grid>\n                                                                <Grid item \n                                                                    sx={{ \n                                                                        display: \"flex\",\n                                                                        justifyContent: 'flex-end'\n                                                                    }}>\n                                                                    <Tooltip title={`Explorer`}>\n                                                                        <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${tokenOwners?.data.parsed.info.owner}`} target=\"_blank\" sx={{borderRadius:'24px', color:'white', pl:0, pr:0}}> <OpenInNewIcon sx={{fontSize:'14px'}} /></Button>\n                                                                    </Tooltip>\n                                                                    {publicKey && publicKey.toBase58() === tokenOwners?.data.parsed.info.owner ?\n                                                                        <Tooltip title={`Set this NFT as your avatar`}>\n                                                                            <Button \n                                                                                variant=\"text\" \n                                                                                onClick={HandleSetAvatar}\n                                                                                size=\"small\"\n                                                                                className=\"profileAvatarIcon\"\n                                                                                sx={{borderRadius:'24px', color:'white'}}\n                                                                                >\n                                                                                <AccountCircleOutlinedIcon \n                                                                                    sx={{\n                                                                                        fontSize:'14px',\n                                                                                    }} \n                                                                                />\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                    :\n                                                                    <>\n                                                                        {loadingFollowState ?\n                                                                            <Button \n                                                                                sx={{borderRadius:'24px'}}\n                                                                            >\n                                                                                <CircularProgress sx={{p:'14px',m:-2}} />\n                                                                            </Button>\n                                                                        :\n                                                                            <>\n                                                                            {isFollowing ?  \n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Unfollow\"\n                                                                                        onClick={() => followWalletDisconnect(tokenOwners?.data.parsed.info.owner)}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonRemoveOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                                :\n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Follow\"\n                                                                                        onClick={() => followWalletConnect(tokenOwners?.data.parsed.info.owner)}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonAddOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                            }\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                    }\n\n                                                                </Grid>\n                                                                \n                                                            </Grid>\n                                                            :<>Loading owner</>}\n                                                            </>\n                                                        )\n                                                    }\n                                                    </>\n                                                    )\n                                                }  \n                                            </Typography>\n                                        </Box>\n                                    </ListItemText>\n                                </List>\n                                \n                                {tokenOwners?.data.parsed.info.owner &&\n                                    <ItemOffers\n                                        mintAta={mintAta} \n                                        mintOwner={tokenOwners?.data.parsed.info.owner} \n                                        mint={mint} \n                                        refreshOwner={refreshOwner}\n                                        setRefreshOwner={setRefreshOwner} \n                                        setRefresh={props.setRefresh} \n                                        grape_member_balance={grape_member_balance}\n                                        grape_governance_balance={grape_governance_balance}\n                                        grape_offer_threshhold={grape_offer_threshhold}\n                                        grape_weighted_score={grape_weighted_score}\n                                        grape_whitelisted={grape_whitelisted}\n                                        sol_portfolio_balance={sol_portfolio_balance}\n                                        />\n                                }\n                                \n\n                                {collectionitem.attributes?.length && collectionitem.attributes.length > 0 ? (\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        <ListItemButton onClick={handleClickOpenTraits}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Traits\" />\n                                            {open_traits ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_traits} timeout=\"auto\" unmountOnExit>\n                                            <List\n                                                sx={{ \n                                                    width: '100%'\n                                                }}\n                                                component=\"nav\"\n                                                >       \n                                                <ListItemText>\n                                                    <Grid item alignItems=\"center\">\n                                                        {collectionitem.attributes?.length && collectionitem.attributes.length > 0 && (\n                                                            <>\n                                                                {collectionitem.attributes?.map((item: any) => (\n                                                                    <Chip \n                                                                        sx={{\n                                                                            padding:'22.5px',\n                                                                            margin: '5px',\n                                                                            textAlign: 'center',\n                                                                            background: '#272727',\n                                                                            borderRadius: '10px'\n                                                                        }}\n                                                                        label={\n                                                                            <>\n                                                                                <strong>{item?.trait_type}</strong>\n                                                                                <Divider />\n                                                                                {item?.value}\n                                                                            </>} />\n                                                                        \n                                                                ))}\n                                                            </>  \n                                                            )\n                                                        }\n                                                    </Grid>\n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                )\n                                : <></>\n                                }\n                                    \n                            </Grid>\n                        </Grid>    \n                    \n                    </Box>\n                    {/*\n                    <CardActions\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: 'flex-end',\n                            padding: 1\n                        }}\n                    >\n                        <OfferPrompt mint={mint} />\n                    </CardActions>\n                    */}\n                </Box>  \n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e);\n        return null \n    }\n}\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nexport function PreviewView(this: any, props: any) {\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    //const [success, setSuccess] = React.useState(false);\n    const [mint, setMintPubkey] = React.useState(null);\n    const [refresh, setRefresh] = React.useState(false);\n    \n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || handlekey;\n\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [walletPKId, setInputPKValue] = React.useState(null);\n    \n    const history = useNavigate();\n    //const location = useLocation();\n    \n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        console.log(\"Sending: \"+walletPKId);\n        \n        if (ValidateAddress(walletPKId)){\n            // WalletId is base58 validate the type too later on\n            setMintPubkey(walletPKId);\n            //setPubkey(walletPKId);\n            //props.setPubkey(walletPKId);\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID MINT ID\");\n        }\n    }\n    const CollectionProfileClear = (props: any) => {\n        // TODO:\n        // Add button next to collection to clear navigation address\n        // this should only appear if the user is logged in (has a pubkey from session)\n        return (\n            <React.Fragment></React.Fragment>\n        );\n    }\n\n    const PreviewItem = (props: any) => {\n        const [thismint, setThisMint] = React.useState(props.mint);\n        const [expanded, setExpanded] = React.useState(false);\n        const [loading, setLoading] = React.useState(false);\n        const [collectionmeta, setCollectionMeta] = React.useState(null);\n        const [collectionrawdata, setCollectionRaw] = React.useState(null);\n        const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n        const { connection } = useConnection();\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n        \n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let mint_address = new PublicKey(mint)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                setCollectionRaw({meta_final,meta_response});\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n        \n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n    \n                setLoading(false);\n            }\n        }\n    \n        useEffect(() => {\n            const interval = setTimeout(() => {\n                getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [thismint]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            \n            return (\n                <Card\n                    sx={{\n                        borderRadius: '20px',\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius: '20px',\n                        }}\n                        variant=\"rectangular\" width=\"100%\" height={325} />\n                </Card>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                        <GalleryItemMeta collectionitem={collectionmeta} collectionrawdata={collectionrawdata} mint={mint} setRefresh={setRefresh} setMintPubkey={setMintPubkey} />\n                );\n            }\n            //}\n        }\n    }\n\n    React.useEffect(() => { \n        if (refresh)\n            setRefresh(!refresh);\n        \n        if (mint && ValidateAddress(mint)){\n            //props.history.push({\n            history({\n                pathname: GRAPE_PREVIEW+mint\n            },\n                { replace: true }\n            );\n        } else {\n            history({\n                pathname: '/preview'\n            },\n                { replace: true }\n            );\n        } \n        \n    }, [mint, refresh]);\n\n    if (!mint){\n        if (urlParams?.length > 0){\n            setMintPubkey(urlParams);\n        }\n    }\n\n    return (\n        <React.Fragment>\n                { mint && ValidateAddress(mint) ?\n                    <PreviewItem mint={mint} />\n                : \n                    <Paper className=\"grape-paper-background\">\n                        <Grid \n                            className=\"grape-paper\" \n                            container\n                            spacing={0}>\n                            <Grid item>\n                                <Typography \n                                    align=\"center\"\n                                    variant=\"h3\">\n                                    {'Invalid Mint'}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                }\n                \n        </React.Fragment>\n    );\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\n  export async function sellNowListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const thisWalletPublicKey = new web3.PublicKey(walletPublicKey);\n    \n    let sellerWalletKey = thisWalletPublicKey;\n    if (daoPublicKey){\n      sellerWalletKey = new web3.PublicKey(daoPublicKey);\n    }\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        +offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const [programAsSigner, programAsSignerBump] =\n        await getAuctionHouseProgramAsSigner();\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n        auctionHouseKey,\n        sellerWalletKey,\n        tokenAccountKey,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted,\n        buyPriceAdjusted,\n    );\n    const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      new BN(0),\n    );\n\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.sell(\n      tradeBump,\n      freeTradeBump,\n      programAsSignerBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n      accounts: {\n          wallet: sellerWalletKey,\n          metadata: await getMetadata(mintKey),\n          tokenAccount: tokenAccountKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          sellerTradeState: tradeState,\n          freeSellerTradeState: freeTradeState1,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n      },\n    ); \n\n    const instructions = [instruction];\n    console.log(\"sellerWalletKey: \"+sellerWalletKey.toBase58());\n    \n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:2, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber(), // price\n      score:weightedScore, // spam protection for our feed/higher score weight higher feed visibility\n    };\n    \n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n  }","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nimport { Button } from '@mui/material';\n\nimport {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { web3 } from '@project-serum/anchor';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ListItemButton,\n    Container,\n} from '@mui/material';\n\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nexport default function FeedView(props: any){\n    const [loading, setLoading] = React.useState(false);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [featured, setFeatured] = React.useState(null);\n    const [featuredmeta, setFeaturedMeta] = React.useState(null);\n    const [mergedfeaturedmeta, setMergedFeaturedMeta] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    \n    const statestruct = ['Withdraw', 'Offer', 'Sale', 'Accepted from listing', 'Buy Now', 'Cancel', ''];\n\n    const FeaturedItem = (props: any) => {\n        const [finalMeta, setFinalMeta] = React.useState(null);\n        const itemraw = props.itemmeta;\n        //const itemdata = props.itemdata;\n\n        const getCollectionItemData = async () => {\n            try {\n                //console.log(\"RAW: \"+JSON.stringify(itemraw));\n                let meta_primer = itemraw;\n                let buf = Buffer.from(itemraw.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                //setCollectionRaw({meta_final,meta_primer});\n    \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getMeta = async () => {\n            let final_meta = await getCollectionItemData();\n            setFinalMeta(final_meta);\n        }\n\n        React.useEffect(() => { \n            if ((itemraw)&&(!finalMeta)){\n                getMeta();\n            }\n        }, [itemraw]);\n\n\n        //console.log(\"HERE: \"+JSON.stringify(item));\n\n        if (!finalMeta){\n            return <><CircularProgress /></>\n        } else{\n            return (\n                <Container\n                    style={{overflow:'hidden', position:'relative', margin:0, padding:0}}\n                >\n                    <Container\n                        sx={{\n                            position:'relative',\n                            background: 'rgba(0, 0, 0, 0.1)',\n                            borderRadius: '26px',\n                            overflow:'hidden',\n                            mt:2,\n                            mb:2,\n                            ml:0,\n                            mr:0,\n                            p:0,\n                            backgroundSize: \"cover\",\n                        }} \n                    >\n                    <img\n                        src={finalMeta?.image}\n                        alt=\"\"\n                        style={{\n                            opacity: '0.1',\n                            position: 'absolute',\n                            borderRadius: '26px',\n                            marginTop:2,\n                            marginBottom:2,\n                            padding:1,\n                            top:'-20%',\n                            left:'-20%',\n                            width:'150%'\n                        }}\n                    />\n                    \n                    <Grid \n                        container \n                        direction='row'\n                        >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Grid \n                                    container \n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    <Grid item sx={{display:'column',justifyContent:'center',alignItems:'center', p:0}}>\n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.6)',\n                                                borderRadius: '26px',\n                                                width:'100%',\n                                                p:'2px',\n                                            }} \n                                        >\n                                            <ListItemButton\n                                                component={Link} to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                                sx={{\n                                                    borderRadius:'25px',\n                                                    p: 0\n                                                }}\n                                            >\n                                                <img\n                                                    src={`${finalMeta?.image}`}\n                                                    srcSet={`${finalMeta?.image}`}\n                                                    alt={finalMeta?.name}\n                                                    //onClick={ () => openImageViewer(0) }\n                                                    loading=\"lazy\"\n                                                    height=\"auto\"\n                                                    style={{\n                                                        width:'100%',\n                                                        borderRadius:'24px',\n                                                        padding:0\n                                                    }}\n                                                />\n                                            </ListItemButton>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            \n                            <Grid item xs={12} sm={12} md={6}>\n                                <Container\n                                    sx={{\n                                        minWidth: '100%',\n                                        minHeight:'100%',\n                                        m:1,\n                                        p:0\n                                    }} \n                                >\n                                    <Container>\n                                    {finalMeta?.symbol &&\n                                        <Typography variant=\"caption\">\n                                            {finalMeta?.symbol}\n                                        </Typography>\n                                        }\n                                        <Typography variant=\"h4\">\n                                            {finalMeta?.name}\n                                        </Typography>\n                                        \n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.9)',\n                                                minWidth: '100%',\n                                                minHeight:'100%',\n                                                p:1.5,\n                                                mt:1,\n                                                borderRadius:'24px',\n                                            }} \n                                        >\n                                            <Typography sx={{fontSize:'30px'}}>\n                                                {statestruct[itemraw.memo.state]} <strong>{itemraw.memo.amount}</strong> <SolCurrencyIcon sx={{fontSize:\"18px\", mr:0.5 }}/>\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                            - {itemraw.memo.timestamp} \n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <Button size=\"small\" sx={{fontSize:'10px'}} component=\"a\" href={`https://explorer.solana.com/address/${itemraw.memo.mint}`} target=\"_blank\">{trimAddress(itemraw.memo.mint,5)} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} /></Button>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\" sx={{mt:1,mb:1}}>\n                                            {finalMeta?.description}\n                                            </Typography>\n                                            \n                                            <Button \n                                                className=\"buyNowButton\"\n                                                component={Link} \n                                                to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                            >\n                                                View\n                                            </Button>\n                                        </Box>\n                                    </Container>\n                                </Container>\n                            </Grid>\n                            \n                        </Grid>\n                    </Container>\n                </Container>\n            )\n        }\n    }\n    \n    const getCollectionData = async (mintarr:string[]) => {\n        try {\n            let mintsPDAs = new Array();\n            \n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                \n                try{\n                    let meta_primer = metavalue;\n                    let buf = Buffer.from(metavalue.data);\n                    let meta_final = decodeMetadata(buf);\n                    \n                }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFeatured = async () => {\n        \n        if (!loading){\n            setLoading(true);\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n        \n            let result = await ggoconnection.getSignaturesForAddress(auctionHouseKey, {limit: 100});\n            let ahListings: any[] = [];\n            let ahListingsMints: any[] =[];\n            let exists = false;\n            let cntr = 0;\n            let cnt = 0;\n\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            let featured = null;\n            for (var value of result){\n\n                if (value.err === null){\n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n                            \n                            exists = false;\n                            if ((value) && (value.memo)){\n                                \n                                let memo_arr: any[] = [];\n                                let memo_str = value.memo;\n                                let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                if (memo_instances > 0) {\n                                    // multi memo\n                                    let mcnt = 0;\n                                    let submemo = memo_str;\n                                    //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                    for (var mx=0;mx<memo_instances;mx++){\n                                        let init = submemo.indexOf('{');\n                                        let fin = submemo.indexOf('}');\n                                        memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                        memo_arr.push(memo_str);\n                                        submemo = submemo.replace(memo_str, \"\");\n                                        //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                        //console.log(\"submemo: \"+submemo);\n                                    }\n                                } else{\n                                    let init = memo_str.indexOf('{');\n                                    let fin = memo_str.indexOf('}');\n                                    memo_str = memo_str.substr(init,fin); // include brackets\n                                    memo_arr.push(memo_str);\n                                }\n                                \n\n                                for (var memo_item of memo_arr){\n                                    try{\n                                        const memo_json = JSON.parse(memo_item);\n\n                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                        for (var i = 0; i < ahListings.length; i++){\n                                            if ((memo_json?.mint === ahListings[i].mint)){ // match same\n                                                // if match then add\n                                                if (memo_json.state === 1)\n                                                    ahListings[i].offers = ahListings[i].offers+1;\n                                                exists = true;\n                                            }\n                                        }\n\n                                        if (!exists){\n                                            let forSaleDate = ''+value.blockTime;\n                                            if (forSaleDate){\n                                                let timeago = timeAgo(''+value.blockTime);\n                                                forSaleDate = timeago;\n                                            }\n\n                                            let solvalue = convertSolVal(memo_json?.amount || memo_json?.offer);\n                                            if (memo_json?.mint){\n                                                let offer = 0;\n                                                if (memo_json.state === 1)\n                                                    offer = 1;\n                                                ahListings.push({amount: solvalue, mint: memo_json?.mint, timestamp: forSaleDate, blockTime:value.blockTime, state: memo_json?.state || memo_json?.status, offers: offer, score: memo_json?.score || 0});  \n                                                ahListingsMints.push(memo_json.mint);\n                                                \n                                            }\n                                        }\n                                    }catch(merr){console.log(\"ERR: \"+merr)}\n                                }\n                            }\n                        }\n                    } catch (e){console.log(\"ERR: \"+e)}\n                }\n            } \n\n            let collectionmeta = await getCollectionData(ahListingsMints);\n\n            setFeaturedMeta(collectionmeta);\n            setFeatured(ahListings);\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                collectionmeta[i][\"memo\"] = ahListings[i];\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                finalmeta.sort((a:any,b:any) => (b.memo.score - a.memo.score) || (b.memo.blockTime - a.memo.blockTime));\n                setMergedFeaturedMeta(finalmeta);\n            }catch(e){\n                setMergedFeaturedMeta(collectionmeta);\n            }\n            \n            \n            setLoading(false);                                      \n        }\n    }\n\n    //React.useEffect(() => { \n        if ((!loading) && (!featured))\n            getFeatured();\n    //}, []);\n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n                width=\"100%\"\n                minWidth=\"400px\"\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        <CircularProgress />\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        {mergedfeaturedmeta &&\n                            <>\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 2 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 1 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n                            </>\n                        }\n                    </Box>\n                </Grid>\n            </Grid>\n        );\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log('instruction:', instruction);\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","export const VERIFIED_CREATORS = [];\n\nexport const UPDATE_AUTHORITIES = [];\n/*\nexport const UPDATE_AUTHORITIES = [\n    'trshC9cTgL3BPXoAbp5w9UfnUMWEJx5G61vUijXPMLH', // DTP\n    '4kovSxtW7oZ3J12VpUAV6JLBydebvLUV7ZYSAfndQr6E', // Tired Turtles\n    'DC2mkgwhy56w3viNtHDjJQmc7SGu2QX785bS4aexojwX', // Degen Apes\n    'DsuFKHaT2VWTQZhWAVJnoj7uJyB65PWDLEuP6dGn2sae', // Groms\n    '8GV2kiCxbKjEGwLVfRa2Xdrb7sELL83cSx9jsPjMqrrd', // NWM\n    'BHRFPSHHtLqjbcvVCmGrCjgbUagwnKDxp4CbUgoED3tT', // PIT\n];*/","import React, { useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport moment from 'moment';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport HowToVoteIcon from '@mui/icons-material/HowToVote';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport BallotIcon from '@mui/icons-material/Ballot';\nimport SellIcon from '@mui/icons-material/Sell';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY\n} from '../utils/grapeTools/constants';\nimport { RegexTextField } from '../utils/grapeTools/RegexTextField';\nimport { MakeLinkableAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\nimport { submitOffer } from '../utils/auctionHouse/submitOffer';\nimport { acceptOffer } from '../utils/auctionHouse/acceptOffer';\nimport { cancelListing } from '../utils/auctionHouse/cancelListing';\nimport { sellNowListing } from '../utils/auctionHouse/sellNowListing';\nimport { buyNowListing } from '../utils/auctionHouse/buyNowListing';\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { depositInGrapeVine } from '../utils/auctionHouse/depositInGrapeVine';\nimport { createDAOProposal } from '../utils/auctionHouse/createDAOProposal';\n\nimport \"../App.less\";\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from \"@solana/wallet-adapter-react-ui\";\n\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n\nfunction convertSolVal(sol: any){\n    sol = parseFloat(new TokenAmount(sol, 9).format());\n    return sol;\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction SellNowVotePrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const [daoPublicKey, setDaoPublicKey] = React.useState(null);\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                const transaction = new Transaction();\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey);\n                \n                const instructionsArray = [transactionInstr.instructions].flat();        \n                \n                // we need to pass the transactions to realms not to the wallet, and then with the instructoin set we pass to the wallet only the ones from realms\n                if (daoPublicKey){\n                    const transactionInstr2 = await createDAOProposal(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey, connection, transactionInstr, sendTransaction);\n                    \n                    console.log(\"transactionInstr2: \"+JSON.stringify(transactionInstr2));\n                    const instructionsArray2 = [transactionInstr2.instructions].flat();\n                    console.log(\"instructionsArray2: \"+ JSON.stringify(instructionsArray2));\n                    transaction.add(...instructionsArray2);\n                } else {\n                    transaction.add(\n                        ...instructionsArray\n                    );\n                }\n                \n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n                \n            \n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n\n    React.useEffect(() => {\n        for (var featured of FEATURED_DAO_ARRAY){\n            if (featured.address === mintOwner){\n                setDaoPublicKey(featured.address);\n            }\n        } \n        // static grape test (remove after testing)\n        if (mintOwner === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK')\n            setDaoPublicKey(featured.address);\n    },[]);\n\n    return (\n        <React.Fragment>\n            \n            {daoPublicKey ?\n               <> \n        \n                    <Button \n                        size=\"large\" \n                        variant=\"outlined\" \n                        sx={{\n                            borderRadius: '10px',\n                        }}\n                        value=\"Sell Now Instructions\" onClick={handleClickOpenDialog}>\n                        <HowToVoteIcon sx={{mr:1}}/> VOTE TO LIST\n                    </Button>            \n                    <BootstrapDialog \n                        fullWidth={true}\n                        maxWidth={\"sm\"}\n                        open={open_dialog} onClose={handleCloseDialog}\n                        PaperProps={{\n                            style: {\n                                background: '#13151C',\n                                border: '1px solid rgba(255,255,255,0.05)',\n                                borderTop: '1px solid rgba(255,255,255,0.1)',\n                                borderRadius: '20px'\n                            }\n                        }}\n                    >\n                        <DialogTitle>\n                            PROPOSE A SELL NOW PRICE\n                        </DialogTitle>\n                        <form onSubmit={handleSellNow}>\n                        <DialogContent>\n                            <RegexTextField\n                                regex={/[^0-9]+\\.?[^0-9]/gi}\n                                autoFocus\n                                autoComplete='off'\n                                margin=\"dense\"\n                                id=\"preview_sell_now_id\"\n                                label=\"Set your sale price\"\n                                type=\"text\"\n                                fullWidth\n                                variant=\"standard\"\n                                value={sell_now_amount}\n                                onChange={(e: any) => {\n                                    setSellNowAmount(e.target.value)}\n                                }\n                                inputProps={{\n                                    style: { \n                                        textAlign:'center', \n                                        fontSize: '34px'\n                                    }\n                                }}\n                            />\n                            <Grid \n                                container\n                                alignContent='flex-end'\n                                justifyContent='flex-end'\n                            >\n                                <Grid item\n                                    sx={{textAlign:'right'}}\n                                >\n                                    <Typography\n                                        variant=\"caption\"\n                                    >\n                                        Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDialog}>Cancel</Button>\n                            <Button \n                                type=\"submit\"\n                                variant=\"text\" \n                                disabled={+sell_now_amount < 0.001}\n                                title=\"Submit\">\n                                    SUBMIT\n                            </Button>\n                        </DialogActions>\n                        </form>\n                    </BootstrapDialog> \n                </>\n            :\n            <>\n                <Grid item>\n                    <Tooltip title={`This NFT is currently owned by a program and may be listed at a marketplace`}>\n                        <Button sx={{borderRadius:'10px'}}>\n                            <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                            LISTED/PROGRAM OWNED NFT\n                            </Alert>\n                        </Button>\n                    </Tooltip>\n                </Grid>  \n            </>\n            }  \n        </React.Fragment>\n    );\n}\n\nfunction SellNowPrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                //START SELL NOW / LIST\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, null);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    return (\n        <React.Fragment>\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                sx={{\n                    borderRadius: '10px',\n                }}\n                value=\"Sell Now\" onClick={handleClickOpenDialog}>\n                <AccountBalanceWalletIcon sx={{mr:1}}/> Sell Now\n            </Button>            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                }}\n            >\n                <DialogTitle>\n                    SET SELL NOW PRICE\n                </DialogTitle>\n                <form onSubmit={handleSellNow}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_sell_now_id\"\n                        label=\"Set your sale price\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={sell_now_amount}\n                        onChange={(e: any) => {\n                            setSellNowAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={+sell_now_amount < 0.001}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n}\n\nexport function OfferPrompt(props: any) {\n    const [open_dialog, setOpenOPDialog] = React.useState(false);\n    const [offer_amount, setOfferAmount] = React.useState('');\n    //const [sol_balance, setSolBalance] = React.useState(props.solBalance);\n    const sol_balance = props.solBalance;  \n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;  \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n\n    // using wallet-adapter\n    const buyerPublicKey = publicKey;\n    \n    const handleClickOpenDialog = () => {\n        setOfferAmount('');\n        setOpenOPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenOPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    async function HandleOfferSubmit(event: any) {\n        event.preventDefault();\n        if (+offer_amount > 0) {\n            handleCloseDialog();\n            //check the buyerwallet offer balance and that no other pending offer exists\n            /*const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const balance = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n            if (balance === 0) {    \n\t\t\t*/\n\t\t\t//no need allowing for multiple offers\n                try {\n                    const transactionInstr = await submitOffer(+offer_amount, mint, publicKey.toString(), mintOwner);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n\n                    enqueueSnackbar(`Preparing to make an offer for ${+offer_amount} SOL`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection)\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Offer sent `,{ variant: 'success', action:snackaction });\n                    \n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            props.setRefreshOffers(true);\n                        }, GRAPE_RPC_REFRESH);\n                } catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                    console.log(\"Error: \"+e);\n                    //console.log(\"Error: \"+JSON.stringify(e));\n                }\n            /*}\n            else {\n                enqueueSnackbar(`To make a new offer you must first cancel the existing offer of ${convertSolVal(balance)} SOL.`,{ variant: 'warning' });\n            } */       \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    \n    return (\n\n        <React.Fragment>\n\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                value=\"Make Offer\" \n                onClick={handleClickOpenDialog}\n                sx={{\n                    color: '#fff',\n                    borderColor: '#fff',\n                    borderRadius: '10px',\n                }}\n            >\n                <SellIcon sx={{mr:1}}/> Make offer\n            </Button> \n            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    /*\n                    style: {\n                        \n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },*/\n                    }}\n                >\n                <DialogTitle>\n                    MAKE AN OFFER\n                </DialogTitle>\n                <form onSubmit={HandleOfferSubmit}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        //regex={/[^0-9]+\\.?[0-9]/gi}\n                        //regex={/^[+-]?([0-9]+\\.?[0-9]*|\\.[0-9]+)$/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_offer_id\"\n                        label={`Set your offer`}\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={offer_amount}\n                        onChange={(e: any) => {\n                            setOfferAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Available Balance: {sol_balance} <SolCurrencyIcon sx={{fontSize:\"10px\"}} />\n                                <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                    <Button \n                                        onClick={() => {\n                                            setOfferAmount((String)(sol_balance))}}\n                                    > \n                                        Max \n                                    </Button>\n                                    <Button  \n                                        onClick={() => {\n                                            setOfferAmount((String)(+sol_balance/2))}}\n                                    > \n                                        Half\n                                    </Button>\n                                </ButtonGroup>\n                                {(props.highestOffer > 0) && (\n                                    <>\n                                    <br/>Highest Offer: \n                                        {(props.highestOffer < sol_balance+0.001) ?\n                                            <Button \n                                                onClick={() => {\n                                                    setOfferAmount((String)(+props.highestOffer+0.001))}}\n                                            > \n                                                {props.highestOffer}\n                                            </Button>\n                                        : \n                                            <>\n                                                {props.highestOffer}\n                                            </>\n                                        }\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={((+offer_amount > sol_balance) || (+offer_amount < 0.001) || (+offer_amount < props.highestOffer))}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n\n}\n\nexport default function ItemOffers(props: any) {\n    const [mintAta, setMintAta] = React.useState(props.mintAta);\n    const [offers, setOffers] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const pubkey = props.pubkey || null;\n    const mintOwner = props.mintOwner;\n    \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const walletPublicKey = publicKey;\n    const mint = props.mint; \n    const [refreshOffers, setRefreshOffers] = React.useState(false);\n    const anchorWallet = useAnchorWallet();\n    const [alertopen, setAlertOpen] = React.useState(false); \n    const [alertbuynowopen, setAlertBuyNowOpen] = React.useState(false);\n    const [final_offeramount, setFinalOfferAmount] = React.useState(null);\n    const [final_offerfrom, setFinalOfferFrom] = React.useState(null);\n    const [salePrice, setSalePrice] = React.useState(props.salePrice);\n    const [saleDate, setSaleDate] = React.useState(null);\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const [highestOffer, setHighestOffer] = React.useState(0);\n    const [openOffers, setOpenOffers] = React.useState(0);\n    const grape_governance_balance = props.grape_governance_balance;\n    const grape_offer_threshhold = props.grape_offer_threshhold;\n    const grape_member_balance = props.grape_member_balance;\n    const grape_whitelisted = props.grape_whitelisted;\n    const grape_weighted_score = props.grape_weighted_score;\n    const sol_portfolio_balance = props.sol_portfolio_balance;\n    \n    const handleAlertBuyNowClose = () => {\n        setAlertBuyNowOpen(false);\n    };\n    const handleAlertBuyNowOpen = () => {\n        setAlertBuyNowOpen(true);\n    };\n    const setBuyNowPrompt = () => {\n        handleAlertBuyNowOpen();\n    }\n    \n    const handleAlertClickOpen = () => {\n        setAlertOpen(true);\n    };\n    \n    const handleAlertClose = () => {\n        setAlertOpen(false);\n    };\n    const handleClick = () => {\n        setOpenOffersCollapse(!open_offers_collapse);\n    }\n\n    const setAcceptPrompt = (offeramount:any, offerfrom:any) => {\n        setFinalOfferAmount(offeramount);\n        setFinalOfferFrom(offerfrom);\n        handleAlertClickOpen();\n    }\n\n    const handleAcceptOffer = async (offerAmount: number, buyerAddress: any) => {\n        handleAlertClose();\n\n        try {\n            const transactionInstr = await acceptOffer(offerAmount, mint, walletPublicKey, buyerAddress.toString());\n            const instructionsArray = [transactionInstr.instructions].flat();  \n            const transaction = new Transaction()\n            .add(...instructionsArray);\n\n            enqueueSnackbar(`Preparing to accept offer of: ${offerAmount} SOL from: ${buyerAddress.toString()}`,{ variant: 'info' });\n            const signedTransaction2 = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction2}\n                </Button>\n            );\n            enqueueSnackbar(`NFT transaction completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                props.setRefresh(true);\n                //props.refreshOffers(true);\n                //props.setRefreshOwner(true);\n            }, GRAPE_RPC_REFRESH);\n                \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n        \n    }\n\n    const handleCancelListing =  async (salePrice: number) => {\n        try {\n            //START CANCEL LISTING\n            const transactionInstr = await cancelListing(salePrice, mint, walletPublicKey.toString(), mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Canceling Sell Now Price for ${salePrice} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Sell Now Price Removed `,{ variant: 'success', action:snackaction });\n            //END CANCEL LISTING\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleWithdrawOffer = async (offerAmount: number) => {\n        try {\n            //const transactionInstr = await withdrawOffer(offerAmount, mint, walletPublicKey.toString(), mintOwner);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n\n            enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection)\n           \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Withdrawal complete `,{ variant: 'success', action:snackaction });\n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleCancelOffer = async (offerAmount: number) => {\n        try {\n\n            //const transactionInstr = await cancelOffer(offerAmount, mint, walletPublicKey, mintOwner);\n\t\t\tconst transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been cancelled `,{ variant: 'success', action:snackaction });\n                \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center',\n              },\n              persist: true,\n            });\n            setTimeout(function() {\n              closeSnackbar(eskey);\n              setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    //console.log('mintowner: ', mintOwner);\n    const GetSignatureOffers = async (spkey: string, until: any, slimit: Number)  => { // made this more generic of a function\n        const gslimit = slimit || 25;\n        const body = {\n          method: \"getSignaturesForAddress\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            spkey,\n            {\n                \"limit\":gslimit,\n                \"commitment\":\"confirmed\",\n                //\"before\":beforeSignature,\n                //\"until\":until \n            }\n          ],\n          \"id\":1,\n        };\n\n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result\n        return resultValues;\n    };\n\n    const getOffers = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(pubkey, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n        \n        //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n        //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n        \n        /*\n        console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n        console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n        */\n\n        //console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        \n        let [result] = await Promise.all([GetSignatureOffers(derivedMintPDA[0].toString(),'', 25)]);\n        let offerResults: any[] = [];\n\t\tlet offerResultsCancelled: any[] = [];\n\t\tlet exists = false;\n        //let salePrice = 0;\n        let existSaleCancelAction = 0;\n        let cnt = 0;\n        let open_offers = 0;\n        var forSale = 0;\n        var forSaleDate = null;\n        var forSaleTimeAgo = null;\n        //console.log('derivedMintPDA[0]: '+derivedMintPDA[0].toString());\n\n        if (!loading){\n            setLoading(true);\n            \n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            setOpenOffers(0);\n            for (var value of result){\n                if (value.err === null){                   \n                    \n                    const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n\n                    try{\n                        //console.log(\"value: \"+JSON.stringify(value));\n                        //console.log(\"gtai (\"+getTransactionAccountInputs2.length+\"): \"+JSON.stringify(getTransactionAccountInputs2[cnt]));\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();\n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n                            let instructionType = getTransactionAccountInputs.meta.logMessages[1];\n                            let allLogMessages = getTransactionAccountInputs.meta.logMessages;\n\n                            //console.log(\"feePayer: \"+feePayer.toBase58());\n\n                            //console.log('getTransactionAccountInputs:', getTransactionAccountInputs);\n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.meta.preTokenBalances));\n                            let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;                        \n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.transaction.feePayer));\n                            //if (auctionMint){\n                            {    \n                                    \n                                if ((value) && (value?.memo)){\n\n                                    let memo_arr: any[] = [];\n                                    let memo_str = value.memo;\n                                    let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                    if (memo_instances > 0) {\n                                        // multi memo\n                                        let mcnt = 0;\n                                        let submemo = memo_str;\n                                        //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                        for (var mx=0;mx<memo_instances;mx++){\n                                            let init = submemo.indexOf('{');\n                                            let fin = submemo.indexOf('}');\n                                            memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                            memo_arr.push(memo_str);\n                                            submemo = submemo.replace(memo_str, \"\");\n                                            //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                            //console.log(\"submemo: \"+submemo);\n                                        }\n                                    } else{\n                                        let init = memo_str.indexOf('{');\n                                        let fin = memo_str.indexOf('}');\n                                        memo_str = memo_str.substr(init,fin); // include brackets\n                                        memo_arr.push(memo_str);\n                                    }\n                                    \n                                    for (var memo_item of memo_arr){\n                                        try{\n                                            const memo_json = JSON.parse(memo_item);\n                                    \n                                            /*\n                                            if ((memo_json?.status === 3) || \n                                                (memo_json?.status === 4) ||\n                                                (memo_json?.state === 3) ||\n                                                (memo_json?.state === 4)){\n                                                if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                    //let sol = parseFloat(new TokenAmount(memo_json?.amount, 9).format());\n                                                    //console.log(\"Sold for: \"+sol);\n                                                    offerResults.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: getTransactionAccountInputs.meta.preTokenBalances[0].mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                }\n                                            }*/\n\n                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                            if ( feePayer.toBase58() !== mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                                                \n                                                //console.log(\"value: \"+JSON.stringify(value));\n                                                const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                                let amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,); // total amount on escrow\n                                                // we need to now get the amount of the offer\n                                                //console.log(amount);\n                                                //let amount = await getTokenAmount(anchorProgram, escrow, new PublicKey(auctionMint),);\n                                                // we need to filter to find the amount that was offered to the specific mint\n                                                \n                                                if (amount_on_escrow >= 0) {\n                                                //{\n                                                    //let [inner_result] = await Promise.all([GetSignatureOffers(mintAta, '')]); // making this call again to get the memos                                       \n                                                    exists = false;                   \n                                                    {\n                                                        try{    \n                                                            if ((memo_json?.status === 0)||\n                                                                (memo_json?.status === 5) ||\n                                                                (memo_json?.state === 0)||\n                                                                (memo_json?.state === 5)){ // add to an array to search against other offers and cancel them out\n                                                                offerResultsCancelled.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                            }\n                                                            \n                                                            //console.log('memo_json: ' + memo_str);\n                                                            \n                                                            //if (memo_json.mint === getTransactionAccountInputs.meta.preTokenBalances[0].mint){\n                                                            {  \n                                                                //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n\n                                                                if ((memo_json?.status === 0) || // withdraw\n                                                                    (memo_json?.status === 1) || // offer\n                                                                    (memo_json?.status === 2) || // sale\n                                                                    (memo_json?.status === 3) || // listing/accept\n                                                                    //(memo_json?.status === 4) || // buy now\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) || // withdraw\n                                                                    (memo_json?.state === 1) || // offer\n                                                                    (memo_json?.state === 2) || // sale\n                                                                    (memo_json?.state === 3) || // listing/accept\n                                                                    //(memo_json?.state === 4) || // buy now\n                                                                    (memo_json?.state === 5)){ // cancel\n                                                                    \n                                                                    //console.log(feePayer.toBase58() + \": \"+memo_str);\n\n                                                                    /*if ((memo_json?.amount <= amount_on_escrow)||\n                                                                        (memo_json?.offer <= amount_on_escrow)){ //.offer used in beta*/\n                                                                        \n                                                                        let found = false;\n                                                                        //console.log(feePayer+\": \"+JSON.stringify(memo_str));\n                                                                        for (var cancelled of offerResultsCancelled){\n                                                                            if ((cancelled.buyeraddress === feePayer.toBase58())&&\n                                                                                (cancelled.offeramount === amount_on_escrow)){\n                                                                                    found = true;\n                                                                            }\n                                                                        }\n                                                                        \n                                                                        if (!found){\n                                                                            //if (amount_on_escrow > highestOffer){\n                                                                                let sol = parseFloat(new TokenAmount(highestOffer, 9).format());\n                                                                                setHighestOffer(sol);\n                                                                            //}\n\n                                                                            exists = false;\n                                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                            for (var i = 0; i < offerResults.length; i++){\n                                                                                if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                                                    exists = true;\n                                                                                }\n                                                                            }\n                                                                            \n                                                                            if (!exists){\n                                                                                if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                                    //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                                    \n                                                                                    if (memo_json?.state === 1 || memo_json?.status === 1){\n                                                                                        open_offers++;\n                                                                                    }\n\n                                                                                    if (feePayer.toBase58() === mintOwner)\n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                    else   \n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    // }\n                                                                }\n                                                            }\n                                                        }catch(e){console.log(\"ERR: \"+e)}\n                                                    }\n                                                }\n                                            }\n                                            //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                            if ( feePayer.toBase58() === mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && existSaleCancelAction === 0){\n                                                //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                                                                    \n                                                for (var i = 0; i < offerResults.length; i++){\n                                                    if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                        exists = true;\n                                                    }\n                                                }\n\n                                                if (!exists){\n                                                    //console.log(feePayer+\": \"+JSON.stringify(memo_str)); \n                                                    if ((memo_json?.status === 2) ||\n                                                        (memo_json?.state === 2)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//make a final check for seller trade state\n                                                            const mintOwnerPK = new PublicKey(mintOwner);\n                                                            const mintKey = new PublicKey(mint);\n                                                            const tokenAccountKey = (await getAtaForMint(mintKey, mintOwnerPK))[0];\n                                                            const tokenSizeAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  1,\n                                                                  mintKey,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                            //console.log('offerAmount', offerAmount);\n                                                            const buyPriceAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  convertSolVal(offerAmount),\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n\n                                                            const sellerTradeState = (\n                                                                await getAuctionHouseTradeState(\n                                                                  auctionHouseKey,\n                                                                  mintOwnerPK,\n                                                                  tokenAccountKey,\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintKey,\n                                                                  tokenSizeAdjusted,\n                                                                  buyPriceAdjusted,\n                                                                )\n                                                            )[0];\n                                                            const sellerTradeStateInfo = await ggoconnection.getAccountInfo(sellerTradeState);        \n                                                            //console.log('sellerTradeStateInfo:', sellerTradeStateInfo);\n                                                            if (sellerTradeStateInfo != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSale = memo_json?.amount || memo_json?.sellPrice;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSaleDate = value.blockTime;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                        //console.log('Saleprice:', salePrice);\n                                                    }\n                                                }\n                                                existSaleCancelAction = 1;\n                                            }\n                                        } catch(ert){console.log(\"ERR: \"+ert);}\n                                    }\n                                }\n                            }\n                        }\n                    }catch(er){console.log(\"ERR: \"+er)}\n                    cnt++;\n                }\n            }\n\n            setOpenOffers(open_offers);\n            // sort offers by highest offeramount\n            //console.log(\"offerResults pre: \"+JSON.stringify(offerResults));\n            offerResults.sort((a,b) => (a.offeramount < b.offeramount) ? 1 : -1);\n            //console.log(\"offerResults post: \"+JSON.stringify(offerResults));\n            setOffers(\n                offerResults\n            );\n            setSalePrice(\n                convertSolVal(forSale)\n            );\n        \n            if (forSaleDate){\n                let prettyForSaleDate = moment.unix(+forSaleDate).format(\"MMMM Do YYYY, h:mm a\");\n                setSaleDate(\n                    prettyForSaleDate\n                );\n                if (forSaleDate){\n                    let timeago = timeAgo(forSaleDate);\n                    setSaleTimeAgo(timeago);                                          \n                }\n            }\n            setLoading(false);\n        }\n    }\n\n    const handleBuyNow =  async (salePrice: number) => {\n\n        const buyerPublicKey = publicKey;\n        const sellerWalletKey = new web3.PublicKey(mintOwner);\n        handleAlertBuyNowClose();\n\n        try {\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n\t\t\tconst escrowAmount = convertSolVal(amount);\n            //if (amount === 0){\n                const transactionInstr = await buyNowListing(salePrice, mint, sellerWalletKey.toString(), buyerPublicKey);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                \n                enqueueSnackbar(`Preparing to BUY NOW: ${salePrice} SOL from: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                //const signedTransaction = await sendTransaction(transaction, connection);\n                //await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Executing transfer for: ${mint.toString()}`,{ variant: 'info' });\n                const signedTransaction2 = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction2}\n                    </Button>\n                );\n                enqueueSnackbar(`NFT transaction complete `,{ variant: 'success', action:snackaction });\n                \n                if (escrowAmount > 0){\n                    //check the amount to redeposit \n                    let depositAmount = 0;\n                    if (escrowAmount > salePrice){\n                        depositAmount = salePrice;\n                    } else {\n                        depositAmount = escrowAmount;\n                    }\n                    const transactionInstr = await depositInGrapeVine(depositAmount, buyerPublicKey);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n                    \n                    enqueueSnackbar(`Preparing to Deposit amount back in GrapeVine: ${depositAmount} SOL to: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection);\n                    \n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Deposit back to GrapeVine completed`,{ variant: 'success', action:snackaction });\n                }\n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                });\n                \n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefresh(true);\n                }, GRAPE_RPC_REFRESH);\n\n            /*}\n            else {\n                enqueueSnackbar(`To BUY NOW you must first cancel the existing offer of ${convertSolVal(amount)} SOL.`,{ variant: 'warning' });\n            }*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }     \n    }\n\n    const setSolanaPay = (props: any) => {\n        /* // NATIVE SOL\n            console.log('2. 🛍 Simulate a customer checkout \\n');\n            const amount = new BigNumber(20);\n            const reference = new Keypair().publicKey;\n            const label = 'Jungle Cats store';\n            const message = 'Jungle Cats store - your order - #001234';\n            const memo = 'JC#4098';\n        */\n\n        /* // SPL TOKEN\n        console.log('2. 🛍 Simulate a customer checkout \\n');\n        const amount = new BigNumber(20);\n        const reference = new Keypair().publicKey;\n        const label = 'Jungle Cats store';\n        const message = 'Jungle Cats store - your order - #001234';\n        const memo = 'JC#4098';\n        const splToken = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v)';\n        \n        */\n\n        /* // CREATE LINK\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo, splToken });\n        */\n\n        /*// ENCODE TO QR\n        \n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        */\n\n\n        /* // ADD QR TO PAGE\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        // get a handle of the element\n        const element = document.getElementById('qr-code');\n\n        // append QR code to the element\n        qrCode.append(element);\n        */\n\n        return \n\n    }\n    \n    const ItemTools = (props: any) => {\n        \n        return (\n            <>\n            {(OTHER_MARKETPLACES.filter(e => e.address === mintOwner).length > 0) ? (\n                <></>\n            ):(\n                <Box\n                    sx={{ \n                        p: 1, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px',\n                        mb: 3\n                    }}\n                > \n                    <List\n                        sx={{ \n                            width: '100%'\n                        }}\n                        component=\"nav\"\n                        >       \n                        <ListItemText>\n                        \n                        {publicKey ? (\n                            <>\n                                {publicKey.toString() !== mintOwner ? (\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Buy now: \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                ):(\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Selling now: \n                                            \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                )}\n    \n                                <Grid \n                                    container \n                                    spacing={2}\n                                    direction=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    \n                                    {publicKey.toString() !== mintOwner ? (\n                                            <Grid \n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\">\n                                                <>\n                                                            <BootstrapDialog \n                                                                fullWidth={true}\n                                                                maxWidth={\"sm\"}\n                                                                PaperProps={{\n                                                                    style: {\n                                                                        background: '#13151C',\n                                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                                        borderRadius: '20px'\n                                                                    }\n                                                                }}\n                                                                open={alertbuynowopen}\n                                                                onClose={handleAlertBuyNowClose}\n                                                                aria-labelledby=\"alert-bn-dialog-title\"\n                                                                aria-describedby=\"alert-bn-dialog-description\"\n                                                                >\n                                                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                                                    <Typography>\n                                                                        BUY NOW CONFIRMATION\n                                                                    </Typography>\n                                                                </DialogTitle>\n                                                                <DialogContent>\n                                                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                                                    <br />\n                                                                    <Alert \n                                                                        severity=\"info\" variant=\"outlined\"\n                                                                        sx={{backgroundColor:'black'}}\n                                                                        >\n                                                                        Amount: {salePrice}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                                        Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                                        Owner: <MakeLinkableAddress addr={mintOwner} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                                        <Typography sx={{textAlign:'center'}}>\n                                                                        Make sure the above is correct<br/>press Accept to proceed\n                                                                        </Typography>\n                                                                    </Alert>\n                                                                    \n                                                                    </DialogContentText>\n                                                                </DialogContent>\n                                                                <DialogActions>\n                                                                    <Button onClick={handleAlertBuyNowClose}>Cancel</Button>\n                                                                    <Button \n                                                                        onClick={() => handleBuyNow(salePrice)}\n                                                                        autoFocus>\n                                                                    Accept\n                                                                    </Button>\n                                                                </DialogActions>\n                                                            </BootstrapDialog>\n                                                            \n                                                            <Grid item>\n                                                                {( (salePrice > 0) ?\n                                                                    <>\n                                                                        {/*\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Use Solana Pay\" \n                                                                            onClick={() => setSolanaPay(true)}\n                                                                            sx={{\n                                                                                background: 'linear-gradient(268.11deg, #00F0DD 3.12%, #DC1FFF 96.88%)',\n                                                                                borderRadius: '10px',\n                                                                                color: '#fff',\n                                                                                mr:1,\n                                                                            }}\n                                                                        >\n                                                                            <QrCodeIcon />\n                                                                        </Button>\n                                                                        */}\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Buy Now\" \n                                                                            className=\"buyNowButton\"\n                                                                            onClick={() => setAlertBuyNowOpen(true)}\n                                                                            sx={{\n                                                                                \n                                                                            }}\n                                                                        >\n                                                                            <AccountBalanceWalletIcon sx={{mr:1}}/> Buy Now\n                                                                        </Button>\n                                                                    </>\n                                                                :<></>)}\n                                                            </Grid>\n\n                                                        {((grape_whitelisted > -1) ||\n                                                            (grape_member_balance > grape_offer_threshhold)) ? (\n                                                            <Grid item>\n                                                                {ValidateCurve(mintOwner) ?\n                                                                    <OfferPrompt mint={mint} mintOwner={mintOwner} setRefreshOffers={setRefreshOffers} solBalance={sol_portfolio_balance} highestOffer={highestOffer} />\n                                                                :\n                                                                    <SellNowVotePrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                                }\n                                                            </Grid>\n                                                        ) : (\n                                                            <Grid item>\n                                                                <Tooltip title={`The Marketplace requires ${TOKEN_VERIFICATION_AMOUNT} ${TOKEN_VERIFICATION_NAME} to make an offer`}>\n                                                                    <Button sx={{borderRadius:'10px'}}>\n                                                                        <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                                                                        Offers limited to {TOKEN_VERIFICATION_NAME} holders\n                                                                        </Alert>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                        )}\n                                                </>\n                                            </Grid>\n                                    )\n                                    :\n                                        <Grid \n                                        container\n                                        spacing={2}\n                                        alignItems=\"center\"\n                                        justifyContent=\"center\">\n                                            <Grid item>\n                                                \n                                                {( (salePrice > 0) ?\n                                                    <>\n                                                        <Button \n                                                            size=\"large\" \n                                                            color=\"error\"\n                                                            variant='outlined'\n                                                            onClick={() => handleCancelListing(salePrice)}\n                                                            sx={{\n                                                                borderRadius: '10px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon sx={{mr:1}}/> Cancel Listing\n                                                        </Button>   \n                                                    </>\n                                                    : \n                                                    <>\n                                                        <SellNowPrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                    </>\n                                                )}\n                                            </Grid>\n                                        </Grid>\n                                }\n                                </Grid>\n                            </>\n                            )\n                        :(\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                            >\n                                <Grid item>\n                                <WalletConnectButton />\n                                </Grid>\n                            </Grid>\n                        )\n                        }\n                        </ListItemText>\n                    </List>\n                </Box>\n            )}\n            </>\n        );\n    }   \n\n    React.useEffect(() => {\n        if (refreshOffers){\n            //setOffers(null);\n            setRefreshOffers(!refreshOffers);\n        }\n\n        if (mintAta){\n            //if (!offers){\n                getOffers();\n            //}\n        }\n    }, [mintAta, refreshOffers]);\n\n    if ((!offers)||(loading)){\n        return (\n            <Box\n                sx={{ \n                    p: 1, \n                    mb: 3, \n                    width: '100%',\n                    background: '#13151C',\n                    borderRadius: '24px'\n                }}\n            > \n                <Skeleton\n                    sx={{ \n                        height: '100%',\n                        width: '100%'\n                    }}\n                />\n            </Box>\n        )\n    } else{      \n        return ( \n            <>\n                <ItemTools />\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                    <ListItemButton onClick={handleClick}\n                        sx={{borderRadius:'20px'}}\n                    >\n                        <ListItemIcon>\n                        <BallotIcon />\n                        </ListItemIcon>\n                        <ListItemText \n                            primary='Offers'\n                        />\n                            <Typography variant=\"caption\"><strong>{openOffers}</strong></Typography>\n                            {open_offers_collapse ? <ExpandLess /> : <ExpandMoreIcon />}\n                    </ListItemButton>\n                    <Collapse in={open_offers_collapse} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" \n                            sx={{ \n                                width: '100%',\n                            }}>\n                            <ListItemText>\n                                <Box sx={{ margin: 1 }}>\n                                    {/*<div style={{width: 'auto', overflowX: 'scroll'}}>*/}\n                                    <TableContainer>\n                                        <Table size=\"small\" aria-label=\"purchases\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell><Typography variant=\"caption\">Address</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Offer</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Date</Typography></TableCell>\n                                                    <TableCell></TableCell>\n                                                </TableRow>\n                                            </TableHead>\n\n                                            <BootstrapDialog \n                                                fullWidth={true}\n                                                maxWidth={\"sm\"}\n                                                PaperProps={{\n                                                    style: {\n                                                        background: '#13151C',\n                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                        borderRadius: '20px'\n                                                    }\n                                                    /*\n                                                    style: {\n                                                        \n                                                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                                                        boxShadow: '3',\n                                                        border: '1px solid rgba(255,255,255,0.15)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                                                        borderRadius: '20px',\n                                                        padding:'4'\n                                                        },*/\n                                                    }}\n                                                \n                                                    open={alertopen}\n                                                    onClose={handleAlertClose}\n                                                    aria-labelledby=\"alert-dialog-title\"\n                                                    aria-describedby=\"alert-dialog-description\"\n                                                    >\n                                                    <DialogTitle id=\"alert-dialog-title\">\n                                                        <Typography>\n                                                            CONFIRMATION\n                                                        </Typography>\n                                                    </DialogTitle>\n                                                    <DialogContent>\n                                                        <DialogContentText id=\"alert-dialog-description\">\n                                                        <br />\n                                                        <Alert severity=\"info\" variant=\"outlined\" sx={{backgroundColor:'black'}} >\n                                                            Amount: {final_offeramount}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                            Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                            From: <MakeLinkableAddress addr={final_offerfrom} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                            <Typography sx={{textAlign:'center'}}>\n                                                            Make sure the above is correct<br/>press Accept to proceed\n                                                            </Typography><br/>\n                                                        </Alert>\n                                                        \n                                                        </DialogContentText>\n                                                    </DialogContent>\n                                                    <DialogActions>\n                                                        <Button onClick={handleAlertClose}>Cancel</Button>\n                                                        <Button \n                                                            onClick={() => handleAcceptOffer(final_offeramount, final_offerfrom)}\n                                                            autoFocus>\n                                                        Accept\n                                                        </Button>\n                                                    </DialogActions>\n                                                </BootstrapDialog>\n\n                                            {offers && offers.map((item: any) => (\n                                                <>\n\n                                                    {(item.state === 1) ? (\n                                                        <TableRow>\n                                                            <TableCell><Typography variant=\"body2\">\n                                                                <Tooltip title='View Profile'>\n                                                                    <Button size=\"small\" variant=\"text\" component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        {trimAddress(item.buyeraddress,4)}\n                                                                    </Button>\n                                                                </Tooltip>\n                                                                <Tooltip title='Visit Explorer'>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        <OpenInNewIcon sx={{fontSize:'14px'}} />\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Typography></TableCell>\n                                                            <TableCell  align=\"right\">\n                                                                <Typography variant=\"body2\">\n                                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                                <Typography variant=\"caption\">\n                                                                    <Tooltip\n                                                                        title={formatBlockTime(item.timestamp, true, true)}\n                                                                    >\n                                                                        <Button size=\"small\">{timeAgo(item.timestamp)}</Button>\n                                                                    </Tooltip>\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                            \n                                                            <>\n                                                                {publicKey && publicKey.toBase58() === mintOwner && (\n                                                                    <div>\n                                                                    <Button\n                                                                        onClick={() => setAcceptPrompt(convertSolVal(item.offeramount), item.buyeraddress)} //acceptOfferWrapper(convertSolVal(item.offeramount), item.buyeraddress)} //handleAcceptOffer(convertSolVal(item.offeramount), item.buyeraddress)}\n                                                                        className='buyNowButton'\n                                                                        sx={{\n                                                                        }}\n                                                                    >\n                                                                        ACCEPT\n                                                                    </Button>\n                                                                </div>\n                                                                )}\n                                                                \n                                                                {publicKey && publicKey.toBase58() === item.buyeraddress && (\n                                                                    <Button \n                                                                        color=\"error\"\n                                                                        variant=\"text\"\n                                                                        //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount))}\n                                                                        onClick={() => handleCancelOffer(convertSolVal(item.offeramount))}\n                                                                        sx={{\n                                                                            borderRadius: '10px',\n                                                                        }}\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </Button>\n                                                                )}\n                                                            </>\n                                                            \n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ):(<></>)}\n                                                </>\n                                            ))}\n                                        </Table>\n                                    </TableContainer>\n                                </Box>\n                            </ListItemText>\n                        </List>\n                    </Collapse>\n                </Box>\n            </>\n        )\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\n  export async function submitOffer(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n    //console.log('escrow_amount:',escrowSolAmount, 'offerAmount:', offerAmount);\n    //execute BUY\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n          offerAmount,\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    );\n\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n          tokenSize,\n          mintKey,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    ); \n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey, \n    );\n\n    const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey);    \n  \n    //const tokenAccountKey: web3.PublicKey = tokenAccount ? new web3.PublicKey(tokenAccount) : results.value[0].address;\n    const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      buyerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n    const ata = (\n        await getAtaForMint(\n            //@ts-ignore\n            auctionHouseObj.treasuryMint,\n            buyerWalletKey,\n        )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.buy(\n      tradeBump,\n      escrowBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n          accounts: {\n              wallet: buyerWalletKey,\n              paymentAccount: isNative ? buyerWalletKey : ata,\n              transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n              metadata: await getMetadata(mintKey),\n              tokenAccount: tokenAccountKey,\n              escrowPaymentAccount,\n              //@ts-ignore\n              treasuryMint: auctionHouseObj.treasuryMint,\n              //@ts-ignore\n              authority: auctionHouseObj.authority,\n              auctionHouse: auctionHouseKey,\n              //@ts-ignore\n              auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n              buyerTradeState: tradeState,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              systemProgram: web3.SystemProgram.programId,\n              rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n      }\n    );\n    \n    //const instructions = [instruction];\n    const instructions = [\n      ...(isNative\n          ? []\n          : [\n              Token.createApproveInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  transferAuthority.publicKey,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n                  buyPriceAdjusted.toNumber(),\n              ),\n          ]),\n      instruction,\n      ...(isNative\n          ? []\n          : [\n              Token.createRevokeInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n              ),\n          ]),\n      ];\n    //END BUY\n\n    //CHECK IF DEPOSIT INSTRUCTTION IS NECESSARY\n    if (escrowSolAmount > 0){\n      //calculate how much more to deposit\n      let depositAmount = 0;\n      if (offerAmount < escrowSolAmount){\n          depositAmount = offerAmount;\n      } else {\n          depositAmount = (offerAmount - (offerAmount - escrowSolAmount));\n      }\n      //console.log('depositAmount:', depositAmount);\n      const amountAdjusted = await getPriceWithMantissa(\n        depositAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      );\n\n      const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n        auctionHouseKey,\n        buyerWalletKey,\n      );\n\n      const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n      const ata = (\n        await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n        )\n      )[0];\n\n      const transferAuthority = web3.Keypair.generate();\n      //const signers = isNative ? [] : [transferAuthority];\n\n      const instruction2 = anchorProgram.instruction.deposit(\n        escrowBump,\n        new BN(amountAdjusted),\n        {\n          accounts: {\n            wallet: buyerWalletKey,\n            paymentAccount: isNative ? buyerWalletKey : ata,\n            transferAuthority: isNative\n              ? web3.SystemProgram.programId\n              : transferAuthority.publicKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n        },\n      );\n      instructions.push(instruction2);\n    }\n    // END ADDING DEPOSIT\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:1, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n  \n\n\n  }","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function acceptOffer(offerAmount: number, mint: string, sellerWalletKey: PublicKey, buyerAddress: any): Promise<InstructionsAndSignersSet> {\n  //START SELL\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n  );\n  const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    sellerWalletKey,\n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    new BN(0),\n  );\n\n  const signers: any[] = [];\n\n  const instruction = anchorProgram.instruction.sell(\n    tradeBump,\n    freeTradeBump,\n    programAsSignerBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n      accounts: {\n        wallet: sellerWalletKey,\n        metadata: await getMetadata(mintKey),\n        tokenAccount: tokenAccountKey,\n        //@ts-ignore\n        authority: auctionHouseObj.authority,\n        auctionHouse: auctionHouseKey,\n        //@ts-ignore\n        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n        sellerTradeState: tradeState,\n        freeSellerTradeState: freeTradeState1,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        programAsSigner,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n    },\n  ); \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const instructions = [instruction];\n  //END SELL\n  \n  //START EXECUTE SALE\n\n  const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerWalletKey,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey,);\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    bump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerWalletKey,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerWalletKey)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:4, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n  \n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('tokenSizeAdjusted:', tokenSizeAdjusted);\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    //console.log('tokenAccountKey:', tokenAccountKey.toBase58());\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              sellerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: sellerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    //is it withdraw here or cancel (we are removing the listing we made)\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nexport async function buyNowListing(offerAmount: number, mint: string, walletPublicKey: string, buyerAddress: PublicKey): Promise<InstructionsAndSignersSet> {\n  //START BUY\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n\n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n    auctionHouseKey,\n    buyerAddress, \n  );\n\n  const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey); \n\n  const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    buyerAddress, \n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    buyPriceAdjusted,\n  );\n\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const ata = (\n      await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerAddress, \n      )\n  )[0];\n\n  const transferAuthority = web3.Keypair.generate();\n  const signers = isNative ? [] : [transferAuthority];\n\n  const instruction = anchorProgram.instruction.buy(\n    tradeBump,\n    escrowBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n        accounts: {\n            wallet: buyerAddress,\n            paymentAccount: isNative ? buyerAddress : ata,\n            transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n            metadata: await getMetadata(mintKey),\n            tokenAccount: tokenAccountKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            buyerTradeState: tradeState,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n    }\n  );\n\n  const instructions = [\n    ...(isNative\n        ? []\n        : [\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                transferAuthority.publicKey,\n                buyerAddress,\n                [],\n                buyPriceAdjusted.toNumber(),\n            ),\n        ]),\n    instruction,\n    ...(isNative\n        ? []\n        : [\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                buyerAddress,\n                [],\n            ),\n        ]),\n  ];\n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  //const instructions = [instruction];\n  //END BUY\n  \n  //START EXECUTE SALE\n  //const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerAddress,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    escrowBump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerAddress,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerAddress)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:3, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n\n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: buyerAddress, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function depositInGrapeVine(escrowAmount: number, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n\n    const amountAdjusted = await getPriceWithMantissa(\n        escrowAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.deposit(\n      escrowBump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          paymentAccount: isNative ? buyerWalletKey : ata,\n          transferAuthority: isNative\n            ? web3.SystemProgram.programId\n            : transferAuthority.publicKey,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n      },\n    );\n\n    const instructions = [instruction];\n  \n    const GRAPE_AH_MEMO = {\n      state:6, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel, 6: deposit)\n      ah:auctionHouseKey.toString(), // pk\n      mint:null, // mint\n      amount:amountAdjusted // price\n    };\n      \n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n    instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import { PublicKey, SystemProgram, TransactionInstruction, Transaction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\nimport { \n  getRealms, \n  getVoteRecordsByVoter, \n  getTokenOwnerRecordAddress,\n  getTokenOwnerRecordForRealm, \n  getTokenOwnerRecordsByOwner, \n  getGovernanceAccounts, \n  pubkeyFilter, \n  TokenOwnerRecord, \n  withCreateProposal,\n  VoteType, \n  getGovernanceProgramVersion,\n  serializeInstructionToBase64,\n  createInstructionData,\n  withInsertTransaction,\n  InstructionData,\n  AccountMetaData,\n} from '@solana/spl-governance';\n\nimport { \n  TOKEN_REALM_PROGRAM_ID,\n} from '../grapeTools/constants';\nimport { AnyMxRecord } from 'dns';\n\n// Converts TransactionInstruction to InstructionData format\n/*export const createInstructionData2 = (instruction: TransactionInstruction) => {\n  return new InstructionData({\n    programId: instruction.programId,\n    data: instruction.data,\n    accounts: instruction.keys.map(\n      k =>\n        new AccountMetaData({\n          pubkey: k.pubkey,\n          isSigner: k.isSigner,\n          //isSigner: false,\n          isWritable: k.isWritable,\n          //isWritable: false,\n        }),\n    ),\n  });\n};*/\n\n  export async function createDAOProposal(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string, connection: any, transactionInstr: InstructionsAndSignersSet, sendTransaction: any): Promise<InstructionsAndSignersSet> {\n    \n    //console.log('inDAOProposal instructionArray before adding DAO Instructions:'+JSON.stringify(transactionInstr));\n    let instructions: TransactionInstruction[] = [];\n    //let initialInstructions: TransactionInstruction[] = [];\n    const signers: any[] = [];\n    // fetch realms information on the dao\n    const voteType = VoteType.SINGLE_CHOICE;\n    const options = ['Approve'];\n    const useDenyOption = true;\n    const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n    const realmPk = new PublicKey('DcR6g5EawaEoTRYcnuBjtD26VSVjWNoi1C1hKJWwvcup');\n    const governancePk = new PublicKey('JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK');\n    const name = 'Sale of NFT: '+mint+' for '+offerAmount+'sol on grape.art';\n    const descriptionLink = '';\n    const governingTokenMint = new PublicKey('9Z7SQ1WMiDNaHu2cX823sZxD2SQpscoLGkyeLAHEqy9r');\n    const governanceAuthority = new PublicKey(walletPublicKey);\n    const proposalIndex = 0;\n    const programVersion = await getGovernanceProgramVersion(\n      connection,\n      //new PublicKey(daoPublicKey),\n      programId,\n    );\n    console.log('programVersion:',programVersion);\n\n    const tokenOwnerRecordPk = await getTokenOwnerRecordAddress(\n      programId,\n      realmPk,\n      governingTokenMint,\n      governancePk\n    );\n    console.log('tokenOwnerRecordPK:', tokenOwnerRecordPk.toBase58());\n    const proposalPk = await withCreateProposal(\n      instructions,\n      //new PublicKey(daoPublicKey), \n      programId,\n      programVersion,\n      realmPk,\n      governancePk,\n      tokenOwnerRecordPk,\n      name,\n      descriptionLink,\n      governingTokenMint,\n      governanceAuthority,\n      proposalIndex,\n      voteType,\n      options,\n      useDenyOption,\n      governanceAuthority,\n  );\n  \n  let instructionData: InstructionData[]=[]; //createInstructionData([transactionInstr.instructions]);\n  \n  //to add all 5 instructions from sellNowListing\n  let j = 0;\n  for (var instruction of transactionInstr.instructions){\n    //instructionData.push(instruction);\n    \n    if (j < 2){\n      //instructionData.push(createInstructionData2(instruction));\n      instructionData.push(createInstructionData(instruction));\n      console.log(\"instructionData: \"+JSON.stringify(instructionData));\n    }\n    j++;\n  }\n\n  //console.log('instruction in position 0'+JSON.stringify(instructionData[0]));\n  //const instructionData2 = createInstructionData(instruction);\n  //instructionData.push(instructionData2);\n\n  //just adding the first instruction instead \n  //const instructionData2 = createInstructionData(transactionInstr.instructions[0]);\n  \n\n  const wit = await withInsertTransaction(\n    instructions,\n    //new PublicKey(daoPublicKey),\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    governanceAuthority,\n    0,\n    0,\n    0,\n    instructionData,\n    //[instructionData2],\n    governanceAuthority,\n  );\n  \n    //console.log(\"instructions: \"+JSON.stringify(instructions));\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n\n}"],"sourceRoot":""}