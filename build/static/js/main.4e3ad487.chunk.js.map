{"version":3,"sources":["components/static/SolCurrencyIcon.tsx","Featured/Featured.tsx","components/static/SolIcon.tsx","Identity/Identity.tsx","Header/Header.tsx","components/ConfirmDialog/ConfirmDialog.tsx","utils/config/theme.tsx","App.tsx","reportWebVitals.js","index.js","utils/grapeTools/safe-math.ts","utils/cyberConnect/query.ts","utils/cyberConnect/types.ts","utils/grapeTools/utils.ts","Profile/Profile.tsx","utils/auctionHouse/helpers/schema.ts","utils/auctionHouse/helpers/constants.ts","utils/auctionHouse/cancelWithdrawOffer.ts","utils/grapeTools/constants.ts","utils/auctionHouse/helpers/accounts.ts","utils/grapeTools/ShareUrl.tsx","utils/cache.tsx","utils/web3/program-address.tsx","utils/web3/name-service.tsx","utils/web3/name-auctioning.tsx","utils/name-service.tsx","utils/cyberConnect/helper.ts","components/static/GrapeIcon.tsx","utils/grapeTools/WalletAddress.tsx","utils/auctionHouse/helpers/various.ts","utils/grapeTools/RegexTextField.jsx","App.less","Profile/OffersView.tsx","utils/auctionHouse/withdrawOffer.ts","Profile/SocialView.tsx","Preview/Preview.tsx","utils/auctionHouse/sellNowListing.ts","Profile/FeedView.tsx","utils/auctionHouse/cancelOffer.ts","Profile/GalleryView.tsx","utils/grapeTools/mintverification.ts","Preview/ItemOffers.tsx","utils/auctionHouse/submitOffer.ts","utils/auctionHouse/acceptOffer.ts","utils/auctionHouse/cancelListing.ts","utils/auctionHouse/buyNowListing.ts","utils/auctionHouse/depositInGrapeVine.ts","utils/auctionHouse/createDAOProposal.ts"],"names":["SolCurrencyIcon","props","d","id","FeaturedView","FEATURED_DAO_ARRAY","map","featured","key","Card","sx","borderRadius","mb","CardActionArea","component","Link","to","GRAPE_PROFILE","address","CardMedia","image","img","alt","title","maxHeight","background","m","p","CardContent","Typography","gutterBottom","variant","color","text","src","style","opacity","position","marginTop","marginBottom","padding","top","left","width","CardActions","Grid","container","direction","justifyContent","alignContent","pr","ButtonGroup","Button","size","href","daourl","target","url","trimAddress","SolIcon","SvgIcon","IdentityView","React","useState","profilePictureUrl","setProfilePictureUrl","solanaDomain","setSolanaDomain","solanaHoldings","setSolanaHoldings","solanaBalance","setSolanaBalance","loading","setLoading","publicKey","useWallet","pubkey","setPubkey","ggoconnection","Connection","GRAPE_RPC_ENDPOINT","handlekey","useParams","useSearchParams","searchParams","urlParams","get","fetchSolanaBalance","a","getBalance","PublicKey","response","fetchSolanaTokens","getTokenAccountsByOwner","programId","holdings","value","item","push","console","log","JSON","stringify","fetchProfilePicture","getProfilePicture","isAvailable","img_url","replace","fetchSolanaDomain","findDisplayName","domain","useEffect","ValidateAddress","toBase58","Fragment","Box","spacing","alignItems","rowSpacing","xs","textTransform","display","mt","className","fontSize","mr","List","dense","ListItem","ListItemButton","ListItemAvatar","Avatar","backgroundColor","ListItemText","primary","secondary","ml","length","toLocaleUpperCase","indexOf","slice","parseFloat","TokenAmount","format","getParam","param","URLSearchParams","window","location","search","require","Search","styled","theme","border","alpha","palette","common","white","marginRight","marginLeft","breakpoints","up","SearchIconWrapper","height","pointerEvents","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","Header","open_menu","anchorEl","Boolean","newinputpkvalue","setNewInputPKValue","navigate","useNavigate","useLocation","pathname","useSnackbar","enqueueSnackbar","Toolbar","flexGrow","Container","onSubmit","event","preventDefault","placeholder","inputProps","onChange","e","useConfirmDialogStore","set","message","undefined","close","ConfirmDialog","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","IconButton","onClick","Close","DialogContent","DialogActions","createTheme","typography","fontFamily","join","mode","default","paper","Copyright","align","DashboardContent","setOpen","network","WalletAdapterNetwork","Mainnet","endpoint","FREE_RPC_ENDPOINT","wallets","useMemo","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","ThemeProvider","grapeTheme","ConnectionProvider","WalletProvider","autoConnect","flex","CssBaseline","AppBar","toggleDrawer","path","element","Profile","index","Preview","NotFound","overflow","Paper","Dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","wei","decimals","isWei","_decimals","this","BigNumber","exponentiatedBy","multipliedBy","dividedBy","vaule","toFormat","isInteger","toFixed","isNaN","isZero","endPoint","querySchemas","operationName","query","variables","namespace","followingFirst","followingAfter","followerFirst","followerAfter","fromAddr","toAddr","request","data","fetch","method","cache","headers","referrerPolicy","body","json","handleQuery","followListInfoQuery","schema","resp","identity","searchUserInfoQuery","Network","base58","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","toBuffer","readPubkeyAsString","encode","writePubkeyAsString","decode","MetadataKey","MetadataCategory","MasterEditionV1","args","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV2","EditionMarker","ledger","edition","editionOffset","indexOffset","Math","floor","Error","positionInBitsetFromRight","mask","pow","Edition","parent","EditionV1","Creator","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","updateAuthority","mint","primarySaleHappened","isMutable","editionNonce","masterEdition","MetadataV1","METADATA_SCHEMA","Map","instruction","kind","fields","type","METADATA_REPLACE","RegExp","decodeMetadata","buffer","metadata","deserializeUnchecked","Table","borderBottom","expand","other","transform","duration","shortest","TabPanel","children","role","hidden","SpeedDial","bottom","right","MainMenu","disablePadding","disabled","TabActiveContext","createContext","activeTab","setActiveTab","at","TabActiveProvider","initialActiveKey","Provider","MainPanel","thisPublicKey","closeSnackbar","wallet_collection","walletCollection","wallet_collection_meta","walletCollectionMeta","finalCollection","final_collection","tabvalue","setTabValue","a11yProps","sm","md","lg","xl","minHeight","scrollButtons","newValue","icon","smUp","label","smDown","minWidth","selectedstate","collection","setCollectionMeta","setCollectionMetaFinal","useConnection","connection","featuredObj","setFeaturedObj","hasProfilePicture","setHasProfilePicture","isFollowing","setIsFollowing","loadCount","setLoadCount","loadingFollowState","setLoadingFollowState","followListInfo","setFollowListInfo","setSearchAddrInfo","solanaProvider","NAME_SPACE","NETWORK","SOLANA","cyberConnect","CyberConnect","env","Env","PRODUCTION","chain","Blockchain","provider","chainRef","solana","SOLANA_MAINNET_CHAIN_REF","signingMessageEntity","initFollowListInfo","fetchSearchAddrInfo","followWalletConnect","followAddress","solanaAddress","connect","catch","error","getFollowStatus","followWalletDisconnect","disconnect","MD_PUBKEY","getCollectionData","start","mintsPDAs","Array","mintarr","account","parsed","info","mint_address","findProgramAddress","Buffer","from","pda","getMultipleAccountsInfo","metavalue","buf","etfm","socialconnection","connections","followStatus","getCollectionMeta","loops","ceil","collectionmeta","x","tmpcollectionmeta","concat","i","finalmeta","parse","pb","pl","diameter","seed","jsNumberForAddress","GRAPE_IDENTITY","pt","followingCount","followerCount","ProfileView","gallery","setCollection","rdloading","setRDLoading","withPubKey","setWithPubKey","fetchWalletCollection","jsonrpc","params","encoding","commitment","resultValues","result","collectionInfo","tokenAmount","amount","getWalletGallery","Promise","all","getReverseDomainLookup","SOL_TLD_AUTHORITY","domainName","getHashedName","hashedName","getNameAccountKey","domainKey","NameRegistryState","retrieve","registry","owner","getTwitterLookup","getTwitterRegistry","CollectionProfile","endsWith","startsWith","TokenStandard","NonFungible","FungibleAsset","Fungible","NonFungibleEdition","Collection","CreateMetadataArgs","UpdateMetadataArgs","CreateMasterEditionArgs","tokenStandard","CANDY_MACHINE","AUCTION_HOUSE","TOKEN_ENTANGLER","ESCROW","A","B","FEE_PAYER","TREASURY","CANDY_MACHINE_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_PROGRAM_ID","FAIR_LAUNCH_PROGRAM_ID","AUCTION_HOUSE_PROGRAM_ID","TOKEN_ENTANGLEMENT_PROGRAM_ID","WRAPPED_SOL_MINT","ENV_AH","AUCTION_HOUSE_ADDRESS","process","convertSolVal","sol","cancelWithdrawOffer","offerAmount","buyerWalletKey","mintOwner","tokenSize","auctionHouseKey","web3","mintKey","loadAuctionHouseProgram","anchorProgram","auctionHouse","auctionHouseObj","sellerWalletKey","getAuctionHouseBuyerEscrow","escrow","getTokenAmount","treasuryMint","escrow_amount","escrowSolAmount","BN","getPriceWithMantissa","buyPriceAdjusted","tokenSizeAdjusted","getAtaForMint","tokenAccountKey","getAuctionHouseTradeState","tradeState","signers","cancel","accounts","wallet","tokenAccount","tokenMint","authority","auctionHouseFeeAccount","tokenProgram","instructions","withdrawAmmount","amountAdjusted","escrowPaymentAccount","bump","isNative","equals","ata","Keypair","generate","instruction2","withdraw","receiptAccount","systemProgram","SystemProgram","rent","SYSVAR_RENT_PUBKEY","ataProgram","ASSOCIATED_TOKEN_PROGRAM_ID","GRAPE_AH_MEMO","state","ah","toString","toNumber","derivedMintPDA","derivedBuyerPDA","derivedOwnerPDA","transfer","fromPubkey","toPubkey","lamports","TransactionInstruction","keys","isSigner","isWritable","GRAPE_PREVIEW","GRAPE_RPC_REFRESH","GRAPE_TREASURY","TOKEN_VERIFICATION_ADDRESS","TOKEN_VERIFICATION_NAME","TOKEN_VERIFICATION_AMOUNT","TOKEN_REALM_ID","TOKEN_REALM_PROGRAM_ID","OTHER_MARKETPLACES","logo","previewUrl","deserializeAccount","accountInfo","AccountLayout","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","isFrozen","isNativeOption","rentExemptReserve","closeAuthorityOption","closeAuthority","buyer","anchor","getMetadata","getAuctionHouseProgramAsSigner","buyPrice","toArrayLike","walletKeyPair","customRpcUrl","solConnection","clusterApiUrl","walletWrapper","preflightCommitment","fetchIdl","idl","getTokenAccountBalance","token","uiAmount","BootstrapDialog","ShareSocialURL","shareUrl","PaperProps","borderTop","onCopy","navigator","subject","round","quote","CachePrefix","hashCode","s","h","imul","charCodeAt","asyncCache","AsyncStorage","getItem","cached","stringified","setItem","Sha256","resolve","ethers","utils","sha256","arr","isBuffer","Uint8Array","byteOffset","byteLength","createProgramAddress","seeds","alloc","forEach","TypeError","hash","is_on_curve","publicKeyBytes","toArray","nonce","seedsWithNonce","naclLowLevel","nacl","lowlevel","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","pow2523","neq25519","I","b","c","pack25519","crypto_verify_32","input","HASH_PREFIX","hashed_name","nameClass","nameParent","NAME_PROGRAM_ID","nameAccountKey","getHandleAndRegistryKey","verifiedPubkey","hashedVerifiedPubkey","TWITTER_VERIFICATION_AUTHORITY","TWITTER_ROOT_PARENT_REGISTRY_KEY","reverseRegistryKey","ReverseTwitterRegistryState","reverseRegistryState","twitterHandle","twitterRegistryKey","PROGRAM_ID","findOwnedNameAccountsForUser","userAccount","filters","memcmp","offset","bytes","getProgramAccounts","performReverseLookupBatch","nameAccounts","centralState","reverseLookupAccounts","nameAccount","hashedReverseLookup","reverseLookupAccount","retrieveBatch","names","nameLength","receiver","allNames","domainsAddresses","sort","localeCompare","reverse","filter","removeDuplicate","user","self","findIndex","GrapeIcon","Alert","forwardRef","ref","elevation","timeAgo","blockTime","prettydate","moment","unix","timeago","Date","diff","asDays","hoursago","asHours","minutesAgo","asMinutes","asSeconds","addr","trim","substring","end","ValidateCurve","isOnCurve","MakeLinkableAddress","hasextlink","hascopy","fontsize","permalink","isDNS","stri_addr","open_snackbar","setSnackbarState","handleCopyClick","handleCloseSnackbar","reason","ClipboardAction","autoHideDuration","severity","PermalinkAction","price","Token","getMintInfo","mintInfo","mantissa","RegexTextField","regex","rest","handleChange","useCallback","currentTarget","defaultProps","formatBlockTime","date","epoch","time","date_str","toLocaleDateString","toLocaleString","OffersView","offers","setOffers","myoffers","setMyOffers","listings","setListings","ahbalance","setAHBalance","ahloading","setAHLoading","sendTransaction","refresh","setRefresh","setCounter","limit","setMaxPage","setBeforeSignature","alertwithdrawopen","setAlertWithdrawOpen","handleAlertWithdrawClose","handleCancelWithdrawOffer","getTokenLargestAccounts","tokenKey","getAccountInfo","mintAccountInfo","mintAccountInfoDs","transactionInstr","instructionsArray","flat","transaction","Transaction","add","signedTransaction","cnfrmkey","action","persist","confirmTransaction","eskey","anchorOrigin","vertical","horizontal","setTimeout","handleWithdrawOffer","allmints","offeramount","withdrawOffer","cnt","cancelOffer","getOffers","getEscrowBalance","getSignaturesForAddress","offerResults","cancelStateResults","allListingResults","listingResults","mintArrayPDA","escrow_cache","exists","cntr","sellerTradeStateArr","signatures","signature","getParsedTransactions","getTransactionAccountInputs2","err","getTransactionAccountInputs","feePayer","accountKeys","progAddress","meta","logMessages","escrow_found","escrow_found_index","amount_on_escrow","preTokenBalances","memo","memo_arr","memo_str","memo_instances","match","submemo","mx","init","fin","substr","memo_item","memo_json","status","sale_state_exists","sellPrice","ownerHasMint","wvalue","tradeStatePublicKey","buyeraddress","isowner","timestamp","thisTokenOwner","sellerTradeState","j","tradeStates","alrvalue","autoFocus","red","transferAuthority","SocialView","fetchMore","followers","pageInfo","endCursor","followings","list","ProfilePicture","followitem","loadingpicture","setLoadingPicture","countRef","useRef","current","bgcolor","avatar","random","SocialItem","followitemkey","ens","columns","hasNextPage","StyledTable","GrapeVerified","verifiedState","setVerifiedState","verifiedPK","setVerificationPK","collectionImage","setCollectionImage","collectionName","setCollectionName","grape_verified","collectionAddress","meta_response","meta_final","res","verified_creator","UPDATE_AUTHORITIES","placement","SocialLikes","isLiked","setIsLiked","loadingLikedState","setLoadingLikedState","getLikeStatus","likeWalletConnect","tofollow","ConnectionType","LIKE","likeWalletDisconnect","liked","SocialFlags","isFlagged","setIsFlagged","loadingFlaggedState","setLoadingFlaggedState","reportalertopen","setReportAlertOpen","freeconnection","handleAlertReportClose","getFlagStatus","handleFlagMintTransaction","flatMintTransaction","tokenMintAddress","tokenMintName","notes","fromWallet","toaddress","toWallet","mintPubkey","amountToSend","GRAPE_TT_MEMO","adjustedAmountToSend","flagWalletConnect","getParsedAccountInfo","accountParsed","getAssociatedTokenAddress","fromAta","toAta","createAssociatedTokenAccountInstruction","createTransferInstruction","REPORT","flagWalletDisconnect","reported","textAlign","GalleryItemMeta","collectionrawdata","meta_primer","collectionitem","refreshOwner","setRefreshOwner","loadingOwner","setLoadingOwner","mintAta","setMintATA","tokenOwners","setTokenOwners","grape_member_balance","setGrapeMemberBalance","sol_portfolio_balance","setSolPortfolioBalance","grape_weighted_score","setGrapeWeightedScore","grape_governance_balance","setGrapeGovernanceBalance","grape_offer_threshhold","grape_whitelisted","open_creator_collapse","setOpenCreatorCollapse","open_attribute_collapse","setOpenAttributeCollapse","currentImage","setCurrentImage","isViewerOpen","setIsViewerOpen","collectionItemImages","open_meta","setOpenMeta","open_description","setOpenDescription","open_traits","setOpenTraits","openImageViewer","salePrice","getGovernanceBalance","realmId","governingTokenMint","governingTokenOwner","getTokenOwnerRecordForRealm","ownerRecords","fetchBalances","GetTokenOwner","tokenAddress","GetLargestTokenAccounts","fetchTokenAccountData","flargestTokenAccounts","fetchSOLBalance","towner","getMintOwner","tokenowner","fetchTokenAccountOwnerHoldings","sol_rsp","portfolio_rsp","governance_rsp","governingTokenDepositAmount","final_weighted_score","balance","total_grape","weighted_score","HandleSetAvatar","createSetProfilePictureTransaction","SearchForMint","open_dialog","setOpenPKDialog","setInputMintValue","handleCloseDialog","setMintPubkey","autoComplete","margin","ownerPublicKey","property","content","currentIndex","disableScroll","closeOnClickOutside","srcSet","in","timeout","unmountOnExit","description","boxShadow","attributes","paddingBottom","paddingTop","colSpan","trait_type","itemType","category","rarity","spec","class","seller_fee_basis_points","properties","background_color","createdAt","updatedAt","deactivated","fontWeight","filteredMarket","PreviewView","history","PreviewItem","thismint","setCollectionRaw","interval","clearInterval","sellNowListing","walletPublicKey","weightedScore","daoPublicKey","thisWalletPublicKey","programAsSigner","programAsSignerBump","tradeBump","freeTradeState1","freeTradeBump","freeSellerTradeState","sell","score","FeedView","setFeatured","setFeaturedMeta","mergedfeaturedmeta","setMergedFeaturedMeta","statestruct","FeaturedItem","finalMeta","setFinalMeta","itemraw","itemmeta","getCollectionItemData","getMeta","final_meta","backgroundSize","getFeatured","ahListings","ahListingsMints","forSaleDate","offer","solvalue","merr","GalleryItem","GalleryView","page","rowsperpage","listed","count","defaultPage","showFirstButton","showLastButton","SellNowVotePrompt","setOpenSPDialog","sell_now_amount","setSellNowAmount","setDaoPublicKey","grapeWeightedScore","createDAOProposal","transactionInstr2","instructionsArray2","snackaction","setRefreshOffers","SellNowPrompt","OfferPrompt","setOpenOPDialog","offer_amount","setOfferAmount","sol_balance","solBalance","submitOffer","borderColor","String","highestOffer","ItemOffers","open_offers_collapse","setOpenOffersCollapse","refreshOffers","useAnchorWallet","alertopen","setAlertOpen","alertbuynowopen","setAlertBuyNowOpen","final_offeramount","setFinalOfferAmount","final_offerfrom","setFinalOfferFrom","setSalePrice","saleDate","setSaleDate","saleTimeAgo","setSaleTimeAgo","setHighestOffer","openOffers","setOpenOffers","handleAlertBuyNowClose","handleAlertClose","setAcceptPrompt","offerfrom","handleAcceptOffer","buyerAddress","acceptOffer","signedTransaction2","handleCancelListing","cancelListing","handleCancelOffer","GetSignatureOffers","spkey","until","slimit","offerResultsCancelled","existSaleCancelAction","open_offers","forSale","found","cancelled","mintOwnerPK","prettyForSaleDate","handleBuyNow","buyerPublicKey","escrowAmount","buyNowListing","depositAmount","depositInGrapeVine","ItemTools","RefreshOffers","escrowBump","results","paymentAccount","buyerTradeState","buy","createApproveInstruction","createRevokeInstruction","deposit","k","buyPriceAdjusted2","tokenSizeAdjusted2","tokenAccountKey2","freeTradeState","freeTradeStateBump","metadataObj","metadataDecoded","remainingAccounts","tMint","auctionHouseTreasury","seller","sellerPaymentReceiptAccount","buyerReceiptTokenAccount","executeSale","voteType","VoteType","SINGLE_CHOICE","options","useDenyOption","realmPk","governancePk","descriptionLink","governanceAuthority","proposalIndex","getGovernanceProgramVersion","programVersion","getTokenOwnerRecordAddress","tokenOwnerRecordPk","withCreateProposal","proposalPk","instructionData","createInstructionData","withInsertTransaction"],"mappings":"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","file":"static/js/main.4e3ad487.chunk.js","sourcesContent":["import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function SolCurrencyIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n            <path d=\"M12,24 C10.3434343,24 8.78787879,23.6868695 7.33333333,23.0606069 C5.8989899,22.4545463 4.62626263,21.6060614 3.51515152,20.5151524 C2.42424242,19.4040412 1.56565657,18.121213 0.939393939,16.6666675 C0.313131313,15.2121221 -2.8035935e-16,13.6565665 -2.8035935e-16,12 C-2.8035935e-16,10.3434352 0.313131313,8.78787963 0.939393939,7.33333418 C1.56565657,5.87878872 2.42424242,4.60606145 3.51515152,3.51515236 C4.62626263,2.40404125 5.8989899,1.54545539 7.33333333,0.939394781 C8.78787879,0.313132155 10.3434343,-3.73812466e-16 12,-3.73812466e-16 C13.6565657,-3.73812466e-16 15.2121212,0.313132155 16.6666667,0.939394781 C18.1212121,1.54545539 19.3939394,2.40404125 20.4848485,3.51515236 C21.5959596,4.60606145 22.4545455,5.87878872 23.0606061,7.33333418 C23.6868687,8.78787963 24,10.3434352 24,12 C24,13.6565665 23.6868687,15.2121221 23.0606061,16.6666675 C22.4545455,18.121213 21.5959596,19.4040412 20.4848485,20.5151524 C19.3939394,21.6060614 18.1212121,22.4545463 16.6666667,23.0606069 C15.2121212,23.6868695 13.6565657,24 12,24 Z M12,21.9090918 C13.3737374,21.9090918 14.6565657,21.6565665 15.8484848,21.151516 C17.040404,20.6262635 18.0909091,19.9090918 19,19.0000008 C19.9090909,18.0909099 20.6161616,17.0404049 21.1212121,15.8484857 C21.6464646,14.6565665 21.9090909,13.3737382 21.9090909,12.0000008 C21.9090909,10.6262635 21.6464646,9.34343519 21.1212121,8.15151599 C20.6161616,6.9595968 19.9090909,5.90909175 19,5.00000084 C18.0909091,4.09090993 17.040404,3.38383923 15.8484848,2.87878872 C14.6565657,2.3535362 13.3737374,2.09090993 12,2.09090993 C10.6262626,2.09090993 9.34343434,2.3535362 8.15151515,2.87878872 C6.95959596,3.38383923 5.90909091,4.09090993 5,5.00000084 C4.09090909,5.90909175 3.37373737,6.9595968 2.84848485,8.15151599 C2.34343434,9.34343519 2.09090909,10.6262635 2.09090909,12.0000008 C2.09090909,13.3737382 2.34343434,14.6565665 2.84848485,15.8484857 C3.37373737,17.0404049 4.09090909,18.0909099 5,19.0000008 C5.90909091,19.9090918 6.95959596,20.6262635 8.15151515,21.151516 C9.34343434,21.6565665 10.6262626,21.9090918 12,21.9090918 Z M12,20.4545463 C10.8282828,20.4545463 9.72727273,20.2424251 8.6969697,19.8181827 C7.68686869,19.3737382 6.78787879,18.7676776 6,18.0000008 C5.23232323,17.2121221 4.62626263,16.3131322 4.18181818,15.3030311 C3.75757576,14.2727281 3.54545455,13.171718 3.54545455,12.0000008 C3.54545455,10.8282837 3.75757576,9.73737458 4.18181818,8.72727357 C4.62626263,7.69697054 5.23232323,6.79798064 6,6.03030387 C6.78787879,5.24242508 7.68686869,4.63636448 8.6969697,4.21212205 C9.72727273,3.76767761 10.8282828,3.54545539 12,3.54545539 C13.1717172,3.54545539 14.2727273,3.76767761 15.3030303,4.21212205 C16.3333333,4.63636448 17.2323232,5.24242508 18,6.03030387 C18.7878788,6.79798064 19.3939394,7.69697054 19.8181818,8.72727357 C20.2626263,9.73737458 20.4848485,10.8282837 20.4848485,12.0000008 C20.4848485,13.171718 20.2626263,14.2727281 19.8181818,15.3030311 C19.3939394,16.3131322 18.7878788,17.2121221 18,18.0000008 C17.2323232,18.7676776 16.3333333,19.3737382 15.3030303,19.8181827 C14.2727273,20.2424251 13.1717172,20.4545463 12,20.4545463 Z M12,18.3636372 C13.1919192,18.3636372 14.2626263,18.0808089 15.2121212,17.5151524 C16.1818182,16.9494958 16.9494949,16.181819 17.5151515,15.2121221 C18.1010101,14.2424251 18.3939394,13.171718 18.3939394,12.0000008 C18.3939394,10.8080816 18.1010101,9.73737458 17.5151515,8.78787963 C16.9494949,7.81818266 16.1818182,7.05050589 15.2121212,6.48484933 C14.2626263,5.91919276 13.1919192,5.63636448 12,5.63636448 C10.8282828,5.63636448 9.75757576,5.91919276 8.78787879,6.48484933 C7.81818182,7.05050589 7.05050505,7.81818266 6.48484848,8.78787963 C5.91919192,9.73737458 5.63636364,10.8080816 5.63636364,12.0000008 C5.63636364,13.171718 5.91919192,14.2424251 6.48484848,15.2121221 C7.05050505,16.181819 7.81818182,16.9494958 8.78787879,17.5151524 C9.75757576,18.0808089 10.8282828,18.3636372 12,18.3636372 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\n\nimport { GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\n\nimport {\n    Grid,\n    Button,\n    ButtonGroup,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Typography,\n} from '@mui/material';\n\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport { CardActionArea } from '@mui/material';\n\nexport function FeaturedView(props: any) {\n    \n  return (\n        <>\n            {FEATURED_DAO_ARRAY.map((featured: any, key: number) => (\n            <Card sx={{borderRadius:'26px',mb:2}}>\n                <CardActionArea\n                    component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                >\n                    \n                    <CardMedia\n                        component=\"img\"\n                        image={featured.img}\n                        alt={featured.title}\n                            sx={{\n                                maxHeight: '250',\n                                background: 'rgba(0, 0, 0, 1)',\n                                m:0,\n                                p:0,\n                            }} \n                        />\n                        \n                    <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {featured.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.primary\">\n                        {featured.text}\n                    </Typography>\n                        <img\n                            src={featured.img}\n                            alt=\"\"\n                            style={{\n                                opacity: '0.025',\n                                position: 'absolute',\n                                marginTop:2,\n                                marginBottom:2,\n                                padding:1,\n                                top:'-20%',\n                                left:'-20%',\n                                width:'150%'\n                            }}\n                        />\n                    </CardContent>\n                \n                </CardActionArea>\n                <CardActions>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justifyContent='flex-end'\n                        alignContent='flex-end'\n                        sx={{\n                            p:1,pr:1.25\n                        }}\n                    >\n                        <ButtonGroup variant=\"text\">\n                            <Button size=\"small\" \n                                component=\"a\" href={`${featured.daourl}`} target=\"_blank\"\n                                sx={{borderRadius:'24px', color:'white'}}>\n                                View DAO</Button>\n                            <Button size=\"small\"    \n                                component={Link} to={`${GRAPE_PROFILE}${featured.address}`}\n                                sx={{borderRadius:'24px', color:'white'}}\n                            >View Collection</Button>\n                            <ShareSocialURL url={'https://grape.art'+GRAPE_PROFILE+featured.address} title={'Grape Profile | '+trimAddress(featured.address,4)} />\n                        </ButtonGroup>\n                    </Grid>\n                </CardActions>\n            </Card> \n            ))}\n        </>\n  );\n}","import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function SolIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n            <path d=\"M3.57430068,13.158837 C3.70705061,13.0260871 3.88958177,12.9486496 4.08317542,12.9486496 L21.6393539,12.9486496 C21.9601663,12.9486496 22.1205724,13.3358369 21.8937913,13.5626181 L18.4256993,17.03071 C18.2929494,17.16346 18.1104182,17.2408974 17.9168246,17.2408974 L0.36064607,17.2408974 C0.0398337337,17.2408974 -0.120572435,16.8537101 0.1062087,16.626929 L3.57430068,13.158837 Z\"></path>\n            <path d=\"M3.57430068,0.210187393 C3.71258186,0.0774374604 3.89511302,0 4.08317542,0 L21.6393539,0 C21.9601663,0 22.1205724,0.387187302 21.8937913,0.613968436 L18.4256993,4.08206041 C18.2929494,4.21481035 18.1104182,4.29224781 17.9168246,4.29224781 L0.36064607,4.29224781 C0.0398337337,4.29224781 -0.120572435,3.9050605 0.1062087,3.67827937 L3.57430068,0.210187393 Z\"></path>\n            <path d=\"M18.4256993,6.64302785 C18.2929494,6.51027792 18.1104182,6.43284046 17.9168246,6.43284046 L0.36064607,6.43284046 C0.0398337337,6.43284046 -0.120572435,6.82002776 0.1062087,7.0468089 L3.57430068,10.5149009 C3.70705061,10.6476508 3.88958177,10.7250883 4.08317542,10.7250883 L21.6393539,10.7250883 C21.9601663,10.7250883 22.1205724,10.337901 21.8937913,10.1111198 L18.4256993,6.64302785 Z\"></path>\n        </SvgIcon>\n    );\n  }","\nimport React, { useEffect } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport { PublicKey, Connection, Commitment } from '@solana/web3.js';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport {\n    Button,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    Avatar,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemText,\n    ListItemButton,\n} from '@mui/material';\n\n\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport PublicIcon from '@mui/icons-material/Public';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport QrCode2Icon from '@mui/icons-material/QrCode2';\n\nimport SolIcon from '../components/static/SolIcon';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\n\nimport { ValidateAddress, trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PROFILE } from '../utils/grapeTools/constants';\n\nexport function IdentityView(props: any){\n    const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [solanaHoldings, setSolanaHoldings] = React.useState(null);\n    const [solanaBalance, setSolanaBalance] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const { publicKey } = useWallet();\n    const [pubkey, setPubkey] = React.useState(props.pubkey || null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"address\") || handlekey;\n\n    const fetchSolanaBalance = async () => {\n        const response = await ggoconnection.getBalance(new PublicKey(pubkey));\n        setSolanaBalance(response);\n    }\n\n    const fetchSolanaTokens = async () => {\n        const response = await ggoconnection.getTokenAccountsByOwner(new PublicKey(pubkey), {programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\")});\n        \n        let holdings: any[] = [];\n        for (var item of response.value){\n\n            //let buf = Buffer.from(item.account, 'base64');\n            holdings.push({pubkey:item.pubkey});\n            \n            /*\n            let buf = Buffer.from(item.account.data);\n            \n            let meta_final = JSON.parse(buf);\n            //let meta_final = decodeMetadata(buf);\n            console.log(\"meta_final: \"+meta_final);\n            */\n            /*\n            let buf = Buffer.from(JSON.stringify(item.account.data), 'base64');\n            console.log(\"buf: \"+JSON.stringify(buf));\n            let meta_final = JSON.parse(JSON.stringify(buf));\n\n            console.log(\"final: \"+JSON.stringify(meta_final));\n            let parsedData = meta_final;//JSON.parse(buf);\n            */\n        }\n        console.log(JSON.stringify(holdings));\n        setSolanaHoldings(holdings);\n    } \n\n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n        setProfilePictureUrl(img_url);\n    }\n    \n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            setSolanaDomain(domain)\n        }\n    }\n\n    React.useEffect(() => {\n        if (urlParams){\n            if (!pubkey){\n                if (ValidateAddress(urlParams))\n                    setPubkey(urlParams);\n            }\n        } else if (publicKey) {\n            setPubkey(publicKey.toBase58());\n        }\n    }, [urlParams, publicKey]);\n\n\n    React.useEffect(() => {\n        if (pubkey){\n            setLoading(true);\n                fetchProfilePicture();\n                fetchSolanaDomain();\n                fetchSolanaTokens();\n                fetchSolanaBalance();\n            setLoading(false);\n        }\n    }, [pubkey]);\n\n\n\n    if (loading){\n        return (\n            <>\n                Loading your solana profile\n            </>\n        );\n    } else{\n        return (\n                <React.Fragment>\n                    <Box\n                        sx={{ \n                            p: 1, \n                            mb: 3, \n                            width: '100%',\n                            background: '#13151C',\n                            borderRadius: '24px'\n                        }}\n                    > \n                            <Grid \n                                container \n                                direction=\"column\" \n                                spacing={2} \n                                alignItems=\"center\"\n                                rowSpacing={8}\n                            >\n                                \n                                <Grid \n                                    item xs={12}\n                                >\n                                    <Button\n                                        component={Link} \n                                        to={`${GRAPE_PROFILE}${pubkey}`}\n                                        sx={{borderRadius:'24px',textTransform:'none',color:'white'}}\n                                        >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                            </Typography>\n                                    </Button>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h5\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        ><SolIcon sx={{fontSize:'20px',mr:1}} /> SOLANA IDENTITY</Typography>\n\n                                    </Grid>\n                            </Grid>\n           \n           \n                            <>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    ADDRESS:\n                                </Typography>   \n                                    <List dense={true}>\n                                        <ListItem>\n                                            <ListItemButton \n                                                component=\"a\" \n                                                href={`https://explorer.solana.com/address/${pubkey}`}\n                                                target=\"_blank\"\n                                                sx={{borderRadius:'24px'}}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar\n                                                        sx={{backgroundColor:'#222'}}\n                                                    >\n                                                        <AccountBalanceWalletIcon sx={{color:'white'}} />\n                                                    </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={pubkey}\n                                                    secondary=\"Solana Address\"\n                                                />\n                                            </ListItemButton>\n                                        </ListItem>\n                                    </List>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    PROFILE:\n                                </Typography>   \n                                    <List dense={true}>\n                                        <ListItem>\n                                                \n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    sx={{backgroundColor:'#222'}}\n                                                    src={profilePictureUrl}\n                                                    alt='PFP'\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={profilePictureUrl}\n                                                secondary=\"Solana Profile Picture\"\n                                            />\n                                        </ListItem>\n                                    </List>\n                                \n                                \n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    DOMAINS/REGISTRATIONS: \n                                    <Typography\n                                        variant=\"body2\"\n                                        sx={{ml:2}}\n                                    >{solanaDomain && <>{solanaDomain.length}</>}\n                                    </Typography>\n                                </Typography> \n                                \n                                <List dense={true}>\n                                        {solanaDomain && solanaDomain?.map((item: any) => (\n                                            <ListItem>\n                                                <ListItemAvatar>\n                                                    <Avatar\n                                                        sx={{backgroundColor:'#222'}}\n                                                    >\n                                                        <PublicIcon sx={{color:'white'}} />\n                                                    </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={JSON.stringify(item)}\n                                                    secondary={(item.toLocaleUpperCase().indexOf(\".SOL\") > -1) ? <>Solana Domain</> : <>{(item.slice(0,1) === '@') && <>Twitter Handle</>}</>}\n                                                    \n                                                />\n                                            </ListItem>\n                                        ))}\n                                </List>\n                                \n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    SOL:\n                                </Typography>   \n                                 \n                                    <List dense={true}>\n                                        <ListItem>\n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    sx={{backgroundColor:'#222'}}\n                                                >\n                                                    <SolCurrencyIcon sx={{color:'white'}} />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={(parseFloat(new TokenAmount(solanaBalance, 9).format()))}\n                                                secondary=\"Solana\"\n                                            />\n                                        </ListItem>\n                                    </List>\n\n                                <Typography\n                                    variant=\"h6\"\n                                >\n                                    TOKENS: \n                                    <Typography\n                                        variant=\"body2\"\n                                        sx={{ml:2}}\n                                    >{solanaHoldings && <>{solanaHoldings.length}</>}\n                                    </Typography>\n                                </Typography> \n                                {solanaHoldings ?\n                                    <List dense={true}>\n                                        {solanaHoldings.length > 0 ? solanaHoldings.map((item: any) => (\n                                            <ListItem>\n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    sx={{backgroundColor:'#222'}}\n                                                >\n                                                    <QrCode2Icon sx={{color:'white'}} />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={JSON.stringify(item.pubkey)}\n                                                secondary=\"token\"\n                                            />\n                                            </ListItem>\n                                        ))\n                                        :\n                                        <></>}\n                                    </List>\n                                :\n                                <List dense={true}>\n                                    <ListItem key={0}>No tokens on this address!</ListItem>    \n                                </List>\n                                }\n                            </>\n                        \n                    </Box>\n                </React.Fragment>\n        );\n    }\n}","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\nimport { useNavigate } from 'react-router';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nimport { useSnackbar } from 'notistack';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\n\nimport {\n    MenuItem,\n    Menu,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    InputBase,\n    Paper,\n    Container,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\n\n\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { GRAPE_PROFILE } from '../utils/grapeTools/constants';\nimport { ValidateAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nexport interface State extends SnackbarOrigin {\n    open: boolean;\n}\n\nfunction getParam(param: string) {\n    //return new URLSearchParams(document.location.search).get(param);\n    return new URLSearchParams(window.location.search).get(param);\n}\n\ninterface HeaderProps{\n    children?:React.ReactNode;\n}\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    border: '1px solid rgba(255,255,255,0.25)',\n    borderRadius: '17px',\n    backgroundColor: alpha(theme.palette.common.white, 0.015),\n    '&:hover': {\n        border: '1px solid rgba(255,255,255,0.75)',\n        backgroundColor: alpha(theme.palette.common.white, 0.1),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    marginTop: 5,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        width: 'auto',\n        marginLeft: 5,\n    },\n  }));\n\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: alpha(theme.palette.common.white, 0.25),\n  }));\n  \n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '100%',\n      },\n    },\n  }));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function Header(props: any) {\n    const { open_menu } = props;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom','Solflare']);\n    const [open_wallet, setOpenWallet] = React.useState(false);\n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isWalletOpen = Boolean(anchorEl);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const currPath = location.pathname;\n    const searchParams = new URLSearchParams(location.search);\n    //const currPath = location?.pathname ?? \"\";\n    const { enqueueSnackbar } = useSnackbar();\n\n    const routes = [\n        { name: \"Home\", path: \"/\" },\n        // { name: \"Servers\", path: \"/servers\" },\n\n        // { name: \"Settings\", path: \"/settings\" }\n    ]\n    \n    /*\n    const toggleDrawer = () => {\n        //setOpenDrawer(!open);\n        open = !open;//setOpen(!open);\n    };\n    */\n\n    \n    /*\n    async function connect() {\n        let wallet = new Wallet();\n        wallet.onChange = (wallet) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n\n    async function connectPhantom() {\n        let wallet = new PhantomWallet();\n        wallet.onChange = (wallet: any) => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function connectSolflare() {\n        let wallet = new SolflareWallet();\n        wallet.onChange = () => onWalletConnect(wallet);\n        await wallet.connect();\n    }\n    \n    async function onWalletConnect(wallet: any){\n        if(wallet){\n            let session = await wallet.signMessage('$GRAPE');\n            if(session){\n                setSession(session);\n            }\n        }\n    }\n    */\n    \n\n    //Menu\n    const menuId = 'primary-wallet-account-menu';\n    const menuWalletId = 'primary-fullwallet-account-menu';\n\n    const handleProfileMenuOpen = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        // this.props.parentCallback(\"Data from child\");\n    };\n\n    const handleWalletConnectClickOpen = (type: string, callback: any) => {\n        /*\n        switch(type) {\n            case \"sollet\":\n                connect();\n                break;\n            case \"phantom\":\n                connectPhantom();\n                break;\n            case \"solflare\":\n                connectSolflare();\n                break;\n            default:\n                break;\n        }\n        */\n       \n        callback && callback();\n    };\n\n    const handleCloseWallet = (value: any) => {\n        setOpenWallet(false);\n\n    };\n\n    function SimpleDialog(props: any) {\n        const { onClose, selectedValue, open_wallet } = props;\n\n        const handleCloseWallet = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: any) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleCloseWallet} aria-labelledby=\"simple-dialog-title\" open={open_wallet}>\n                <DialogTitle id=\"simple-dialog-title\">Select Wallet</DialogTitle>\n                <List>\n                    {providers.map((provider) => (\n                        <ListItem button onClick={() => handleListItemClick(provider)} key={provider}>\n                            <ListItemText primary={provider} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n\n    const handleClickSnackbar = () => {\n        enqueueSnackbar(`Copied...`,{ variant: 'success' });\n        \n        handleMenuClose();\n        //setSnackbarState(true);\n    };\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n        if ((newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue))||\n            ((newinputpkvalue.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (newinputpkvalue.slice(0,1) === '@'))){\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            setNewInputPKValue('');\n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n    return (\n        <Toolbar\n            color=\"inherit\"\n            sx={{\n                pr: '24px', // keep right padding when drawer closed\n                background: 'none'\n            }}\n            >\n\n            <Box display='flex' flexGrow={1}>\n                <Button\n                    variant=\"text\"\n                    color=\"inherit\" \n                    href='/'\n                >\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        display='flex'\n                    >\n                        <img src=\"/grape_white_logo.svg\" height=\"40px\" width=\"137px\" className=\"header-logo\" alt=\"Grape\" />\n                    </Typography>\n                </Button>\n                    <Container\n                        component=\"form\"\n                        onSubmit={handlePublicKeySubmit}\n                        sx={{background:'none'}}\n                        >\n                        <Search\n                            sx={{height:'40px'}}\n                        >\n                            <SearchIconWrapper>\n                                <SearchIcon />\n                            </SearchIconWrapper>\n                            <StyledInputBase\n                                sx={{height:'40px', width:'100%'}}\n                                placeholder=\"Search Solana Address\"\n                                inputProps={{ 'aria-label': 'search' }}\n                                value={newinputpkvalue}\n                                onChange={(e) => setNewInputPKValue(e.target.value)}\n                            />\n                        </Search>\n                    </Container>\n\n\n            </Box>\n            <div>\n                <WalletModalProvider>\n                    <WalletMultiButton />\n                </WalletModalProvider>\n            </div>\n        </Toolbar>\n        \n    );\n}\n\nexport default Header;\n","import React from 'react';\n// material ui\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\n// zustand\nimport create from 'zustand';\n\ntype ConfirmDialogStore = {\n  message: string;\n  onSubmit?: () => void;\n  close: () => void;\n};\n\nconst useConfirmDialogStore = create<ConfirmDialogStore>((set) => ({\n  message: '',\n  onSubmit: undefined,\n  close: () => set({ onSubmit: undefined }),\n}));\n\nexport const confirmDialog = (message: string, onSubmit: () => void) => {\n  useConfirmDialogStore.setState({\n    message,\n    onSubmit,\n  });\n};\n\nconst ConfirmDialog = () => {\n  const { message, onSubmit, close } = useConfirmDialogStore();\n  //return new Promise((res) => {\n  return (\n    <Dialog open={Boolean(onSubmit)} onClose={close} maxWidth=\"sm\" fullWidth>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <DialogTitle>Confirm the action</DialogTitle>\n        <IconButton onClick={close}>\n          <Close />\n        </IconButton>\n      </Box>\n      <DialogContent>\n        <Typography>{message}</Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={close}>\n          Cancel\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            if (onSubmit) {\n              onSubmit();\n            }\n            close();\n          }}\n        >\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n  //});\n};\n\nexport default ConfirmDialog;","import { createTheme, makeStyles } from '@mui/material/styles';\n// paper: #12151B\n\n//background: rgb(18,21,28);\n//background: linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%);\n\n \n//background: #F0F2F0;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #000C40, #F0F2F0);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #000C40, #F0F2F0); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n//background: #141E30;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #243B55, #141E30);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n\nconst themeInstance = {\n  background: 'linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%)',//'#0A1D30',\n\n};\n\nconst theme = createTheme({\n//const useStyles = makeStyles((theme: typeof themeInstance) => ({\n  typography: {\n    fontFamily: [\n      'GrapeFont',\n      'sans-serif',\n    ].join(','),\n  },  \n  palette: {\n    mode: \"dark\",\n    background: {\n      default: '#0A1D30',\n      paper: \"#000000\"\n    },\n  }\n});\n\nexport default theme;","import React, { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n//import { LogView } from \"./Log/Log\";\nimport { ProfileView } from \"./Profile/Profile\";\nimport { PreviewView } from \"./Preview/Preview\";\nimport { FeaturedView } from \"./Featured/Featured\";\nimport { IdentityView } from \"./Identity/Identity\";\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport {\n  Box,\n  Grid,\n  Paper,\n  Container,\n  Typography,\n  AppBar,\n} from '@mui/material';\n\nimport Header from './Header/Header';\nimport { SnackbarProvider } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Connection, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\nimport { Helmet } from 'react-helmet';\n\nimport { useSnackbar } from 'notistack';\n\nimport ConfirmDialog from './components/ConfirmDialog/ConfirmDialog';\n\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n\n/*\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n*/\n\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    //getTorusWallet,\n  } from '@solana/wallet-adapter-wallets';\n\n\n//import { mainListItems, secondaryListItems } from './components/SidebarList/SidebarList';\nimport grapeTheme from  './utils/config/theme'\nimport \"./App.less\";\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from './utils/grapeTools/constants';\n\nfunction Copyright(props: any) {\n  return (\n    <Typography sx={{background:'transparent'}} variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      Powered by Grape on Solana\n      {/*\n      <Link color=\"inherit\" href=\"https://verify.grapes.network\">\n        Grape Network | Dashboard v1.1.5\n      </Link>\n      */}\n    </Typography>\n  );\n}\n\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  //const endpoint =  useMemo(() => clusterApiUrl(network), [network]); // GRAPE_RPC_ENDPOINT;\n  //const endpoint =  GRAPE_RPC_ENDPOINT;\n  const endpoint =  FREE_RPC_ENDPOINT;\n  const wallets = useMemo(() => [\n  \n    getPhantomWallet(),\n    getSolflareWallet(),\n    getSlopeWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n    getLedgerWallet(),\n  \n    //getTorusWallet({\n    //  options: { clientId: 'BCX2hQWDez2_qJhmSuQC7DXD4OG0VfGEFjCZfLar2EA5NvKyudCxOOlOcQ4YZbPGQhdwLonSXZr3i_siIJVhtwI' }\n    //}),\n  /*  \n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n  */  \n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n  \n  /*\n  const { enqueueSnackbar } = useSnackbar();\n  const onError = useCallback(\n      (error) => {\n          enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n          console.error(error);\n      },\n      [enqueueSnackbar]\n  );\n  */\n\n  return (\n    <>\n        <ThemeProvider theme={grapeTheme}>\n            <div className=\"grape-gradient-background\">\n            <SnackbarProvider>\n                <ConnectionProvider endpoint={endpoint}>\n                    <WalletProvider wallets={wallets} autoConnect>\n                    \n                    <Grid \n                        //color={grapeTheme.palette.primary.light}\n                        sx={{ \n                          flex: 1\n                        }}>\n                        <CssBaseline />\n                        <Router>\n                        <AppBar position=\"fixed\" color=\"primary\" style={{ background: 'rgba(0,0,0,0.5)' }}>\n                            <Header\n                                open={open} \n                                toggleDrawer={toggleDrawer}\n                            />\n                        </AppBar>\n                            \n                          <Grid\n                            component=\"main\"\n                            sx={{\n                                mt: 6,\n                                display: 'flex',\n                                flexGrow: 1\n                            }}\n                            >\n                            <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4}}>\n                                <ConfirmDialog />\n                                <Routes>\n\n                                  <Route path=\"/featured\" element={<FeaturedView/>} />\n\n                                  <Route path=\"/\" element={<ProfileView/>}>\n                                    <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  <Route index element={<ProfileView/>} />\n                                  \n                                  <Route path=\"profile/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n\n                                  <Route path=\"collection/*\" element={<ProfileView />} >\n                                      <Route path=\":handlekey\" element={<ProfileView />} />\n                                  </Route>\n                                  \n                                  <Route path=\"preview/*\" element={<PreviewView />}>\n                                      <Route path=\":handlekey\" element={<PreviewView />} />\n                                  </Route>\n\n                                  <Route path=\"identity/*\" element={<IdentityView />}>\n                                      <Route path=\":handlekey\" element={<IdentityView />} />\n                                  </Route>\n\n                                  <Route path=\"*\" element={<NotFound />} />\n                                </Routes>\n                                \n                                <Copyright sx={{ mt: 4 }} />\n                            </Container>\n                          </Grid>\n                        </Router>\n                    </Grid>\n                    \n                    </WalletProvider>\n                </ConnectionProvider>\n            </SnackbarProvider>\n            </div>\n        </ThemeProvider>\n    </>\n  );\n}\n\nexport const NotFound = () => {\n  return (\n    <div style={{ height: \"100%\", overflow: \"auto\" }}>\n      <Paper className=\"grape-paper-background\">\n        <Grid \n          className=\"grape-paper\" \n          container\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\">\n          <Grid item>\n            <Typography \n              align=\"center\"\n              variant=\"h3\">\n              {'No Grapes Here...'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n  </div>\n  )\n}\n\n//export const Dashboard: FC<{ children: ReactNode }> = ({ children }) => {\nexport default function Dashboard() {\n  return <DashboardContent />;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import BigNumber from 'bignumber.js'\n\n// https://github.com/MikeMcl/bignumber.js\n// https://blog.csdn.net/shenxianhui1995/article/details/103985434\nexport class TokenAmount {\n  public wei: BigNumber\n\n  public decimals: number\n  public _decimals: BigNumber\n\n  constructor(wei: number | string | BigNumber, decimals: number = 0, isWei = true) {\n    this.decimals = decimals\n    this._decimals = new BigNumber(10).exponentiatedBy(decimals)\n\n    if (isWei) {\n      this.wei = new BigNumber(wei)\n    } else {\n      this.wei = new BigNumber(wei).multipliedBy(this._decimals)\n    }\n  }\n\n  toEther() {\n    return this.wei.dividedBy(this._decimals)\n  }\n\n  toWei() {\n    return this.wei\n  }\n\n  format() {\n    const vaule = this.wei.dividedBy(this._decimals)\n    return vaule.toFormat(vaule.isInteger() ? 0 : this.decimals)\n  }\n\n  fixed() {\n    return this.wei.dividedBy(this._decimals).toFixed(this.decimals)\n  }\n\n  isNullOrZero() {\n    return this.wei.isNaN() || this.wei.isZero()\n  }\n  // + plus\n  // - minus\n  // × multipliedBy\n  // ÷ dividedBy\n}\n\n// >\nexport function gt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThan(valueB)\n}\n\n// >=\nexport function gte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isGreaterThanOrEqualTo(valueB)\n}\n\n// <\nexport function lt(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThan(valueB)\n}\n\n// <=\nexport function lte(a: string | number, b: string | number) {\n  const valueA = new BigNumber(a)\n  const valueB = new BigNumber(b)\n\n  return valueA.isLessThanOrEqualTo(valueB)\n}\n\nexport function isNullOrZero(value: string | number) {\n  const amount = new BigNumber(value)\n\n  return amount.isNaN() || amount.isZero()\n}\n","import {\n  FollowListInfoArgs,\n  SearchUserInfoArgs,\n  FollowListInfoResp,\n  SearchUserInfoResp,\n} from \"./types\";\n\nconst endPoint = \"https://api.cybertino.io/connect/\";\n\nexport const followListInfoSchema = ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  return {\n    operationName: \"followListInfo\",\n    query: `query followListInfo($address: String!, $namespace: String, $network: Network, $followingFirst: Int, $followingAfter: String, $followerFirst: Int, $followerAfter: String) {\n      identity(address: $address, network: $network) {\n        followingCount(namespace: $namespace)\n        followerCount(namespace: $namespace)\n        like: followingCount(namespace: $namespace, type: LIKE)\n        liked: followerCount(namespace: $namespace, type: LIKE)\n        report: followingCount(namespace: $namespace, type: REPORT)\n        reported: followerCount(namespace: $namespace, type: REPORT)\n        followings(namespace: $namespace, first: $followingFirst, after: $followingAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n        followers(namespace: $namespace, first: $followerFirst, after: $followerAfter) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          list {\n            address\n            ens\n            avatar\n            namespace\n            alias\n          }\n        }\n      }\n    }`,\n    variables: {\n      address,\n      namespace,\n      network,\n      followingFirst,\n      followingAfter,\n      followerFirst,\n      followerAfter,\n    },\n  };\n};\n\nexport const searchUserInfoSchema = ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  return {\n    operationName: \"searchUserInfo\",\n    query: `query searchUserInfo($fromAddr: String!, $toAddr: String!, $network: Network) {\n      identity(address: $toAddr, network: $network) {\n        address\n        ens\n        avatar\n      }\n      connections(fromAddr: $fromAddr, toAddrList: [$toAddr], network: $network) {\n        type\n        followStatus {\n          isFollowed\n          isFollowing\n        }\n      }\n    }`,\n    variables: {\n      fromAddr,\n      toAddr,\n      network,\n    },\n  };\n};\n\nexport const querySchemas = {\n  followListInfo: followListInfoSchema,\n  searchUserInfo: searchUserInfoSchema,\n};\n\nexport const request = async (url = \"\", data = {}) => {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    referrerPolicy: \"no-referrer\",\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const handleQuery = (\n  data: {\n    query: string;\n    variables: object;\n    operationName: string;\n  },\n  url: string\n) => {\n  return request(url, data);\n};\n\nexport const followListInfoQuery = async ({\n  address,\n  namespace,\n  network,\n  followingFirst,\n  followingAfter,\n  followerFirst,\n  followerAfter,\n}: FollowListInfoArgs) => {\n  const schema = querySchemas[\"followListInfo\"]({\n    address,\n    namespace,\n    network,\n    followingFirst,\n    followingAfter,\n    followerFirst,\n    followerAfter,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data?.identity as FollowListInfoResp) || null;\n};\n\nexport const searchUserInfoQuery = async ({\n  fromAddr,\n  toAddr,\n  network,\n}: SearchUserInfoArgs) => {\n  const schema = querySchemas[\"searchUserInfo\"]({\n    fromAddr,\n    toAddr,\n    network,\n  });\n  const resp = await handleQuery(schema, endPoint);\n\n  return (resp?.data as SearchUserInfoResp) || null;\n};","export interface FollowListInfoArgs {\n    address: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n    alias?: string,\n    followingFirst?: number;\n    followingAfter?: string;\n    followerFirst?: number;\n    followerAfter?: string;\n  }\n  \n  export interface SearchUserInfoArgs {\n    fromAddr: string;\n    toAddr: string;\n    namespace?: string;\n    network?: string;\n    type?: string,\n  }\n  \n  export interface BasicUserInfo {\n    ens: string;\n    address: string;\n    avatar: string;\n  }\n  \n  export interface FollowListInfo {\n    pageInfo: {\n      endCursor: string;\n      hasNextPage: boolean;\n    };\n    list: BasicUserInfo[];\n  }\n  \n  export interface FollowListInfoResp {\n    followingCount: number;\n    followerCount: number;\n    followings: FollowListInfo;\n    followers: FollowListInfo;\n    like?: string,\n    liked?: string,\n    report?: string,\n    reported?: string, \n  }\n  \n  export interface SearchUserInfoResp {\n    connections: {\n      followStatus: {\n        isFollowing: boolean;\n        isFollowed: boolean;\n      };\n      type: ConnectionType;\n    }[];\n    identity: {\n      ens: string;\n      address: string;\n      avatar: string;\n    };\n  }\n  \n  export enum Network {\n    ETH = 'ETH',\n    SOLANA = 'SOLANA',\n  }","import { deserializeUnchecked, serialize, BinaryReader, BinaryWriter } from 'borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js'\nconst base58 = require('bs58');\n\nexport type StringPublicKey = string;\n\nexport const extendBorsh = () => {\n\t(BinaryReader.prototype as any).readPubkey = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn new PublicKey(array);\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(value.toBuffer());\n\t};\n\n\t(BinaryReader.prototype as any).readPubkeyAsString = function () {\n\t\tconst reader = this as unknown as BinaryReader;\n\t\tconst array = reader.readFixedArray(32);\n\t\treturn base58.encode(array) as StringPublicKey;\n\t};\n\n\t(BinaryWriter.prototype as any).writePubkeyAsString = function (\n\t\tvalue: StringPublicKey,\n\t) {\n\t\tconst writer = this as unknown as BinaryWriter;\n\t\twriter.writeFixedArray(base58.decode(value));\n\t};\n};\n\nextendBorsh();\n\nexport const METADATA_PREFIX = 'metadata';\nexport const EDITION = 'edition';\nexport const RESERVATION = 'reservation';\n\nexport const MAX_NAME_LENGTH = 32;\n\nexport const MAX_SYMBOL_LENGTH = 10;\n\nexport const MAX_URI_LENGTH = 200;\n\nexport const MAX_CREATOR_LIMIT = 5;\n\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\nexport const MAX_METADATA_LEN =\n\t1 +\n\t32 +\n\t32 +\n\tMAX_NAME_LENGTH +\n\tMAX_SYMBOL_LENGTH +\n\tMAX_URI_LENGTH +\n\tMAX_CREATOR_LIMIT * MAX_CREATOR_LEN +\n\t2 +\n\t1 +\n\t1 +\n\t198;\n\nexport const MAX_EDITION_LEN = 1 + 32 + 8 + 200;\n\nexport const EDITION_MARKER_BIT_SIZE = 248;\n\n\nexport enum MetadataKey {\n\tUninitialized = 0,\n\tMetadataV1 = 4,\n\tEditionV1 = 1,\n\tMasterEditionV1 = 2,\n\tMasterEditionV2 = 6,\n\tEditionMarker = 7,\n}\n\nexport enum MetadataCategory {\n\tAudio = 'audio',\n\tVideo = 'video',\n\tImage = 'image',\n\tVR = 'vr',\n}\n\nexport type MetadataFile = {\n\turi: string;\n\ttype: string;\n};\n\nexport type FileOrString = MetadataFile | String;\n\nexport type Attribute = {\n\ttrait_type?: string;\n\tdisplay_type?: string;\n\tvalue: string | number;\n};\n\nexport interface IMetadataExtension {\n\tname: string;\n\tsymbol: string;\n\n\tcreators: Creator[] | null;\n\tdescription: string;\n\t// preview image absolute URI\n\timage: string;\n\tanimation_url?: string;\n\n\tattributes?: Attribute[];\n\n\t// stores link to item on meta\n\texternal_url: string;\n\n\tseller_fee_basis_points: number;\n\n\tproperties: {\n\t\tfiles?: FileOrString[];\n\t\tcategory: MetadataCategory;\n\t\tmaxSupply?: number;\n\t\tcreators?: {\n\t\t\taddress: string;\n\t\t\tshares: number;\n\t\t}[];\n\t};\n}\n\nexport class MasterEditionV1 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\t/// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n\tprintingMint: StringPublicKey;\n\t/// If you don't know how many printing tokens you are going to need, but you do know\n\t/// you are going to need some amount in the future, you can use a token from this mint.\n\t/// Coming back to token metadata with one of these tokens allows you to mint (one time)\n\t/// any number of printing tokens you want. This is used for instance by Auction Manager\n\t/// with participation NFTs, where we dont know how many people will bid and need participation\n\t/// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n\t/// because when the auction begins we just dont know how many printing tokens we will need,\n\t/// but at the end we will. At the end it then burns this token with token-metadata to\n\t/// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n\t/// to get their limited editions.\n\toneTimePrintingAuthorizationMint: StringPublicKey;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tsupply: typeof BN;\n\t\tmaxSupply?: typeof BN;\n\t\tprintingMint: StringPublicKey;\n\t\toneTimePrintingAuthorizationMint: StringPublicKey;\n\t}) {\n\t\tthis.key = MetadataKey.MasterEditionV1;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t\tthis.printingMint = args.printingMint;\n\t\tthis.oneTimePrintingAuthorizationMint =\n\t\t\targs.oneTimePrintingAuthorizationMint;\n\t}\n}\n\nexport class MasterEditionV2 {\n\tkey: MetadataKey;\n\tsupply: typeof BN;\n\tmaxSupply?: typeof BN;\n\n\tconstructor(args: { key: MetadataKey; supply: typeof BN; maxSupply?: typeof BN }) {\n\t\tthis.key = MetadataKey.MasterEditionV2;\n\t\tthis.supply = args.supply;\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nexport class EditionMarker {\n\tkey: MetadataKey;\n\tledger: number[];\n\n\tconstructor(args: { key: MetadataKey; ledger: number[] }) {\n\t\tthis.key = MetadataKey.EditionMarker;\n\t\tthis.ledger = args.ledger;\n\t}\n\n\teditionTaken(edition: number) {\n\t\tconst editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n\t\tconst indexOffset = Math.floor(editionOffset / 8);\n\n\t\tif (indexOffset > 30) {\n\t\t\tthrow Error('bad index for edition');\n\t\t}\n\n\t\tconst positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n\t\tconst mask = Math.pow(2, positionInBitsetFromRight);\n\n\t\tconst appliedMask = this.ledger[indexOffset] & mask;\n\n\t\treturn appliedMask !== 0;\n\t}\n}\n\nexport class Edition {\n\tkey: MetadataKey;\n\t/// Points at MasterEdition struct\n\tparent: StringPublicKey;\n\t/// Starting at 0 for master record, this is incremented for each edition minted.\n\tedition: typeof BN;\n\n\tconstructor(args: {\n\t\tkey: MetadataKey;\n\t\tparent: StringPublicKey;\n\t\tedition: typeof BN;\n\t}) {\n\t\tthis.key = MetadataKey.EditionV1;\n\t\tthis.parent = args.parent;\n\t\tthis.edition = args.edition;\n\t}\n}\nexport class Creator {\n\taddress: StringPublicKey;\n\tverified: boolean;\n\tshare: number;\n\n\tconstructor(args: {\n\t\taddress: StringPublicKey;\n\t\tverified: boolean;\n\t\tshare: number;\n\t}) {\n\t\tthis.address = args.address;\n\t\tthis.verified = args.verified;\n\t\tthis.share = args.share;\n\t}\n}\n\nexport class Data {\n\tname: string;\n\tsymbol: string;\n\turi: string;\n\tsellerFeeBasisPoints: number;\n\tcreators: Creator[] | null;\n\tconstructor(args: {\n\t\tname: string;\n\t\tsymbol: string;\n\t\turi: string;\n\t\tsellerFeeBasisPoints: number;\n\t\tcreators: Creator[] | null;\n\t}) {\n\t\tthis.name = args.name;\n\t\tthis.symbol = args.symbol;\n\t\tthis.uri = args.uri;\n\t\tthis.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n\t\tthis.creators = args.creators;\n\t}\n}\n\nexport class Metadata {\n\tkey: MetadataKey;\n\tupdateAuthority: StringPublicKey;\n\tmint: StringPublicKey;\n\tdata: Data;\n\tprimarySaleHappened: boolean;\n\tisMutable: boolean;\n\teditionNonce: number | null;\n\n\t// set lazy\n\tmasterEdition?: StringPublicKey;\n\tedition?: StringPublicKey;\n\n\tconstructor(args: {\n\t\tupdateAuthority: StringPublicKey;\n\t\tmint: StringPublicKey;\n\t\tdata: Data;\n\t\tprimarySaleHappened: boolean;\n\t\tisMutable: boolean;\n\t\teditionNonce: number | null;\n\t}) {\n\t\tthis.key = MetadataKey.MetadataV1;\n\t\tthis.updateAuthority = args.updateAuthority;\n\t\tthis.mint = args.mint;\n\t\tthis.data = args.data;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t\tthis.isMutable = args.isMutable;\n\t\tthis.editionNonce = args.editionNonce;\n\t}\n}\n\nclass CreateMetadataArgs {\n\tinstruction: number = 0;\n\tdata: Data;\n\tisMutable: boolean;\n\n\tconstructor(args: { data: Data; isMutable: boolean }) {\n\t\tthis.data = args.data;\n\t\tthis.isMutable = args.isMutable;\n\t}\n}\nclass UpdateMetadataArgs {\n\tinstruction: number = 1;\n\tdata: Data | null;\n\t// Not used by this app, just required for instruction\n\tupdateAuthority: StringPublicKey | null;\n\tprimarySaleHappened: boolean | null;\n\tconstructor(args: {\n\t\tdata?: Data;\n\t\tupdateAuthority?: string;\n\t\tprimarySaleHappened: boolean | null;\n\t}) {\n\t\tthis.data = args.data ? args.data : null;\n\t\tthis.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n\t\tthis.primarySaleHappened = args.primarySaleHappened;\n\t}\n}\n\nclass CreateMasterEditionArgs {\n\tinstruction: number = 10;\n\tmaxSupply: typeof BN | null;\n\tconstructor(args: { maxSupply: typeof BN | null }) {\n\t\tthis.maxSupply = args.maxSupply;\n\t}\n}\n\nclass MintPrintingTokensArgs {\n\tinstruction: number = 9;\n\tsupply: typeof BN;\n\n\tconstructor(args: { supply: typeof BN }) {\n\t\tthis.supply = args.supply;\n\t}\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n\t[\n\t\tCreateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', Data],\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tUpdateMetadataArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['data', { kind: 'option', type: Data }],\n\t\t\t\t['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n\t\t\t\t['primarySaleHappened', { kind: 'option', type: 'u8' }],\n\t\t\t],\n\t\t},\n\t],\n\n\t[\n\t\tCreateMasterEditionArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMintPrintingTokensArgs,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['instruction', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV1,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t\t['printingMint', 'pubkeyAsString'],\n\t\t\t\t['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMasterEditionV2,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['supply', 'u64'],\n\t\t\t\t['maxSupply', { kind: 'option', type: 'u64' }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEdition,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['parent', 'pubkeyAsString'],\n\t\t\t\t['edition', 'u64'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tData,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['name', 'string'],\n\t\t\t\t['symbol', 'string'],\n\t\t\t\t['uri', 'string'],\n\t\t\t\t['sellerFeeBasisPoints', 'u16'],\n\t\t\t\t['creators', { kind: 'option', type: [Creator] }],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tCreator,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['address', 'pubkeyAsString'],\n\t\t\t\t['verified', 'u8'],\n\t\t\t\t['share', 'u8'],\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tMetadata,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['updateAuthority', 'pubkeyAsString'],\n\t\t\t\t['mint', 'pubkeyAsString'],\n\t\t\t\t['data', Data],\n\t\t\t\t['primarySaleHappened', 'u8'], // bool\n\t\t\t\t['isMutable', 'u8'], // bool\n\t\t\t],\n\t\t},\n\t],\n\t[\n\t\tEditionMarker,\n\t\t{\n\t\t\tkind: 'struct',\n\t\t\tfields: [\n\t\t\t\t['key', 'u8'],\n\t\t\t\t['ledger', [31]],\n\t\t\t],\n\t\t},\n\t],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n\tconst metadata = deserializeUnchecked(\n\t\tMETADATA_SCHEMA,\n\t\tMetadata,\n\t\tbuffer,\n\t) as Metadata;\n\tmetadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n\tmetadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n\tmetadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n\treturn metadata;\n};\n","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils';\n// @ts-ignore\nimport fetch from 'node-fetch';\nimport BN from \"bn.js\";\n\nimport { findDisplayName } from '../utils/name-service';\n//import { performReverseLookup } from '../utils/web3/naming';\nimport {\n    getHashedName,\n    getNameAccountKey,\n    NameRegistryState,\n    performReverseLookup,\n    getTwitterRegistry,\n  } from \"@bonfida/spl-name-service\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { formatAddress, removeDuplicate, isValidAddr } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    Avatar,\n    Table,\n    Card,\n    CardActionArea,\n    CardMedia,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    Tab,\n    Tabs,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Paper,\n    Container,\n    ListItemIcon,\n    SpeedDial,\n    Hidden,\n    ButtonGroup,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport CollectionsOutlinedIcon from '@mui/icons-material/CollectionsOutlined';\nimport RssFeedOutlinedIcon from '@mui/icons-material/RssFeedOutlined';\nimport GavelOutlinedIcon from '@mui/icons-material/GavelOutlined';\nimport ArrowCircleLeftOutlinedIcon from '@mui/icons-material/ArrowCircleLeftOutlined';\nimport ArrowCircleRightOutlinedIcon from '@mui/icons-material/ArrowCircleRightOutlined';\nimport ExploreIcon from '@mui/icons-material/Explore';\nimport MessageIcon from '@mui/icons-material/Message';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport HomeIcon from '@mui/icons-material/Home';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, GRAPE_IDENTITY, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport FeedView from './FeedView';\nimport OffersView from './OffersView';\nimport SocialView from './SocialView';\nimport GalleryView from './GalleryView';\nimport { MakeLinkableAddress, ValidateAddress, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { ConstructionOutlined } from \"@mui/icons-material\";\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nconst PubKeyDialog = (props: any) => {\n    const [open_dialog, setOpenPKDialog] = React.useState(false);\n    const [walletPKId, setInputPKValue] = React.useState('');\n\n    const handleClickOpenDialog = () => {\n        setOpenPKDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setInputPKValue(\"\");\n        setOpenPKDialog(false);\n    };\n\n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        if ((walletPKId.length >= 32) && \n            (walletPKId.length <= 44)){\n            // WalletId is base58 validate the type too later on\n            props.setPubkey(walletPKId);\n            handleCloseDialog();\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID WALLET ID\");\n        }\n    }\n    \n    return (\n      <React.Fragment>\n        <Button size=\"small\" variant=\"text\" value=\"Search with WalletID\" onClick={handleClickOpenDialog}\n            sx={{borderRadius:'24px'}}\n        >\n            <SearchIcon />\n        </Button> \n         \n        <BootstrapDialog \n            fullWidth={true}\n            maxWidth={\"md\"}\n            open={open_dialog} onClose={handleCloseDialog}\n            PaperProps={{\n                style: {\n                    background: '#13151C',\n                    border: '1px solid rgba(255,255,255,0.05)',\n                    borderTop: '1px solid rgba(255,255,255,0.1)',\n                    borderRadius: '20px'\n                }\n                }}\n            >\n            <DialogTitle>\n                Public Key\n            </DialogTitle>\n            <form onSubmit={HandlePKSubmit}>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    autoComplete='off'\n                    margin=\"dense\"\n                    id=\"collection_wallet_id\"\n                    label=\"Paste a public key\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                    value={walletPKId}\n                    onChange={(e) => setInputPKValue(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDialog}>Cancel</Button>\n                <Button \n                    type=\"submit\"\n                    variant=\"text\" \n                    title=\"GO\">\n                        Go\n                </Button>\n            </DialogActions>\n            </form>\n        </BootstrapDialog>   \n      </React.Fragment>\n    );\n}\n\n\n/*\n  LAYOUT:\n    0 ['key', 'u8'] (Uninitialized=0, MetadataV1=4)\n    1 ['updateAuthority', 'pubkey'], (ignore)\n    33 ['mint', 'pubkey'], (filter)\n    65 ['data', Data],\n    72+0 name (borsh string)\n    72+x symbol (borsh string)\n    72+x uri (borsh string)\n */\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nconst GalleryItem = (props: any) => {\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account.data.parsed.info.mint || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n\n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let meta_primer = collectionitem;\n                let buf = Buffer.from(meta_primer.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                    \n                        <Grid \n                            container \n                            alignItems=\"center\"\n                            justifyContent=\"center\">\n                            <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                <ListItemButton\n                                    component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                    sx={{\n                                        width:'100%',\n                                        borderRadius:'25px',\n                                        p: '2px'\n                                    }}\n                                >\n                                    <img\n                                        src={`${image}`}\n                                        srcSet={`${image}`}\n                                        alt={collectionmeta.collectionmeta?.name}\n                                        //onClick={ () => openImageViewer(0) }\n                                        loading=\"lazy\"\n                                        height=\"auto\"\n                                        style={{\n                                            width:'100%',\n                                            borderRadius:'24px'\n                                        }}\n                                    />\n                                </ListItemButton>\n                            </Grid>\n                            <Grid item sx={{display:'flex'}}>\n                                <Box\n                                    sx={{p:1}}\n                                >\n                                    <Typography variant=\"caption\">\n                                        {collectionmeta.collectionmeta?.name}\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                );\n            }\n            //}\n        }\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n    <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n    >\n        {value === index && (\n        <Box sx={{ p: 0 }}>\n            <Typography>{children}</Typography>\n        </Box>\n        )}\n    </div>\n    );\n}\n\nconst StyledSpeedDial = styled(SpeedDial)(({ theme }) => ({\n    position: 'absolute',\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n      top: theme.spacing(2),\n      left: theme.spacing(2),\n    },\n  }));\n  \nconst MainMenu = (props:any) => {\n    const pubkey = props.pubkey;\n    const { publicKey } = useWallet();\n\n    if ((publicKey) && (publicKey.toBase58() != pubkey)){\n        return (\n        \n            <List\n                sx={{m:1,p:1}}\n            >\n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Back Home\"\n                        component={Link} to={`${GRAPE_PROFILE}${publicKey.toBase58()}`}\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <HomeIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Home\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Visit Solana Explorer\"\n                        component=\"a\" href={`https://explorer.solana.com/address/${publicKey.toBase58()}`} target=\"_blank\"\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <ExploreIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Explore\" />\n                    </ListItemButton>\n                </ListItem>\n    \n                <ListItem disablePadding>\n                    <ListItemButton\n                        title=\"Messaging coming soon\"\n                        disabled\n                        sx={{\n                            width:'100%',\n                            borderRadius:'25px',\n                            p: 1\n                        }}\n                    >\n                        <ListItemIcon>\n                            <MessageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={`Messages`} />\n                    </ListItemButton>\n                </ListItem>\n            </List>\n    \n        );\n    } else{\n        return (<></>);\n    }\n    \n    /*\n    const actions = [\n        { icon: <HomeIcon />, name: 'Home' },\n        { icon: <ExploreIcon />, name: 'Explore' },\n        { icon: <MessageIcon />, name: 'Messages *coming soon' },\n    ];\n    \n    return (\n        <Box sx={{ height: 230, transform: 'translateZ(0px)', flexGrow: 1 }}>\n            <SpeedDial\n                ariaLabel=\"Menu\"\n                sx={{ position: 'absolute', bottom: 16, left: 16 }}\n                icon={<SpeedDialIcon sx={{color:'white'}} />}\n                direction='down'\n            >\n                {actions.map((action) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                />\n                ))}\n            </SpeedDial>\n        </Box>\n    )\n    */\n}\n\nexport const TabActiveContext = React.createContext({\n    activeTab: 0,\n    setActiveTab: (at:number) => {}\n});\n\nexport const TabActiveProvider = ({ children, initialActiveKey }) => {\n    const [activeTab, setActiveTab] = useState(initialActiveKey);\n    return (\n      <TabActiveContext.Provider\n        value={{\n          activeTab,\n          setActiveTab\n        }}\n      >\n        {children}\n      </TabActiveContext.Provider>\n    );\n};\n\nconst MainPanel = (props: any) => {\n    const [loading, setLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.thisPublicKey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const finalCollection = props.final_collection || null;\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    //const { activeTab, setActiveTab } = React.useContext(TabActiveContext);\n    const [tabvalue, setTabValue] = React.useState(props?.activeTab || 0);\n    \n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n        setTabValue(newValue);\n    };\n\n    function a11yProps(index: number) {\n        return {\n            id: `grapeart-tab-${index}`,\n            'aria-controls': `grapeart-tabpanel-${index}`,\n        };\n    }\n\n    React.useEffect(() => { \n        if (tabvalue!=props?.activeTab){\n            setTabValue(props?.activeTab);\n        }\n    }, [props?.activeTab]);\n    \n    if(loading){\n        return (\n            <Grid item xs='auto' sm='auto' md='auto' lg='auto' xl='auto'>\n                <Box\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    sx={{\n                    }} \n                >\n                    <CircularProgress />\n                </Box>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid item xs={12} sm={6} md={8} lg={9} xl={9}>\n                <Container\n                    sx={{\n                        minHeight: '225px',\n                        m:0,\n                        p:0,\n                    }} \n                >\n                    <TabActiveProvider initialActiveKey=\"0\">   \n                        <Tabs \n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            value={tabvalue} \n                            onChange={handleTabChange} \n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.6)',\n                                borderRadius: '17px',\n                                mb:1,\n                            }} \n                        >\n                            <Tab icon={<Hidden smUp><CollectionsOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Collection</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(0)} />\n                            <Tab icon={<Hidden smUp><RssFeedOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Feed</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(1)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleLeftOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Followers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(2)} />\n                            <Tab icon={<Hidden smUp><ArrowCircleRightOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Following</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(3)} />\n                            {/*<Tab label=\"Bids\" sx={{color:'white'}} {...a11yProps(4)} />*/}\n                            <Tab icon={<Hidden smUp><GavelOutlinedIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Offers</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(5)} />\n                            <Tab icon={<Hidden smUp><SolCurrencyIcon sx={{fontSize:'18px'}}/></Hidden>} label={<Hidden smDown>Selling</Hidden>} sx={{color:'white',minWidth:'60px'}} {...a11yProps(6)} />\n                        </Tabs>\n                    \n                    \n                        <TabPanel value={tabvalue} index={1}>\n                            <Box\n                                sx={{\n                                    borderRadius: '17px',\n                                }} \n                                > \n                                <FeedView />\n                            </Box>\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={0}>\n                            <GalleryView finalCollection={finalCollection} walletCollection={walletCollection} />\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={2}>\n                            <SocialView pubkey={thisPublicKey} type={0} />\n                        </TabPanel>\n                        \n                        <TabPanel value={tabvalue} index={3}>\n                            <SocialView pubkey={thisPublicKey} type={1} />\n                        </TabPanel>\n\n                        <TabPanel value={tabvalue} index={4}>\n                            <OffersView selectedstate={1} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                        <TabPanel value={tabvalue} index={5}>\n                            <OffersView selectedstate={2} pubkey={thisPublicKey} wallet_collection={walletCollection} wallet_collection_meta={walletCollectionMeta} />\n                        </TabPanel>\n                    </TabActiveProvider>\n                </Container>\n            </Grid>\n        );\n    }\n}\n\nconst IdentityView = (props: any) => {\n    const [expanded_collection, setExpandedCollection] = React.useState(true);\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const rpclimit = 100;\n    //const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection)\n    //const [wallet_collection] = React.useState(props.collection.collection);\n    const [wallet_collection, setCollectionArray] = React.useState(props.collection.collection);\n    const [wallet_collection_meta, setCollectionMeta] = React.useState(null);\n    const [final_collection, setCollectionMetaFinal] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [featuredObj, setFeaturedObj] = React.useState(null);\n    const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n    const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n    //const { setActiveTab } = React.useContext(TabActiveContext);\n    const [activeTab, setActiveTab] = React.useState(0);\n\n    let ref = React.createRef()\n\n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!pubkey) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:pubkey,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n  \n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: NAME_SPACE,\n            network: NETWORK,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(followAddress, solanaAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n\n        let promise = await cyberConnect.disconnect(followAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        getFollowStatus();\n    };\n\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n        getCollectionMeta(value);\n        //count={(Math.ceil(wallet_collection.length / rowsperpage))}\n    };\n\n    const handleExpandCollectionClick = () => {\n        setExpandedCollection(!expanded_collection);\n    };\n    \n    const fetchProfilePicture = async () => {\n        const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(pubkey));\n\n        let img_url = url;\n        if (url)\n            img_url = url.replace(/width=100/g, 'width=256');\n        setProfilePictureUrl(img_url);\n        setHasProfilePicture(isAvailable);\n    }\n\n    const fetchSolanaDomain = async () => {\n        const domain = await findDisplayName(ggoconnection, pubkey);\n        if (domain){\n            if (domain[0] !== pubkey)\n                setSolanaDomain(domain[0]);\n        }\n    }\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    const getCollectionData = async (start:number) => {\n        try {\n            let mintsPDAs = new Array();\n            //console.log(\"RPClim: \"+rpclimit);\n            //console.log(\"Paging \"+(rpclimit*(start))+\" - \"+(rpclimit*(start+1)));\n            \n            let mintarr = wallet_collection.slice(rpclimit*(start), rpclimit*(start+1)).map((value:any, index:number) => {\n                //console.log(\"mint: \"+JSON.stringify(value.account.data.parsed.info.mint));\n                return value.account.data.parsed.info.mint;\n            });\n\n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            //console.log(\"pushed pdas: \"+JSON.stringify(mintsPDAs));\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            //console.log(\"returned: \"+JSON.stringify(metadata));\n\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                //console.log(\"Metaplex val: \"+JSON.stringify(metavalue));\n                if (metavalue?.data){\n                    try{\n                        let meta_primer = metavalue;\n                        let buf = Buffer.from(metavalue.data);\n                        let meta_final = decodeMetadata(buf);\n                        //console.log(\"meta_final: \"+JSON.stringify(meta_final));\n                    }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n                } else{\n                    console.log(\"Something not right...\");\n                }\n                //setCollectionRaw({meta_final,meta_primer});\n                \n                /*\n                const finalmetadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                */\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFollowStatus = async () => {\n        if (publicKey){\n            if (pubkey){\n                setLoadingFollowState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), pubkey);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFollowState(false);\n            }\n        }\n    }\n\n    const getCollectionMeta = async (start:number) => {\n        if (!loading){\n            setLoading(true);\n            // see how many loops we will need to conduct\n            let wallletlength = wallet_collection.length;\n            \n            let loops = (Math.ceil(wallet_collection.length/rpclimit));\n            let collectionmeta: any[] = [];\n\n            console.log(\"lps: \"+loops);\n            for (var x=0;x<loops;x++){\n                //const interval = setTimeout(() => {\n                    let tmpcollectionmeta = await getCollectionData(x);\n                    //collectionmeta.push(tmpcollectionmeta);\n                    collectionmeta = collectionmeta.concat(tmpcollectionmeta);\n                //}, 200);\n                \n            }\n            \n            //console.log(collectionmeta.length + ' vs '+wallet_collection.length);\n\n            setLoadCount(loadCount+1);\n            setCollectionMeta({collectionmeta});\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                //console.log(i+\": \"+JSON.stringify(collectionmeta[i])+\" --- with --- \"+JSON.stringify(wallet_collection[i]));\n                if (collectionmeta[i]){\n                    collectionmeta[i][\"wallet\"] = wallet_collection[i];\n                }\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                setCollectionMetaFinal(finalmeta);\n            }catch(e){}\n            // setCollectionMetaFinal(); // add both arrays\n\n            setLoading(false);\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            if (ValidateAddress(pubkey)){\n                if (loadCount < 1){\n                    fetchProfilePicture();\n                    getCollectionMeta(0);\n                    fetchSolanaDomain();\n                    getFollowStatus();\n                    initFollowListInfo();\n\n                    // get featured\n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === pubkey){\n                            setFeaturedObj(featured);\n                        }\n                    }\n                }\n            }\n        }\n    }, [pubkey]);\n\n    if (loading){\n        return <>Loading...</>\n    } else {\n\n        return (\n            <React.Fragment>\n                <Box>\n                        <Box\n                            sx={{\n                                mb:4,\n                                mt:3,\n                                //background:'green'\n                            }}\n                        >\n                            {featuredObj && (\n                                <Card sx={{borderRadius:'26px',mb:2}}>\n\n                                        {/*component={Link} to={`${GRAPE_PROFILE}${featuredObj.address}`}*/}\n                                    <CardActionArea\n                                        component=\"a\" href={`${featuredObj.daourl}`} target=\"_blank\"\n                                    >\n                                        <CardMedia\n                                        component=\"img\"\n                                        image={featuredObj.img}\n                                        alt={featuredObj.title}\n                                            sx={{\n                                                maxHeight: '250',\n                                                background: 'rgba(0, 0, 0, 1)',\n                                                m:0,\n                                                p:0,\n                                            }} \n                                        />\n                                    </CardActionArea>\n                                </Card>\n                            )}\n\n                                <Grid \n                                    container \n                                    spacing={2}\n                                    rowSpacing={3}\n                                    >    \n                                    <Grid item xs={12} sm={6} md={4} lg={3} xl={3}\n                                    sx={{\n                                    }}\n                                    >\n                                    \n                                    <Box\n                                        className='grape-profile-background'\n                                        sx={{\n                                            //background: 'rgba(0, 0, 0, 0.6)',\n                                            position:'relative',\n                                            borderRadius: '17px',\n                                            minHeight: '225px',\n                                            minWidth:'250px',\n                                            overflow:'hidden',\n                                            pb:3,\n                                            pl:4,\n                                            pr:4\n                                        }} \n                                    >\n                                    {featuredObj ? (  \n                                        <img\n                                            src={featuredObj.img}\n                                            alt=\"\"\n                                            style={{\n                                                opacity: '0.21',\n                                                position: 'absolute',\n                                                marginTop:2,\n                                                marginBottom:2,\n                                                padding:1,\n                                                top:'-5%',\n                                                right:'-5%',\n                                                height:'110%'\n                                            }}\n                                        />\n                                    )\n                                    :(\n                                        <>\n                                            {(hasProfilePicture && profilePictureUrl) &&\n                                                <img\n                                                    src={profilePictureUrl}\n                                                    alt=\"\"\n                                                    style={{\n                                                        opacity: '0.03',\n                                                        position: 'absolute',\n                                                        marginTop:2,\n                                                        marginBottom:2,\n                                                        padding:1,\n                                                        top:'-5%',\n                                                        left:'-50%',\n                                                        height:'200%'\n                                                    }}\n                                                />\n                                            }\n                                        </>\n                                        )\n                                    }\n                                    \n                                        \n                                        <List\n                                            sx={{ \n                                                width: '100%',\n                                                pl: 2,\n                                                pr: 2,\n                                                pb: 2\n                                            }}\n                                            component=\"nav\"\n                                            >       \n                                            <ListItemText>\n\n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"flex-end\"\n                                                justifyContent=\"flex-end\"\n                                            >\n                                                <Grid item>\n                                                    <Box sx={{ mt:-1.5,mr:-6 }}>\n                                                        \n                                                        <Typography component=\"div\" variant=\"caption\" alignItems=\"flex-end\" justifyContent=\"flex-end\">\n\n                                                            <ButtonGroup variant=\"text\">\n                                                            <ShareSocialURL url={window.location.href} title={'Grape Profile | '+trimAddress(pubkey,4)} />\n\n                                                            {publicKey && publicKey.toBase58() !== pubkey &&\n                                                                <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                {loadingFollowState ?\n                                                                    <>\n                                                                        <CircularProgress sx={{p:'14px',m:-0.75}} />\n                                                                    </>\n                                                                :\n                                                                    <>\n                                                                        {isFollowing ?  \n                                                                            <Tooltip title={`Unfollow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletDisconnect(pubkey)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonRemoveOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                            :\n                                                                            <Tooltip title={`Follow`}>\n                                                                                <Button \n                                                                                    variant=\"text\" \n                                                                                    onClick={() => followWalletConnect(pubkey, solanaDomain)}\n                                                                                    size=\"small\"\n                                                                                    className=\"profileAvatarIcon\"\n                                                                                    sx={{borderRadius:'24px', color:'white'}}\n                                                                                    >\n                                                                                    <PersonAddOutlinedIcon />\n                                                                                </Button>\n                                                                            </Tooltip>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                                </Typography>\n                                                            }\n                                                            </ButtonGroup>\n                                                        </Typography>\n                                                    </Box>\n                                                </Grid>  \n                                            </Grid>  \n                                            <Grid \n                                                container \n                                                direction=\"column\"\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\"\n                                                sx={{mt:2}}\n                                            >\n                                                <Grid item>\n                                                {(hasProfilePicture && profilePictureUrl) ?\n                                                    <Avatar sx={{ width: 100, height: 100 }} alt=\"Profile\" src={profilePictureUrl} />\n                                                :\n                                                    <Jazzicon diameter={100} seed={jsNumberForAddress(pubkey)} />\n                                                }\n                                                </Grid>\n                                                <Grid item\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\"\n                                                >\n                                                    <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>\n                                                        {solanaDomain && solanaDomain.length > 0 ?\n                                                        \n                                                            <Button \n                                                                sx={{borderRadius:'17px'}} \n                                                                size=\"small\" variant=\"text\" \n                                                                component={Link} \n                                                                to={`${GRAPE_IDENTITY}${pubkey}`}>\n                                                                <Grid \n                                                                container \n                                                                direction=\"column\"\n                                                                alignItems=\"center\"\n                                                                justifyContent=\"center\"\n                                                                >\n                                                                    <Grid item>\n                                                                        <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}><strong>{solanaDomain}</strong></Typography>\n                                                                    </Grid>\n                                                                    <Grid item sx={{mt:-1.5}}>\n                                                                        <Typography gutterBottom variant=\"caption\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>{trimAddress(pubkey,4)}</Typography>\n                                                                    </Grid>\n                                                                </Grid>\n                                                            </Button>\n                                                        :\n                                                            <Button \n                                                                sx={{borderRadius:'17px'}} \n                                                                size=\"small\" variant=\"text\" \n                                                                component={Link} \n                                                                to={`${GRAPE_IDENTITY}${pubkey}`}>\n                                                                <Grid \n                                                                container \n                                                                direction=\"column\"\n                                                                alignItems=\"center\"\n                                                                justifyContent=\"center\"\n                                                                >\n                                                                    <Grid item>\n                                                                        <Typography gutterBottom variant=\"body1\" component=\"div\" sx={{ flexGrow: 1, color:'white' }}>{trimAddress(pubkey,4)}</Typography>\n                                                                    </Grid>\n                                                                </Grid>\n                                                            </Button>\n                                                        }\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item sx={{mt:1}}>\n                                                    \n                                                    {followListInfo && \n                                                        <>\n                                                            \n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(3)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followingCount}</strong>&nbsp;  \n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Following</Typography>&nbsp; \n                                                                </Button>\n                                                                <Button\n                                                                    onClick={() => setActiveTab(2)}\n                                                                    sx={{fontSize:'12px',textTransform:'none',color:'white',border:'1px solid #fff', borderRadius:'17px',pl:5,pr:5,pt:0,pb:0, m:1}}\n                                                                >\n                                                                    <strong>{followListInfo.followerCount}</strong>&nbsp;\n                                                                    <Typography component=\"span\" color=\"#aaa\" variant=\"caption\" align=\"center\" sx={{ flexGrow: 1 }}>Followers</Typography>\n                                                                </Button>\n                                                            </Typography>\n                                                        </>\n                                                    }\n                                                    \n                                                    { final_collection && final_collection.length > 0 && (\n                                                        <>\n                                                            <Typography component=\"div\" variant=\"caption\" align=\"center\" color=\"#aaa\"  sx={{ flexGrow: 1, mt:3 }}>\n                                                                <strong>{final_collection.length}</strong> items collected\n                                                            </Typography>\n                                                        </>\n                                                    )}\n                                                    \n                                                    \n                                                            \n                                                </Grid>\n                                            </Grid>\n                                            </ListItemText>\n                                        </List>\n                                    </Box>\n                                    <MainMenu pubkey={pubkey} />\n                                </Grid>\n                                \n                                <MainPanel activeTab={activeTab} thisPublicKey={pubkey} final_collection={final_collection} wallet_collection={wallet_collection} wallet_collection_meta={wallet_collection_meta} />\n                            </Grid>\n                        </Box>\n                        \n                    </Box>\n            </React.Fragment>\n        );\n    }\n    \n}\n\nexport async function findOwnedNameAccountsForUser(\n    connection: Connection,\n    userAccount: PublicKey\n  ): Promise<PublicKey[]> {\n    const NAME_PROGRAM_ID = new PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\n    const filters = [\n      {\n        memcmp: {\n          offset: 32,\n          bytes: userAccount.toBase58(),\n        },\n      },\n    ];\n    const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n      filters,\n    });\n    \n    return accounts.map((a) => a.pubkey);    \n}\n\n\nexport function ProfileView(this: any, props: any) {\n    //const [provider, setProvider] = React.useState(getParam('provider'));\n    const [gallery, setGallery] = React.useState(null);\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    const [rdloading, setRDLoading] = React.useState(false);\n    const [loadCount, setLoadCount] = React.useState(0);\n    //const [success, setSuccess] = React.useState(false);\n    const [withPubKey, setWithPubKey] = React.useState(null);\n    const [pubkey, setPubkey] = React.useState(null);\n    const [newinputpkvalue, setNewInputPKValue] = React.useState(null);\n    const [solWebUrl, setSolWebUrl] = React.useState(null);\n    const { connection } = useConnection();\n    const { publicKey } = useWallet();\n    //const { handlekey } = useParams() as { \n    //    handlekey: string;\n    //}\n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"address\") || handlekey;\n    \n    const navigate = useNavigate();\n    //const location = useLocation();\n    \n    const fetchWalletCollection = async () => { \n        /*\n        TokenAccountsFilter\n        const response = await connection.getTokenAccountsByOwner(\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" }\n        );*/\n\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            pubkey,\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d4\",\n        };\n        \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n    \n        const json = await response.json();\n        try{\n            //const err = json?.result || true;\n            //if (!err){\n            //    return [];\n            //} else{\n                const resultValues = json.result.value\n                \n                let walletCollection = new Array();\n                let wallet = resultValues && resultValues?.map((collectionInfo: any) => {\n                    (+collectionInfo.account.data.parsed.info.tokenAmount.amount >= 1) &&\n                        (+collectionInfo.account.data.parsed.info.tokenAmount.decimals === 0) && \n                            walletCollection.push(collectionInfo);    \n                            return collectionInfo;\n                });\n                return walletCollection;\n            //}\n        } catch(e){console.log(e);}\n        return [];\n    };\n\n    const getWalletGallery = async () => {\n        if (!loading){\n            setLoading(true);\n            setLoadCount(loadCount+1);\n\n            let [collection] = await Promise.all([fetchWalletCollection()]);\n            setCollection({\n                collection\n            })\n            setLoading(false);\n        } else{\n            return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <CircularProgress color=\"inherit\" />\n                    </Grid>\n                </Grid>\n            )\n        }\n    }\n\n    const getReverseDomainLookup = async (url:string) => {\n        if (!rdloading){\n            setRDLoading(true);\n            \n            const SOL_TLD_AUTHORITY = new PublicKey(\"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\");\n            const ROOT_TLD_AUTHORITY = new PublicKey(\"ZoAhWEqTVqHVqupYmEanDobY7dee5YKbQox9BNASZzU\");\n            const PROGRAM_ID = new PublicKey(\"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\");\n            const centralState = new PublicKey(\"33m47vH6Eav6jr5Ry86XjhRft2jRBLDnDgPSHoquXi2Z\");\n            \n            const domainName = url.slice(0, url.indexOf('.'));\n            const hashedName = await getHashedName(domainName);\n            const domainKey = await getNameAccountKey(\n                hashedName,\n                undefined,\n                SOL_TLD_AUTHORITY\n            );\n            const registry = await NameRegistryState.retrieve(connection, new PublicKey(domainKey));\n            \n            if (!registry.data) {\n                throw new Error(\"Could not retrieve name data\");\n            }\n\n            setPubkey(registry.owner.toBase58());\n            setRDLoading(false);\n        }\n    }\n    const getTwitterLookup = async (url:string) => {\n        if ((!rdloading)&&(!pubkey)){\n            setRDLoading(true);\n            \n            //const domainName = url.slice(url.indexOf('@'), url.length);\n            const twitterHandle = \"\";\n            //console.log(\"checking: \"+twitterHandle);\n            const registry = await getTwitterRegistry(connection, twitterHandle);\n            \n            // verify that this is working and then push live...\n            //setPubkey(registry.owner.toBase58());\n            setRDLoading(false);\n        }\n    }\n\n    const CollectionProfile = (props: any) => {\n        return (\n                <Grid \n                    container \n                    direction=\"column\" \n                    spacing={2} \n                    alignItems=\"center\"\n                    rowSpacing={8}\n                >\n                    <Grid \n                        item xs={12}\n                    >\n                        <Box\n                            height=\"100%\"\n                            display=\"flex-grow\"\n                            justifyContent=\"center\"\n                        >\n                            <IdentityView gallery={gallery} collection={collection} pubkey={pubkey} setPubkey={setPubkey} />\n                        </Box>\n                    </Grid>\n                </Grid>\n        );\n    }\n\n    function handlePublicKeySubmit(event: any) {\n        event.preventDefault();\n\n        if ((newinputpkvalue && newinputpkvalue.length>0 && ValidateAddress(newinputpkvalue))||\n            ((newinputpkvalue.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (newinputpkvalue.slice(0,1) === '@'))){\n            navigate({\n                pathname: GRAPE_PROFILE+newinputpkvalue\n            },\n                { replace: true }\n            );\n            \n        } else{\n            setNewInputPKValue('');\n        }\n    }\n\n    React.useEffect(() => { \n        if (pubkey){\n            console.log(\"pubkey: \"+pubkey);\n            if (ValidateAddress(pubkey)){\n                console.log(\"getWalletGallery()\");\n                getWalletGallery();\n            }\n        }\n    }, [pubkey]);\n\n    React.useEffect(() => { \n        if (withPubKey){\n            if (ValidateAddress(withPubKey)){\n                setPubkey(withPubKey);\n                navigate({\n                    pathname: GRAPE_PROFILE+withPubKey\n                },\n                    { replace: true }\n                );\n            } else {\n                if ((withPubKey.toLocaleUpperCase().indexOf(\".SOL\") > -1) || (withPubKey.slice(0,1) === '@')){\n                    if (withPubKey.toLocaleUpperCase().endsWith(\".SOL\")){ // Solana Domain\n                        getReverseDomainLookup(withPubKey);\n                    } else if (withPubKey.toLocaleUpperCase().startsWith(\"@\")){ // Twitter Handle\n                        getTwitterLookup(withPubKey);\n                    }\n                } else{\n                    console.log(\"Nothing send reverting to default profile\");\n                    navigate({\n                        pathname: '/profile'\n                    },\n                        { replace: true }\n                    );\n                }\n            }\n        }\n    }, [withPubKey]);\n\n    React.useEffect(() => { \n        if (urlParams){\n            setWithPubKey(urlParams);\n        } else if (pubkey){\n        } else if (publicKey){\n            setWithPubKey(publicKey.toBase58());\n        }\n    }, [publicKey, urlParams]);\n\n    \n    if (!pubkey){ \n        // ...\n    } else {\n        if(((!gallery) && (!collection))||\n            (loading)){\n            return (\n            <React.Fragment>\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                        <Grid \n                            container \n                            direction=\"column\" \n                            spacing={2} \n                            alignItems=\"center\"\n                            rowSpacing={8}\n                        >\n                            <Grid \n                                item xs={12}\n                            >\n                                <Box\n                                    height=\"100%\"\n                                    display=\"flex\"\n                                    justifyContent=\"center\"\n                                >\n                                    <CircularProgress color=\"inherit\" />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                </Box>\n            </React.Fragment>\n            )\n        }\n    }\n    \n    return (\n        <React.Fragment>\n            <Box\n                sx={{\n                    mt: 2,\n                    \n                }}\n            >\n                <Box>  \n\n                        { pubkey && ValidateAddress(pubkey) ?\n                            <CollectionProfile />\n                        : \n                        <>\n                            <React.Fragment>\n                                <Box\n                                    sx={{ \n                                        p: 1, \n                                        mb: 3, \n                                        width: '100%',\n                                        background: '#13151C',\n                                        borderRadius: '24px'\n                                    }}\n                                > \n                                        <Grid \n                                            container \n                                            direction=\"column\" \n                                            spacing={2} \n                                            alignItems=\"center\"\n                                            rowSpacing={8}\n                                        >\n                                            \n                                            <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                            </Typography>\n                                        </Grid>\n                                        <Grid \n                                            item xs={12}\n                                            alignItems=\"center\"\n                                        > \n                                            <Typography\n                                                variant=\"h6\"\n                                                color=\"inherit\"\n                                                display='flex'\n                                                sx={{mb:3}}\n                                            >Social. Stateless. Marketplace.</Typography>\n\n                                        </Grid>\n                                            \n                                        <Grid>\n                                            <Paper\n                                                component=\"form\"\n                                                onSubmit={handlePublicKeySubmit}\n                                                sx={{ m:2, p: 1, display: 'flex', alignItems: 'center', borderRadius: '24px' }}\n                                            >\n                                                <InputBase\n                                                    fullWidth\n                                                    sx={{ ml: 1, flex: 1 }}\n                                                    placeholder=\"Enter a solana address\"\n                                                    inputProps={{ 'aria-label': 'solana address' }}\n                                                    value={newinputpkvalue}\n                                                    onChange={(e) => setNewInputPKValue(e.target.value)}\n                                                />\n                                                <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n                                                    <SearchIcon />\n                                                </IconButton>\n                                            </Paper>\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                            </React.Fragment>\n                        </>\n                        }\n\n                </Box>\n            </Box>\n        </React.Fragment>\n    );\n}\n","import { BinaryReader, BinaryWriter, deserializeUnchecked } from 'borsh';\nimport base58 from 'bs58';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\ntype StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: number;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: number;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\nexport class TokenStandard {\n  NonFungible: number;\n  FungibleAsset: number;\n  Fungible: number;\n  NonFungibleEdition: number;\n\n  constructor(args: {\n    NonFungible: number;\n    FungibleAsset: number;\n    Fungible: number;\n    NonFungibleEdition: number;\n  }) {\n    this.NonFungible = args.NonFungible;\n    this.FungibleAsset = args.FungibleAsset;\n    this.Fungible = args.Fungible;\n    this.NonFungibleEdition = args.NonFungibleEdition;\n  }\n}\nexport class Collection {\n  verified: boolean;\n  key: StringPublicKey;\n\n  constructor(args: {\n    verified: boolean;\n    key: StringPublicKey;\n  }) {\n    this.verified = args.verified;\n    this.key = args.key;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\n\nexport class UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n  }\n}\n\nexport class CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n  edition?: StringPublicKey | null;\n  // set lazy\n  masterEdition?: StringPublicKey;\n  tokenStandard?: TokenStandard;\n  collection?: Collection;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n    tokenStandard: TokenStandard | null;\n    collection: Collection | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce ?? null;\n    this.tokenStandard = args.tokenStandard ?? null;\n    this.collection = args.collection ?? null;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', Data],\n        ['isMutable', 'u8'], // bool\n      ],\n    },\n  ],\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', { kind: 'option', type: Data }],\n        ['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n        ['primarySaleHappened', { kind: 'option', type: 'u8' }],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', 'pubkeyAsString'],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Collection,\n    {\n      kind: 'struct',\n      fields: [\n        ['verified', 'u8'], // bool\n        ['key', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TokenStandard,\n    {\n      kind: 'struct',\n      fields: [\n        ['NonFungible', 'u8'],\n        ['FungibleAsset', 'u8'],\n        ['Fungible', 'u8'],\n        ['NonFungibleEdition', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', 'pubkeyAsString'],\n        ['mint', 'pubkeyAsString'],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'], // bool\n        ['isMutable', 'u8'], // bool\n        ['editionNonce', { kind: 'option', type: 'u8' }],\n        ['tokenStandard', { kind: 'option', type: 'u8' }],\n        ['collection', { kind: 'option', type: Collection }],\n      ],\n    },\n  ],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer,\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n  return metadata;\n};\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import { PublicKey } from '@solana/web3.js';\nimport 'dotenv/config.js';\n\nexport const CANDY_MACHINE = 'candy_machine';\nexport const AUCTION_HOUSE = 'auction_house';\nexport const TOKEN_ENTANGLER = 'token_entangler';\nexport const ESCROW = 'escrow';\nexport const A = 'A';\nexport const B = 'B';\nexport const FEE_PAYER = 'fee_payer';\nexport const TREASURY = 'treasury';\nexport const LAMPORT = 1000000000;\nexport const MAX_NAME_LENGTH = 32;\nexport const MAX_URI_LENGTH = 200;\nexport const MAX_SYMBOL_LENGTH = 10;\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\n\nexport const ARWEAVE_PAYMENT_WALLET = new PublicKey(\n  '6FKvsq4ydWFci6nGq9ckbjYMtnmaqAoatz5c9XWjiDuS',\n);\nexport const METAPLEX_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\nexport const CANDY_MACHINE_PROGRAM_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\nexport const FAIR_LAUNCH_PROGRAM_ID = new PublicKey(\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\n);\nexport const AUCTION_HOUSE_PROGRAM_ID = new PublicKey(\n  'hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk',\n);\nexport const TOKEN_ENTANGLEMENT_PROGRAM_ID = new PublicKey(\n  'qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd',\n);\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\nexport const GUMDROP_DISTRIBUTOR_ID = new PublicKey(\n  'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'\n);\nexport const GUMDROP_TEMPORAL_SIGNER = new PublicKey(\n  'MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV'\n);\n\nexport const CONFIG_ARRAY_START =\n  32 + // authority\n  4 +\n  6 + // uuid + u32 len\n  4 +\n  10 + // u32 len + symbol\n  2 + // seller fee basis points\n  1 +\n  4 +\n  5 * 34 + // optional + u32 len + actual vec\n  8 + //max supply\n  1 + //is mutable\n  1 + // retain authority\n  4; // max number of lines;\nexport const CONFIG_LINE_SIZE = 4 + 32 + 4 + 200;\n\nexport const CACHE_PATH = './.cache';\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const EXTENSION_PNG = '.png';\nexport const EXTENSION_JSON = '.json';\n\nexport const ENV_AH = \"mainnet-beta\";\n\nexport const AUCTION_HOUSE_ADDRESS = process.env.REACT_APP_API_AUCTION_HOUSE_ADDRESS || \"4w2BVBfV86NBm3ytL1AuHxToBV7Kx5YahdMRgyyYFoRj\";","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { getPriceWithMantissa } from './helpers/various';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\nexport async function cancelWithdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n    //START CANCEL\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    \n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    \n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    \n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    \n    const instructions = [instruction];\n    //END CANCEL\n\n    //START WITHDRAW\n    let withdrawAmmount = 0;\n    if (escrowSolAmount < offerAmount){\n      withdrawAmmount = escrowSolAmount;\n    } else {\n      withdrawAmmount = offerAmount;\n    }\n    const amountAdjusted = await getPriceWithMantissa(\n      withdrawAmmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerWalletKey,\n      anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    //const signers = isNative ? [] : [transferAuthority];\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction2 = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    instructions.push(instruction2);\n\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","\nexport const FREE_RPC_ENDPOINT = process.env.REACT_APP_API_FREE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\nexport const GRAPE_RPC_ENDPOINT = process.env.REACT_APP_API_GRAPE_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com';\n\n//export const GRAPE_PREVIEW = '/preview/';\n//export const GRAPE_PROFILE = '/profile/';\n//export const GRAPE_IDENTITY = '/identity/';\n\nexport const GRAPE_PREVIEW = '/preview?pkey=';\nexport const GRAPE_PROFILE = '/profile?pkey=';\nexport const GRAPE_IDENTITY = '/identity?pkey=';\n\nexport const GRAPE_RPC_REFRESH = 25000;\nexport const GRAPE_TREASURY = 'GrapevviL94JZRiZwn2LjpWtmDacXU8QhAJvzpUMMFdL';\n\nexport const TOKEN_VERIFICATION_ADDRESS = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\nexport const TOKEN_VERIFICATION_NAME = 'Grape';\nexport const TOKEN_VERIFICATION_AMOUNT = 1000;\nexport const TOKEN_REALM_ID = 'By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip';\nexport const TOKEN_REALM_PROGRAM_ID = 'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw';\n\nexport const FEATURED_DAO_ARRAY = [{\n    address:'66pJhhESDjdeBBDdkKmxYYd7q6GUggYPWjxpMKNX39KV',\n    daourl:'https://realms.today/dao/Ukraine',\n    img:'/solana4ukraine.png',\n    title:'Solana for Ukraine',\n    text:'NFT Artists come together in the DAO made exlusively to help out Ukraine, all proceeds of these NFT\\'s will be donated to help the Ukrainian people'\n}]\n\nexport const OTHER_MARKETPLACES = new Array(\n    {\n        name: 'Magic Eden',\n        logo: 'https://magiceden.io/static/media/logo.ca418d75.svg',\n        //logo: 'https://magiceden.io/img/logo.png',\n        address: 'GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp',\n        previewUrl: 'https://www.magiceden.io/item-details/',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'SolanArt',\n        logo: 'https://solanart.io/static/media/logo.0054f7e7.png',\n        address: '3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK',\n        previewUrl: 'https://solanart.io/search/?token=',\n        url: 'https://solanart.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/favicon-32x32.png',\n        address: 'F4ghBzHFNgJxV4wEQDchU5i7n4XWWMBSaq7CuswGiVsr',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Digital Eyes',\n        logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/digitaleyes.svg?ik-sdk-version=react-1.0.11',\n        //logo: 'https://ik.imagekit.io/srjnqnjbpn9/logo/favicon-32x32.png',\n        address: 'BweTPKW9QsWZTJnfbLz88ekKaWw7HrBJsStrduHryPgk',\n        previewUrl: '',\n        url: 'https://www.magiceden.io'\n    },{\n        name: 'Alph Art',\n        //logo: 'https://alpha.art/icon-root.svg',\n        logo: 'https://alpha.art/logo_192.png',\n        address: '4pUQS4Jo2dsfWzt3VgHXy3H6RYnEDd11oWPiaM2rdAPw',\n        previewUrl: 'https://alpha.art/t/',\n        url: 'https://www.alpha.art'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: '73tF8uN3BwVzUzwETv59WNAafuEBct2zTgYbYXLggQiU',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HHvnfyY7vNWhjeHqCVyMPr4UjDp3ptqu3QbuFoCkrm8r',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'FTX',\n        logo: 'https://ftx.us/static/media/ftxus_logo_white.b384ac52.svg',\n        address: 'HznNaC2cz1iXMtHMG3HAgMH2xkrt2iTXfUKz6wwAAVPB',\n        previewUrl: '',\n        url: 'https://ftx.us/nfts'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'G6xptnrkj4bxg9H9ZyPzmAnNsGghSxZ7oBCL1KNKJUza',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: '7Ppgch9d4XRAygVNJP4bDkc7V6htYXGfghX4zzG9r4cH',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'EQEpTS8SiVPUxyqRgT2Jdx9dHEwbpcbSZ2sotiAUZ7i7',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    },{\n        name: 'SMB Market',\n        //logo: 'https://market.solanamonkey.business/logo/smb-market.svg',\n        logo: 'https://market.solanamonkey.business/logo/smb.png',\n        address: 'CPo76cw52gKMTyvCS9GpnnZfvmkQQxovLwQFxonZrCRU',\n        previewUrl: 'https://market.solanamonkey.business/item/',\n        url: 'https://market.solanamonkey.business/'\n    }\n);","import {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  AccountInfo,\n} from '@solana/web3.js';\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  FAIR_LAUNCH_PROGRAM_ID,\n  AUCTION_HOUSE_PROGRAM_ID,\n  AUCTION_HOUSE,\n  FEE_PAYER,\n  TREASURY,\n  WRAPPED_SOL_MINT,\n  TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  TOKEN_ENTANGLER,\n  ESCROW,\n  B,\n  A,\n} from './constants';\nimport * as anchor from '@project-serum/anchor';\n//import { Wallet } from '@solana/wallet-adapter-react';\nimport fs from 'fs';\n//import { createConfigAccount } from './instructions';\nimport { web3 } from '@project-serum/anchor';\nimport log from 'loglevel';\nimport { AccountLayout, u64 } from '@solana/spl-token';\n\nexport type AccountAndPubkey = {\n  pubkey: string;\n  account: AccountInfo<Buffer>;\n};\n\nexport type StringPublicKey = string;\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: anchor.BN;\n    symbol: string;\n    sellerFeeBasisPoints: number;\n    isMutable: boolean;\n    maxSupply: anchor.BN;\n    retainAuthority: boolean;\n    creators: {\n      address: PublicKey;\n      verified: boolean;\n      share: number;\n    }[];\n  },\n) {\n  const configAccount = Keypair.generate();\n  const uuid = uuidFromConfigPubkey(configAccount.publicKey);\n\n  if (!configData.creators || configData.creators.length === 0) {\n    throw new Error(`Invalid config, there must be at least one creator.`);\n  }\n\n  const totalShare = (configData.creators || []).reduce(\n    (acc, curr) => acc + curr.share,\n    0,\n  );\n\n  /*if (totalShare !== 100) {\n    throw new Error(`Invalid config, creators shares must add up to 100`);\n  }\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  };*/\n};\n\nexport function uuidFromConfigPubkey(configAccount: PublicKey) {\n  return configAccount.toBase58().slice(0, 6);\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunch = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), seq.toBuffer('le', 8)],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationMint = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getParticipationToken = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      authority.toBuffer(),\n      Buffer.from('mint'),\n      Buffer.from(uuid),\n      Buffer.from('participation'),\n      Buffer.from('account'),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getTreasury = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('treasury')],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkPda = async (\n  mint: anchor.web3.PublicKey,\n  edition: number,\n): Promise<anchor.web3.PublicKey> => {\n  const editionNumber = Math.floor(edition / 248);\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(editionNumber.toString()),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getAuctionHouse = async (\n  creator: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), creator.toBuffer(), treasuryMint.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseProgramAsSigner = async (): Promise<\n  [PublicKey, number]\n> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), Buffer.from('signer')],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseFeeAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(FEE_PAYER),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTreasuryAcct = async (\n  auctionHouse: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      auctionHouse.toBuffer(),\n      Buffer.from(TREASURY),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseBuyerEscrow = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  //console.log(\"get escrow inside\");\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getAuctionHouseTradeState = async (\n  auctionHouse: anchor.web3.PublicKey,\n  wallet: anchor.web3.PublicKey,\n  tokenAccount: anchor.web3.PublicKey,\n  treasuryMint: anchor.web3.PublicKey,\n  tokenMint: anchor.web3.PublicKey,\n  tokenSize: anchor.BN,\n  buyPrice: anchor.BN,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(AUCTION_HOUSE),\n      wallet.toBuffer(),\n      auctionHouse.toBuffer(),\n      tokenAccount.toBuffer(),\n      treasuryMint.toBuffer(),\n      tokenMint.toBuffer(),\n      //nmaz needed to change otherwise would crash (browserify compatibility)\n      //buyPrice.toBuffer('le', 8),\n      buyPrice.toArrayLike(Buffer,'le',8),\n      //tokenSize.toBuffer('le', 8),\n      tokenSize.toArrayLike(Buffer,'le',8),\n    ],\n    AUCTION_HOUSE_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglement = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(TOKEN_ENTANGLER), mintA.toBuffer(), mintB.toBuffer()],\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n  );\n};\n\nexport const getTokenEntanglementEscrows = async (\n  mintA: anchor.web3.PublicKey,\n  mintB: anchor.web3.PublicKey,\n): Promise<[PublicKey, number, PublicKey, number]> => {\n  return [\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(A),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n    ...(await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(TOKEN_ENTANGLER),\n        mintA.toBuffer(),\n        mintB.toBuffer(),\n        Buffer.from(ESCROW),\n        Buffer.from(B),\n      ],\n      TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    )),\n  ];\n};\n\n\n\nexport function loadWalletKey(keypair: any): Keypair {\n  if (!keypair || keypair == '') {\n    throw new Error('Keypair is required!');\n  }\n  const loaded = Keypair.fromSecretKey(\n    //new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n    //new Uint8Array(JSON.parse((keypair))),\n    new Uint8Array(keypair),\n  );\n  log.info(`wallet public key: ${loaded.publicKey}`);\n  //console.log(`wallet public key: ${loaded.publicKey}`);\n  return loaded;\n}\n\n/*\nexport async function loadCandyProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider);\n  log.debug('program id from anchor', program.programId.toBase58());\n  return program;\n}*/\n\n/*\nexport async function loadFairLaunchProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, FAIR_LAUNCH_PROGRAM_ID, provider);\n}\n*/\nexport async function loadAuctionHouseProgram(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  \n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(AUCTION_HOUSE_PROGRAM_ID, provider);\n\n  return new anchor.Program(idl, AUCTION_HOUSE_PROGRAM_ID, provider);\n}\n\n/*\nexport async function loadTokenEntanglementProgream(\n  walletKeyPair: Keypair,\n  env: string,\n  customRpcUrl?: string,\n) {\n  if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n\n  // @ts-ignore\n  const solConnection = new anchor.web3.Connection(\n    //@ts-ignore\n    customRpcUrl || web3.clusterApiUrl(env),\n  );\n  const walletWrapper = new anchor.Wallet(walletKeyPair);\n  const provider = new anchor.Provider(solConnection, walletWrapper, {\n    preflightCommitment: 'recent',\n  });\n  const idl = await anchor.Program.fetchIdl(\n    TOKEN_ENTANGLEMENT_PROGRAM_ID,\n    provider,\n  );\n\n  return new anchor.Program(idl, TOKEN_ENTANGLEMENT_PROGRAM_ID, provider);\n}\n*/\n\nexport async function getTokenAmount(\n  anchorProgram: anchor.Program,\n  account: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey,\n): Promise<number> {\n  let amount = 0;\n  if (!mint.equals(WRAPPED_SOL_MINT)) {\n    try {\n      const token =\n        await anchorProgram.provider.connection.getTokenAccountBalance(account);\n      amount = token.value.uiAmount * Math.pow(10, token.value.decimals);\n    } catch (e) {\n      log.error(e);\n      log.info(\n        'Account ',\n        account.toBase58(),\n        'didnt return value. Assuming 0 tokens.',\n      );\n    }\n  } else {\n    amount = await anchorProgram.provider.connection.getBalance(account);\n  }\n  return amount;\n}\n\nexport async function getProgramAccounts(\n  connection: anchor.web3.Connection,\n  programId: string,\n  configOrCommitment?: any,\n): Promise<AccountAndPubkey[]> {\n  const extra: any = {};\n  let commitment;\n  //let encoding;\n\n  if (configOrCommitment) {\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else {\n      commitment = configOrCommitment.commitment;\n      //encoding = configOrCommitment.encoding;\n\n      if (configOrCommitment.dataSlice) {\n        extra.dataSlice = configOrCommitment.dataSlice;\n      }\n\n      if (configOrCommitment.filters) {\n        extra.filters = configOrCommitment.filters;\n      }\n    }\n  }\n\n  const args = connection._buildArgs([programId], commitment, 'base64', extra);\n  const unsafeRes = await (connection as any)._rpcRequest(\n    'getProgramAccounts',\n    args,\n  );\n\n  return unsafeResAccounts(unsafeRes.result);\n}\n\n//function unsafeAccount(account: anchor.web3.AccountInfo<string[]>) {\nfunction unsafeAccount(account: anchor.web3.AccountInfo<[string, string]>) {\n    return {\n    // TODO: possible delay parsing could be added here\n    data: Buffer.from(account.data[0], 'base64'),\n    executable: account.executable,\n    lamports: account.lamports,\n    // TODO: maybe we can do it in lazy way? or just use string\n    owner: account.owner,\n  } as anchor.web3.AccountInfo<Buffer>;\n}\n\nfunction unsafeResAccounts(\n  data: Array<{\n    //account: anchor.web3.AccountInfo<string[]>;\n    account: anchor.web3.AccountInfo<[string, string]>;\n    pubkey: string;\n  }>,\n) {\n  return data.map(item => ({\n    account: unsafeAccount(item.account),\n    pubkey: item.pubkey,\n  }));\n}\n","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { styled } from '@mui/material/styles';\nimport { useSnackbar } from 'notistack';\n\nimport { \n    Dialog,\n    List,\n    ListItem,\n    ListItemButton,\n    ListItemText,\n    ListItemAvatar,\n    DialogTitle,\n    DialogContent,\n    Avatar,\n    Button,\n    Tooltip, \n    CardActionArea \n} from '@mui/material';\n\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport IosShareIcon from '@mui/icons-material/IosShare';\n\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    WhatsappShareButton,\n  } from \"react-share\";\n\n  import {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n  } from \"react-share\";\n\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\nexport default function ShareSocialURL(props:any){\n    const shareUrl = props.url;\n    const title = props.title;\n    const fontSize = props.fontSize || '20px';\n\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopyClick = () => {\n        enqueueSnackbar(`Copied!`,{ variant: 'success' });\n    };\n\n    const handleNavigatorShare = () => {\n        navigator.share({\n            title: title,\n            text: title,\n            url: shareUrl\n        });\n    }\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (value) => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Tooltip title={`Share`}>\n                <Button size=\"small\" variant=\"text\" onClick={handleClickOpen}\n                    sx={{borderRadius:'24px', color:'white'}}\n                >\n                    <IosShareIcon sx={{fontSize:{fontSize}}} />\n                </Button> \n            </Tooltip>\n            <BootstrapDialog \n                maxWidth={\"md\"}\n                open={open} onClose={handleClose}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Share\n                </DialogTitle>\n                <DialogContent>\n                    <List sx={{ pt: 0 }}>\n                        <ListItem>\n                            <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                <CopyToClipboard \n                                    text={shareUrl} \n                                    onCopy={handleCopyClick}\n                                    >\n                                    <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                        \n                                            <ListItemAvatar>\n                                                <Avatar sx={{ width: 32, height: 32 }}><ContentCopyIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={'Copy'} />\n                                        \n                                    </ListItemButton>\n                                </CopyToClipboard> \n                            </Button>\n                        </ListItem>\n                        {(navigator.share !== undefined) &&\n                            <ListItem>\n                                <Button sx={{borderRadius:'24px',p:0,m:0,background:'none',textTransform:'none'}}>\n                                    <CopyToClipboard \n                                        text={shareUrl} \n                                        onCopy={handleNavigatorShare}\n                                        >\n                                        <ListItemButton sx={{borderRadius:'24px', color:'white'}}>\n                                            \n                                                <ListItemAvatar>\n                                                    <Avatar sx={{ width: 32, height: 32 }}><IosShareIcon fontSize=\"small\" sx={{color:'white'}} /></Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={'Native Share'} />\n                                            \n                                        </ListItemButton>\n                                    </CopyToClipboard> \n                                </Button>\n                            </ListItem>\n                        }\n                        <ListItem>  \n                            <EmailShareButton\n                                    url={''}\n                                    subject={title}\n                                    body={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><EmailIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Email'} />\n                                    \n                                </ListItemButton>\n                            </EmailShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TwitterShareButton\n                                    url={shareUrl}\n                                    title={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TwitterIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Twitter'} />\n                                    \n                                </ListItemButton>\n                            </TwitterShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <TelegramShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><TelegramIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Telegram'} />\n                                    \n                                </ListItemButton>\n                            </TelegramShareButton>\n                        </ListItem>\n                        <ListItem>\n                            <FacebookShareButton\n                                    url={shareUrl}\n                                    quote={title}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><FacebookIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Facebook'} />\n                                    \n                                </ListItemButton>\n                            </FacebookShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <ViberShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><ViberIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'Viber'} />\n                                    \n                                </ListItemButton>\n                            </ViberShareButton>\n                        </ListItem>\n\n                        <ListItem>\n                            <WhatsappShareButton\n                                    title={title}\n                                    url={shareUrl}\n                                >\n                                <ListItemButton sx={{borderRadius:'24px'}}\n                                >   \n                                    <ListItemAvatar>\n                                        <Avatar sx={{ width: 32, height: 32 }}><WhatsappIcon size={32} round /></Avatar>\n                                    </ListItemAvatar>\n                                    \n                                <ListItemText primary={'WhatsApp'} />\n                                    \n                                </ListItemButton>\n                            </WhatsappShareButton>\n                        </ListItem>\n\n                    </List>\n                </DialogContent>  \n            </BootstrapDialog>\n        </>\n        \n    ); \n}","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport function hashCode(s: string) {\n  let h = 0;\n  for (let i = 0; i < s.length; i++)\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n\n  return h.toString();\n}\n\nexport enum CachePrefix {\n  Message = \"message_\",\n  DecryptedMessage = \"decrypted_message_\",\n  Media = \"media_\",\n  DecryptedMedia = \"decrypted_media_\",\n  MessageCount = \"message_count_\",\n  RetrievedThread = \"retrieved_thread_\",\n  LastMsgCount = \"last_msg_count_\",\n  ProfilePicture = \"profile_pic_\",\n  Archive = \"archive_\",\n  CentralState = \"central_state_\",\n  Sha256 = \"sha256_\",\n  ProgramAddress = \"program_address_\",\n  IpfsHash = \"ipfs_hash_\",\n}\n\nexport class asyncCache {\n  static async get<T>(key: string): Promise<T | null> {\n    const cached = await AsyncStorage.getItem(hashCode(key));\n    if (!cached) {\n      return null;\n    }\n    return JSON.parse(cached);\n  }\n  static async set<T>(key: string, value: T) {\n    const stringified = JSON.stringify(value);\n    await AsyncStorage.setItem(hashCode(key), stringified);\n  }\n\n  static async sha256(data: ethers.utils.BytesLike): Promise<string> {\n    const cached = await asyncCache.get<string>(\n      CachePrefix.Sha256 + data.toString()\n    );\n    if (cached) {\n      return cached;\n    }\n    const result: string = await new Promise((resolve) =>\n      resolve(ethers.utils.sha256(data).slice(2))\n    );\n    await asyncCache.set(CachePrefix.Sha256 + data.toString(), result);\n    return result;\n  }\n}\n\nexport function useGetAsyncCache<T>(key: string, refresh?: boolean): T | null {\n  const [cached, setCached] = useState<T | null>(null);\n\n  const fn = useCallback(async () => {\n    return await asyncCache.get<T>(key);\n  }, [key]);\n\n  useEffect(() => {\n    let mounted = true;\n    fn().then((c) => {\n      if (!mounted) return null;\n      setCached(c);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [refresh, key]);\n  return cached;\n}","/** @solana/web3.js is not compatible with react-native */\nimport nacl from \"tweetnacl\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Buffer } from \"buffer\";\nimport BN from \"bn.js\";\nimport { asyncCache } from \"../cache\";\nimport { ethers } from \"ethers\";\n\nexport const MAX_SEED_LENGTH = 32;\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function createProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<PublicKey> {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([\n    buffer,\n    programId.toBuffer(),\n    Buffer.from(\"ProgramDerivedAddress\"),\n  ]);\n  const hash: string = await new Promise((resolve) =>\n    resolve(ethers.utils.sha256(new Uint8Array(buffer)).slice(2))\n  );\n  const publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n  if (is_on_curve(publicKeyBytes)) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n  const key = new PublicKey(publicKeyBytes);\n  return key;\n}\n\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): Promise<[PublicKey, number]> {\n  const cached = await asyncCache.get<{ address: string; nonce: number }>(\n    seeds.toString()\n  );\n  if (cached) {\n    return [new PublicKey(cached.address), cached.nonce];\n  }\n  let nonce = 255;\n  let address;\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = await createProgramAddress(seedsWithNonce, programId);\n      await asyncCache.set(seeds.toString(), {\n        address: address.toBase58(),\n        nonce: nonce,\n      });\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\n/* eslint-disable */\n//  @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/* eslint-enable */","import { Buffer } from \"buffer\";\nimport {\n  HASH_PREFIX,\n  NAME_PROGRAM_ID,\n  TWITTER_ROOT_PARENT_REGISTRY_KEY,\n  TWITTER_VERIFICATION_AUTHORITY,\n  ReverseTwitterRegistryState,\n} from \"@bonfida/spl-name-service\";\nimport { ethers } from \"ethers\";\nimport { PublicKey, Connection } from \"@solana/web3.js\";\nimport { findProgramAddress } from \"./program-address\";\nimport { asyncCache, CachePrefix } from \"../cache\";\n\nexport async function getHashedName(name: string) {\n  const input = HASH_PREFIX + name;\n  const cached = await asyncCache.get<string>(CachePrefix + name);\n  if (!cached) {\n    const buffer = ethers.utils.sha256(Buffer.from(input)).slice(2);\n    await asyncCache.set(CachePrefix + name, buffer);\n    return Buffer.from(buffer, \"hex\");\n  }\n  return Buffer.from(cached, \"hex\");\n}\n\nexport async function getNameAccountKey(\n  hashed_name: Buffer,\n  nameClass?: PublicKey,\n  nameParent?: PublicKey\n): Promise<PublicKey> {\n  const seeds = [hashed_name];\n  if (nameClass) {\n    seeds.push(nameClass.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  if (nameParent) {\n    seeds.push(nameParent.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n  const [nameAccountKey] = await findProgramAddress(seeds, NAME_PROGRAM_ID);\n  return nameAccountKey;\n}\nexport async function getHandleAndRegistryKey(\n  connection: Connection,\n  verifiedPubkey: PublicKey\n): Promise<[string, PublicKey]> {\n  const hashedVerifiedPubkey = await getHashedName(verifiedPubkey.toString());\n  const reverseRegistryKey = await getNameAccountKey(\n    hashedVerifiedPubkey,\n    TWITTER_VERIFICATION_AUTHORITY,\n    TWITTER_ROOT_PARENT_REGISTRY_KEY\n  );\n\n  const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(\n    connection,\n    reverseRegistryKey\n  );\n  return [\n    reverseRegistryState.twitterHandle,\n    new PublicKey(reverseRegistryState.twitterRegistryKey),\n  ];\n}\n\nexport async function getDNSRecordAddress(\n  nameAccount: PublicKey,\n  type: string\n) {\n  const hashedName = await getHashedName(\"\\0\".concat(type));\n  const recordAccount = await getNameAccountKey(\n    hashedName,\n    undefined,\n    nameAccount\n  );\n  return recordAccount;\n}","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { NAME_PROGRAM_ID, NameRegistryState } from \"@bonfida/spl-name-service\";\nimport { getHashedName, getNameAccountKey } from \"./name-service\";\nimport BN from \"bn.js\";\n\nexport const PROGRAM_ID = new PublicKey(\n  \"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\"\n);\n\nexport const centralState = new PublicKey(\n  \"33m47vH6Eav6jr5Ry86XjhRft2jRBLDnDgPSHoquXi2Z\"\n);\n\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey\n): Promise<PublicKey[]> {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n    filters: filters,\n  });\n  return accounts.map((a) => a.pubkey);\n}\n\nexport async function performReverseLookup(\n  connection: Connection,\n  nameAccount: PublicKey\n): Promise<string> {\n  const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n  const reverseLookupAccount = await getNameAccountKey(\n    hashedReverseLookup,\n    centralState\n  );\n\n  const name = await NameRegistryState.retrieve(\n    connection,\n    reverseLookupAccount\n  );\n  if (!name.data) {\n    throw new Error(\"Could not retrieve name data\");\n  }\n  const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n  return name.data.slice(4, 4 + nameLength).toString();\n}\n\nexport async function performReverseLookupBatch(\n  connection: Connection,\n  nameAccounts: PublicKey[]\n): Promise<(string | undefined)[]> {\n  const [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID\n  );\n  const reverseLookupAccounts: PublicKey[] = [];\n  for (const nameAccount of nameAccounts) {\n    const hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n    const reverseLookupAccount = await getNameAccountKey(\n      hashedReverseLookup,\n      centralState\n    );\n    reverseLookupAccounts.push(reverseLookupAccount);\n  }\n\n  const names = await NameRegistryState.retrieveBatch(\n    connection,\n    reverseLookupAccounts\n  );\n\n  return names.map((name) => {\n    if (name === undefined || name.data === undefined) {\n      return undefined;\n    }\n    const nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n    return name.data.slice(4, 4 + nameLength).toString();\n  });\n}","import { PublicKey, Connection } from \"@solana/web3.js\";\n//import { useAsync } from \"./utils.native\";\nimport { asyncCache } from \"./cache\";\nimport {\n  findOwnedNameAccountsForUser,\n  performReverseLookupBatch,\n} from \"./web3/name-auctioning\";\nimport { getHandleAndRegistryKey } from \"./web3/name-service\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n//import { Profile } from \"./web3/jabber\";\n\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport const findDisplayName = async (\n  connection: Connection,\n  receiver: string\n) => {\n  let allNames: string[] = [];\n  let favoriteDisplayName: string | undefined = undefined;\n\n  try {\n      /*\n    try {\n      const profile = await Profile.retrieve(\n        connection,\n        new PublicKey(receiver)\n      );\n      favoriteDisplayName = profile.name.split(\":fdn:\")[1];\n      if (favoriteDisplayName) {\n        allNames.push(favoriteDisplayName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    const knownReceiver = await asyncCache.get<string[]>(receiver);\n    if (knownReceiver && knownReceiver?.length > 0) {\n      if (favoriteDisplayName && favoriteDisplayName !== knownReceiver[0]) {\n        await asyncCache.set(receiver, [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ]);\n        return [\n          favoriteDisplayName,\n          ...knownReceiver?.filter((e) => e !== favoriteDisplayName),\n        ];\n      }\n      return knownReceiver;\n    }\n    */\n\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      new PublicKey(receiver)\n    );\n    domainsAddresses.sort((a, b) => a.toBase58().localeCompare(b.toBase58()));\n    if (domainsAddresses.length === 0) {\n      return [receiver];\n    }\n\n    const reverse = (\n      await performReverseLookupBatch(connection, domainsAddresses)\n    )\n      .filter((e) => !!e)\n      .map((e) => e + \".sol\") as string[];\n\n    allNames = [...allNames, ...reverse];\n\n    if (allNames.length > 0) {\n      await asyncCache.set(receiver, allNames);\n      return allNames;\n    }\n\n    try {\n      const [display] = await getHandleAndRegistryKey(\n        connection,\n        new PublicKey(receiver)\n      );\n      return [\"@\" + display];\n    } catch (err) {\n      console.log(err);\n    }\n\n    return [receiver];\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const useDisplayName = (contact: string | undefined) => {\n    const { connection } = useConnection();\n\n  const fn = async (): Promise<string[] | undefined> => {\n    if (!contact) return;\n    return await findDisplayName(connection, contact);\n  };\n\n  return false;\n  //return useAsync(fn, false);\n};\n\nexport const ownerHasDomain = async (\n  connection: Connection,\n  owner: PublicKey\n) => {\n  try {\n    const domainsAddresses = await findOwnedNameAccountsForUser(\n      connection,\n      owner\n    );\n    return domainsAddresses.length != 0;\n  } catch (err) {\n    console.log(err);\n  }\n  try {\n    await getHandleAndRegistryKey(connection, owner);\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return false;\n};\n\nexport const useUserHasDomainOrTwitter = () => {\n  const { publicKey } = useWallet();\n  const { connection } = useConnection();\n\n  const fn = async () => {\n    let hasDomain = false;\n    let hasTwitter = false;\n    if (!publicKey) return;\n    try {\n      const domainsAddresses = await findOwnedNameAccountsForUser(\n        connection,\n        publicKey\n      );\n      hasDomain = domainsAddresses.length !== 0;\n    } catch (err) {\n      console.log(err);\n    }\n\n    try {\n      await getHandleAndRegistryKey(connection, publicKey);\n      hasTwitter = true;\n    } catch (err) {\n      console.log(err);\n    }\n\n    return { hasTwitter: hasTwitter, hasDomain: hasDomain };\n  };\n  return false;\n  //return useAsync(fn, false);\n};\n","import { BasicUserInfo } from './types';\n\nexport const formatAddress = (address: string) => {\n  const len = address.length;\n  return address.substr(0, 5) + '...' + address.substring(len - 4, len);\n};\n\nexport const isValidAddr = (address: string) => {\n  const re = /^0x[a-fA-F0-9]{40}$/;\n  return address.match(re);\n};\n\nexport const removeDuplicate = (arr: BasicUserInfo[]) => {\n  return arr.filter(\n    (user, index, self) =>\n      index === self.findIndex((t) => t.address === user.address)\n  );\n};\n","import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function GrapeIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n           <path d=\"M9.01656587,22 C7.35962231,22 6.01590977,20.6620342 6.01414706,19.0104197 C6.014381,18.6854574 6.0683383,18.3627546 6.17385019,18.0552822 C4.65355783,17.7078956 3.66088018,16.2486823 3.89967765,14.712301 C3.92491623,14.5431035 3.96663621,14.3767602 4.02424609,14.2156295 C3.4237021,14.0728659 2.88175433,13.7494098 2.47193169,13.2891462 C1.72849601,12.4624125 1.51596312,11.2886187 1.92255293,10.2549928 C0.574618257,9.74031484 -0.212717429,8.33995457 0.0504549418,6.92526737 C0.313627312,5.51058017 1.55231363,4.48469804 2.99575795,4.48596237 C3.70977051,4.48440525 4.40081639,4.73735035 4.94413611,5.19913169 C5.03896245,5.11514097 5.13926233,5.03749899 5.24437799,4.96671491 L5.36894643,4.89985528 L5.42643955,4.86801737 C5.5328774,4.80668234 5.64271625,4.75140804 5.755428,4.7024602 L5.89916081,4.65470333 L5.96304206,4.63560058 C6.07846122,4.5978584 6.19572768,4.56597948 6.31438894,4.54008683 L6.45173363,4.54008683 L6.51242082,4.54008683 C6.63409636,4.52251081 6.75680077,4.51293873 6.87973802,4.51143271 C6.93403708,4.51143271 6.97555989,4.51143271 7.02027677,4.51143271 L7.08096396,4.51143271 C7.2084816,4.51824383 7.33543563,4.53313157 7.4610574,4.55600579 C7.50980885,4.56536124 7.55783865,4.578128 7.60479022,4.59421129 L7.67186553,4.61331404 C7.78701504,4.64184071 7.90012381,4.67800422 8.01043616,4.72156295 C8.08070554,4.75021708 8.14458679,4.78523878 8.2116621,4.82026049 L8.27554336,4.8552822 L8.34900679,4.8934877 C8.40018906,4.9144998 8.44936418,4.94007388 8.49593367,4.9698987 C8.57259117,5.02402315 8.62369617,5.06541245 8.67160711,5.10361795 C8.35220086,3.6040521 7.7517171,1.62054993 6.04928175,1.07930535 C5.69874518,0.95068507 5.33014791,0.877632393 4.95691236,0.862807525 C4.0913214,0.862807525 3.21614826,1.35629522 1.73090917,2.67756874 C1.60080541,2.7887062 1.4167449,2.81179054 1.26307634,2.73624297 C1.10940777,2.66069541 1.01574927,2.501077 1.02502135,2.33053546 C1.0291406,2.21770958 1.08003178,2.11164293 1.1655601,2.03762663 C2.81050232,0.569898698 3.87412515,0 4.95371829,0 C5.42529916,0.0101105104 5.89178986,0.0994489882 6.33355332,0.264254703 C7.32371271,0.601736614 7.97849554,1.12387844 8.65244274,2.34327062 C9.08779739,2.41141279 9.52771094,2.44653527 9.96839651,2.44833575 C13.057055,2.44833575 13.9513925,0.538060781 13.9865272,0.461649783 C14.0566749,0.308273678 14.2102907,0.209927141 14.3793969,0.210130246 C14.439031,0.209865925 14.4979671,0.222920722 14.5518763,0.248335745 C14.6560393,0.293055164 14.7379381,0.377435376 14.7793339,0.48268504 C14.8207296,0.587934704 14.818185,0.705314118 14.7722666,0.808683068 C14.7275497,0.910564399 13.6287922,3.30795948 9.98117276,3.30795948 C9.66619319,3.30562385 9.35160204,3.2854272 9.03892431,3.24746744 C9.21808608,3.74708278 9.36530791,4.25751208 9.47970494,4.77568741 C9.88059439,4.59234413 10.3162601,4.49680589 10.75733,4.49551375 C11.3243112,4.49761987 11.8787106,4.6622996 12.3543612,4.9698987 C12.4592934,5.03719347 12.5586292,5.11278662 12.6514091,5.1959479 C13.7179784,4.28262725 15.2782426,4.23152348 16.4026614,5.0730821 C17.5270802,5.91464071 17.9130852,7.42240785 17.3307107,8.69811867 C17.1172335,9.18183803 16.7775078,9.59963239 16.3469394,9.90795948 C16.6475777,10.4422013 16.7747835,11.0561645 16.7110626,11.6654124 C16.5482745,13.0729395 15.4233048,14.1770605 14.0088856,14.3175109 C14.0783161,14.5238349 14.1233379,14.7375349 14.1430363,14.9542692 C14.1983201,15.7406538 13.9387581,16.5168358 13.4211781,17.1128799 C13.011662,17.5917696 12.4584577,17.9266434 11.8433112,18.0680174 C11.9511271,18.3749955 12.0061994,18.6979085 12.0062084,19.0231548 C11.9957344,20.6641175 10.6628326,21.9913138 9.01656587,22 Z M9.01656587,16.8740955 C8.23171201,16.8438771 7.49314811,17.2440165 7.09170769,17.9169457 C6.69026727,18.589875 6.69026727,19.4277805 7.09170769,20.1007098 C7.49314811,20.7736391 8.23171201,21.1737785 9.01656587,21.1435601 L9.10599962,21.1435601 C10.2609266,21.0820791 11.1585961,20.1182818 11.1344522,18.9656793 C11.1103083,17.8130768 10.1730609,16.8874693 9.01656587,16.8740955 L9.01656587,16.8740955 Z M6.85737958,13.0280753 C6.05016188,13.0307334 5.31291109,13.4852636 4.95002299,14.2039995 C4.58713489,14.9227355 4.66017012,15.7837503 5.13897392,16.4315485 C5.48253616,16.8938982 5.99820802,17.1990938 6.56991395,17.278437 C6.99079272,16.6921752 7.60828846,16.2754353 8.31067804,16.1036179 C8.22868139,15.8733861 8.17609802,15.633778 8.15416898,15.3904486 C8.10820215,14.8342868 8.21881781,14.2763714 8.47357523,13.7794501 C8.07018694,13.3065158 7.48012934,13.032196 6.85737958,13.0280753 Z M9.19543337,16.0303907 C10.0990762,16.0839079 10.9301277,16.5413885 11.4568297,17.2752533 C12.5753211,17.1251594 13.3846319,16.1350614 13.3061432,15.0128326 C13.2276545,13.8906038 12.2883473,13.022019 11.1597818,13.0280438 L10.9936906,13.0280438 C10.2984222,13.0788458 9.67153958,13.4640023 9.31361654,14.0603123 C8.9556935,14.6566223 8.91159606,15.3893377 9.19543337,16.0240232 L9.19543337,16.0303907 Z M13.7405844,13.4547033 C14.8780822,13.4527628 15.8159137,12.565379 15.877036,11.4331754 C15.9381583,10.3009717 15.1012771,9.3183948 13.9705569,9.19479016 C13.8918421,9.19003787 13.812911,9.19003787 13.7341963,9.19479016 C12.9945106,9.1954234 12.3075972,9.57676471 11.9176114,10.2032707 C11.5276256,10.8297767 11.4898678,11.6126082 11.8177587,12.2735166 C12.5405612,12.4358198 13.1776329,12.8587906 13.6064338,13.4610709 L13.7405844,13.4547033 Z M4.72374579,9.17884454 C4.20148452,9.17924802 3.69727793,9.3694154 3.30558201,9.71374819 C2.87716278,10.0884383 2.61611408,10.6177935 2.58015112,11.1847786 C2.54418815,11.7517638 2.73627321,12.309676 3.11393826,12.7351664 C3.43971725,13.1036746 3.88309651,13.3488295 4.36920485,13.429233 L4.4330861,13.429233 C4.60949986,13.1734096 4.82505364,12.9467316 5.07189861,12.757453 C5.37302433,12.5381021 5.7134479,12.3781636 6.07483425,12.2862518 C6.02685202,12.155471 5.988423,12.0214019 5.959848,11.8850941 C5.81421654,11.184587 5.92766234,10.4552146 6.27925426,9.83154848 C5.87169659,9.41171294 5.30983083,9.17595915 4.72374579,9.17884454 L4.72374579,9.17884454 Z M6.95958958,12.1875543 C7.72850039,12.2144165 8.4573458,12.536039 8.99420743,13.0853835 C9.49089257,12.5739091 10.154849,12.2565511 10.8659281,12.1907381 C10.6934499,11.6251251 10.6934499,11.0211846 10.8659281,10.4555716 C10.7054989,10.0520038 10.4230819,9.70818462 10.0578303,9.47178003 C9.06331223,8.83528333 7.73970584,9.11993277 7.09693427,10.1085384 C6.6832694,10.7311114 6.63573858,11.5268185 6.97236583,12.1939219 L6.95958958,12.1875543 Z M8.9111618,8.27785818 C9.47758191,8.27752686 10.0320808,8.4400253 10.5081931,8.74587554 C10.832384,8.95675707 11.1105046,9.23073462 11.3258731,9.55137482 C11.5046094,9.30756863 11.7200929,9.09277807 11.9646856,8.9146165 C11.8986018,8.80055244 11.8419848,8.6812936 11.7954003,8.55803184 C11.4402148,7.65636899 11.5499602,6.63854258 12.0892541,5.83270622 C12.0284575,5.77863236 11.9632907,5.72964822 11.8944162,5.68625181 C11.5499331,5.46119295 11.1468536,5.3416541 10.7349715,5.34237857 C10.0888731,5.3393669 9.47598473,5.62745989 9.0673192,6.12629538 C8.65865367,6.62513086 8.49796299,7.28130319 8.6300843,7.91172214 C8.66091664,8.03795321 8.70480374,8.16065534 8.76104086,8.27785818 L8.9111618,8.27785818 Z M2.99895201,5.33921852 C2.13350184,5.33989161 1.35365398,5.86009369 1.02297389,6.65730629 C0.69229379,7.4545189 0.875886268,8.37178556 1.48816042,8.98147612 C1.72949325,9.21958505 2.02391031,9.39741279 2.34736325,9.50043415 C2.46335995,9.34425557 2.59499407,9.20024368 2.74023294,9.07062229 C3.10844546,8.75890306 3.54675058,8.54045521 4.01785796,8.43386397 C3.9832349,8.33588154 3.95443836,8.2359493 3.93161827,8.13458755 L3.93161827,8.07727931 C3.89459608,7.90128014 3.87427739,7.72219782 3.87093109,7.54240232 C3.86246147,7.16185724 3.92864665,6.78332735 4.0657689,6.42807525 C4.0657689,6.39942113 4.08812734,6.370767 4.10090359,6.34211288 C4.16114472,6.20556893 4.22940295,6.07268078 4.30532359,5.94413893 C4.31851769,5.9156609 4.33345134,5.88801616 4.35004047,5.86136035 L4.35004047,5.8422576 C3.97109966,5.52471787 3.49394423,5.34706272 2.99895201,5.33921852 L2.99895201,5.33921852 Z M13.7405844,8.32879884 C13.8473438,8.3286875 13.9540106,8.33506693 14.0599907,8.34790159 C14.7362371,8.42120368 15.3671869,8.72218725 15.8486657,9.20115774 C16.6445011,8.63099229 16.9509333,7.59535695 16.5928823,6.68596237 C16.2784485,5.87998024 15.5081686,5.34193 14.6408215,5.32242346 C13.7734745,5.30291691 12.979633,5.80579021 12.6290506,6.59681621 C12.3989609,7.11471517 12.3863092,7.70284721 12.5939159,8.2301013 C12.628905,8.32212907 12.6705367,8.41150919 12.7184844,8.4975398 C13.0466542,8.38211147 13.3926035,8.32499787 13.7405844,8.32879884 L13.7405844,8.32879884 Z M4.90900142,8.32879884 C5.60879418,8.37101575 6.2713813,8.6572887 6.78072208,9.13748191 C7.09942652,8.82539619 7.48333645,8.5873112 7.9050321,8.44023155 C7.86365578,8.32221389 7.82847344,8.20212845 7.79962803,8.0804631 C7.63211174,7.30599095 7.7815741,6.49690552 8.21485617,5.83270622 L8.21485617,5.81678726 C7.82963121,5.50130197 7.34636748,5.32910199 6.84779739,5.3296599 C6.29830626,5.32822893 5.76996856,5.54071225 5.37533455,5.92185239 C4.72015515,6.54785756 4.53316477,7.51810213 4.90900142,8.34153401 L4.90900142,8.32879884 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport { Button, CardActionArea } from '@mui/material';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport moment from 'moment';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { FEATURED_DAO_ARRAY } from './constants';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function timeAgo(blockTime:string){\n    try{\n        let prettydate = moment.unix(+blockTime).format(\"MMMM Do YYYY, h:mm a\");\n                    //console.log(\"prettyForSaleDate: \"+prettyForSaleDate)\n        let timeago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asDays().toFixed(0);\n        //console.log(\"Time Ago: \"+timeago);\n        if (+timeago >= 1){\n            prettydate = timeago+' days ago';\n        } else{\n            let hoursago = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asHours().toFixed(0);\n            if (+hoursago >= 1){\n                prettydate = hoursago+' hours ago';\n            } else {\n                let minutesAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asMinutes().toFixed(0);\n                if (+minutesAgo >= 1){\n                    prettydate = minutesAgo+' minutes ago';\n                } else {\n                    let secondsAgo = moment.duration(moment(new Date()).diff(moment.unix(+blockTime))).asSeconds().toFixed(0);\n                    if (+secondsAgo >= 1){\n                        prettydate = minutesAgo+' seconds ago';\n                    }\n                }\n            }\n        }  \n\n        return prettydate;\n    }catch(e){\n        return blockTime;\n    }\n}\n\nexport function trimAddress(addr: any, trim:any) {\n    let start = addr.substring(0, trim);\n    let end = addr.substring(addr.length - trim);\n    return `${start}...${end}`;\n}\n\nexport function ValidateCurve(address:string){\n    return PublicKey.isOnCurve(new PublicKey(address).toBuffer());\n}\n\nexport function ValidateAddress(address:any){\n    try{\n        if (address){\n            //let base58 = useMemo(() => props?.toBase58(), [props]) || null;\n            if ((address.length >= 32) && \n                (address.length <= 45)){    \n                    for (var featured of FEATURED_DAO_ARRAY){\n                        if (featured.address === address){\n                            return true;\n                        }\n                    }\n                    if ((address === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK'))\n                        return true;\n                return ValidateCurve(address);\n            }\n            return false;\n        }\n    } catch(e){console.log(\"ERR: \"+e)};\n    \n    return false;\n    \n}\n\nexport function MakeLinkableAddress(props:any){\n    const addr = props?.addr || \"\";\n    const trim = props?.trim;\n    const hasextlink = props?.hasextlink || false;\n    const hascopy = props?.hascopy || false;\n    const fontsize = props?.fontsize || \"16px\";\n    const permalink = props?.permalink || false;\n    const isDNS = props?.isDNS || null;\n    \n    let stri_addr = addr;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const handleCopyClick = () => {\n        setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n    \n    if (addr.length > 0){\n        if (trim>0)\n            stri_addr = trimAddress(addr, trim)\n    }\n\n    function ClipboardAction(){\n        if (hascopy){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={addr} \n                    onCopy={handleCopyClick}\n                    >\n                        <ContentCopyIcon sx={{fontSize:fontsize, mr:0 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n\n    function PermalinkAction(){\n        if (permalink){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={window.location.href} \n                    onCopy={handleCopyClick}\n                    >\n                        <InsertLinkIcon sx={{fontSize:fontsize, ml:1 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n    \n    if (addr.length > 0){\n        if (hasextlink){\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr} <OpenInNewIcon sx={{fontSize:fontsize, ml:1}} /></Button>\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        } else {\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    {isDNS ?\n                        <>{addr}</>\n                    :\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr}</Button>\n                    }\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        }\n    } else{\n        return (\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n}","import { LAMPORTS_PER_SOL, AccountInfo } from '@solana/web3.js';\nimport fs from 'fs';\nimport weighted from 'weighted';\nimport path from 'path';\nimport { Program, web3 } from '@project-serum/anchor';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\n//const { readFile } = fs.promises;\n\n/*export async function readJsonFile(fileName: string) {\n  const file = await readFile(fileName, 'utf-8');\n  return JSON.parse(file);\n}*/\n\nexport function shuffle(array: any) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex != 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\n/*export const assertValidBreakdown = breakdown => {\n  const total = Object.values(breakdown).reduce(\n    (sum: number, el: number) => (sum += el),\n    0,\n  );\n  if (total > 101 || total < 99) {\n    console.log(breakdown);\n    throw new Error('Breakdown not within 1% of 100! It is: ' + total);\n  }\n};\n\nexport const generateRandomSet = (breakdown, dnp) => {\n  let valid = true;\n  let tmp = {};\n\n  do {\n    valid = true;\n    const keys = shuffle(Object.keys(breakdown));\n    keys.forEach(attr => {\n      const breakdownToUse = breakdown[attr];\n\n      const formatted = Object.keys(breakdownToUse).reduce((f, key) => {\n        if (breakdownToUse[key]['baseValue']) {\n          f[key] = breakdownToUse[key]['baseValue'];\n        } else {\n          f[key] = breakdownToUse[key];\n        }\n        return f;\n      }, {});\n\n      assertValidBreakdown(formatted);\n      const randomSelection = weighted.select(formatted);\n      tmp[attr] = randomSelection;\n    });\n\n    keys.forEach(attr => {\n      let breakdownToUse = breakdown[attr];\n\n      keys.forEach(otherAttr => {\n        if (\n          tmp[otherAttr] &&\n          typeof breakdown[otherAttr][tmp[otherAttr]] != 'number' &&\n          breakdown[otherAttr][tmp[otherAttr]][attr]\n        ) {\n          breakdownToUse = breakdown[otherAttr][tmp[otherAttr]][attr];\n\n          console.log(\n            'Because this item got attr',\n            tmp[otherAttr],\n            'we are using different probabilites for',\n            attr,\n          );\n\n          assertValidBreakdown(breakdownToUse);\n          const randomSelection = weighted.select(breakdownToUse);\n          tmp[attr] = randomSelection;\n        }\n      });\n    });\n\n    Object.keys(tmp).forEach(attr1 => {\n      Object.keys(tmp).forEach(attr2 => {\n        if (\n          dnp[attr1] &&\n          dnp[attr1][tmp[attr1]] &&\n          dnp[attr1][tmp[attr1]][attr2] &&\n          dnp[attr1][tmp[attr1]][attr2].includes(tmp[attr2])\n        ) {\n          console.log('Not including', tmp[attr1], tmp[attr2], 'together');\n          valid = false;\n          tmp = {};\n        }\n      });\n    });\n  } while (!valid);\n  return tmp;\n};*/\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function fromUTF8Array(data: number[]) {\n  // array of bytes\n  let str = '',\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    const value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode(\n        ((value & 0x0f) << 12) |\n          ((data[i + 1] & 0x3f) << 6) |\n          (data[i + 2] & 0x3f),\n      );\n      i += 2;\n    } else {\n      // surrogate pair\n      const charCode =\n        (((value & 0x07) << 18) |\n          ((data[i + 1] & 0x3f) << 12) |\n          ((data[i + 2] & 0x3f) << 6) |\n          (data[i + 3] & 0x3f)) -\n        0x010000;\n\n      str += String.fromCharCode(\n        (charCode >> 10) | 0xd800,\n        (charCode & 0x03ff) | 0xdc00,\n      );\n      i += 3;\n    }\n  }\n\n  return str;\n}\n\nexport function parsePrice(price: string, mantissa: number = LAMPORTS_PER_SOL) {\n  return Math.ceil(parseFloat(price) * mantissa);\n}\n\nexport function parseDate(date: string) {\n  if (date === 'now') {\n    return Date.now() / 1000;\n  }\n  return Date.parse(date) / 1000;\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nexport function chunks(array: any, size: any) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index: any) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport function generateRandoms(\n  numberOfAttrs: number = 1,\n  total: number = 100,\n) {\n  const numbers = [];\n  const loose_percentage = total / numberOfAttrs;\n\n  for (let i = 0; i < numberOfAttrs; i++) {\n    const random = Math.floor(Math.random() * loose_percentage) + 1;\n    numbers.push(random);\n  }\n\n  const sum = numbers.reduce((prev, cur) => {\n    return prev + cur;\n  }, 0);\n\n  numbers.push(total - sum);\n  return numbers;\n}\n\nexport const getMetadata = (\n  name: string = '',\n  symbol: string = '',\n  index: number = 0,\n  creators: any,\n  description: string = '',\n  seller_fee_basis_points: number = 500,\n  attrs: any,\n  collection: any,\n) => {\n  const attributes = [];\n  for (const prop in attrs) {\n    attributes.push({\n      trait_type: prop,\n      value: path.parse(attrs[prop]).name,\n    });\n  }\n\n  return {\n    name: `${name}${index + 1}`,\n    symbol,\n    image: `${index}.png`,\n    properties: {\n      files: [\n        {\n          uri: `${index}.png`,\n          type: 'image/png',\n        },\n      ],\n      category: 'image',\n      creators,\n    },\n    description,\n    seller_fee_basis_points,\n    attributes,\n    collection,\n  };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport const getPriceWithMantissa = async (\n  price: number,\n  mint: web3.PublicKey,\n  walletKeyPair: any,\n  anchorProgram: Program,\n): Promise<number> => {\n  const token = new Token(\n    anchorProgram.provider.connection,\n    new web3.PublicKey(mint),\n    TOKEN_PROGRAM_ID,\n    walletKeyPair,\n  );\n\n  const mintInfo = await token.getMintInfo();\n\n  const mantissa = 10 ** mintInfo.decimals;\n\n  return Math.ceil(price * mantissa);\n};\n","import {\n    TextField\n} from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport React, { useCallback } from \"react\";\n\nexport const matchNothingRegex = /(?!)/;\n\nexport const RegexTextField = ({ regex, onChange, ...rest }) => {\n  const handleChange = useCallback(\n    (e) => {\n      e.currentTarget.value = e.currentTarget.value.replace(regex, \"\");\n      onChange(e);\n    },\n    [onChange, regex]\n  );\n\n  return <TextField onChange={handleChange} {...rest} />;\n};\n\nexport default React.memo(RegexTextField);\n\nRegexTextField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  regex: PropTypes.instanceOf(RegExp)\n};\n\nRegexTextField.defaultProps = {\n  regex: matchNothingRegex\n};\n","export default __webpack_public_path__ + \"static/media/App.91f250be.less\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\n\nimport { makeStyles, styled, alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getMetadata,\n    getAuctionHouseProgramAsSigner,\n    loadWalletKey,\n    deserializeAccount,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Table,\n    TableContainer,\n    TableRow,\n    TableCell,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Container,\n} from '@mui/material';\n\nimport { red } from '@mui/material/colors';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport GrapeIcon from '../components/static/GrapeIcon';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  function convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nexport default function OffersView(props:any){\n    const [offers, setOffers] = React.useState(null);\n    const [myoffers, setMyOffers] = React.useState(0);\n    const [listings, setListings] = React.useState(null);\n    const [ahbalance, setAHBalance] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [ahloading, setAHLoading] = React.useState(false);\n    const [ thisPublicKey, setThisPublicKey] = React.useState(props.pubkey || null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const connection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { publicKey, sendTransaction } = useWallet();\n    const [walletCollection, setWalletCollection] = React.useState(props.wallet_collection);\n    const [walletCollectionMeta, setWalletCollectionMeta] = React.useState(props.wallet_collection_meta);\n    const [refresh, setRefresh] = React.useState(false);\n    const [counter, setCounter] = React.useState(0);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [page, setPage] = React.useState(1);\n    const [alertwithdrawopen, setAlertWithdrawOpen] = React.useState(false);\n    \n    const rowsperpage = 1500;\n    const selectedstate = props.selectedstate;\n\n    const handleAlertWithdrawClose = () => {\n        setAlertWithdrawOpen(false);\n    };\n    const handleAlertWithdrawOpen = () => {\n        setAlertWithdrawOpen(true);\n    };\n\n    const handleCancelOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);                \n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await connection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been canceled `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\t//handCancelWithdrawOffer was useful when only allowing one offer at a time\n    const handleCancelWithdrawOffer = async (offerAmount: number, mint: any) => {\n        try {\n            const mintKey = new web3.PublicKey(mint);\n            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            const signedTransaction = await sendTransaction(transaction, connection)\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefresh(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar()\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n    \n    const handleWithdrawOffer = async (offerAmount: number, mint: string) => {\n\n        try {\n            \n            var allmints: any[] = [];\n            if (!mint){\n                for (var item of offers){\n                    if(item.state === 1){\n                        allmints.push({mint: item.mint, offerAmount: convertSolVal(item.offeramount)});\n                        if (!mint)\n                            mint = item.mint;\n                    }               \n                }\n            }\n\n            if (allmints.length <= 1){\n                if (mint){ // with mint allow calling cancel withdraw combo\n                    try {\n                        const mintKey = new web3.PublicKey(mint);\n                        let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                        const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                        let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                        const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                        const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, publicKey, mintAccountInfoDs.owner);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        \n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Offer Cancel and Withdrawal completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    } \n                } else{ // no mint then just withdraw\n                    try {\n                        const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                        const instructionsArray = [transactionInstr.instructions].flat();        \n                        const transaction = new Transaction()\n                        .add(\n                            ...instructionsArray\n                        );\n                        enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                        const signedTransaction = await sendTransaction(transaction, connection)\n                        \n                        const snackprogress = (key:any) => (\n                            <CircularProgress sx={{padding:'10px'}} />\n                        );\n                        const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                        await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                        closeSnackbar(cnfrmkey);\n                        const snackaction = (key:any) => (\n                            <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                {signedTransaction}\n                            </Button>\n                        );\n                        enqueueSnackbar(`Withdrawal from Grapevine completed `,{ variant: 'success', action:snackaction });\n                        \n                        const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            setRefresh(true);\n                        }, GRAPE_RPC_REFRESH);\n                    } catch(e){\n                        closeSnackbar();\n                        enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                        console.log(\"Error: \"+e);\n                    }\n                }\n            } else {  \n                //enqueueSnackbar(`To withdraw from Grapevine you must first cancel all pending Offers.`,{ variant: 'warning' });\n                //several mints to cancel and finally withdraw\n                \n                    let cnt = 1;\n\n                    for (var item of allmints){  \n                        console.log(JSON.stringify(allmints));  \n                        try{ \n                            if (cnt <= allmints.length){\n                                //cancelOffer on specific mint in list\n                                const mintKey = new web3.PublicKey(item.mint);\n                                let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mintKey));\n                                const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                //let numericAmmount = item.offerAmount;\n                                const transactionInstr = await cancelOffer(item.offerAmount, item.mint, publicKey, mintAccountInfoDs.owner);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                            \n                                enqueueSnackbar(`Preparing to cancel offer for ${item.offerAmount} SOL on mint ${item.mint}`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Offer cancel complete `,{ variant: 'success', action:snackaction });                 \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }\n\n                        try{\n                            if (cnt === allmints.length){\n                                const transactionInstr = await withdrawOffer(offerAmount, null, publicKey);\n                                const instructionsArray = [transactionInstr.instructions].flat();        \n                                const transaction = new Transaction()\n                                .add(\n                                    ...instructionsArray\n                                );\n                                enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n                                const signedTransaction = await sendTransaction(transaction, connection)\n                                \n                                const snackprogress = (key:any) => (\n                                    <CircularProgress sx={{padding:'10px'}} />\n                                );\n                                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                                closeSnackbar(cnfrmkey);\n                                const snackaction = (key:any) => (\n                                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                                        {signedTransaction}\n                                    </Button>\n                                );\n                                enqueueSnackbar(`Grapevine Withdrawal complete `,{ variant: 'success', action:snackaction });                     \n                            }\n                        } catch(e){\n                            closeSnackbar();\n                            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                            console.log(\"Error: \"+e);\n                        }    \n\n                        cnt++;\n                    }\n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                    });\n                    setTimeout(function() {\n                        closeSnackbar(eskey);\n                        setRefresh(true);\n                    }, GRAPE_RPC_REFRESH);\n         \n\t\t\t\t\n            }\n            \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const getOffers = async () => {\n        getEscrowBalance();\n\n        if (!loading){\n            setLoading(true);\n            setMaxPage(false);\n\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(thisPublicKey)).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n            \n            let result = await ggoconnection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 100});\n            \n            //let sale_result = await connection.getSignaturesForAddress(derivedBuyerPDA[0], {limit: 250});\n            //console.log(JSON.stringify(result));\n            \n            let offerResults: any[] = [];\n            let cancelStateResults: any[] = [];\n            let allListingResults: any[] = [];\n            let listingResults: any[] = [];\n            let mintArrayPDA: any[] = [];\n            let escrow_cache: any[] = [];\n            let exists = false;\n            let existSaleCancelAction = 0;\n            let cntr = 0;\n            let cnt = 0;\n\n\n            let sellerTradeStateArr: any[] = [];\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            for (var value of result){\n                if (value.err === null){\n                  \n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                //console.log(value.signature);\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n\n                            //if ( feePayer != mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                            {\n                                 \n                                let escrow_found = false;\n                                let escrow_found_index = 0;\n                                for (var i = 0; i < escrow_cache.length; i++){\n                                    if (escrow_cache[i].feePayer.toBase58() === feePayer.toBase58()){\n                                        escrow_found = true;\n                                        escrow_found_index = i;\n                                    }\n                                }\n\n                                let amount_on_escrow = 0;\n\n                                if (!escrow_found){\n                                    let escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                    amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n                                    escrow_cache.push(\n                                        {\n                                            //escrow: escrow,\n                                            amount_on_escrow: amount_on_escrow,\n                                            feePayer: feePayer\n                                        }\n                                    );\n                                    \n                                } else{\n                                    amount_on_escrow = escrow_cache[escrow_found_index].amount_on_escrow;\n                                }\n                                \n                                let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;\n                                //console.log('auctionMint: '+auctionMint);\n                                \n                                //if (auctionMint){\n                                //    console.log(\"value3: \"+JSON.stringify(value));\n                                \n                                // check if memo is an array\n                                \n                                // consider countering all brackets\n\n                                    {\n                                        exists = false;\n                                        //console.log('VAL '+JSON.stringify(value));\n                                        if ((value) && (value.memo)){\n                                            \n                                            let memo_arr: any[] = [];\n                                            let memo_str = value.memo;\n                                            let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                            if (memo_instances > 0) {\n                                                // multi memo\n                                                let mcnt = 0;\n                                                let submemo = memo_str;\n                                                //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                                for (var mx=0;mx<memo_instances;mx++){\n                                                    let init = submemo.indexOf('{');\n                                                    let fin = submemo.indexOf('}');\n                                                    memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                                    memo_arr.push(memo_str);\n                                                    submemo = submemo.replace(memo_str, \"\");\n                                                    //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                                    //console.log(\"submemo: \"+submemo);\n                                                }\n                                            } else{\n                                                let init = memo_str.indexOf('{');\n                                                let fin = memo_str.indexOf('}');\n                                                memo_str = memo_str.substr(init,fin); // include brackets\n                                                memo_arr.push(memo_str);\n                                            }\n                                            \n                                            for (var memo_item of memo_arr){\n                                                try{\n                                                    const memo_json = JSON.parse(memo_item);\n                                                    \n                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                \n                                                    //console.log(memo_json);\n                                                    if ((memo_json?.status === 0) || // withdraw\n                                                        (memo_json?.status === 1) || // offer\n                                                        (memo_json?.status === 2) || // sale\n                                                        (memo_json?.status === 3) || // listing/accept\n                                                        (memo_json?.status === 4) || // buy now\n                                                        (memo_json?.status === 5) || // cancel\n                                                        (memo_json?.state === 0) || // withdraw\n                                                        (memo_json?.state === 1) || // offer\n                                                        (memo_json?.state === 2) || // sale\n                                                        (memo_json?.state === 3) || // listing/accept\n                                                        (memo_json?.state === 4) || // buy now\n                                                        (memo_json?.state === 5)){ // cancel\n                                                        \n                                                        // consider checking amount vs memo_json.offer\n                                                        \n                                                        //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                                        let sale_state_exists = false;\n                                                        \n                                                        //console.log(memo_json?.state + ' ('+memo_json?.mint+') - ' + feePayer.toBase58() + ': ' + memo_json?.amount);\n                                                        //console.log(feePayer.toBase58() + ' v ' + thisPublicKey);\n                                                        \n                                                        if (feePayer.toBase58() === thisPublicKey){\n\n                                                            if ( feePayer.toBase58() === thisPublicKey && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && !sale_state_exists){\n                                                                \n                                                                if ((memo_json?.status === 0) ||\n                                                                    (memo_json?.status === 2) ||\n                                                                    (memo_json?.status === 3) ||\n                                                                    (memo_json?.status === 4) ||\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) ||\n                                                                    (memo_json?.state === 2) ||\n                                                                    (memo_json?.state === 3) ||\n                                                                    (memo_json?.state === 4) ||\n                                                                    (memo_json?.state === 5)){\n\n                                                                    if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                                        // check if exists\n                                                                        for (var i = 0; i < allListingResults.length; i++){\n                                                                            if (memo_json?.mint === allListingResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n                                                                        for (var i = 0; i < cancelStateResults.length; i++){\n                                                                            if (memo_json?.mint === cancelStateResults[i].mint){ // get latest offer\n                                                                                sale_state_exists = true;\n                                                                            }\n                                                                        }\n\n                                                                        // push last sale state first\n                                                                        if ((!sale_state_exists)&&(selectedstate===2)){ // handle this only for sale tab\n                                                                            let mint_address = new PublicKey(memo_json?.mint)\n                                                                            mintArrayPDA.push(mint_address);\n\n                                                                            if (memo_json?.amount){\n                                                                                let ownerHasMint = false;\n                                                                                for (var wvalue of walletCollection){\n                                                                                    if (wvalue.account.data.parsed.info?.mint === memo_json?.mint)\n                                                                                        ownerHasMint = true;\n                                                                                }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check if this is a valid sale or offer first\n                                                                                if ((memo_json?.status === 2) || // sale\n                                                                                    (memo_json?.status === 5)  || // cancel\n                                                                                    (memo_json?.state === 2) || // sale\n                                                                                    (memo_json?.state === 5)){ // cancel\n                                                                                    \n                                                                                    if (memo_json?.state === 5){\n                                                                                        //sellerTradeStateArr.push(null);\n                                                                                        cancelStateResults.push({tradeStatePublicKey: null, buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: ownerHasMint, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status}); \n                                                                                    } else if (memo_json?.state === 2){\n                                                                                        let thisTokenOwner = new web3.PublicKey(thisPublicKey);\n                                                                                        if (!ownerHasMint){\n                                                                                            // owner does not have the mint\n                                                                                            let tokenAccount =  await ggoconnection.getTokenLargestAccounts(new PublicKey(mint_address));\n                                                                                            const tokenKey = new web3.PublicKey(tokenAccount?.value[0].address.toBase58());\n                                                                                            let mintAccountInfo = await ggoconnection.getAccountInfo(tokenKey);\n                                                                                            const mintAccountInfoDs = deserializeAccount(mintAccountInfo?.data);\n                                                                                            thisTokenOwner = mintAccountInfoDs.owner;\n                                                                                        } \n                                                                                        //console.log(\"Check: \"+JSON.stringify(memo_json));\n                                                                                        \n                                                                                        if (ownerHasMint){\n                                                                                            const tokenAccountKey = (await getAtaForMint(mint_address, thisTokenOwner))[0];\n                                                                                            \n                                                                                            //const tokenAccountKey = (await getAtaForMint(mint_address, mintAccountInfoDs.owner))[0];\n                                                                                            const tokenSizeAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    1,\n                                                                                                    mint_address,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                                                            const buyPriceAdjusted = new BN(\n                                                                                                await getPriceWithMantissa(\n                                                                                                    convertSolVal(offerAmount),\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    thisTokenOwner, \n                                                                                                    anchorProgram,\n                                                                                                ),\n                                                                                            );\n                                                                                            \n                                                                                            const sellerTradeState = (\n                                                                                                await getAuctionHouseTradeState(\n                                                                                                    auctionHouseKey,\n                                                                                                    thisTokenOwner,\n                                                                                                    tokenAccountKey,\n                                                                                                    //@ts-ignore\n                                                                                                    auctionHouseObj.treasuryMint,\n                                                                                                    mint_address,\n                                                                                                    tokenSizeAdjusted,\n                                                                                                    buyPriceAdjusted,\n                                                                                                )\n                                                                                            )[0];\n                                                                                            \n                                                                                            sellerTradeStateArr.push(sellerTradeState);\n                                                                                            // THESE ARE REDUNDANT RPC CALLS WE ARE BATCHING AND CHECKING IN THE END\n                                                                                            //const sellerTradeStateInfo = await connection.getAccountInfo(sellerTradeState);    \n                                                                                            //console.log(\"sellerTradeStateInfo: \"+JSON.stringify(sellerTradeStateInfo));\n                                                                                            //if (sellerTradeStateInfo != null){   \n                                                                                                //console.log('ownerHasMint ('+ownerHasMint+'):', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                if (ownerHasMint) {\n                                                                                                    //console.log('ownerHasMint:', memo_json?.mint, 'state:', memo_json?.state);\n                                                                                                    if (thisPublicKey == feePayer)\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                    else\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                                } else {\n                                                                                                    //console.log('owner does not have Mint:', memo_json?.mint, 'state:', memo_json?.state); \n                                                                                                    if (memo_json?.state != 5) {\n                                                                                                        allListingResults.push({tradeStatePublicKey: sellerTradeState.toBase58(), buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state});  \n                                                                                                    }\n                                                                                                }\n                                                                                            //}\n                                                                                        }\n                                                                                    }\n                                                                                    \n                                                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                                        }\n                                                                    }\n                                                                    \n                                                                }\n                                                            }\n                                                        }\n\n                                                        if ((memo_json?.status === 0) ||\n                                                            (memo_json?.status === 1) ||\n                                                            (memo_json?.status === 5) ||\n                                                            (memo_json?.state === 0) ||\n                                                            (memo_json?.state === 1) ||\n                                                            (memo_json?.state === 5)){\n                                                            \n                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                            //if ((memo_json?.amount === amount)||\n                                                            //    (memo_json?.offer === amount)){\n                                                            {\n                                                                //console.log('OFFER: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                if (memo_json?.amount >= 0){\n                                                                    exists = false;\n                                                                    //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                    for (var i = 0; i < offerResults.length; i++){\n                                                                        if (//(feePayer === offerResults[i].buyeraddress)&&\n                                                                            (memo_json?.mint === offerResults[i].mint)){\n                                                                            exists = true;\n                                                                        }\n                                                                    }\n                                                                    if (!exists){\n                                                                        \n                                                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_item);\n                                                                        \n                                                                        if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                            if (feePayer.toBase58() === thisPublicKey)\n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n\n                                                                            else   \n                                                                                offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }catch(e){console.log(\"ERR: \"+e)}\n                                            }\n                                        }\n                                    }\n                                //}\n                            }\n                        }\n                    }catch(ert){console.log(\"ERR: \"+ert)}\n                }\n                cnt++;\n                cntr++;\n                setCounter(cntr);\n            }\n\n            if (mintArrayPDA.length > 0){\n                /*\n                for (var y=0;y<mintArrayPDA.length;y++){\n                    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mintArrayPDA[y]).toBuffer(),\n                    ], MD_PUBKEY)\n                }\n\n                let final_mint_states = await connection.getParsedTransactions(mintArrayPDA);\n                let state_was_sold = false;\n                let final_sale_state = '';//memo_json?.state || memo_json?.status;\n                for (var x=0; x < listingResults.length; x++){\n                    \n                    // for each listing\n                    // check the final_mint_state (last transaction?)\n                    for (var r=0; r < final_mint_states.length; r++){\n                        \n                        console.log(\"Final Mint State: \"+JSON.stringify(final_mint_states[r]))\n\n                    }\n                    /*\n                    if ((listingResults[x]) && (listingResults[x].memo)){\n                    \n                        let sub_memo_str = listingResults[x].memo;\n                        let init = sub_memo_str.indexOf('{');\n                        let fin = sub_memo_str.indexOf('}');\n                        sub_memo_str = sub_memo_str.substr(init,fin);\n                        const sub_memo_json = JSON.parse(sub_memo_str);\n                        \n                        if ((sub_memo_json?.status === 3) ||\n                            (sub_memo_json?.status === 4) ||\n                            (sub_memo_json?.state === 3) ||\n                            (sub_memo_json?.state === 4)){\n                            state_was_sold = true;\n                            final_sale_state = sub_memo_json?.state || sub_memo_json?.status;\n                            //console.log(\"SOLD: \"+sub_memo_json?.state);\n                        }\n                    }\n                    */\n\n                    // if first instance of \n                //} \n            }\n            var j = 0;\n            for (var i = 0; i < offerResults.length; i++){\n                if ((offerResults[i].isowner && offerResults[i].state === 1)){\n                    j++;\n                }\n            }\n            setMyOffers(myoffers+j);\n\n            // check which tab we are in to avoid uneeded RPC call\n            const tradeStates = await ggoconnection.getMultipleAccountsInfo(sellerTradeStateArr, 'confirmed');\n            let x = 0;\n            for (var alrvalue of allListingResults){\n                // check if this has a trade \n                if ((alrvalue.tradeStatePublicKey) && (sellerTradeStateArr[x])){\n                    if (alrvalue.tradeStatePublicKey === sellerTradeStateArr[x].toBase58()){\n                        // check if this has an active trade state\n                        if (tradeStates[x]){\n                            //console.log(\"checking: \"+alrvalue.tradeStatePublicKey + \" vs \"+sellerTradeStateArr[x].toBase58());\n                            listingResults.push({\n                                buyeraddress: allListingResults[x].buyeraddress, offeramount: allListingResults[x].offeramount, mint: allListingResults[x].mint, isowner: allListingResults[x].isowner, timestamp: allListingResults[x].timestamp, state: allListingResults[x].state\n                            })\n                        }\n                    }\n                }\n                x++;\n            }\n            \n            if (offers){\n                setOffers(\n                    (offers:any) => [...offers,offerResults]\n                );\n            }else {\n                setOffers(\n                    offerResults\n                ); \n            }\n\n            if (listings){\n                setListings(\n                    (listings:any) => [...listings,listingResults]\n                );\n            }else {\n                setListings(\n                    listingResults\n                ); \n            }\n\n            setLoading(false);\n        }\n    }\n\n    const getEscrowBalance = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        \n        if (!ahloading){\n            setAHLoading(true);\n            let cntr = 0;\n            \n            const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey,))[0];\n            let amount = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,);\n            setAHBalance(amount);\n\n            setAHLoading(false);\n            \n        }\n    }\n\n    React.useEffect(() => { \n        if (thisPublicKey){\n            if (!loading){\n                if ((!offers)||(refresh)){\n                    console.log(\"Getting offers for \"+thisPublicKey);\n                    getOffers();\n                }\n            }\n        }\n    }, [refresh, thisPublicKey]);\n    \n    if (loading){\n        return (\n            <Grid container\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                sx={{\n                }} \n            >\n                <CircularProgress />\n            </Grid>\n        );\n    } else {\n        if (selectedstate == 1){\n            return (\n                \n                <Container\n                    sx={{p:0,m:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:1,\n                                ml:0,\n                                mr:0\n                            }}\n                        >\n\n                            <BootstrapDialog \n                                fullWidth={true}\n                                maxWidth={\"sm\"}\n                                PaperProps={{\n                                    style: {\n                                        background: '#13151C',\n                                        border: '1px solid rgba(255,255,255,0.05)',\n                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                        borderRadius: '20px'\n                                    }\n                                }}\n                                open={alertwithdrawopen}\n                                onClose={handleAlertWithdrawClose}\n                                aria-labelledby=\"alert-bn-dialog-title\"\n                                aria-describedby=\"alert-bn-dialog-description\"\n                                >\n                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                    <Typography>\n                                        CONFIRMATION\n                                    </Typography>\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                    <br />\n                                    <Alert \n                                        severity=\"warning\" variant=\"outlined\"\n                                        sx={{backgroundColor:'black'}}\n                                        >\n                                            You currently have <strong>{myoffers}</strong> standing offer{(myoffers > 1 && <>s</>)}, it is recommended that you cancel all standing offers and then attempt to withdraw. If you are unable to cancel then click Withdraw to force cancel from the Grape Auction House\n                                            <br/><br/>\n                                            NOTE: By pressing Withdraw you will have to Accept <strong>{myoffers}</strong> additional transaction{(myoffers > 1 && <>s</>)} with your wallet\n                                    </Alert>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleAlertWithdrawClose}>Cancel</Button>\n                                    <Button \n                                        onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                        autoFocus>\n                                    Withdraw\n                                    </Button>\n                                </DialogActions>\n                            </BootstrapDialog>\n                            \n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => (myoffers > 0 ? setAlertWithdrawOpen(true) : handleWithdrawOffer(convertSolVal(ahbalance), null))}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n                \n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:0,\n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"offers\">\n                            {offers && offers.map((item: any,key:number) => (\n                                <>\n                                    {item.state === selectedstate && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell>\n                                                <Tooltip title={`Visit profile`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <AccountCircleOutlinedIcon sx={{fontSize:\"14px\", mr:1}} />\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.buyeraddress, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell  align=\"center\"><Typography variant=\"h6\">\n                                                {item.isowner ? (\n                                                    <Tooltip title={`Offer made`}>\n                                                        <IconButton>\n                                                            <ArrowForwardIcon color=\"success\" />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    ):(\n                                                    <Tooltip title={`Offer received`}>\n                                                        <IconButton>\n                                                            <ArrowBackIcon sx={{ color: red[500] }} />\n                                                        </IconButton>\n                                                    </Tooltip>)}\n                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 3)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\"> \n                                                {(publicKey.toBase58() === item.buyeraddress) && (\n                                                    <Tooltip title={`Cancel Offer`}>\n                                                        <Button \n                                                            color=\"error\"\n                                                            variant=\"text\"\n                                                            //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            onClick={() => handleCancelWithdrawOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            //onClick={() => handleCancelOffer(convertSolVal(item.offeramount), item.mint)}\n                                                            sx={{\n                                                                borderRadius: '24px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon />\n                                                        </Button>\n                                                    </Tooltip>\n                                                    )}\n                                            </TableCell>\n                                        </TableRow>\n                                        </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        } else {\n            return (\n                <Container\n                    sx={{p:0}}\n                >\n                    {(publicKey && publicKey.toBase58() === thisPublicKey && ahbalance && (ahbalance > 0)) ?\n                        <Box\n                            sx={{\n                                background: 'rgba(0, 0, 0, 0.2)',\n                                borderRadius: '17px',\n                                mt:1,\n                                mb:2\n                            }}\n                        >\n                            <Grid \n                                container\n                                direction=\"row\"\n                                justifyContent='flex-end'\n                                alignContent='flex-end'\n                                sx={{\n                                    p:1,pr:1.25\n                                }}\n                            >\n                                <Typography variant=\"caption\">\n                                    <Button\n                                            title=\"Withdraw from the Grape Auction House\"\n                                            size=\"small\"\n                                            variant=\"text\"\n                                            onClick={() => handleWithdrawOffer(convertSolVal(ahbalance), null)}\n                                            sx={{\n                                                borderRadius: '10px',\n                                                fontSize: '11px',\n                                                ml:1\n                                            }}\n                                        >\n                                        {convertSolVal(ahbalance)} <SolCurrencyIcon sx={{fontSize:\"8px\", mr:0.5 }} /> <GrapeIcon sx={{fontSize:\"22px\", mr:0.5, color:'white' }} />\n                                    \n                                    </Button>\n                                </Typography>\n                            </Grid>\n                        </Box>\n                    :\n                    <Box></Box>\n                    }\n\n                    <TableContainer\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            \n                        }}\n                    >\n                        <Table size=\"small\" aria-label=\"listings\">\n                            {listings && listings.map((item: any,key:number) => (\n                                <>\n                                    {item.state === 2 && (\n                                    <>\n                                        <TableRow sx={{p:1}} key={key}>\n                                            <TableCell  align=\"right\"><Typography variant=\"caption\">\n                                            </Typography></TableCell>\n                                            <TableCell  align=\"right\"><Typography variant=\"h6\">\n                                                {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                            </Typography></TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title={`View NFT`}>\n                                                    <Button\n                                                        component={Link} to={`${GRAPE_PREVIEW}${item.mint}`}\n                                                        sx={{borderRadius:'24px'}}\n                                                    >\n                                                        <ImageOutlinedIcon sx={{fontSize:\"14px\", mr:1}}/>\n                                                        <Typography variant=\"caption\">\n                                                            {trimAddress(item.mint, 4)}\n                                                        </Typography>\n                                                    </Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography variant=\"caption\">\n                                                    <Tooltip title={formatBlockTime(item.timestamp, true, true)}>\n                                                        <Button size='small' sx={{borderRadius:'24px'}}>{timeAgo(item.timestamp)}</Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                            </TableCell>\n                                        </TableRow>\n                                    </>\n                                    )}\n                                </>\n                            ))}\n                        </Table>\n                    </TableContainer>\n                </Container>\n            )\n        }\n    }\n}\n","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function withdrawOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    //const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n\n    const amountAdjusted = await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const currBal = await getTokenAmount(\n      anchorProgram,\n      escrowPaymentAccount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n    ); \n\n    const instruction = anchorProgram.instruction.withdraw(\n      bump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n\n          receiptAccount: isNative ? buyerWalletKey : ata,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n\n    const instructions = [instruction];\n    \n\n\n    //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:0, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint?.toString(), // mint\n      amount:amountAdjusted // price\n    };\n\n    if (mint){\n      const mintKey = new web3.PublicKey(mint);\n      let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedMintPDA[0],\n          lamports: 0,\n        })\n      );\n\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }else{\n      let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n      instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n    }\n    /*\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );*/\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// @ts-ignore\n\nimport CyberConnect, { Env, Blockchain, solana } from '@cyberlab/cyberconnect';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { removeDuplicate } from '../utils/cyberConnect/helper';\nimport { followListInfoQuery } from '../utils/cyberConnect/query';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { Connection, PublicKey} from '@solana/web3.js';\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport { Button } from '@mui/material';\n\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Avatar,\n    ListItem,\n    ListItemText,\n    ListItemButton,\n    ListItemAvatar,\n} from '@mui/material';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_RPC_REFRESH, GRAPE_PREVIEW, GRAPE_PROFILE, FEATURED_DAO_ARRAY } from '../utils/grapeTools/constants';\nimport { trimAddress } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nexport default function SocialView(props: any){\n    const [pubkey, setPubKey] = React.useState<string>(props.pubkey || null);\n    const [type, setType] = React.useState<number>(props.type || 0);\n    const [loading, setLoading] = React.useState(false);\n    const [page, setPage] = React.useState(1);\n    const rpclimit = 100;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const { publicKey } = useWallet();\n\n    const NAME_SPACE = 'Grape';\n    const GLOBAL_NAME_SPACE = '';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 12; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        setLoading(true);\n        if (!pubkey) {\n            return;\n        }\n\n        const resp = await followListInfoQuery({\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST\n        });\n        if (resp) {\n            setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n  \n  const fetchMore = async (type: 'followings' | 'followers') => {\n    if (!pubkey || !followListInfo) {\n      return;\n    }\n\n    const params =\n      type === 'followers'\n        ? {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followerFirst: FIRST,\n            followerAfter: followListInfo.followers.pageInfo.endCursor,\n          }\n        : {\n            address:pubkey,\n            namespace: GLOBAL_NAME_SPACE,\n            network: NETWORK,\n            followingFirst: FIRST,\n            followingAfter: followListInfo.followings.pageInfo.endCursor,\n          };\n\n    const resp = await followListInfoQuery(params);\n    if (resp) {\n      type === 'followers'\n        ? setFollowListInfo({\n            ...followListInfo,\n            followers: {\n              pageInfo: resp.followers.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followers.list.concat(resp.followers.list)\n              ),\n            },\n          })\n        : setFollowListInfo({\n            ...followListInfo,\n            followings: {\n              pageInfo: resp.followings.pageInfo,\n              list: removeDuplicate(\n                followListInfo.followings.list.concat(resp.followings.list)\n              ),\n            },\n          });\n    }\n  };\n\n    const ProfilePicture = (props:any) => {\n        const followitem = props.followitem;\n        const [address, setAddress] = React.useState(followitem.address);\n        const [loadingpicture, setLoadingPicture] = React.useState(false);\n        const [profilePictureUrl, setProfilePictureUrl] = React.useState(null);\n        const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n        const countRef = React.useRef(0);\n\n        const fetchProfilePicture = async () => {\n            setLoadingPicture(true);  \n                //console.log(\"trying: \"+address)\n                try{\n                    //console.log(countRef.current+\": \"+address+\" - \"+loadingpicture);\n                    const { isAvailable, url } = await getProfilePicture(ggoconnection, new PublicKey(address));\n                    \n                    let img_url = url;\n                    if (url)\n                        img_url = url.replace(/width=100/g, 'width=256');\n                    setProfilePictureUrl(img_url);\n                    setHasProfilePicture(isAvailable);\n                    countRef.current++;\n                }catch(e){}\n            setLoadingPicture(false);\n        }\n\n        React.useEffect(() => {       \n            if (!loadingpicture){\n                //const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                //}, 500);\n            }\n        }, []);\n\n        /*\n        React.useEffect(() => { \n            if ((!loadingpicture)&&(countRef.current<1)){\n                const interval = setTimeout(() => {\n                    if (address)\n                        fetchProfilePicture();\n                }, 500);\n                return () => clearInterval(interval); \n            }\n        }, []);\n        */\n\n        \n        if (loadingpicture){\n            return (\n                <Avatar sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                    <CircularProgress sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }} />\n                </Avatar>)\n        }else{\n            \n            if (hasProfilePicture){\n                return (  \n                    <Avatar alt={address} src={profilePictureUrl} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                        {address.substr(0,2)}\n                    </Avatar>\n                );\n            \n            } else{\n                return (\n                    <>\n                    {followitem.avatar ?\n                        <>\n                            <Avatar alt={followitem.address} src={followitem.avatar} sx={{ width: 56, height: 56, bgcolor: 'rgb(0, 0, 0)' }}>\n                                {followitem.address.substr(0,2)}\n                            </Avatar>\n                        </>\n                    :\n                        <>\n                        {jsNumberForAddress(followitem.address) ?\n                            <>\n                            <Jazzicon diameter={56} seed={jsNumberForAddress(followitem.address)} />\n                            </>\n                        :\n                            <>\n                            <Jazzicon diameter={56} seed={Math.round(Math.random() * 10000000)} />\n                            </>\n                        }\n                        </>\n                    }\n                    </>\n                );\n            }\n        }\n    }\n\n\n    const SocialItem = (props: any) => {\n        const [followitem, setFollowItem] = React.useState(props.followitem);\n        const [followitemkey, setFollowItemKey] = React.useState(props.followitemkey);\n        \n        if (loading){\n            return <Grid item xs={12} sm={6} md={4}><CircularProgress /></Grid>\n        } else{\n            return (\n                \n                <Grid item xs={12} sm={12} md={4} lg={3}>\n\n                    <ListItem \n                        key={followitemkey}\n                        sx={{ \n                            background:'rgba(0,0,0,0.5)',\n                            borderRadius:'17px' }}>\n                        <ListItemButton\n                            component={Link} \n                            to={`${GRAPE_PROFILE}${followitem.address}`}\n                            sx={{ \n                                m:1,\n                                borderRadius:'17px'}}\n                            >\n                            <ListItemAvatar>\n                                <ProfilePicture followitem={followitem} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                sx={{ml:1}}\n                                primary={followitem.ens || trimAddress(followitem.address,4)}  \n                                secondary={<Typography variant=\"caption\" color=\"#777\">From {followitem.namespace}</Typography>}\n                            />\n                        </ListItemButton>\n                    </ListItem>\n                </Grid>\n\n\n            )\n        }\n    }\n\n    React.useEffect(() => { \n        if (publicKey){\n            initFollowListInfo();\n        }\n    }, []);\n    \n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={2} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <> \n                <Box\n                    sx={{\n                        background: 'rgba(0, 0, 0, 0.6)',\n                        borderRadius: '17px',\n                        p:4\n                    }} \n                > \n                    <Grid container \n                        spacing={{ xs: 2, md: 3 }} \n                        justifyContent=\"center\"\n                        alignItems=\"center\">\n                        \n                        {type === 0 ?\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followers && followListInfo.followers.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            \n                            {followListInfo?.followers.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followers')}>more</Button>\n                            }\n                        </>\n                        :\n                        <>\n                            {followListInfo &&\n                                <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                                    {followListInfo?.followings && followListInfo.followings.list.map((item: any, key: number) => (\n                                    <SocialItem followitem={item} followitemkey={key} key={key} />\n                                    ))}\n                                </Grid>\n                            }\n                            {followListInfo?.followings.pageInfo.hasNextPage &&\n                                <Button onClick={() => fetchMore('followings')}>more</Button>\n                            }\n                        </>\n                        }\n                    </Grid>\n\n                </Box>\n            </>\n        );\n    }\n}","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\n\nimport CyberConnect, { Env, Blockchain, solana, ConnectionType } from '@cyberlab/cyberconnect';\n\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js'\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport ImageViewer from 'react-simple-image-viewer';\nimport { Helmet } from 'react-helmet';\n\nimport { findDisplayName } from '../utils/name-service';\nimport { createSetProfilePictureTransaction } from '@solflare-wallet/pfp';\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { \n    getTokenOwnerRecordForRealm, \n} from '@solana/spl-governance';\nimport { useNavigate } from 'react-router';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { FollowListInfoResp, SearchUserInfoResp, Network } from '../utils/cyberConnect/types';\nimport { followListInfoQuery, searchUserInfoQuery } from '../utils/cyberConnect/query';\n\nimport {\n    Avatar,\n    Chip,\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Paper,\n    Divider,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Card,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\n\nimport FlagIcon from '@mui/icons-material/Flag';\nimport EmojiFlagsIcon from '@mui/icons-material/EmojiFlags';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport PersonRemoveOutlinedIcon from '@mui/icons-material/PersonRemoveOutlined';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport SegmentIcon from '@mui/icons-material/Segment';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport BlockIcon from '@mui/icons-material/Block';\nimport LockIcon from '@mui/icons-material/Lock';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { UPDATE_AUTHORITIES } from '../utils/grapeTools/mintverification';\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES,\n    FREE_RPC_ENDPOINT, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY,\n    GRAPE_TREASURY\n} from '../utils/grapeTools/constants';\n\nimport ItemOffers from './ItemOffers';\nimport ShareSocialURL from '../utils/grapeTools/ShareUrl';\nimport { MakeLinkableAddress, ValidateAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport \"../App.less\";\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { decodeMetadata } from '../utils/auctionHouse/helpers/schema';\nimport GrapeIcon from \"../components/static/GrapeIcon\";\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n  \n\ninterface ExpandMoreProps extends IconButtonProps {\n    expand: boolean;\n  }\n  \n  const ExpandMore = styled((props: ExpandMoreProps) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction GrapeVerified(props:any){\n    const [loading, setLoading] = React.useState(false);\n    const [verifiedState, setVerifiedState] = React.useState(false);\n    const [verifiedPK, setVerificationPK] = React.useState(null);\n    const [collectionImage, setCollectionImage] = React.useState(null);\n    const [collectionName, setCollectionName] = React.useState(props.symbol);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    let updateAuthority = props?.updateAuthority;\n    let grape_verified = -1;\n\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async (collectionAddress:string) => {\n            try {\n                let mint_address = new PublicKey(collectionAddress)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                setCollectionName(metadata.name);\n                setCollectionImage(metadata.image) \n\n                return null;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n    React.useEffect(() => { \n        try{\n            if (updateAuthority && !loading){\n                let verified = false;\n                let verified_creator = false;\n\n                // first stage verification\n                for (var item of updateAuthority.data.creators){\n                    if (item.address === updateAuthority.updateAuthority)\n                        if (item.verified === 1){\n                            // now validate verify_collection in the collection results\n                            verified_creator = true;\n                        }\n                }\n                // second stage verification\n                if (verified_creator){\n                    if (updateAuthority?.collection?.verified){\n                        if (updateAuthority.collection.verified === 1){\n                            //console.log(\"updateAuthority: \"+JSON.stringify(updateAuthority));\n                            if (ValidateAddress(updateAuthority.collection.key)){\n                                setVerifiedState(true);\n                                if (!collectionImage){\n                                    setVerificationPK(updateAuthority.collection.key)\n                                    getCollectionData(updateAuthority.collection.key);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // third stage verification (coming soon)\n                grape_verified = UPDATE_AUTHORITIES.indexOf(updateAuthority);\n                //grape_verified = 1;\n                if (grape_verified > -1){\n\n                }\n            }\n        }catch(e){console.log(\"ERR: \"+e)}\n    }, [updateAuthority]);\n\n    if (verifiedState){\n        \n        return (\n            <Tooltip title={`${props.symbol}: Update Authority/Creator Verified on Metaplex`} placement=\"top\">\n                <Button \n                    href={`${GRAPE_PREVIEW}${verifiedPK}`}\n                    sx={{color:'white', borderRadius:'24px'}}>\n                    {collectionName}\n                    <Avatar \n                        component={Paper} \n                        elevation={4}\n                        alt={updateAuthority.data.symbol}\n                        src={collectionImage}\n                        sx={{ width: 20, height: 20, bgcolor: \"#222\",ml:1}}\n                    />\n                    {grape_verified > -1 &&\n                        <VerifiedIcon sx={{fontSize:\"20px\",ml:1}} />\n                    }\n                </Button>\n            </Tooltip>\n        );\n    \n    } else{\n        return <>{collectionName}</>\n    } \n}\n\nfunction SocialLikes(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isLiked, setIsLiked] = React.useState(false);\n    const [loadingLikedState, setLoadingLikedState] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const {publicKey} = useWallet();\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n\n    const cyberConnect = new CyberConnect({\n        namespace: NAME_SPACE,\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    // Get the current user followings and followers list\n  const initFollowListInfo = async () => {\n    if (!mint) {\n      return;\n    }\n    \n    setLoading(true);\n    const resp = await followListInfoQuery({\n        address:mint,\n        namespace: '',\n        network: NETWORK,\n        followingFirst: FIRST,\n        followerFirst: FIRST,\n    });\n    if (resp) {\n      setFollowListInfo(resp);\n    }\n    setLoading(false);\n  };\n\n    const getLikeStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingLikedState(true);\n                setIsLiked(false);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) {  \n                        if ((socialconnection?.connections[0].type.toString() === \"LIKE\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsLiked(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingLikedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'LIKE',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    const likeWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow,'', ConnectionType.LIKE)\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    const likeWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getLikeStatus();\n    };\n    \n    React.useEffect(() => {\n        initFollowListInfo();\n        getLikeStatus();\n    },[]);\n\n    return ( \n        <>\n        {loadingLikedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isLiked ?  \n                    <Tooltip title=\"Unlike\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteIcon sx={{fontSize:'24px', color:'red'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <Tooltip title=\"Like\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => likeWalletConnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'white'}}\n                            >\n                            <FavoriteBorderIcon sx={{fontSize:'24px'}} /> \n                            {followListInfo?.liked && +followListInfo?.liked > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.liked}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction SocialFlags(props: any){\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFlagged, setIsFlagged] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [loadingFlaggedState, setLoadingFlaggedState] = React.useState(false);\n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const [reportalertopen, setReportAlertOpen] = React.useState(false);\n    \n    const { publicKey, sendTransaction } = useWallet();\n\n    const freeconnection = new Connection(FREE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    \n    const [followListInfo, setFollowListInfo] = useState<FollowListInfoResp | null>(null);\n    const solanaProvider = useWallet();\n    const mint = props.mint;\n    \n    const NAME_SPACE = 'Grape';\n    const NETWORK = Network.SOLANA;\n    const FIRST = 10; // The number of users in followings/followers list for each fetch\n    \n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const handleAlertReportClose = () => {\n        setReportAlertOpen(false);\n    };\n\n    const getFlagStatus = async () => {\n        \n        if (publicKey){\n            if (mint){\n                setLoadingFlaggedState(true);\n                let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), mint);\n                if (socialconnection){\n                    //if (socialconnection?.identity){\n                    if (socialconnection?.connections[0]?.followStatus) { \n                        if ((socialconnection?.connections[0].type.toString() === \"REPORT\")||\n                            (socialconnection?.connections[0].type.toString() === \"FOLLOW\"))\n                            setIsFlagged(socialconnection?.connections[0].followStatus.isFollowing);\n                    }\n                }\n                setLoadingFlaggedState(false);\n            }\n            \n        }\n    }\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'REPORT',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n\n        return resp;\n    };\n\n    // Get the current user followings and followers list\n    const initFollowListInfo = async () => {\n        if (!mint) {\n        return;\n        }\n        \n        setLoading(true);\n        const resp = await followListInfoQuery({\n            address:mint,\n            namespace: '',\n            network: NETWORK,\n            followingFirst: FIRST,\n            followerFirst: FIRST,\n        });\n        if (resp) {\n        setFollowListInfo(resp);\n        }\n        setLoading(false);\n    };\n\n    function handleFlagMintTransaction(mint:string){\n        const tokenMintAddress = TOKEN_VERIFICATION_ADDRESS;\n        const tokenMintName = 'GRAPE';\n        const to = GRAPE_TREASURY;\n        const amount = 100;\n        const notes = mint;\n        flatMintTransaction(tokenMintAddress, tokenMintName, to, amount, notes)\n    }\n\n    async function flatMintTransaction(tokenMintAddress: string, tokenMintName: string, to: string, amount: number, notes:string) {\n        const fromWallet = publicKey;\n        const toaddress = to;\n        const toWallet = new PublicKey(to);\n        const mintPubkey = new PublicKey(tokenMintAddress);\n        const amountToSend = +amount;\n        const tokenAccount = new PublicKey(mintPubkey);\n        \n        handleAlertReportClose();\n\n        let GRAPE_TT_MEMO = {\n            state:1, // status\n            type:'REPORT', // AMA - SETUP \n            ref:'GRAPE.ART', // SOURCE\n            notes:notes\n        };\n        \n        \n        if (tokenMintAddress == \"So11111111111111111111111111111111111111112\"){ // Check if SOL\n            const decimals = 9;\n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const transaction = new Transaction()\n            .add(\n                SystemProgram.transfer({\n                    fromPubkey: fromWallet,\n                    toPubkey: toWallet,\n                    lamports: adjustedAmountToSend,\n                })\n            ).add(\n                new TransactionInstruction({\n                    keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                    data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                })\n            );\n            try{\n                enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                const signature = await sendTransaction(transaction, freeconnection);\n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signature, 'processed');\n                closeSnackbar(cnfrmkey);\n                const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank'  sx={{color:'white'}}>\n                            Signature: {signature}\n                        </Button>\n                );\n\n                flagWalletConnect(mint);\n\n                enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n            }catch(e){\n                enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            } \n        } else{\n            const accountInfo = await connection.getParsedAccountInfo(tokenAccount);\n            const accountParsed = JSON.parse(JSON.stringify(accountInfo.value.data));\n            const decimals = accountParsed.parsed.info.decimals;\n\n            let fromAta = await Token.getAssociatedTokenAddress( // calculate from ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                fromWallet // from owner\n            );\n            \n            let toAta = await Token.getAssociatedTokenAddress( // calculate to ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                toWallet // to owner\n            );\n            \n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const receiverAccount = await connection.getAccountInfo(toAta);\n            \n            if (receiverAccount === null) { // initialize token\n                const transaction = new Transaction()\n                .add(\n                    Token.createAssociatedTokenAccountInstruction(\n                        ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                        TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                        mintPubkey, // mint\n                        toAta, // ata\n                        toWallet, // owner of token account\n                        fromWallet // fee payer\n                    )\n                )\n                .add(\n                    Token.createTransferInstruction(\n                        TOKEN_PROGRAM_ID,\n                        fromAta,\n                        toAta,\n                        publicKey,\n                        [],\n                        adjustedAmountToSend,\n                    )\n                ).add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n\n                    flagWalletConnect(mint);\n\n                    enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            } else{ // token already in wallet\n                const transaction = new Transaction()\n                .add(\n                    Token.createTransferInstruction(\n                    TOKEN_PROGRAM_ID,\n                    fromAta,\n                    toAta,\n                    publicKey,\n                    [],\n                    adjustedAmountToSend,\n                    )\n                )\n                .add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n\n                    flagWalletConnect(mint);\n\n                    enqueueSnackbar(`Sent ${amountToSend} ${tokenMintName} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            }\n        }\n    }\n\n    const flagWalletConnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        // Show a prompt here in order to flag\n\n            let promise = await cyberConnect.connect(tofollow,'', ConnectionType.REPORT)\n            .catch(function (error) {\n                console.log(error);\n            });\n            initFollowListInfo();\n            getFlagStatus();\n    };\n    const flagWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        initFollowListInfo();\n        getFlagStatus();\n    };\n\n    React.useEffect(() => {\n        initFollowListInfo();\n        getFlagStatus();\n    },[]);\n    \n    return ( \n        <>\n        {loadingFlaggedState ?\n            <Button \n                sx={{borderRadius:'24px'}}\n            >\n                <CircularProgress sx={{p:'14px',m:-2}} />\n            </Button>\n        :\n            <>\n            {isFlagged ?  \n                    <Tooltip title=\"Unflag\">\n                        <Button \n                            variant=\"text\" \n                            onClick={() => flagWalletDisconnect(mint)}\n                            size=\"small\"\n                            className=\"profileAvatarIcon\"\n                            sx={{borderRadius:'24px', color:'yellow'}}\n                            >\n                            <FlagIcon sx={{fontSize:'24px'}} />\n                            {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                <Typography variant=\"caption\" sx={{ml:1}}>\n                                    {followListInfo?.reported}\n                                </Typography>\n                            :<></>}\n                        </Button>\n                    </Tooltip>\n                :\n                    <>\n                        <BootstrapDialog \n                            fullWidth={true}\n                            maxWidth={\"sm\"}\n                            PaperProps={{\n                                style: {\n                                    background: '#13151C',\n                                    border: '1px solid rgba(255,255,255,0.05)',\n                                    borderTop: '1px solid rgba(255,255,255,0.1)',\n                                    borderRadius: '20px'\n                                }\n                            }}\n                            open={reportalertopen}\n                            onClose={handleAlertReportClose}\n                            aria-labelledby=\"alert-bn-dialog-title\"\n                            aria-describedby=\"alert-bn-dialog-description\"\n                            >\n                            <DialogTitle id=\"alert-bn-dialog-title\">\n                                <Typography>\n                                    REPORT\n                                </Typography>\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id=\"alert-bn-dialog-description\">\n                                <br />\n                                <Alert \n                                    severity=\"info\" variant=\"outlined\"\n                                    sx={{backgroundColor:'black'}}\n                                    >\n                                    Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                    <Typography sx={{textAlign:'center'}}>\n                                        You are about to report this mint, in order to minimize unecessary reporting there is a <GrapeIcon sx={{fontSize:'12px'}} />100 fee to process this request\n                                    </Typography>\n                                </Alert>\n                                \n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleAlertReportClose}>Cancel</Button>\n                                <Button \n                                    onClick={() => handleFlagMintTransaction(mint)}\n                                    autoFocus>\n                                Accept\n                                </Button>\n                            </DialogActions>\n                        </BootstrapDialog>\n\n                        <Tooltip title=\"Flag\">\n            \n                            <Button \n                                variant=\"text\" \n                                onClick={() => setReportAlertOpen(true)}\n                                size=\"small\"\n                                className=\"profileAvatarIcon\"\n                                sx={{borderRadius:'24px', color:'white'}}\n                                >\n                                <EmojiFlagsIcon sx={{fontSize:'24px'}} />\n                                {followListInfo?.reported && +followListInfo?.reported > 0 ?\n                                    <Typography variant=\"caption\" sx={{ml:1}}>\n                                        {followListInfo?.reported}\n                                    </Typography>\n                                :<></>}\n                            </Button>\n                        </Tooltip>\n                    </>\n            }\n            </>\n        }\n        </>\n    );\n}\n\nfunction GalleryItemMeta(props: any) {\n    const collectionrawprimer = props.collectionrawdata.meta_primer || [];\n    const collectionrawdata = props.collectionrawdata.meta_final || [];\n    const collectionitem = props.collectionitem.collectionmeta || [];\n    const [mint, setMint] = React.useState(props.mint || null);\n    const [refreshOwner, setRefreshOwner] = React.useState(false);\n    const [loadingOwner, setLoadingOwner] = React.useState(false);\n    const [mintAta, setMintATA] = React.useState(null);\n    const [tokenOwners, setTokenOwners] = React.useState(null);\n    const [grape_member_balance, setGrapeMemberBalance] = React.useState(null);\n    const [sol_portfolio_balance, setSolPortfolioBalance] = React.useState(0);\n    const [grape_weighted_score, setGrapeWeightedScore] = React.useState(0);\n    const [grape_governance_balance, setGrapeGovernanceBalance] = React.useState(null);\n    const [grape_offer_threshhold, setGrapeOfferThreshhold] = React.useState(TOKEN_VERIFICATION_AMOUNT);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const [grape_whitelisted, setGrapeWhitelisted] = React.useState(null);\n    const [open_creator_collapse, setOpenCreatorCollapse] = React.useState(false);\n    const [open_attribute_collapse, setOpenAttributeCollapse] = React.useState(false);\n    const [currentImage, setCurrentImage] = useState(0);\n    const [isViewerOpen, setIsViewerOpen] = useState(false);\n    const [collectionItemImages, setCollectionItemImages] = useState([]);\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [open_meta, setOpenMeta] = React.useState(false);\n    const [open_offers, setOpenOffers] = React.useState(false);\n    const [open_description, setOpenDescription] = React.useState(true);\n    const [open_traits, setOpenTraits] = React.useState(true);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const {publicKey, sendTransaction} = useWallet();\n    const [solanaDomain, setSolanaDomain] = React.useState(null);\n    const [isFollowing, setIsFollowing] = React.useState(false);\n    const [loadingFollowState, setLoadingFollowState] = React.useState(false);\n    const navigate = useNavigate();\n    const { enqueueSnackbar, closeSnackbar} = useSnackbar();\n    \n    const [searchAddrInfo, setSearchAddrInfo] = useState<SearchUserInfoResp | null>(null);\n    const solanaProvider = useWallet();\n\n    const cyberConnect = new CyberConnect({\n        namespace: 'Grape',\n        env: Env.PRODUCTION,\n        chain: Blockchain.SOLANA,\n        provider: solanaProvider,\n        chainRef: solana.SOLANA_MAINNET_CHAIN_REF,\n        signingMessageEntity: 'Grape' || 'CyberConnect',\n    });\n\n    const fetchSearchAddrInfo = async (fromAddr:string, toAddr: string) => {\n        const resp = await searchUserInfoQuery({\n            fromAddr:fromAddr,\n            toAddr,\n            namespace: 'Grape',\n            network: Network.SOLANA,\n            type: 'FOLLOW',\n        });\n        if (resp) {\n            setSearchAddrInfo(resp);\n        }\n  \n        return resp;\n    };\n\n    const followWalletConnect = async (followAddress:string, solanaAddress: string) => {\n        // address:string, alias:string\n        let tofollow = followAddress;   \n        let promise = await cyberConnect.connect(tofollow, solanaAddress)\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    const followWalletDisconnect = async (followAddress:string) => {\n        // address:string, alias:string\n        let promise = await cyberConnect.disconnect(followAddress.toString())\n        .catch(function (error) {\n            console.log(error);\n        });\n        if (tokenOwners)\n            getFollowStatus(tokenOwners);\n    };\n    \n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n        \n    const salePrice = props.salePrice || null;\n    //console.log('GalleryItemMeta salePrice:', salePrice);\n    const handleClickOpenTraits = () => {\n        setOpenTraits(!open_traits);\n    }\n\n    const handleClickOpenMeta = () => {\n        setOpenMeta(!open_meta);\n    };\n\n    const handleClickOpenOffers = () => {\n        setOpenOffers(!open_offers);\n    };\n    const handleClickOpenDescription = () => {\n        setOpenDescription(!open_description);\n    };\n\n    const handleSendItem = () => {\n        \n    };\n\n    const openImageViewer = useCallback((index) => {\n        setCurrentImage(index);\n        setIsViewerOpen(true);\n    }, []);\n\n    const closeImageViewer = () => {\n        setCurrentImage(0);\n        setIsViewerOpen(false);\n    };\n\n    // after owner we can get the signatures for the \n\n    const getGovernanceBalance = async () => {\n        try{\n            const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n            const realmId = new PublicKey(TOKEN_REALM_ID);\n            const governingTokenMint = new PublicKey(TOKEN_VERIFICATION_ADDRESS);\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                ggoconnection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            \n            return ownerRecords;\n        } catch(e){console.log(\"ERR: \"+e);}\n    }\n\n    const fetchBalances = async () => {\n        const body = {\n          method: \"getTokenAccountsByOwner\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString(),\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n    \n          const response = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n          })\n          const json = await response.json();\n          const resultValues = json.result.value\n          return resultValues;\n    \n      };\n\n    const GetTokenOwner = async (tokenAddress:any) => {\n        //alert(\"HERE!\")\n        //let token_owner = await connection.getTokenLargestAccounts(new PublicKey(tokenAddress));//  Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"Token Owner: \"+JSON.stringify(token_owner));\n\n        const body = {\n          method: \"getAccountInfo\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            tokenAddress,\n            {\"encoding\":\"jsonParsed\",\n            \"commitment\":\"confirmed\"}\n            // add <object> (optional) Commitment\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const GetLargestTokenAccounts = async () => {\n        const body = {\n          method: \"getTokenLargestAccounts\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            mint,\n            {\"commitment\":\"confirmed\"}\n          ],\n          \"id\":1,\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n    };\n\n    const fetchTokenAccountData = async () => {\n        let [flargestTokenAccounts] = await Promise.all([GetLargestTokenAccounts()]);\n        //console.log(\"settings setMintAta: \"+JSON.stringify(flargestTokenAccounts));\n        if (+flargestTokenAccounts[0].amount === 1){ // some NFTS are amount > 1\n            setMintATA(flargestTokenAccounts[0].address);\n        }\n    }\n\n    const fetchSOLBalance = async () => {\n        const body = {\n          method: \"getBalance\",\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString()\n          ],\n          id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n        };\n    \n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result.value;\n        return resultValues;\n    };\n\n    const getFollowStatus = async (towner:string) => {\n        \n        if (publicKey){\n            if (towner){\n                //if (tokenOwners.data.parsed.info.owner){\n                    setLoadingFollowState(true);\n                    let socialconnection = await fetchSearchAddrInfo(publicKey.toBase58(), towner);\n                    if (socialconnection){\n                        //if (socialconnection?.identity){\n                        if (socialconnection?.connections[0]?.followStatus) {  \n                            setIsFollowing(socialconnection?.connections[0].followStatus.isFollowing);\n                        }\n                    }\n                    setLoadingFollowState(false);\n                //}\n            }\n        }\n    }\n\n    const getMintOwner = async () => {\n        setLoadingOwner(true);\n        let [tokenowner] = await Promise.all([GetTokenOwner(mintAta)]);\n        setTokenOwners(tokenowner);\n        fetchSolanaDomain(tokenowner?.data.parsed.info.owner);\n        getFollowStatus(tokenowner?.data.parsed.info.owner);\n        setLoadingOwner(false);\n    }\n\n    React.useEffect(() => {\n        if ((publicKey)&&(tokenOwners)){\n            getFollowStatus(tokenOwners?.data.parsed.info.owner);\n        }\n    }, [publicKey]);\n\n    const fetchTokenAccountOwnerHoldings = async () => {\n        if (publicKey){ \n            let [sol_rsp, portfolio_rsp, governance_rsp] = await Promise.all([fetchSOLBalance(), fetchBalances(), getGovernanceBalance()]);\n            //setGrapeWhitelisted(GRAPE_WHITELIST.indexOf(publicKey.toString()));\n            if (sol_rsp){ // use sol calc for balance\n                setSolPortfolioBalance(parseFloat(new TokenAmount(sol_rsp, 9).format()));\n            }\n            try{\n\n                if (governance_rsp?.account?.governingTokenDepositAmount){\n                    setGrapeGovernanceBalance(governance_rsp?.account?.governingTokenDepositAmount);\n                }else{    \n                    setGrapeGovernanceBalance(0);\n                }\n            }catch(e){\n                setGrapeGovernanceBalance(0);\n                console.log(\"ERR: \"+e);\n            }\n\n            try{\n                setGrapeMemberBalance(0);\n                let final_weighted_score = 0;\n                portfolio_rsp.map((token:any) => {\n                    let mint = token.account.data.parsed.info.mint;\n                    let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n                    if (mint === '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){ // check if wallet has sol\n                        if (governance_rsp?.account?.governingTokenDepositAmount){\n                            const total_grape = +balance + (+governance_rsp?.account?.governingTokenDepositAmount)/1000000\n                            setGrapeMemberBalance(total_grape);\n                            if (+total_grape >= 1000){\n                                const weighted_score = total_grape/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        } else{\n                            setGrapeMemberBalance(balance);\n                            if (+balance >= 1000){\n                                const weighted_score = +balance/1000;\n                                if (weighted_score<=0)\n                                    final_weighted_score = 0;\n                                else if (weighted_score<6)\n                                    final_weighted_score = 1; \n                                else if (weighted_score<25)\n                                    final_weighted_score = 2; \n                                else if (weighted_score<50)\n                                    final_weighted_score = 3; \n                                else if (weighted_score>=50)\n                                    final_weighted_score = 4; \n                                setGrapeWeightedScore(final_weighted_score);\n                            }\n                        }\n                    }\n                });\n            } catch(e){console.log(\"ERR: \"+e);}\n            \n        }\n    }\n\n    const HandleSetAvatar = async () => {\n        try{\n            const transaction = await createSetProfilePictureTransaction(publicKey, new PublicKey(mint), new PublicKey(mintAta));\n            //console.log(\"Transaction: \"+JSON.stringify(transaction));\n            enqueueSnackbar(`Preparing set your avatar with ${mint} mint`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Your avatar has been set `,{ variant: 'success', action:snackaction });\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n        } \n    }\n\n    const SearchForMint = (props: any) => {\n        const [open_dialog, setOpenPKDialog] = React.useState(false);\n        const [mintKey, setInputMintValue] = React.useState('');\n    \n        const handleClickOpenDialog = () => {\n            setOpenPKDialog(true);\n        };\n        \n        const handleCloseDialog = () => {\n            setOpenPKDialog(false);\n        };\n        \n        function HandleMintAddressSubmit(event: any) {\n            event.preventDefault();\n            if ((mintKey.length >= 32) && \n                (mintKey.length <= 44)){\n                // WalletId is base58 validate the type too later on\n                props.setMintPubkey(mintKey);\n                handleCloseDialog();\n            } else{\n                // Invalid Wallet ID\n                console.log(\"INVALID MINT\");\n            }\n        }\n        \n        return (\n          <React.Fragment>\n            <Button onClick={handleClickOpenDialog}\n                sx={{borderRadius:'24px',color:'white'}}\n            >\n                <SearchIcon />\n            </Button> \n             \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"md\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    }}\n                >\n                <DialogTitle>\n                    Mint\n                </DialogTitle>\n                <form onSubmit={HandleMintAddressSubmit}>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            autoComplete='off'\n                            margin=\"dense\"\n                            id=\"preview_mint_key\"\n                            label=\"Paste a mint address\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            value={mintKey}\n                            onChange={(e) => setInputMintValue(e.target.value)}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDialog}>Cancel</Button>\n                        <Button \n                            type=\"submit\"\n                            variant=\"text\" \n                            title=\"GO\">\n                                Go\n                        </Button>\n                    </DialogActions>\n                </form>\n            </BootstrapDialog>   \n          </React.Fragment>\n        );\n    }\n\n    const fetchSolanaDomain = async (ownerPublicKey:string) => {\n        if (ownerPublicKey){\n            //console.log(\"checking domains for \"+ownerPublicKey);\n            const domain = await findDisplayName(ggoconnection, ownerPublicKey);\n            if (domain){\n                if (domain[0] !== ownerPublicKey)\n                    setSolanaDomain(domain[0]);\n            }\n        }\n    }\n    \n    React.useEffect(() => { \n        if (refreshOwner){\n            //setTokenOwners(null);\n            props.setRefresh(true);\n        }\n        if ((mintAta)||(refreshOwner)){\n            getMintOwner();\n            fetchTokenAccountOwnerHoldings();\n        }\n        if (refreshOwner){\n            setRefreshOwner(!refreshOwner);\n        }\n    }, [mintAta, publicKey, refreshOwner]);\n    \n    React.useEffect(() => { \n        try{\n            ( collectionitem?.image && \n                collectionItemImages.push(collectionitem.image)\n            )\n        } catch(e){\n            console.log(\"ERR: \"+e);\n        }\n        \n        if (!tokenOwners){\n            fetchTokenAccountData();\n        }\n    }, [mint]);\n\n    try{\n        return (\n            <Grid>\n                <Helmet>\n                    <title>{`${collectionitem.name} | Grape Social. Stateless. Marketplace.`}</title>\n                    <meta property=\"og:title\" content={`${collectionitem.name} @Grape`} />\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:url\" content={window.location.href} />\n                    <meta property=\"og:image\" content={collectionitem.image} />\n                    <meta property=\"og:description\" content={collectionitem.name} />\n                    <meta name=\"theme-color\" content=\"#000000\" />\n\n                    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta name=\"twitter:site\" content={`${collectionitem.name} @Grape`} />\n                    <meta name=\"twitter:title\" content={collectionitem.name} />\n                    <meta name=\"twitter:description\" content={collectionitem.name} />\n                    <meta name=\"twitter:image\" content={collectionitem.image} />\n                </Helmet>\n\n                {isViewerOpen && (\n                    <ImageViewer\n                    src={ collectionItemImages }\n                    currentIndex={ currentImage }\n                    disableScroll={ false }\n                    closeOnClickOutside={ true }\n                    onClose={ closeImageViewer }\n                    />\n                )}\n\n                <Box\n                    sx={{\n                        mt: 2,\n                        \n                    }}\n                >\n                    <Box\n                        sx={{\n                            borderRadius: '17px',\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            mb: 4,\n                            pl: 3,\n                            pr: 3,\n                            pt: 1,\n                            pb: 1\n                        }}\n                        >\n                            <Grid container direction=\"row\" spacing={{ xs: 2, md: 3 }}>\n                                <Grid item xs={6} md={8}>\n                                    <ButtonGroup variant=\"text\">\n                                        <Button\n                                            className=\"button icon-left\"\n                                            onClick={() => navigate(-1)}\n                                            sx={{color:'white',borderRadius:'24px'}}\n                                        >\n                                            <ArrowBackIosIcon />\n                                            Back\n                                        </Button>\n                                        <SearchForMint setMintPubkey={props.setMintPubkey} />\n                                    </ButtonGroup>\n                                </Grid>\n                                <Grid item  xs={6} md={4}>\n                                    <Box display=\"flex\" justifyContent=\"flex-end\">\n                                        <ButtonGroup variant=\"text\">\n                                            <SocialLikes mint={mint} />\n                                            <SocialFlags mint={mint} />\n                                                <Grid item sx={{borderRadius:'24px',background:'none'}}>\n                                                    <Avatar \n                                                        component={Paper} \n                                                        elevation={4}\n                                                        alt={collectionitem.name}\n                                                        src={collectionitem.image}\n                                                        sx={{ width: 30, height: 30, bgcolor: \"#222\", ml:1,mr:0.5}}\n                                                    ></Avatar>\n                                                </Grid>\n                                                <Grid item>        \n                                                    <ShareSocialURL fontSize={'24px'} url={window.location.href} title={'Grape DEX | '+trimAddress(mint,4)} />\n                                                </Grid>\n\n                                        </ButtonGroup>\n                                    </Box>\n                                </Grid>\n                            </Grid> \n                    </Box>    \n                    <Box\n                        sx={{\n                            background: 'rgba(0, 0, 0, 0.6)',\n                            borderRadius: '17px',\n                            p:3,\n                            pl:4,\n                            pr:4\n                        }} \n                    >              \n                        \n                        <Grid container spacing={{ xs: 2, md: 3 }} >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Box\n                                    sx={{ \n                                        width: '100%'\n                                    }}\n                                > \n                                    <List\n                                        sx={{ \n                                            width: '100%'\n                                        }}\n                                        component=\"nav\"\n                                        >\n                                        \n                                            <ListItemText>\n                                                <Grid \n                                                    container \n                                                    spacing={2}\n                                                    direction=\"column\"\n                                                    alignItems=\"center\"\n                                                    justifyContent=\"center\">\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                                            <ListItemButton\n                                                                sx={{\n                                                                    width:'100%',\n                                                                    borderRadius:'25px',\n                                                                    p: '2px'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    src={`${collectionitem.image}`}\n                                                                    srcSet={`${collectionitem.image}`}\n                                                                    alt={collectionitem.name}\n                                                                    onClick={ () => openImageViewer(0) }\n                                                                    loading=\"lazy\"\n                                                                    height=\"auto\"\n                                                                    style={{\n                                                                        width:'100%',\n                                                                        borderRadius:'24px'\n                                                                    }}\n                                                                />\n                                                            </ListItemButton>\n                                                        </Grid>\n                                                        <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center', mt:'-15px'}}>\n                                                            <Button\n                                                                size=\"small\" variant=\"text\" \n                                                                onClick={ () => openImageViewer(0) }\n                                                                sx={{color:'white',borderRadius:'24px'}}\n                                                            >\n                                                                Preview <OpenInFullIcon sx={{ fontSize:'16px', ml:1 }}/></Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                \n                                            </ListItemText>\n                                        \n                                    </List>\n                                </Box>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                    }}\n                                    component=\"nav\"\n                                >\n\n                                    <Box\n                                        sx={{ \n                                            p: 1,\n                                            mb: 3, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        \n                                            <ListItemButton onClick={handleClickOpenDescription}\n                                                sx={{borderRadius:'20px'}}\n                                            >\n                                                <ListItemIcon>\n                                                <SegmentIcon />\n                                                </ListItemIcon>\n                                                <ListItemText primary=\"Description\" />\n                                                {open_description ? <ExpandLess /> : <ExpandMoreIcon />}\n                                            </ListItemButton>\n                                            <Collapse in={open_description} timeout=\"auto\" unmountOnExit>\n                                                <List component=\"div\" disablePadding>\n                                                    <ListItemText primary={collectionitem?.description} sx={{p:2}}  />\n                                                </List>\n                                            </Collapse>\n                                            \n                                    </Box>\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    >         \n                                        \n                                        <ListItemButton onClick={handleClickOpenMeta}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Details\" />\n                                            {open_meta ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_meta} timeout=\"auto\" unmountOnExit>\n                                            <List component=\"div\" sx={{ pl: 4 }}>\n                                                <ListItemText>\n\n                                                <TableContainer component={Paper}\n                                                    sx={{\n                                                        background: 'rgba(255,255,255,0.015)',\n                                                        boxShadow: 3,\n                                                        borderRadius: '20px'\n                                                    }}\n                                                >\n                                                    <StyledTable \n                                                        sx={{ }} \n                                                        size=\"small\" \n                                                        aria-label=\"NFT Meta\">\n                                                        \n                                                        {collectionitem?.attributes ?\n                                                            <React.Fragment>\n\n                                                                {collectionitem.attributes?.length  && collectionitem.attributes.length > 0 ? (\n                                                                    <></>\n                                                                    )\n                                                                :\n                                                                <>\n                                                                    <TableRow\n                                                                        onClick={() => setOpenAttributeCollapse(!open_attribute_collapse)}\n                                                                    >\n                                                                        <TableCell>\n                                                                        Attributes:\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {collectionitem.attributes.length}\n                                                                            <IconButton\n                                                                                aria-label=\"expand row\"\n                                                                                size=\"small\"\n                                                                                sx={{ textAlign:\"right\" }}\n                                                                            >\n                                                                                {open_attribute_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                            </IconButton>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    <TableRow>\n                                                                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                            <Collapse in={open_attribute_collapse} timeout=\"auto\" unmountOnExit>\n                                                                                <Box sx={{ margin: 1 }}>\n                                                                                    <Table size=\"small\" aria-label=\"purchases\">\n\n                                                                                        {collectionitem.attributes.length > 0 &&\n                                                                                        <TableHead>\n                                                                                            <TableRow>\n                                                                                                <TableCell><Typography variant=\"subtitle1\">Attribute</Typography></TableCell>\n                                                                                                <TableCell><Typography variant=\"subtitle1\" >Type</Typography></TableCell>\n                                                                                            </TableRow>\n                                                                                        </TableHead>\n                                                                                        }\n                                                                                        {collectionitem.attributes.length > 0 ? collectionitem.attributes?.map((item: any) => (\n                                                                                            <TableRow>\n                                                                                                <TableCell>{item?.trait_type}</TableCell>\n                                                                                                <TableCell>{item?.value}</TableCell>\n                                                                                            </TableRow>\n                                                                                        ))  \n                                                                                        :\n                                                                                        <TableRow>\n                                                                                            <TableCell>Attributes:</TableCell>\n                                                                                            <TableCell>\n                                                                                            {collectionitem.attributes.itemType?.length > 0 &&\n                                                                                                <Tooltip title={`Type`}>\n                                                                                                <Chip label={collectionitem.attributes?.itemType} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.category?.length > 0 &&\n                                                                                                <Tooltip title={`Category`}>\n                                                                                                <Chip label={collectionitem.attributes?.category} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.rarity?.length > 0 &&\n                                                                                                <Tooltip title={`Rarity`}>\n                                                                                                <Chip label={collectionitem.attributes?.rarity} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.spec?.length > 0 &&\n                                                                                                <Tooltip title={`Spec`}>\n                                                                                                <Chip label={collectionitem.attributes?.spec} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            {collectionitem.attributes.class?.length > 0 &&\n                                                                                                <Tooltip title={`Class`}>\n                                                                                                <Chip label={collectionitem.attributes?.class} variant=\"outlined\" />\n                                                                                                </Tooltip>\n                                                                                            }\n                                                                                            </TableCell>\n                                                                                        </TableRow> \n                                                                                        }\n                                                                                    </Table>\n                                                                                </Box>\n                                                                            </Collapse>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </>\n                                                                }\n                                                            </React.Fragment>\n                                                        : null }\n\n                                                        <TableRow>\n                                                            <TableCell>Mint:</TableCell>\n                                                            <TableCell>\n                                                                <MakeLinkableAddress addr={mint} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        <TableRow>\n                                                            <TableCell>Owner:</TableCell>\n                                                            <TableCell>\n                                                                \n                                                            {tokenOwners && (\n                                                                <MakeLinkableAddress addr={tokenOwners?.data.parsed.info.owner} trim={5} hasextlink={true} hascopy={true} fontsize={14} />\n                                                            )}  \n                                                            </TableCell>\n                                                        </TableRow>\n                                                        \n                                                        {collectionitem?.symbol ? \n                                                            <TableRow>\n                                                                <TableCell>Symbol:</TableCell>\n                                                                <TableCell>{collectionitem.symbol}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem.seller_fee_basis_points > 0 ?\n                                                            <TableRow>\n                                                                <TableCell>Royalty:</TableCell>\n                                                                <TableCell>\n                                                                {(+collectionitem.seller_fee_basis_points/100).toFixed(2)}%\n                                                                <Tooltip title={`This is the rate at which royalties are shared with creators if this asset is sold using the Metaplex Auction program`}><HelpOutlineIcon sx={{ fontSize:16, ml: 1  }}/></Tooltip>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n    {collectionitem.properties?.creators ?\n                                                            <React.Fragment>\n                                                                <TableRow\n                                                                    onClick={() => setOpenCreatorCollapse(!open_creator_collapse)}\n                                                                >\n                                                                    <TableCell>Creators:</TableCell>\n                                                                    <TableCell>\n                                                                        {collectionitem.properties.creators.length}\n                                                                        <IconButton\n                                                                            aria-label=\"expand row\"\n                                                                            size=\"small\"\n                                                                            sx={{ textAlign:\"right\" }}\n                                                                        >\n                                                                            {open_creator_collapse ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                                                        </IconButton>\n                                                                        \n                                                                    </TableCell>\n                                                                </TableRow>\n                                                                <TableRow>\n                                                                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                                                        <Collapse in={open_creator_collapse} timeout=\"auto\" unmountOnExit>\n                                                                            <Box sx={{ margin: 1 }}>\n                                                                                <Table size=\"small\" aria-label=\"purchases\">\n                                                                                    <TableHead>\n                                                                                        <TableRow>\n                                                                                            <TableCell><Typography variant=\"caption\">Creator Address</Typography></TableCell>\n                                                                                            <TableCell align=\"right\"><Typography variant=\"caption\">% Royalty</Typography></TableCell>\n                                                                                        </TableRow>\n                                                                                    </TableHead>\n                                                                                    {collectionitem.properties.creators.length > 0 && collectionitem.properties.creators.map((item: any) => (\n                                                                                        <TableRow>\n                                                                                            <TableCell>\n                                                                                            <Button\n                                                                                                title=\"Visit Profile\"\n                                                                                                component={Link} \n                                                                                                to={`${GRAPE_PROFILE}${item.address}`}\n                                                                                            >\n                                                                                                <AccountCircleOutlinedIcon sx={{fontSize:'14px'}}/>\n                                                                                            </Button>\n                                                                                                <MakeLinkableAddress addr={item.address} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                                            </TableCell>\n                                                                                            <TableCell align=\"right\">{item.share}%</TableCell>\n                                                                                        </TableRow>\n                                                                                    ))}\n                                                                                </Table>\n                                                                            </Box>\n                                                                        </Collapse>\n                                                                    </TableCell>\n                                                                </TableRow>\n                                                            </React.Fragment>\n                                                        : null }\n\n\n                                                        {collectionitem?.edition ?\n                                                            <TableRow>\n                                                                <TableCell>Edition:</TableCell>\n                                                                <TableCell>{collectionitem.edition}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.background_color ?\n                                                            <TableRow>\n                                                                <TableCell>Background:</TableCell>\n                                                                <TableCell>#{collectionitem.background_color}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionrawdata?.updateAuthority ?\n                                                            <TableRow>\n                                                                <TableCell>Update Authority:</TableCell>\n                                                                <TableCell>\n                                                                    <MakeLinkableAddress addr={collectionrawdata.updateAuthority} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawdata?.isMutable == 1 ?\n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><LockOpenIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                            <TableRow>\n                                                                <TableCell>Mutable:</TableCell>\n                                                                <TableCell><Tooltip title={`This is immutable`}><LockIcon /></Tooltip></TableCell>\n                                                            </TableRow> }\n                                                        {collectionrawdata?.primarySaleHappened ? \n                                                            <TableRow>\n                                                                <TableCell>Primary Sale:</TableCell>\n                                                                <TableCell><CheckCircleIcon /></TableCell>\n                                                            </TableRow>\n                                                        : \n                                                        <TableRow>\n                                                            <TableCell>Primary Sale:</TableCell>\n                                                            <TableCell><Tooltip title={`Primary sale has not occured as of this fetch`}><BlockIcon /></Tooltip></TableCell>\n                                                        </TableRow>\n                                                        }\n\n                                                        {collectionitem?.createdAt ?\n                                                            <TableRow>\n                                                                <TableCell>Created At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.createdAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.updatedAt ?\n                                                            <TableRow>\n                                                                <TableCell>Updated At:</TableCell>\n                                                                <TableCell>{formatBlockTime(collectionitem.updatedAt, false, false)}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionitem?.deactivated ?\n                                                            <TableRow>\n                                                                <TableCell>Deactivated:</TableCell>\n                                                                <TableCell><Tooltip title={`This is deactivated`}><CheckCircleIcon /></Tooltip></TableCell>\n                                                            </TableRow>\n                                                        : null }\n\n                                                        {collectionitem.image ?\n                                                            \n                                                            <TableRow>\n                                                                <TableCell>Image:</TableCell>\n                                                                <TableCell>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${collectionitem.image}`} target=\"_blank\">\n                                                                        View Original <OpenInNewIcon sx={{fontSize:12, ml:1}} />\n                                                                    </Button>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        : null}\n\n                                                        {/*collectionrawprimer.owner ?\n                                                            <TableRow>\n                                                                <TableCell>Owner:</TableCell>\n                                                                <TableCell>{collectionrawprimer.owner}</TableCell>\n                                                            </TableRow>\n                                                        : null }\n                                                        {collectionrawprimer.executable ?\n                                                            <TableRow>\n                                                                <TableCell>Executable:</TableCell>\n                                                                <TableCell>{collectionrawprimer.executable}</TableCell>\n                                                            </TableRow>\n                                                        : null */}\n                                                    </StyledTable>\n                                                </TableContainer>\n                                                \n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                </List>\n                            </Grid>\n                            <Grid item xs={12} sm={12} md={6}>\n                                \n                                <List\n                                    sx={{ \n                                        width: '100%',\n                                        p: 2\n                                    }}\n                                    component=\"nav\"\n                                    >       \n                                    <ListItemText>\n\n                                        <Box>\n                                            <Typography component=\"div\" variant=\"subtitle1\">\n                                               <GrapeVerified updateAuthority={collectionrawdata} symbol={collectionitem.symbol} />\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>\n                                                {collectionitem.name}\n                                                </strong>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\">\n                                                {tokenOwners && \n                                                    (<>\n                                                        {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner).length > 0) ? (\n                                                            <>\n                                                                {(OTHER_MARKETPLACES.filter(e => e.address === tokenOwners?.data.parsed.info.owner)).map(filteredMarket => (\n                                                                <>\n                                                                Listed on \n                                                                    {(filteredMarket.name.length > 0) ? (\n                                                                        <>  \n                                                                            \n                                                                            {(filteredMarket.previewUrl.length > 0) ? (\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`${filteredMarket.previewUrl}${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            ):(\n                                                                                <>\n                                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${mint}`} target=\"_blank\" sx={{ml:1}}>\n                                                                                        {filteredMarket.logo &&\n                                                                                        <Avatar \n                                                                                            component={Paper} \n                                                                                            elevation={4}\n                                                                                            alt={filteredMarket.name}\n                                                                                            src={filteredMarket.logo}\n                                                                                            sx={{ width: 14, height: 14, bgcolor: \"#eee\", mr:0.5}}\n                                                                                        />\n                                                                                        }\n                                                                                        {filteredMarket.name} \n                                                                                        <OpenInNewIcon sx={{fontSize:'14px', ml:1}} />\n                                                                                    </Button>\n                                                                                </>\n                                                                            )}\n                                                                        </>\n                                                                    ):(\n                                                                        <>\n                                                                        {trimAddress(tokenOwners?.data.parsed.info.owner, 4)}\n                                                                        </>\n                                                                    )}\n                                                                </>\n                                                                ))}\n                                                            </>\n                                                        )\n                                                        :\n                                                        (\n                                                            <>\n                                                            {!loadingOwner ?\n                                                            <Grid container direction=\"row\">\n                                                                <Grid item>\n                                                                {solanaDomain && solanaDomain.length > 0 ?\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{solanaDomain}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    Owned by \n                                                                    <Tooltip title={`Visit profile`}>\n                                                                        <Button\n                                                                            component={Link} \n                                                                            to={`${GRAPE_PROFILE}${tokenOwners?.data.parsed.info.owner}`}\n                                                                            sx={{borderRadius:'24px', color:'white'}}\n                                                                        >\n                                                                            <Typography variant=\"caption\">\n                                                                                <strong>{trimAddress(tokenOwners?.data.parsed.info.owner, 4)}</strong>\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </Tooltip>\n\n                                                                </>\n                                                                }\n                                                                \n                                                                </Grid>\n                                                                <Grid item \n                                                                    sx={{ \n                                                                        display: \"flex\",\n                                                                        justifyContent: 'flex-end'\n                                                                    }}>\n                                                                    <Tooltip title={`Explorer`}>\n                                                                        <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${tokenOwners?.data.parsed.info.owner}`} target=\"_blank\" sx={{borderRadius:'24px', color:'white', pl:0, pr:0}}> <OpenInNewIcon sx={{fontSize:'14px'}} /></Button>\n                                                                    </Tooltip>\n                                                                    {publicKey && publicKey.toBase58() === tokenOwners?.data.parsed.info.owner ?\n                                                                        <Tooltip title={`Set this NFT as your avatar`}>\n                                                                            <Button \n                                                                                variant=\"text\" \n                                                                                onClick={HandleSetAvatar}\n                                                                                size=\"small\"\n                                                                                className=\"profileAvatarIcon\"\n                                                                                sx={{borderRadius:'24px', color:'white'}}\n                                                                                >\n                                                                                <AccountCircleOutlinedIcon \n                                                                                    sx={{\n                                                                                        fontSize:'14px',\n                                                                                    }} \n                                                                                />\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                    :\n                                                                    <>\n                                                                        {loadingFollowState ?\n                                                                            <Button \n                                                                                sx={{borderRadius:'24px'}}\n                                                                            >\n                                                                                <CircularProgress sx={{p:'14px',m:-2}} />\n                                                                            </Button>\n                                                                        :\n                                                                            <>\n                                                                            {isFollowing ?  \n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Unfollow\"\n                                                                                        onClick={() => followWalletDisconnect(tokenOwners?.data.parsed.info.owner)}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonRemoveOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                                :\n                                                                                    <Button \n                                                                                        variant=\"text\" \n                                                                                        title=\"Follow\"\n                                                                                        onClick={() => followWalletConnect(tokenOwners?.data.parsed.info.owner, solanaDomain || '')}\n                                                                                        size=\"small\"\n                                                                                        className=\"profileAvatarIcon\"\n                                                                                        sx={{borderRadius:'24px', color:'white'}}\n                                                                                        >\n                                                                                        <PersonAddOutlinedIcon sx={{fontSize:'14px'}} />\n                                                                                    </Button>\n                                                                            }\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                    }\n\n                                                                </Grid>\n                                                                \n                                                            </Grid>\n                                                            :<>Loading owner</>}\n                                                            </>\n                                                        )\n                                                    }\n                                                    </>\n                                                    )\n                                                }  \n                                            </Typography>\n                                        </Box>\n                                    </ListItemText>\n                                </List>\n                                \n                                {tokenOwners?.data.parsed.info.owner &&\n                                    <ItemOffers\n                                        mintAta={mintAta} \n                                        mintOwner={tokenOwners?.data.parsed.info.owner} \n                                        mint={mint} \n                                        refreshOwner={refreshOwner}\n                                        setRefreshOwner={setRefreshOwner} \n                                        setRefresh={props.setRefresh} \n                                        grape_member_balance={grape_member_balance}\n                                        grape_governance_balance={grape_governance_balance}\n                                        grape_offer_threshhold={grape_offer_threshhold}\n                                        grape_weighted_score={grape_weighted_score}\n                                        grape_whitelisted={grape_whitelisted}\n                                        sol_portfolio_balance={sol_portfolio_balance}\n                                        />\n                                }\n                                \n\n                                {collectionitem.attributes?.length && collectionitem.attributes.length > 0 ? (\n                                    <Box\n                                        sx={{ \n                                            p: 1, \n                                            width: '100%',\n                                            background: '#13151C',\n                                            borderRadius: '24px'\n                                        }}\n                                    > \n                                        <ListItemButton onClick={handleClickOpenTraits}\n                                            sx={{borderRadius:'20px'}}\n                                        >\n                                            <ListItemIcon>\n                                            <FormatListBulletedIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Traits\" />\n                                            {open_traits ? <ExpandLess /> : <ExpandMoreIcon />}\n                                        </ListItemButton>\n                                        <Collapse in={open_traits} timeout=\"auto\" unmountOnExit>\n                                            <List\n                                                sx={{ \n                                                    width: '100%'\n                                                }}\n                                                component=\"nav\"\n                                                >       \n                                                <ListItemText>\n                                                    <Grid item alignItems=\"center\">\n                                                        {collectionitem.attributes?.length && collectionitem.attributes.length > 0 && (\n                                                            <>\n                                                                {collectionitem.attributes?.map((item: any) => (\n                                                                    <Chip \n                                                                        sx={{\n                                                                            padding:'22.5px',\n                                                                            margin: '5px',\n                                                                            textAlign: 'center',\n                                                                            background: '#272727',\n                                                                            borderRadius: '10px'\n                                                                        }}\n                                                                        label={\n                                                                            <>\n                                                                                <strong>{item?.trait_type}</strong>\n                                                                                <Divider />\n                                                                                {item?.value}\n                                                                            </>} />\n                                                                        \n                                                                ))}\n                                                            </>  \n                                                            )\n                                                        }\n                                                    </Grid>\n                                                </ListItemText>\n                                            </List>\n                                        </Collapse>\n                                    </Box>\n                                )\n                                : <></>\n                                }\n                                    \n                            </Grid>\n                        </Grid>    \n                    \n                    </Box>\n                    {/*\n                    <CardActions\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: 'flex-end',\n                            padding: 1\n                        }}\n                    >\n                        <OfferPrompt mint={mint} />\n                    </CardActions>\n                    */}\n                </Box>  \n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e);\n        return null \n    }\n}\n\nfunction intFromBytes( x: any ){\n    var val = 0;\n    for (var i = 0; i < x.length; ++i) {        \n        val += x[i];        \n        if (i < x.length-1) {\n            val = val << 8;\n        }\n    }\n    return val;\n}\n\nfunction getInt64Bytes( x: any ){\n    var bytes = [];\n    var i = 8;\n    do {\n        bytes[--i] = x & (255);\n        x = x>>8;\n    } while ( i )\n    return bytes;\n}\n\ntype Props = {\n    children: React.ReactElement;\n    waitBeforeShow?: number;\n};\n\nexport function PreviewView(this: any, props: any) {\n    const [collection, setCollection] = React.useState(null);\n    //const isConnected = session && session.isConnected;\n    const [loading, setLoading] = React.useState(false);\n    //const [success, setSuccess] = React.useState(false);\n    const [mint, setMintPubkey] = React.useState(null);\n    const [refresh, setRefresh] = React.useState(false);\n    \n    const {handlekey} = useParams<{ handlekey: string }>();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const urlParams = searchParams.get(\"pkey\") || searchParams.get(\"mint\") || handlekey;\n\n    //const [pubkey, setPubkey] = React.useState(null);\n    const [walletPKId, setInputPKValue] = React.useState(null);\n    \n    const history = useNavigate();\n    //const location = useLocation();\n    \n    function HandlePKSubmit(event: any) {\n        event.preventDefault();\n        console.log(\"Sending: \"+walletPKId);\n        \n        if (ValidateAddress(walletPKId)){\n            // WalletId is base58 validate the type too later on\n            setMintPubkey(walletPKId);\n            //setPubkey(walletPKId);\n            //props.setPubkey(walletPKId);\n        } else{\n            // Invalid Wallet ID\n            console.log(\"INVALID MINT ID\");\n        }\n    }\n    const CollectionProfileClear = (props: any) => {\n        // TODO:\n        // Add button next to collection to clear navigation address\n        // this should only appear if the user is logged in (has a pubkey from session)\n        return (\n            <React.Fragment></React.Fragment>\n        );\n    }\n\n    const PreviewItem = (props: any) => {\n        const [thismint, setThisMint] = React.useState(props.mint);\n        const [expanded, setExpanded] = React.useState(false);\n        const [loading, setLoading] = React.useState(false);\n        const [collectionmeta, setCollectionMeta] = React.useState(null);\n        const [collectionrawdata, setCollectionRaw] = React.useState(null);\n        const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n        const { connection } = useConnection();\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n        \n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let mint_address = new PublicKey(mint)\n                let [pda, bump] = await PublicKey.findProgramAddress([\n                    Buffer.from(\"metadata\"),\n                    MD_PUBKEY.toBuffer(),\n                    new PublicKey(mint_address).toBuffer(),\n                ], MD_PUBKEY)\n                \n                const meta_response = await ggoconnection.getAccountInfo(pda);\n\n                let meta_final = decodeMetadata(meta_response.data);\n                \n                setCollectionRaw({meta_final,meta_response});\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n        \n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n    \n                setLoading(false);\n            }\n        }\n    \n        useEffect(() => {\n            const interval = setTimeout(() => {\n                getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [thismint]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            \n            return (\n                <Card\n                    sx={{\n                        borderRadius: '20px',\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius: '20px',\n                        }}\n                        variant=\"rectangular\" width=\"100%\" height={325} />\n                </Card>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                        <GalleryItemMeta collectionitem={collectionmeta} collectionrawdata={collectionrawdata} mint={mint} setRefresh={setRefresh} setMintPubkey={setMintPubkey} />\n                );\n            }\n            //}\n        }\n    }\n\n    React.useEffect(() => { \n        if (refresh)\n            setRefresh(!refresh);\n        \n        if (mint && ValidateAddress(mint)){\n            //props.history.push({\n            history({\n                pathname: GRAPE_PREVIEW+mint\n            },\n                { replace: true }\n            );\n        } else {\n            history({\n                pathname: '/preview'\n            },\n                { replace: true }\n            );\n        } \n        \n    }, [mint, refresh]);\n\n    if (!mint){\n        if (urlParams?.length > 0){\n            setMintPubkey(urlParams);\n        }\n    }\n\n    return (\n        <React.Fragment>\n                { mint && ValidateAddress(mint) ?\n                    <PreviewItem mint={mint} />\n                : \n                <>\n                    <React.Fragment>\n                        <Box\n                            sx={{ \n                                p: 1, \n                                mb: 3, \n                                width: '100%',\n                                background: '#13151C',\n                                borderRadius: '24px'\n                            }}\n                        > \n                                <Grid \n                                    container \n                                    direction=\"column\" \n                                    spacing={2} \n                                    alignItems=\"center\"\n                                    justifyContent={'center'}\n                                    rowSpacing={8}\n                                >\n                                    \n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    >\n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mt:2,mb:3}}\n                                        >\n                                            <img src=\"/grape_white_logo.svg\" width=\"300px\" className=\"header-logo\" alt=\"Grape\" />\n                                            .art\n                                        </Typography>\n                                    </Grid>\n                                    <Grid \n                                        item xs={12}\n                                        alignItems=\"center\"\n                                    > \n                                        <Typography\n                                            variant=\"h3\"\n                                            color=\"inherit\"\n                                            display='flex'\n                                            sx={{mb:3}}\n                                        >ooops... you entered an invalid address!</Typography>\n\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                    </React.Fragment>\n                </>\n                }\n                \n        </React.Fragment>\n    );\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\n  export async function sellNowListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const thisWalletPublicKey = new web3.PublicKey(walletPublicKey);\n    \n    let sellerWalletKey = thisWalletPublicKey;\n    if (daoPublicKey){\n      sellerWalletKey = new web3.PublicKey(daoPublicKey);\n    }\n\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        +offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n    );\n\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const [programAsSigner, programAsSignerBump] =\n        await getAuctionHouseProgramAsSigner();\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n        auctionHouseKey,\n        sellerWalletKey,\n        tokenAccountKey,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted,\n        buyPriceAdjusted,\n    );\n    const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      new BN(0),\n    );\n\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.sell(\n      tradeBump,\n      freeTradeBump,\n      programAsSignerBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n      accounts: {\n          wallet: sellerWalletKey,\n          metadata: await getMetadata(mintKey),\n          tokenAccount: tokenAccountKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          sellerTradeState: tradeState,\n          freeSellerTradeState: freeTradeState1,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n      },\n    ); \n\n    const instructions = [instruction];\n    console.log(\"sellerWalletKey: \"+sellerWalletKey.toBase58());\n    \n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:2, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber(), // price\n      score:weightedScore, // spam protection for our feed/higher score weight higher feed visibility\n    };\n    \n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n  }","import React, { useEffect, useState, useCallback, memo } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { TokenAmount, lt } from '../utils/grapeTools/safe-math';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nimport { Button } from '@mui/material';\n\nimport {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { web3 } from '@project-serum/anchor';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ListItemButton,\n    Container,\n} from '@mui/material';\n\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { GRAPE_RPC_ENDPOINT, GRAPE_PREVIEW } from '../utils/grapeTools/constants';\nimport { trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nfunction convertSolVal(sol: any){\n    return parseFloat(new TokenAmount(sol, 9).format());\n}\n\nexport default function FeedView(props: any){\n    const [loading, setLoading] = React.useState(false);\n    const [limit, setLimit] = React.useState(25);\n    const [maxPage, setMaxPage] = React.useState(false);\n    const [beforeSignature, setBeforeSignature] = React.useState(null);\n    const [featured, setFeatured] = React.useState(null);\n    const [featuredmeta, setFeaturedMeta] = React.useState(null);\n    const [mergedfeaturedmeta, setMergedFeaturedMeta] = React.useState(null);\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n    \n    const statestruct = ['Withdraw', 'Offer', 'Sale', 'Accepted from listing', 'Buy Now', 'Cancel', ''];\n\n    const FeaturedItem = (props: any) => {\n        const [finalMeta, setFinalMeta] = React.useState(null);\n        const itemraw = props.itemmeta;\n        //const itemdata = props.itemdata;\n\n        const getCollectionItemData = async () => {\n            try {\n                //console.log(\"RAW: \"+JSON.stringify(itemraw));\n                let meta_primer = itemraw;\n                let buf = Buffer.from(itemraw.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                //setCollectionRaw({meta_final,meta_primer});\n    \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getMeta = async () => {\n            let final_meta = await getCollectionItemData();\n            setFinalMeta(final_meta);\n        }\n\n        React.useEffect(() => { \n            if ((itemraw)&&(!finalMeta)){\n                getMeta();\n            }\n        }, [itemraw]);\n\n\n        //console.log(\"HERE: \"+JSON.stringify(item));\n\n        if (!finalMeta){\n            return <><CircularProgress /></>\n        } else{\n            return (\n                <Container\n                    style={{overflow:'hidden', position:'relative', margin:0, padding:0}}\n                >\n                    <Container\n                        sx={{\n                            position:'relative',\n                            background: 'rgba(0, 0, 0, 0.1)',\n                            borderRadius: '26px',\n                            overflow:'hidden',\n                            mt:2,\n                            mb:2,\n                            ml:0,\n                            mr:0,\n                            p:0,\n                            backgroundSize: \"cover\",\n                        }} \n                    >\n                    <img\n                        src={finalMeta?.image}\n                        alt=\"\"\n                        style={{\n                            opacity: '0.1',\n                            position: 'absolute',\n                            borderRadius: '26px',\n                            marginTop:2,\n                            marginBottom:2,\n                            padding:1,\n                            top:'-20%',\n                            left:'-20%',\n                            width:'150%'\n                        }}\n                    />\n                    \n                    <Grid \n                        container \n                        direction='row'\n                        >\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Grid \n                                    container \n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    <Grid item sx={{display:'column',justifyContent:'center',alignItems:'center', p:0}}>\n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.6)',\n                                                borderRadius: '26px',\n                                                width:'100%',\n                                                p:'2px',\n                                            }} \n                                        >\n                                            <ListItemButton\n                                                component={Link} to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                                sx={{\n                                                    borderRadius:'25px',\n                                                    p: 0\n                                                }}\n                                            >\n                                                <img\n                                                    src={`${finalMeta?.image}`}\n                                                    srcSet={`${finalMeta?.image}`}\n                                                    alt={finalMeta?.name}\n                                                    //onClick={ () => openImageViewer(0) }\n                                                    loading=\"lazy\"\n                                                    height=\"auto\"\n                                                    style={{\n                                                        width:'100%',\n                                                        borderRadius:'24px',\n                                                        padding:0\n                                                    }}\n                                                />\n                                            </ListItemButton>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            \n                            <Grid item xs={12} sm={12} md={6}>\n                                <Container\n                                    sx={{\n                                        minWidth: '100%',\n                                        minHeight:'100%',\n                                        m:1,\n                                        p:0\n                                    }} \n                                >\n                                    <Container>\n                                    {finalMeta?.symbol &&\n                                        <Typography variant=\"caption\">\n                                            {finalMeta?.symbol}\n                                        </Typography>\n                                        }\n                                        <Typography variant=\"h4\">\n                                            {finalMeta?.name}\n                                        </Typography>\n                                        \n                                        <Box\n                                            sx={{\n                                                background: 'rgba(0, 0, 0, 0.9)',\n                                                minWidth: '100%',\n                                                minHeight:'100%',\n                                                p:1.5,\n                                                mt:1,\n                                                borderRadius:'24px',\n                                            }} \n                                        >\n                                            <Typography sx={{fontSize:'30px'}}>\n                                                {statestruct[itemraw.memo.state]} <strong>{itemraw.memo.amount}</strong> <SolCurrencyIcon sx={{fontSize:\"18px\", mr:0.5 }}/>\n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                            - {itemraw.memo.timestamp} \n                                            </Typography>\n                                            <Typography variant=\"caption\">\n                                                <Button size=\"small\" sx={{fontSize:'10px'}} component=\"a\" href={`https://explorer.solana.com/address/${itemraw.memo.mint}`} target=\"_blank\">{trimAddress(itemraw.memo.mint,5)} <OpenInNewIcon sx={{fontSize:'14px', ml:1}} /></Button>\n                                            </Typography>\n                                            <Typography component=\"div\" variant=\"caption\" sx={{mt:1,mb:1}}>\n                                            {finalMeta?.description}\n                                            </Typography>\n                                            \n                                            <Button \n                                                className=\"buyNowButton\"\n                                                component={Link} \n                                                to={`${GRAPE_PREVIEW}${itemraw.memo.mint}`}\n                                            >\n                                                View\n                                            </Button>\n                                        </Box>\n                                    </Container>\n                                </Container>\n                            </Grid>\n                            \n                        </Grid>\n                    </Container>\n                </Container>\n            )\n        }\n    }\n    \n    const getCollectionData = async (mintarr:string[]) => {\n        try {\n            let mintsPDAs = new Array();\n            \n            for (var value of mintarr){\n                if (value){\n                    let mint_address = new PublicKey(value);\n                    let [pda, bump] = await PublicKey.findProgramAddress([\n                        Buffer.from(\"metadata\"),\n                        MD_PUBKEY.toBuffer(),\n                        new PublicKey(mint_address).toBuffer(),\n                    ], MD_PUBKEY)\n\n                    if (pda){\n                        //console.log(\"pda: \"+pda.toString());\n                        mintsPDAs.push(pda);\n                    }\n                    \n                }\n            }\n\n            const metadata = await ggoconnection.getMultipleAccountsInfo(mintsPDAs);\n            \n            // LOOP ALL METADATA WE HAVE\n            for (var metavalue of metadata){\n                \n                try{\n                    let meta_primer = metavalue;\n                    let buf = Buffer.from(metavalue.data);\n                    let meta_final = decodeMetadata(buf);\n                    \n                }catch(etfm){console.log(\"ERR: \"+etfm + \" for \"+ JSON.stringify(metavalue));}\n            }\n\n            return metadata;\n            \n        } catch (e) { // Handle errors from invalid calls\n            console.log(e);\n            return null;\n        }\n    }\n\n    const getFeatured = async () => {\n        \n        if (!loading){\n            setLoading(true);\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            //let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n            //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n            //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n            \n            /*\n            console.log(\"derivedMintPDA: \"+derivedMintPDA);\n            console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n            console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n            */\n        \n            let result = await ggoconnection.getSignaturesForAddress(auctionHouseKey, {limit: 100});\n            let ahListings: any[] = [];\n            let ahListingsMints: any[] =[];\n            let exists = false;\n            let cntr = 0;\n            let cnt = 0;\n\n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            let featured = null;\n            for (var value of result){\n\n                if (value.err === null){\n                    try{\n                        //console.log('value: '+JSON.stringify(value));\n                        const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                        \n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();                            \n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n\n                            // get last signature\n                            if (cntr === limit-1){\n                                setBeforeSignature(value.signature);\n                                setMaxPage(true);\n                            }\n                            \n                            exists = false;\n                            if ((value) && (value.memo)){\n                                \n                                let memo_arr: any[] = [];\n                                let memo_str = value.memo;\n                                let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                if (memo_instances > 0) {\n                                    // multi memo\n                                    let mcnt = 0;\n                                    let submemo = memo_str;\n                                    //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                    for (var mx=0;mx<memo_instances;mx++){\n                                        let init = submemo.indexOf('{');\n                                        let fin = submemo.indexOf('}');\n                                        memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                        memo_arr.push(memo_str);\n                                        submemo = submemo.replace(memo_str, \"\");\n                                        //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                        //console.log(\"submemo: \"+submemo);\n                                    }\n                                } else{\n                                    let init = memo_str.indexOf('{');\n                                    let fin = memo_str.indexOf('}');\n                                    memo_str = memo_str.substr(init,fin); // include brackets\n                                    memo_arr.push(memo_str);\n                                }\n                                \n\n                                for (var memo_item of memo_arr){\n                                    try{\n                                        const memo_json = JSON.parse(memo_item);\n\n                                        //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                        for (var i = 0; i < ahListings.length; i++){\n                                            if ((memo_json?.mint === ahListings[i].mint)){ // match same\n                                                // if match then add\n                                                if (memo_json.state === 1)\n                                                    ahListings[i].offers = ahListings[i].offers+1;\n                                                exists = true;\n                                            }\n                                        }\n\n                                        if (!exists){\n                                            let forSaleDate = ''+value.blockTime;\n                                            if (forSaleDate){\n                                                let timeago = timeAgo(''+value.blockTime);\n                                                forSaleDate = timeago;\n                                            }\n\n                                            let solvalue = convertSolVal(memo_json?.amount || memo_json?.offer);\n                                            if (memo_json?.mint){\n                                                let offer = 0;\n                                                if (memo_json.state === 1)\n                                                    offer = 1;\n                                                ahListings.push({amount: solvalue, mint: memo_json?.mint, timestamp: forSaleDate, blockTime:value.blockTime, state: memo_json?.state || memo_json?.status, offers: offer, score: memo_json?.score || 0});  \n                                                ahListingsMints.push(memo_json.mint);\n                                                \n                                            }\n                                        }\n                                    }catch(merr){console.log(\"ERR: \"+merr)}\n                                }\n                            }\n                        }\n                    } catch (e){console.log(\"ERR: \"+e)}\n                }\n            } \n\n            let collectionmeta = await getCollectionData(ahListingsMints);\n\n            setFeaturedMeta(collectionmeta);\n            setFeatured(ahListings);\n\n            for (var i = 0; i < collectionmeta.length; i++){\n                collectionmeta[i][\"memo\"] = ahListings[i];\n            }\n            \n            try{\n                let finalmeta = JSON.parse(JSON.stringify(collectionmeta));\n                finalmeta.sort((a:any,b:any) => (b.memo.score - a.memo.score) || (b.memo.blockTime - a.memo.blockTime));\n                setMergedFeaturedMeta(finalmeta);\n            }catch(e){\n                setMergedFeaturedMeta(collectionmeta);\n            }\n            \n            \n            setLoading(false);                                      \n        }\n    }\n\n    //React.useEffect(() => { \n        if ((!loading) && (!featured))\n            getFeatured();\n    //}, []);\n\n    if (loading){\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n                width=\"100%\"\n                minWidth=\"400px\"\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        <CircularProgress />\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    } else{\n        return (\n            <Grid \n                container \n                direction=\"column\" \n                spacing={0} \n                alignItems=\"center\"\n                rowSpacing={8}\n            >\n                <Grid \n                    item xs={12}\n                >\n                    <Box\n                        height=\"100%\"\n                        display=\"flex-grow\"\n                        justifyContent=\"center\"\n                    >\n                        {mergedfeaturedmeta &&\n                            <>\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 2 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n\n                                <>\n                                {mergedfeaturedmeta.map((item: any, key: number) => (\n                                    <>\n                                    {item.memo.state === 1 && \n                                        <FeaturedItem itemmeta={item} />\n                                    }\n                                    </>\n                                ))}\n                                </>\n                            </>\n                        }\n                    </Box>\n                </Grid>\n            </Grid>\n        );\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelOffer(offerAmount: number, mint: string, buyerWalletKey: PublicKey, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(mintOwner);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        buyerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //const tokenAccountKey = (await getAtaForMint(mintKey, buyerWalletKey))[0];\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              buyerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log('instruction:', instruction);\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mint.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","\nimport React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { decodeMetadata } from '../utils/grapeTools/utils'\n// @ts-ignore\nimport fetch from 'node-fetch'\nimport { PublicKey } from '@solana/web3.js';\n\nimport {\n    Pagination,\n    Stack,\n    Typography,\n    Grid,\n    Box,\n    Skeleton,\n    ListItemButton,\n} from '@mui/material';\n\nimport { GRAPE_PREVIEW } from '../utils/grapeTools/constants';\n\nconst GalleryItem = (props: any) => {\n    const collectionitem = props.collectionitem || [];\n    const mint = collectionitem?.wallet?.account.data.parsed.info.mint || null;\n    const [expanded, setExpanded] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [collectionmeta, setCollectionMeta] = React.useState(null);\n        //const [collectionrawdata, setCollectionRaw] = React.useState(props.collectionitemmeta || null);\n        \n        const handleExpandClick = () => {\n            setExpanded(!expanded);\n        };\n\n        const MD_PUBKEY = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n        const getCollectionData = async () => {\n            try {\n                let meta_primer = collectionitem;\n                let buf = Buffer.from(meta_primer.data, 'base64');\n                let meta_final = decodeMetadata(buf);\n                \n                const metadata = await fetch(meta_final.data.uri).then(\n                    (res: any) => res.json());\n                \n                return metadata;\n            } catch (e) { // Handle errors from invalid calls\n                console.log(e);\n                return null;\n            }\n        }\n\n        const getCollectionMeta = async () => {\n            if (!loading){\n                setLoading(true);\n                let [collectionmeta] = await Promise.all([getCollectionData()]);\n                setCollectionMeta({\n                    collectionmeta\n                });\n                setLoading(false);\n            }\n        }\n\n        useEffect(() => {\n            const interval = setTimeout(() => {\n\n                if (mint)\n                    getCollectionMeta();\n            }, 500);\n            return () => clearInterval(interval); \n        }, [collectionitem]);\n        \n        if((!collectionmeta)||\n            (loading)){\n            //getCollectionMeta();\n            //setTimeout(getCollectionMeta(), 250);\n            return (\n                <ListItemButton\n                    sx={{\n                        width:'100%',\n                        borderRadius:'25px',\n                        p: '2px',\n                        mb: 5\n                    }}\n                >\n                    <Skeleton \n                        sx={{\n                            borderRadius:'25px',\n                        }}\n                        variant=\"rectangular\" width={325} height={325} />\n                </ListItemButton>\n            )\n        } //else{\n        {   \n            let image = collectionmeta.collectionmeta?.image || null;\n            if (!image){\n                console.log(\"ERR: \" + JSON.stringify(collectionmeta));\n                return null;\n            }else{\n            //console.log(\"Mint: \"+mint);\n            //if ((collectionmeta)&&(!loading)){\n            //if (image){\n                return (\n                    \n                        <Grid \n                            container \n                            alignItems=\"center\"\n                            justifyContent=\"center\">\n                            <Grid item sx={{display:'flex',justifyContent:'center',alignItems:'center'}}>\n                                <ListItemButton\n                                    component={Link} to={`${GRAPE_PREVIEW}${mint}`}\n                                    sx={{\n                                        width:'100%',\n                                        borderRadius:'25px',\n                                        p: '2px'\n                                    }}\n                                >\n                                    <img\n                                        src={`${image}`}\n                                        srcSet={`${image}`}\n                                        alt={collectionmeta.collectionmeta?.name}\n                                        //onClick={ () => openImageViewer(0) }\n                                        loading=\"lazy\"\n                                        height=\"auto\"\n                                        style={{\n                                            width:'100%',\n                                            borderRadius:'24px'\n                                        }}\n                                    />\n                                </ListItemButton>\n                            </Grid>\n                            <Grid item sx={{display:'flex'}}>\n                                <Box\n                                    sx={{p:1}}\n                                >\n                                    <Typography variant=\"caption\">\n                                        {collectionmeta.collectionmeta?.name}\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                );\n            }\n            //}\n        }\n}\n\nexport default function GalleryView(props: any){\n    const [page, setPage] = React.useState(1);\n    const rowsperpage = 1500;\n    const finalCollection = props.finalCollection;\n    const walletCollection = props.walletCollection;\n\n    return (\n        <>\n        {finalCollection && finalCollection.length > 0 && (\n            <Box\n                sx={{\n                    background: 'rgba(0, 0, 0, 0.6)',\n                    borderRadius: '17px',\n                    p:4\n                }} \n            > \n                <Grid container \n                    spacing={{ xs: 2, md: 3 }} \n                    justifyContent=\"center\"\n                    alignItems=\"center\">\n                    \n                    { (finalCollection.length > 0 ? finalCollection\n                        .slice((page - 1) * rowsperpage, page * rowsperpage):finalCollection)\n                        .map((collectionInfo: any, key: any) => {\n                            return(\n                                <Grid item xs={12} sm={12} md={4} lg={3} key={key}>\n                                    <Box\n                                        sx={{\n                                            background: 'rgba(0, 0, 0, 0.6)',\n                                            borderRadius: '26px',\n                                            minWidth: '175px'\n                                        }} \n                                    >\n                                    <GalleryItem collectionitem={collectionInfo} listed={true} count={key} />\n                                    \n                                    </Box>\n                                </Grid>\n                                    \n                            )\n                        }\n                    )}\n                </Grid>\n                \n                { walletCollection.length > rowsperpage && \n                    <Grid container justifyContent=\"flex-end\" sx={{ mt: 2 }}>\n                        <Stack spacing={2}>\n                            <Pagination\n                                count={(Math.ceil(walletCollection.length / rowsperpage))}\n                                page={page}\n                                //onChange={handlePageChange}\n                                defaultPage={1}\n                                color=\"primary\"\n                                size=\"small\"\n                                showFirstButton\n                                showLastButton\n                                //classes={{ ul: classes.paginator }}\n                                />\n                        </Stack>\n                    </Grid>\n                }\n            </Box>\n            \n        )}\n        </>);\n}","export const VERIFIED_CREATORS = [];\n\nexport const UPDATE_AUTHORITIES = [];\n/*\nexport const UPDATE_AUTHORITIES = [\n    'trshC9cTgL3BPXoAbp5w9UfnUMWEJx5G61vUijXPMLH', // DTP\n    '4kovSxtW7oZ3J12VpUAV6JLBydebvLUV7ZYSAfndQr6E', // Tired Turtles\n    'DC2mkgwhy56w3viNtHDjJQmc7SGu2QX785bS4aexojwX', // Degen Apes\n    'DsuFKHaT2VWTQZhWAVJnoj7uJyB65PWDLEuP6dGn2sae', // Groms\n    '8GV2kiCxbKjEGwLVfRa2Xdrb7sELL83cSx9jsPjMqrrd', // NWM\n    'BHRFPSHHtLqjbcvVCmGrCjgbUagwnKDxp4CbUgoED3tT', // PIT\n];*/","import React, { useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\n// @ts-ignore\nimport fetch from 'node-fetch'\n\nimport { TokenAmount } from '../utils/grapeTools/safe-math';\nimport { styled } from '@mui/material/styles';\nimport { Button } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport moment from 'moment';\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    ButtonGroup,\n    Skeleton,\n    Collapse,\n    Table,\n    TableHead,\n    TableCell,\n    TableContainer,\n    TableRow,\n    InputBase,\n    Tooltip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n} from '@mui/material';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport HowToVoteIcon from '@mui/icons-material/HowToVote';\nimport SolCurrencyIcon from '../components/static/SolCurrencyIcon';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport BallotIcon from '@mui/icons-material/Ballot';\nimport SellIcon from '@mui/icons-material/Sell';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nimport { \n    TOKEN_REALM_PROGRAM_ID,\n    TOKEN_REALM_ID,\n    TOKEN_VERIFICATION_NAME,\n    TOKEN_VERIFICATION_AMOUNT,\n    TOKEN_VERIFICATION_ADDRESS,\n    GRAPE_RPC_ENDPOINT, \n    OTHER_MARKETPLACES, \n    GRAPE_RPC_REFRESH, \n    GRAPE_PREVIEW, \n    GRAPE_PROFILE,\n    FEATURED_DAO_ARRAY\n} from '../utils/grapeTools/constants';\nimport { RegexTextField } from '../utils/grapeTools/RegexTextField';\nimport { MakeLinkableAddress, ValidateCurve, trimAddress, timeAgo } from '../utils/grapeTools/WalletAddress'; // global key handling\n\nimport {\n    AUCTION_HOUSE_PROGRAM_ID,\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from '../utils/auctionHouse/helpers/constants';\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseBuyerEscrow,\n    getTokenAmount,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from '../utils/auctionHouse/helpers/accounts';\n\nimport { cancelOffer } from '../utils/auctionHouse/cancelOffer';\nimport { withdrawOffer } from '../utils/auctionHouse/withdrawOffer';\nimport { submitOffer } from '../utils/auctionHouse/submitOffer';\nimport { acceptOffer } from '../utils/auctionHouse/acceptOffer';\nimport { cancelListing } from '../utils/auctionHouse/cancelListing';\nimport { sellNowListing } from '../utils/auctionHouse/sellNowListing';\nimport { buyNowListing } from '../utils/auctionHouse/buyNowListing';\nimport { cancelWithdrawOffer } from '../utils/auctionHouse/cancelWithdrawOffer';\nimport { depositInGrapeVine } from '../utils/auctionHouse/depositInGrapeVine';\nimport { createDAOProposal } from '../utils/auctionHouse/createDAOProposal';\n\nimport \"../App.less\";\n\nimport { BN, web3 } from '@project-serum/anchor';\nimport { getPriceWithMantissa } from '../utils/auctionHouse/helpers/various';\n\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from \"@solana/wallet-adapter-react-ui\";\n\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    /*\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n    */\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n}));\n\nfunction convertSolVal(sol: any){\n    sol = parseFloat(new TokenAmount(sol, 9).format());\n    return sol;\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n    // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n    let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n    if (time)\n        date_str = new Date(date).toLocaleString();\n    if (epoch){\n        date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n        if (time)\n            date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n    }\n    return (\n        <>{date_str}</>\n    );\n}\n\nfunction SellNowVotePrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const [daoPublicKey, setDaoPublicKey] = React.useState(null);\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                const transaction = new Transaction();\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey);\n                \n                const instructionsArray = [transactionInstr.instructions].flat();        \n                \n                // we need to pass the transactions to realms not to the wallet, and then with the instructoin set we pass to the wallet only the ones from realms\n                if (daoPublicKey){\n                    const transactionInstr2 = await createDAOProposal(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, daoPublicKey, connection, transactionInstr, sendTransaction);\n                    \n                    console.log(\"transactionInstr2: \"+JSON.stringify(transactionInstr2));\n                    const instructionsArray2 = [transactionInstr2.instructions].flat();\n                    console.log(\"instructionsArray2: \"+ JSON.stringify(instructionsArray2));\n                    transaction.add(...instructionsArray2);\n                } else {\n                    transaction.add(\n                        ...instructionsArray\n                    );\n                }\n                \n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n                \n            \n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n\n    React.useEffect(() => {\n        for (var featured of FEATURED_DAO_ARRAY){\n            if (featured.address === mintOwner){\n                setDaoPublicKey(featured.address);\n            }\n        } \n        // static grape test (remove after testing)\n        if (mintOwner === 'JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK')\n            setDaoPublicKey(featured.address);\n    },[]);\n\n    return (\n        <React.Fragment>\n            \n            {daoPublicKey ?\n               <> \n        \n                    <Button \n                        size=\"large\" \n                        variant=\"outlined\" \n                        sx={{\n                            borderRadius: '10px',\n                        }}\n                        value=\"Sell Now Instructions\" onClick={handleClickOpenDialog}>\n                        <HowToVoteIcon sx={{mr:1}}/> VOTE TO LIST\n                    </Button>            \n                    <BootstrapDialog \n                        fullWidth={true}\n                        maxWidth={\"sm\"}\n                        open={open_dialog} onClose={handleCloseDialog}\n                        PaperProps={{\n                            style: {\n                                background: '#13151C',\n                                border: '1px solid rgba(255,255,255,0.05)',\n                                borderTop: '1px solid rgba(255,255,255,0.1)',\n                                borderRadius: '20px'\n                            }\n                        }}\n                    >\n                        <DialogTitle>\n                            PROPOSE A SELL NOW PRICE\n                        </DialogTitle>\n                        <form onSubmit={handleSellNow}>\n                        <DialogContent>\n                            <RegexTextField\n                                regex={/[^0-9]+\\.?[^0-9]/gi}\n                                autoFocus\n                                autoComplete='off'\n                                margin=\"dense\"\n                                id=\"preview_sell_now_id\"\n                                label=\"Set your sale price\"\n                                type=\"text\"\n                                fullWidth\n                                variant=\"standard\"\n                                value={sell_now_amount}\n                                onChange={(e: any) => {\n                                    setSellNowAmount(e.target.value)}\n                                }\n                                inputProps={{\n                                    style: { \n                                        textAlign:'center', \n                                        fontSize: '34px'\n                                    }\n                                }}\n                            />\n                            <Grid \n                                container\n                                alignContent='flex-end'\n                                justifyContent='flex-end'\n                            >\n                                <Grid item\n                                    sx={{textAlign:'right'}}\n                                >\n                                    <Typography\n                                        variant=\"caption\"\n                                    >\n                                        Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDialog}>Cancel</Button>\n                            <Button \n                                type=\"submit\"\n                                variant=\"text\" \n                                disabled={+sell_now_amount < 0.001}\n                                title=\"Submit\">\n                                    SUBMIT\n                            </Button>\n                        </DialogActions>\n                        </form>\n                    </BootstrapDialog> \n                </>\n            :\n            <>\n                <Grid item>\n                    <Tooltip title={`This NFT is currently owned by a program and may be listed at a marketplace`}>\n                        <Button sx={{borderRadius:'10px'}}>\n                            <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                            LISTED/PROGRAM OWNED NFT\n                            </Alert>\n                        </Button>\n                    </Tooltip>\n                </Grid>  \n            </>\n            }  \n        </React.Fragment>\n    );\n}\n\nfunction SellNowPrompt(props:any){\n    const [open_dialog, setOpenSPDialog] = React.useState(false);\n    const [sell_now_amount, setSellNowAmount] = React.useState('');\n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;\n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const salePrice = props.salePrice || null;\n    const weightedScore = props.grapeWeightedScore || 0;\n    //const salePrice = React.useState(props.salePrice);\n\n    const handleClickOpenDialog = () => {\n        setSellNowAmount('');\n        //console.log('SalePrice in handleSellNow:' ,salePrice);\n        setOpenSPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenSPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    \n    async function handleSellNow(event: any) {\n        event.preventDefault();\n        \n        if (+sell_now_amount > 0) {\n            handleCloseDialog();\n            //const setSellNowPrice = async () => {\n            try {\n                //START SELL NOW / LIST\n                const transactionInstr = await sellNowListing(+sell_now_amount, mint, publicKey.toString(), mintOwner, weightedScore, null);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                enqueueSnackbar(`Preparing to set Sell Now Price to ${sell_now_amount} SOL`,{ variant: 'info' });\n                const signedTransaction = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction}\n                    </Button>\n                );\n                enqueueSnackbar(`Sell Now Price Set to ${sell_now_amount} SOL`,{ variant: 'success', action:snackaction });\n                \n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefreshOffers(true);\n                }, GRAPE_RPC_REFRESH);\n            } catch(e){\n                closeSnackbar();\n                enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                console.log(\"Error: \"+e);\n                //console.log(\"Error: \"+JSON.stringify(e));\n            } \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    return (\n        <React.Fragment>\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                sx={{\n                    borderRadius: '10px',\n                }}\n                value=\"Sell Now\" onClick={handleClickOpenDialog}>\n                <AccountBalanceWalletIcon sx={{mr:1}}/> Sell Now\n            </Button>            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                }}\n            >\n                <DialogTitle>\n                    SET SELL NOW PRICE\n                </DialogTitle>\n                <form onSubmit={handleSellNow}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_sell_now_id\"\n                        label=\"Set your sale price\"\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={sell_now_amount}\n                        onChange={(e: any) => {\n                            setSellNowAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Price set in SOL <SolCurrencyIcon sx={{fontSize:\"12px\"}} />\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={+sell_now_amount < 0.001}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n}\n\nexport function OfferPrompt(props: any) {\n    const [open_dialog, setOpenOPDialog] = React.useState(false);\n    const [offer_amount, setOfferAmount] = React.useState('');\n    //const [sol_balance, setSolBalance] = React.useState(props.solBalance);\n    const sol_balance = props.solBalance;  \n    const mint = props.mint;  \n    const mintOwner = props.mintOwner;  \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n\n    // using wallet-adapter\n    const buyerPublicKey = publicKey;\n    \n    const handleClickOpenDialog = () => {\n        setOfferAmount('');\n        setOpenOPDialog(true);\n    };\n    \n    const handleCloseDialog = () => {\n        setOpenOPDialog(false);\n    };\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    async function HandleOfferSubmit(event: any) {\n        event.preventDefault();\n        if (+offer_amount > 0) {\n            handleCloseDialog();\n            //check the buyerwallet offer balance and that no other pending offer exists\n            /*const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const balance = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n            if (balance === 0) {    \n\t\t\t*/\n\t\t\t//no need allowing for multiple offers\n                try {\n                    const transactionInstr = await submitOffer(+offer_amount, mint, publicKey.toString(), mintOwner);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n\n                    enqueueSnackbar(`Preparing to make an offer for ${+offer_amount} SOL`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection)\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Offer sent `,{ variant: 'success', action:snackaction });\n                    \n                    const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'center',\n                            },\n                            persist: true,\n                        });\n                        setTimeout(function() {\n                            closeSnackbar(eskey);\n                            props.setRefreshOffers(true);\n                        }, GRAPE_RPC_REFRESH);\n                } catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n                    console.log(\"Error: \"+e);\n                    //console.log(\"Error: \"+JSON.stringify(e));\n                }\n            /*}\n            else {\n                enqueueSnackbar(`To make a new offer you must first cancel the existing offer of ${convertSolVal(balance)} SOL.`,{ variant: 'warning' });\n            } */       \n        } else{\n            console.log(\"INVALID AMOUNT\");\n        }\n    }\n    \n    return (\n\n        <React.Fragment>\n\n            <Button \n                size=\"large\" \n                variant=\"outlined\" \n                value=\"Make Offer\" \n                onClick={handleClickOpenDialog}\n                sx={{\n                    color: '#fff',\n                    borderColor: '#fff',\n                    borderRadius: '10px',\n                }}\n            >\n                <SellIcon sx={{mr:1}}/> Make offer\n            </Button> \n            \n            <BootstrapDialog \n                fullWidth={true}\n                maxWidth={\"sm\"}\n                open={open_dialog} onClose={handleCloseDialog}\n                PaperProps={{\n                    style: {\n                        background: '#13151C',\n                        border: '1px solid rgba(255,255,255,0.05)',\n                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                        borderRadius: '20px'\n                    }\n                    /*\n                    style: {\n                        \n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },*/\n                    }}\n                >\n                <DialogTitle>\n                    MAKE AN OFFER\n                </DialogTitle>\n                <form onSubmit={HandleOfferSubmit}>\n                <DialogContent>\n                    <RegexTextField\n                        regex={/[^0-9]+\\.?[^0-9]/gi}\n                        //regex={/[^0-9]+\\.?[0-9]/gi}\n                        //regex={/^[+-]?([0-9]+\\.?[0-9]*|\\.[0-9]+)$/gi}\n                        autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"preview_offer_id\"\n                        label={`Set your offer`}\n                        type=\"text\"\n                        fullWidth\n                        variant=\"standard\"\n                        value={offer_amount}\n                        onChange={(e: any) => {\n                            setOfferAmount(e.target.value)}\n                        }\n                        inputProps={{\n                            style: { \n                                textAlign:'center', \n                                fontSize: '34px'\n                            }\n                        }}\n                    />\n                    <Grid \n                        container\n                        alignContent='flex-end'\n                        justifyContent='flex-end'\n                    >\n                        <Grid item\n                            sx={{textAlign:'right'}}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                            >\n                                Available Balance: {sol_balance} <SolCurrencyIcon sx={{fontSize:\"10px\"}} />\n                                <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                    <Button \n                                        onClick={() => {\n                                            setOfferAmount((String)(sol_balance))}}\n                                    > \n                                        Max \n                                    </Button>\n                                    <Button  \n                                        onClick={() => {\n                                            setOfferAmount((String)(+sol_balance/2))}}\n                                    > \n                                        Half\n                                    </Button>\n                                </ButtonGroup>\n                                {(props.highestOffer > 0) && (\n                                    <>\n                                    <br/>Highest Offer: \n                                        {(props.highestOffer < sol_balance+0.001) ?\n                                            <Button \n                                                onClick={() => {\n                                                    setOfferAmount((String)(+props.highestOffer+0.001))}}\n                                            > \n                                                {props.highestOffer}\n                                            </Button>\n                                        : \n                                            <>\n                                                {props.highestOffer}\n                                            </>\n                                        }\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\n                    <Button \n                        type=\"submit\"\n                        variant=\"text\" \n                        disabled={((+offer_amount > sol_balance) || (+offer_amount < 0.001) || (+offer_amount < props.highestOffer))}\n                        title=\"Submit\">\n                            SUBMIT\n                    </Button>\n                </DialogActions>\n                </form>\n            </BootstrapDialog>   \n        </React.Fragment>\n    );\n\n}\n\nexport default function ItemOffers(props: any) {\n    const [mintAta, setMintAta] = React.useState(props.mintAta);\n    const [offers, setOffers] = React.useState(null);\n    const [loading, setLoading] = React.useState(false);\n    const [open_offers_collapse, setOpenOffersCollapse] = React.useState(false);\n    const pubkey = props.pubkey || null;\n    const mintOwner = props.mintOwner;\n    \n    const ggoconnection = new Connection(GRAPE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const walletPublicKey = publicKey;\n    const mint = props.mint; \n    const [refreshOffers, setRefreshOffers] = React.useState(false);\n    const anchorWallet = useAnchorWallet();\n    const [alertopen, setAlertOpen] = React.useState(false); \n    const [alertbuynowopen, setAlertBuyNowOpen] = React.useState(false);\n    const [final_offeramount, setFinalOfferAmount] = React.useState(null);\n    const [final_offerfrom, setFinalOfferFrom] = React.useState(null);\n    const [salePrice, setSalePrice] = React.useState(props.salePrice);\n    const [saleDate, setSaleDate] = React.useState(null);\n    const [saleTimeAgo, setSaleTimeAgo] = React.useState(null);\n    const [highestOffer, setHighestOffer] = React.useState(0);\n    const [openOffers, setOpenOffers] = React.useState(0);\n    const grape_governance_balance = props.grape_governance_balance;\n    const grape_offer_threshhold = props.grape_offer_threshhold;\n    const grape_member_balance = props.grape_member_balance;\n    const grape_whitelisted = props.grape_whitelisted;\n    const grape_weighted_score = props.grape_weighted_score;\n    const sol_portfolio_balance = props.sol_portfolio_balance;\n    \n    const handleAlertBuyNowClose = () => {\n        setAlertBuyNowOpen(false);\n    };\n    const handleAlertBuyNowOpen = () => {\n        setAlertBuyNowOpen(true);\n    };\n    const setBuyNowPrompt = () => {\n        handleAlertBuyNowOpen();\n    }\n    \n    const handleAlertClickOpen = () => {\n        setAlertOpen(true);\n    };\n    \n    const handleAlertClose = () => {\n        setAlertOpen(false);\n    };\n    const handleClick = () => {\n        setOpenOffersCollapse(!open_offers_collapse);\n    }\n\n    const setAcceptPrompt = (offeramount:any, offerfrom:any) => {\n        setFinalOfferAmount(offeramount);\n        setFinalOfferFrom(offerfrom);\n        handleAlertClickOpen();\n    }\n\n    const handleAcceptOffer = async (offerAmount: number, buyerAddress: any) => {\n        handleAlertClose();\n\n        try {\n            const transactionInstr = await acceptOffer(offerAmount, mint, walletPublicKey, buyerAddress.toString());\n            const instructionsArray = [transactionInstr.instructions].flat();  \n            const transaction = new Transaction()\n            .add(...instructionsArray);\n\n            enqueueSnackbar(`Preparing to accept offer of: ${offerAmount} SOL from: ${buyerAddress.toString()}`,{ variant: 'info' });\n            const signedTransaction2 = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction2}\n                </Button>\n            );\n            enqueueSnackbar(`NFT transaction completed `,{ variant: 'success', action:snackaction });\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    },\n                    persist: true,\n                });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                props.setRefresh(true);\n                //props.refreshOffers(true);\n                //props.setRefreshOwner(true);\n            }, GRAPE_RPC_REFRESH);\n                \n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n        \n    }\n\n    const handleCancelListing =  async (salePrice: number) => {\n        try {\n            //START CANCEL LISTING\n            const transactionInstr = await cancelListing(salePrice, mint, walletPublicKey.toString(), mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Canceling Sell Now Price for ${salePrice} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Sell Now Price Removed `,{ variant: 'success', action:snackaction });\n            //END CANCEL LISTING\n            \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleWithdrawOffer = async (offerAmount: number) => {\n        try {\n            //const transactionInstr = await withdrawOffer(offerAmount, mint, walletPublicKey.toString(), mintOwner);\n            const transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n\n            enqueueSnackbar(`Preparing to withdraw offer for ${offerAmount} SOL`,{ variant: 'info' });\n            const signedTransaction = await sendTransaction(transaction, connection)\n           \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer Withdrawal complete `,{ variant: 'success', action:snackaction });\n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                },\n                persist: true,\n            });\n            setTimeout(function() {\n                closeSnackbar(eskey);\n                setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n            /*console.log('Withdrew', offerAmount, amountAdjusted, 'from your account with Auction House',\n                AUCTION_HOUSE_ADDRESS, '. New Balance:', currBal - amountAdjusted,);*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    const handleCancelOffer = async (offerAmount: number) => {\n        try {\n\n            //const transactionInstr = await cancelOffer(offerAmount, mint, walletPublicKey, mintOwner);\n\t\t\tconst transactionInstr = await cancelWithdrawOffer(offerAmount, mint, walletPublicKey, mintOwner);\n            const instructionsArray = [transactionInstr.instructions].flat();        \n            const transaction = new Transaction()\n            .add(\n                ...instructionsArray\n            );\n\n            enqueueSnackbar(`Preparing to Cancel Offer for ${offerAmount} SOL`,{ variant: 'info' });\n            //console.log('TransactionInstr:', TransactionInstr);\n            const signedTransaction = await sendTransaction(transaction, connection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n            closeSnackbar(cnfrmkey);\n            const snackaction = (key:any) => (\n                <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                    {signedTransaction}\n                </Button>\n            );\n            enqueueSnackbar(`Offer has been cancelled `,{ variant: 'success', action:snackaction });\n                \n            const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center',\n              },\n              persist: true,\n            });\n            setTimeout(function() {\n              closeSnackbar(eskey);\n              setRefreshOffers(true);\n            }, GRAPE_RPC_REFRESH);\n\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }  \n    }\n\n    //console.log('mintowner: ', mintOwner);\n    const GetSignatureOffers = async (spkey: string, until: any, slimit: Number)  => { // made this more generic of a function\n        const gslimit = slimit || 25;\n        const body = {\n          method: \"getSignaturesForAddress\", // getAccountInfo\n          jsonrpc: \"2.0\",\n          params: [\n            // Get the public key of the account you want the balance for.\n            spkey,\n            {\n                \"limit\":gslimit,\n                \"commitment\":\"confirmed\",\n                //\"before\":beforeSignature,\n                //\"until\":until \n            }\n          ],\n          \"id\":1,\n        };\n\n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        \n        const json = await response.json();\n        const resultValues = json.result\n        return resultValues;\n    };\n\n    const getOffers = async () => {\n        const anchorProgram = await loadAuctionHouseProgram(pubkey, ENV_AH, GRAPE_RPC_ENDPOINT);\n        const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n        const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n        let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mint)).toBuffer())], auctionHouseKey);\n        \n        //let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((publicKey).toBuffer())], auctionHouseKey);\n        //let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n        \n        /*\n        console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        console.log(\"derivedBuyerPDA: \"+derivedBuyerPDA);\n        console.log(\"derivedOwnerPDA: \"+derivedOwnerPDA);\n        */\n\n        //console.log(\"derivedMintPDA: \"+derivedMintPDA);\n        \n        let [result] = await Promise.all([GetSignatureOffers(derivedMintPDA[0].toString(),'', 25)]);\n        let offerResults: any[] = [];\n\t\tlet offerResultsCancelled: any[] = [];\n\t\tlet exists = false;\n        //let salePrice = 0;\n        let existSaleCancelAction = 0;\n        let cnt = 0;\n        let open_offers = 0;\n        var forSale = 0;\n        var forSaleDate = null;\n        var forSaleTimeAgo = null;\n        //console.log('derivedMintPDA[0]: '+derivedMintPDA[0].toString());\n\n        if (!loading){\n            setLoading(true);\n            \n            let signatures: any[] = [];\n            for (var value of result){\n                signatures.push(value.signature);\n            }\n\n            const getTransactionAccountInputs2 = await ggoconnection.getParsedTransactions(signatures, 'confirmed');\n            setOpenOffers(0);\n            for (var value of result){\n                if (value.err === null){                   \n                    \n                    const getTransactionAccountInputs = getTransactionAccountInputs2[cnt];\n\n                    try{\n                        //console.log(\"value: \"+JSON.stringify(value));\n                        //console.log(\"gtai (\"+getTransactionAccountInputs2.length+\"): \"+JSON.stringify(getTransactionAccountInputs2[cnt]));\n                        \n                        if (getTransactionAccountInputs?.transaction && getTransactionAccountInputs?.transaction?.message){\n                            let feePayer = new PublicKey(getTransactionAccountInputs?.transaction.message.accountKeys[0].pubkey); // .feePayer.toBase58();\n                            let progAddress = getTransactionAccountInputs.meta.logMessages[0];\n                            let instructionType = getTransactionAccountInputs.meta.logMessages[1];\n                            let allLogMessages = getTransactionAccountInputs.meta.logMessages;\n\n                            //console.log(\"feePayer: \"+feePayer.toBase58());\n\n                            //console.log('getTransactionAccountInputs:', getTransactionAccountInputs);\n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.meta.preTokenBalances));\n                            let auctionMint = getTransactionAccountInputs.meta.preTokenBalances[0]?.mint;                        \n                            //console.log(\"escrow: \"+JSON.stringify(getTransactionAccountInputs.transaction.feePayer));\n                            //if (auctionMint){\n                            {    \n                                    \n                                if ((value) && (value?.memo)){\n\n                                    let memo_arr: any[] = [];\n                                    let memo_str = value.memo;\n                                    let memo_instances = ((value.memo.match(/{/g)||[]).length);\n                                    if (memo_instances > 0) {\n                                        // multi memo\n                                        let mcnt = 0;\n                                        let submemo = memo_str;\n                                        //console.log(\"STR full (instance \"+memo_instances+\"): \"+submemo);\n                                        for (var mx=0;mx<memo_instances;mx++){\n                                            let init = submemo.indexOf('{');\n                                            let fin = submemo.indexOf('}');\n                                            memo_str = submemo.substr(init,fin-(init-1)); // include brackets\n                                            memo_arr.push(memo_str);\n                                            submemo = submemo.replace(memo_str, \"\");\n                                            //console.log(\"pushed (\"+mx+\"):: \"+memo_str + \" init: \"+init+\" fin: \"+fin);\n                                            //console.log(\"submemo: \"+submemo);\n                                        }\n                                    } else{\n                                        let init = memo_str.indexOf('{');\n                                        let fin = memo_str.indexOf('}');\n                                        memo_str = memo_str.substr(init,fin); // include brackets\n                                        memo_arr.push(memo_str);\n                                    }\n                                    \n                                    for (var memo_item of memo_arr){\n                                        try{\n                                            const memo_json = JSON.parse(memo_item);\n                                    \n                                            /*\n                                            if ((memo_json?.status === 3) || \n                                                (memo_json?.status === 4) ||\n                                                (memo_json?.state === 3) ||\n                                                (memo_json?.state === 4)){\n                                                if ((memo_json?.sellPrice)||(memo_json?.amount)){\n                                                    //let sol = parseFloat(new TokenAmount(memo_json?.amount, 9).format());\n                                                    //console.log(\"Sold for: \"+sol);\n                                                    offerResults.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: getTransactionAccountInputs.meta.preTokenBalances[0].mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                }\n                                            }*/\n\n                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                            if ( feePayer.toBase58() !== mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null){\n                                                \n                                                //console.log(\"value: \"+JSON.stringify(value));\n                                                const escrow = ( await getAuctionHouseBuyerEscrow(auctionHouseKey, feePayer,))[0];\n                                                let amount_on_escrow = await getTokenAmount(anchorProgram, escrow, auctionHouseObj.treasuryMint,); // total amount on escrow\n                                                // we need to now get the amount of the offer\n                                                //console.log(amount);\n                                                //let amount = await getTokenAmount(anchorProgram, escrow, new PublicKey(auctionMint),);\n                                                // we need to filter to find the amount that was offered to the specific mint\n                                                \n                                                if (amount_on_escrow >= 0) {\n                                                //{\n                                                    //let [inner_result] = await Promise.all([GetSignatureOffers(mintAta, '')]); // making this call again to get the memos                                       \n                                                    exists = false;                   \n                                                    {\n                                                        try{    \n                                                            if ((memo_json?.status === 0)||\n                                                                (memo_json?.status === 5) ||\n                                                                (memo_json?.state === 0)||\n                                                                (memo_json?.state === 5)){ // add to an array to search against other offers and cancel them out\n                                                                offerResultsCancelled.push({buyeraddress: feePayer, offeramount: memo_json?.amount, mint: memo_json.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                            }\n                                                            \n                                                            //console.log('memo_json: ' + memo_str);\n                                                            \n                                                            //if (memo_json.mint === getTransactionAccountInputs.meta.preTokenBalances[0].mint){\n                                                            {  \n                                                                //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n\n                                                                if ((memo_json?.status === 0) || // withdraw\n                                                                    (memo_json?.status === 1) || // offer\n                                                                    (memo_json?.status === 2) || // sale\n                                                                    (memo_json?.status === 3) || // listing/accept\n                                                                    //(memo_json?.status === 4) || // buy now\n                                                                    (memo_json?.status === 5) ||\n                                                                    (memo_json?.state === 0) || // withdraw\n                                                                    (memo_json?.state === 1) || // offer\n                                                                    (memo_json?.state === 2) || // sale\n                                                                    (memo_json?.state === 3) || // listing/accept\n                                                                    //(memo_json?.state === 4) || // buy now\n                                                                    (memo_json?.state === 5)){ // cancel\n                                                                    \n                                                                    //console.log(feePayer.toBase58() + \": \"+memo_str);\n\n                                                                    /*if ((memo_json?.amount <= amount_on_escrow)||\n                                                                        (memo_json?.offer <= amount_on_escrow)){ //.offer used in beta*/\n                                                                        \n                                                                        let found = false;\n                                                                        //console.log(feePayer+\": \"+JSON.stringify(memo_str));\n                                                                        for (var cancelled of offerResultsCancelled){\n                                                                            if ((cancelled.buyeraddress === feePayer.toBase58())&&\n                                                                                (cancelled.offeramount === amount_on_escrow)){\n                                                                                    found = true;\n                                                                            }\n                                                                        }\n                                                                        \n                                                                        if (!found){\n                                                                            //if (amount_on_escrow > highestOffer){\n                                                                                let sol = parseFloat(new TokenAmount(highestOffer, 9).format());\n                                                                                setHighestOffer(sol);\n                                                                            //}\n\n                                                                            exists = false;\n                                                                            //console.log('OFFER:: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                            for (var i = 0; i < offerResults.length; i++){\n                                                                                if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                                                    exists = true;\n                                                                                }\n                                                                            }\n                                                                            \n                                                                            if (!exists){\n                                                                                if (amount_on_escrow > 0){ // here check if the feePayer is good for the offer\n                                                                                    //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+' v '+amount_on_escrow+'): ' +memo_str);\n                                                                                    \n                                                                                    if (memo_json?.state === 1 || memo_json?.status === 1){\n                                                                                        open_offers++;\n                                                                                    }\n\n                                                                                    if (feePayer.toBase58() === mintOwner)\n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: true, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                    else   \n                                                                                        offerResults.push({buyeraddress: feePayer.toBase58(), offeramount: memo_json?.amount || memo_json?.offer, mint: memo_json?.mint, isowner: false, timestamp: value.blockTime, state: memo_json?.state || memo_json?.status});  \n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    // }\n                                                                }\n                                                            }\n                                                        }catch(e){console.log(\"ERR: \"+e)}\n                                                    }\n                                                }\n                                            }\n                                            //CHECK IF OWNER HAS AN ACTIVE SELL NOW PRICE\n                                            if ( feePayer.toBase58() === mintOwner && progAddress.search(AUCTION_HOUSE_PROGRAM_ID.toBase58())>0 && feePayer != null && existSaleCancelAction === 0){\n                                                //console.log('PUSH '+memo_json?.state+':: '+feePayer.toBase58() + '('+memo_json?.amount+'): ' +memo_str);\n                                                                                    \n                                                for (var i = 0; i < offerResults.length; i++){\n                                                    if ((feePayer.toBase58() === offerResults[i].buyeraddress)){\n                                                        exists = true;\n                                                    }\n                                                }\n\n                                                if (!exists){\n                                                    //console.log(feePayer+\": \"+JSON.stringify(memo_str)); \n                                                    if ((memo_json?.status === 2) ||\n                                                        (memo_json?.state === 2)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//make a final check for seller trade state\n                                                            const mintOwnerPK = new PublicKey(mintOwner);\n                                                            const mintKey = new PublicKey(mint);\n                                                            const tokenAccountKey = (await getAtaForMint(mintKey, mintOwnerPK))[0];\n                                                            const tokenSizeAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  1,\n                                                                  mintKey,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n                                                            let offerAmount = memo_json?.amount || memo_json?.sellPrice;\n                                                            //console.log('offerAmount', offerAmount);\n                                                            const buyPriceAdjusted = new BN(\n                                                                await getPriceWithMantissa(\n                                                                  convertSolVal(offerAmount),\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintOwnerPK, \n                                                                  anchorProgram,\n                                                                ),\n                                                            );\n\n                                                            const sellerTradeState = (\n                                                                await getAuctionHouseTradeState(\n                                                                  auctionHouseKey,\n                                                                  mintOwnerPK,\n                                                                  tokenAccountKey,\n                                                                  //@ts-ignore\n                                                                  auctionHouseObj.treasuryMint,\n                                                                  mintKey,\n                                                                  tokenSizeAdjusted,\n                                                                  buyPriceAdjusted,\n                                                                )\n                                                            )[0];\n                                                            const sellerTradeStateInfo = await ggoconnection.getAccountInfo(sellerTradeState);        \n                                                            //console.log('sellerTradeStateInfo:', sellerTradeStateInfo);\n                                                            if (sellerTradeStateInfo != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSale = memo_json?.amount || memo_json?.sellPrice;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tforSaleDate = value.blockTime;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                                                        //console.log('Saleprice:', salePrice);\n                                                    }\n                                                }\n                                                existSaleCancelAction = 1;\n                                            }\n                                        } catch(ert){console.log(\"ERR: \"+ert);}\n                                    }\n                                }\n                            }\n                        }\n                    }catch(er){console.log(\"ERR: \"+er)}\n                    cnt++;\n                }\n            }\n\n            setOpenOffers(open_offers);\n            // sort offers by highest offeramount\n            //console.log(\"offerResults pre: \"+JSON.stringify(offerResults));\n            offerResults.sort((a,b) => (a.offeramount < b.offeramount) ? 1 : -1);\n            //console.log(\"offerResults post: \"+JSON.stringify(offerResults));\n            setOffers(\n                offerResults\n            );\n            setSalePrice(\n                convertSolVal(forSale)\n            );\n        \n            if (forSaleDate){\n                let prettyForSaleDate = moment.unix(+forSaleDate).format(\"MMMM Do YYYY, h:mm a\");\n                setSaleDate(\n                    prettyForSaleDate\n                );\n                if (forSaleDate){\n                    let timeago = timeAgo(forSaleDate);\n                    setSaleTimeAgo(timeago);                                          \n                }\n            }\n            setLoading(false);\n        }\n    }\n\n    const handleBuyNow =  async (salePrice: number) => {\n\n        const buyerPublicKey = publicKey;\n        const sellerWalletKey = new web3.PublicKey(mintOwner);\n        handleAlertBuyNowClose();\n\n        try {\n            const anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n            const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n            const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n            const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, publicKey))[0];\n            const amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n\t\t\tconst escrowAmount = convertSolVal(amount);\n            //if (amount === 0){\n                const transactionInstr = await buyNowListing(salePrice, mint, sellerWalletKey.toString(), buyerPublicKey);\n                const instructionsArray = [transactionInstr.instructions].flat();        \n                const transaction = new Transaction()\n                .add(\n                    ...instructionsArray\n                );\n                \n                enqueueSnackbar(`Preparing to BUY NOW: ${salePrice} SOL from: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                //const signedTransaction = await sendTransaction(transaction, connection);\n                //await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Executing transfer for: ${mint.toString()}`,{ variant: 'info' });\n                const signedTransaction2 = await sendTransaction(transaction, connection);\n                \n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await ggoconnection.confirmTransaction(signedTransaction2, 'processed');\n                closeSnackbar(cnfrmkey);\n                const snackaction = (key:any) => (\n                    <Button href={`https://explorer.solana.com/tx/${signedTransaction2}`} target='_blank'  sx={{color:'white'}}>\n                        {signedTransaction2}\n                    </Button>\n                );\n                enqueueSnackbar(`NFT transaction complete `,{ variant: 'success', action:snackaction });\n                \n                if (escrowAmount > 0){\n                    //check the amount to redeposit \n                    let depositAmount = 0;\n                    if (escrowAmount > salePrice){\n                        depositAmount = salePrice;\n                    } else {\n                        depositAmount = escrowAmount;\n                    }\n                    const transactionInstr = await depositInGrapeVine(depositAmount, buyerPublicKey);\n                    const instructionsArray = [transactionInstr.instructions].flat();        \n                    const transaction = new Transaction()\n                    .add(\n                        ...instructionsArray\n                    );\n                    \n                    enqueueSnackbar(`Preparing to Deposit amount back in GrapeVine: ${depositAmount} SOL to: ${buyerPublicKey.toBase58()}`,{ variant: 'info' });\n                    const signedTransaction = await sendTransaction(transaction, connection);\n                    \n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await ggoconnection.confirmTransaction(signedTransaction, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const snackaction = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signedTransaction}`} target='_blank'  sx={{color:'white'}}>\n                            {signedTransaction}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Deposit back to GrapeVine completed`,{ variant: 'success', action:snackaction });\n                }\n                const eskey = enqueueSnackbar(`Metadata will be refreshed in a few seconds`, {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'center',\n                        },\n                        persist: true,\n                });\n                \n                setTimeout(function() {\n                    closeSnackbar(eskey);\n                    props.setRefresh(true);\n                }, GRAPE_RPC_REFRESH);\n\n            /*}\n            else {\n                enqueueSnackbar(`To BUY NOW you must first cancel the existing offer of ${convertSolVal(amount)} SOL.`,{ variant: 'warning' });\n            }*/\n        } catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${e}`,{ variant: 'error' });\n            console.log(\"Error: \"+e);\n            //console.log(\"Error: \"+JSON.stringify(e));\n        }     \n    }\n\n    const setSolanaPay = (props: any) => {\n        /* // NATIVE SOL\n            console.log('2. 🛍 Simulate a customer checkout \\n');\n            const amount = new BigNumber(20);\n            const reference = new Keypair().publicKey;\n            const label = 'Jungle Cats store';\n            const message = 'Jungle Cats store - your order - #001234';\n            const memo = 'JC#4098';\n        */\n\n        /* // SPL TOKEN\n        console.log('2. 🛍 Simulate a customer checkout \\n');\n        const amount = new BigNumber(20);\n        const reference = new Keypair().publicKey;\n        const label = 'Jungle Cats store';\n        const message = 'Jungle Cats store - your order - #001234';\n        const memo = 'JC#4098';\n        const splToken = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v)';\n        \n        */\n\n        /* // CREATE LINK\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo, splToken });\n        */\n\n        /*// ENCODE TO QR\n        \n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        */\n\n\n        /* // ADD QR TO PAGE\n        console.log('3. 💰 Create a payment request link \\n');\n        const url = encodeURL({ recipient: MERCHANT_WALLET, amount, reference, label, message, memo });\n\n        // encode URL in QR code\n        const qrCode = createQR(url);\n\n        // get a handle of the element\n        const element = document.getElementById('qr-code');\n\n        // append QR code to the element\n        qrCode.append(element);\n        */\n\n        return \n\n    }\n    \n    const ItemTools = (props: any) => {\n        \n        return (\n            <>\n            {(OTHER_MARKETPLACES.filter(e => e.address === mintOwner).length > 0) ? (\n                <></>\n            ):(\n                <Box\n                    sx={{ \n                        p: 1, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px',\n                        mb: 3\n                    }}\n                > \n                    <List\n                        sx={{ \n                            width: '100%'\n                        }}\n                        component=\"nav\"\n                        >       \n                        <ListItemText>\n                        \n                        {publicKey ? (\n                            <>\n                                {publicKey.toString() !== mintOwner ? (\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Buy now: \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                ):(\n                                    <Box\n                                        sx={{\n                                            pl:2,\n                                            mb:3\n                                        }}\n                                    >\n                                        <Typography component=\"div\" variant=\"caption\">\n                                            Selling now: \n                                            \n                                            {salePrice <= 0 ? \n                                                <>&nbsp;not listed for sale</>\n                                            :\n                                                <>\n                                                {( (saleTimeAgo) ? \n                                                    <small>&nbsp;listed {saleTimeAgo}</small>\n                                                :\n                                                    (saleDate) && <>&nbsp;listed on {saleDate}</>\n                                                )}\n                                                </>\n                                            }\n                                        </Typography>\n                                        {( (salePrice > 0) ?\n                                            <Typography component=\"div\" variant=\"h4\" sx={{fontWeight:'800'}}>\n                                                <strong>{salePrice} <SolCurrencyIcon /></strong>\n                                            </Typography>\n                                            : <></> \n                                        )}\n                                    </Box>\n                                )}\n    \n                                <Grid \n                                    container \n                                    spacing={2}\n                                    direction=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\">\n                                    \n                                    {publicKey.toString() !== mintOwner ? (\n                                            <Grid \n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\">\n                                                <>\n                                                            <BootstrapDialog \n                                                                fullWidth={true}\n                                                                maxWidth={\"sm\"}\n                                                                PaperProps={{\n                                                                    style: {\n                                                                        background: '#13151C',\n                                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                                        borderRadius: '20px'\n                                                                    }\n                                                                }}\n                                                                open={alertbuynowopen}\n                                                                onClose={handleAlertBuyNowClose}\n                                                                aria-labelledby=\"alert-bn-dialog-title\"\n                                                                aria-describedby=\"alert-bn-dialog-description\"\n                                                                >\n                                                                <DialogTitle id=\"alert-bn-dialog-title\">\n                                                                    <Typography>\n                                                                        BUY NOW CONFIRMATION\n                                                                    </Typography>\n                                                                </DialogTitle>\n                                                                <DialogContent>\n                                                                    <DialogContentText id=\"alert-bn-dialog-description\">\n                                                                    <br />\n                                                                    <Alert \n                                                                        severity=\"info\" variant=\"outlined\"\n                                                                        sx={{backgroundColor:'black'}}\n                                                                        >\n                                                                        Amount: {salePrice}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                                        Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                                        Owner: <MakeLinkableAddress addr={mintOwner} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                                        <Typography sx={{textAlign:'center'}}>\n                                                                        Make sure the above is correct<br/>press Accept to proceed\n                                                                        </Typography>\n                                                                    </Alert>\n                                                                    \n                                                                    </DialogContentText>\n                                                                </DialogContent>\n                                                                <DialogActions>\n                                                                    <Button onClick={handleAlertBuyNowClose}>Cancel</Button>\n                                                                    <Button \n                                                                        onClick={() => handleBuyNow(salePrice)}\n                                                                        autoFocus>\n                                                                    Accept\n                                                                    </Button>\n                                                                </DialogActions>\n                                                            </BootstrapDialog>\n                                                            \n                                                            <Grid item>\n                                                                {( (salePrice > 0) ?\n                                                                    <>\n                                                                        {/*\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Use Solana Pay\" \n                                                                            onClick={() => setSolanaPay(true)}\n                                                                            sx={{\n                                                                                background: 'linear-gradient(268.11deg, #00F0DD 3.12%, #DC1FFF 96.88%)',\n                                                                                borderRadius: '10px',\n                                                                                color: '#fff',\n                                                                                mr:1,\n                                                                            }}\n                                                                        >\n                                                                            <QrCodeIcon />\n                                                                        </Button>\n                                                                        */}\n                                                                        <Button \n                                                                            size=\"large\" \n                                                                            variant=\"contained\" \n                                                                            value=\"Buy Now\" \n                                                                            className=\"buyNowButton\"\n                                                                            onClick={() => setAlertBuyNowOpen(true)}\n                                                                            sx={{\n                                                                                \n                                                                            }}\n                                                                        >\n                                                                            <AccountBalanceWalletIcon sx={{mr:1}}/> Buy Now\n                                                                        </Button>\n                                                                    </>\n                                                                :<></>)}\n                                                            </Grid>\n\n                                                        {((grape_whitelisted > -1) ||\n                                                            (grape_member_balance > grape_offer_threshhold)) ? (\n                                                            <Grid item>\n                                                                {ValidateCurve(mintOwner) ?\n                                                                    <OfferPrompt mint={mint} mintOwner={mintOwner} setRefreshOffers={setRefreshOffers} solBalance={sol_portfolio_balance} highestOffer={highestOffer} />\n                                                                :\n                                                                    <SellNowVotePrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                                }\n                                                            </Grid>\n                                                        ) : (\n                                                            <Grid item>\n                                                                <Tooltip title={`The Marketplace requires ${TOKEN_VERIFICATION_AMOUNT} ${TOKEN_VERIFICATION_NAME} to make an offer`}>\n                                                                    <Button sx={{borderRadius:'10px'}}>\n                                                                        <Alert severity=\"warning\" sx={{borderRadius:'10px'}}>\n                                                                        Offers limited to {TOKEN_VERIFICATION_NAME} holders\n                                                                        </Alert>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                        )}\n                                                </>\n                                            </Grid>\n                                    )\n                                    :\n                                        <Grid \n                                        container\n                                        spacing={2}\n                                        alignItems=\"center\"\n                                        justifyContent=\"center\">\n                                            <Grid item>\n                                                \n                                                {( (salePrice > 0) ?\n                                                    <>\n                                                        <Button \n                                                            size=\"large\" \n                                                            color=\"error\"\n                                                            variant='outlined'\n                                                            onClick={() => handleCancelListing(salePrice)}\n                                                            sx={{\n                                                                borderRadius: '10px',\n                                                            }}\n                                                        >\n                                                            <CancelIcon sx={{mr:1}}/> Cancel Listing\n                                                        </Button>   \n                                                    </>\n                                                    : \n                                                    <>\n                                                        <SellNowPrompt mint={mint} mintOwner={mintOwner} salePrice={salePrice} grapeWeightedScore={grape_weighted_score} RefreshOffers={setRefreshOffers} />\n                                                    </>\n                                                )}\n                                            </Grid>\n                                        </Grid>\n                                }\n                                </Grid>\n                            </>\n                            )\n                        :(\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                            >\n                                <Grid item>\n                                <WalletConnectButton />\n                                </Grid>\n                            </Grid>\n                        )\n                        }\n                        </ListItemText>\n                    </List>\n                </Box>\n            )}\n            </>\n        );\n    }   \n\n    React.useEffect(() => {\n        if (refreshOffers){\n            //setOffers(null);\n            setRefreshOffers(!refreshOffers);\n        }\n\n        if (mintAta){\n            //if (!offers){\n                getOffers();\n            //}\n        }\n    }, [mintAta, refreshOffers]);\n\n    if ((!offers)||(loading)){\n        return (\n            <Box\n                sx={{ \n                    p: 1, \n                    mb: 3, \n                    width: '100%',\n                    background: '#13151C',\n                    borderRadius: '24px'\n                }}\n            > \n                <Skeleton\n                    sx={{ \n                        height: '100%',\n                        width: '100%'\n                    }}\n                />\n            </Box>\n        )\n    } else{      \n        return ( \n            <>\n                <ItemTools />\n                <Box\n                    sx={{ \n                        p: 1, \n                        mb: 3, \n                        width: '100%',\n                        background: '#13151C',\n                        borderRadius: '24px'\n                    }}\n                > \n                    <ListItemButton onClick={handleClick}\n                        sx={{borderRadius:'20px'}}\n                    >\n                        <ListItemIcon>\n                        <BallotIcon />\n                        </ListItemIcon>\n                        <ListItemText \n                            primary='Offers'\n                        />\n                            <Typography variant=\"caption\"><strong>{openOffers}</strong></Typography>\n                            {open_offers_collapse ? <ExpandLess /> : <ExpandMoreIcon />}\n                    </ListItemButton>\n                    <Collapse in={open_offers_collapse} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" \n                            sx={{ \n                                width: '100%',\n                            }}>\n                            <ListItemText>\n                                <Box sx={{ margin: 1 }}>\n                                    {/*<div style={{width: 'auto', overflowX: 'scroll'}}>*/}\n                                    <TableContainer>\n                                        <Table size=\"small\" aria-label=\"purchases\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell><Typography variant=\"caption\">Address</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Offer</Typography></TableCell>\n                                                    <TableCell align=\"center\"><Typography variant=\"caption\">Date</Typography></TableCell>\n                                                    <TableCell></TableCell>\n                                                </TableRow>\n                                            </TableHead>\n\n                                            <BootstrapDialog \n                                                fullWidth={true}\n                                                maxWidth={\"sm\"}\n                                                PaperProps={{\n                                                    style: {\n                                                        background: '#13151C',\n                                                        border: '1px solid rgba(255,255,255,0.05)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.1)',\n                                                        borderRadius: '20px'\n                                                    }\n                                                    /*\n                                                    style: {\n                                                        \n                                                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                                                        boxShadow: '3',\n                                                        border: '1px solid rgba(255,255,255,0.15)',\n                                                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                                                        borderRadius: '20px',\n                                                        padding:'4'\n                                                        },*/\n                                                    }}\n                                                \n                                                    open={alertopen}\n                                                    onClose={handleAlertClose}\n                                                    aria-labelledby=\"alert-dialog-title\"\n                                                    aria-describedby=\"alert-dialog-description\"\n                                                    >\n                                                    <DialogTitle id=\"alert-dialog-title\">\n                                                        <Typography>\n                                                            CONFIRMATION\n                                                        </Typography>\n                                                    </DialogTitle>\n                                                    <DialogContent>\n                                                        <DialogContentText id=\"alert-dialog-description\">\n                                                        <br />\n                                                        <Alert severity=\"info\" variant=\"outlined\" sx={{backgroundColor:'black'}} >\n                                                            Amount: {final_offeramount}<SolCurrencyIcon sx={{fontSize:\"12px\"}} /><br/>\n                                                            Mint: <MakeLinkableAddress addr={mint} trim={0} hasextlink={true} hascopy={false} fontsize={16} /> <br/>\n                                                            From: <MakeLinkableAddress addr={final_offerfrom} trim={0} hasextlink={true} hascopy={false} fontsize={16} /><br/>\n                                                            <Typography sx={{textAlign:'center'}}>\n                                                            Make sure the above is correct<br/>press Accept to proceed\n                                                            </Typography><br/>\n                                                        </Alert>\n                                                        \n                                                        </DialogContentText>\n                                                    </DialogContent>\n                                                    <DialogActions>\n                                                        <Button onClick={handleAlertClose}>Cancel</Button>\n                                                        <Button \n                                                            onClick={() => handleAcceptOffer(final_offeramount, final_offerfrom)}\n                                                            autoFocus>\n                                                        Accept\n                                                        </Button>\n                                                    </DialogActions>\n                                                </BootstrapDialog>\n\n                                            {offers && offers.map((item: any) => (\n                                                <>\n\n                                                    {(item.state === 1) ? (\n                                                        <TableRow>\n                                                            <TableCell><Typography variant=\"body2\">\n                                                                <Tooltip title='View Profile'>\n                                                                    <Button size=\"small\" variant=\"text\" component={Link} to={`${GRAPE_PROFILE}${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        {trimAddress(item.buyeraddress,4)}\n                                                                    </Button>\n                                                                </Tooltip>\n                                                                <Tooltip title='Visit Explorer'>\n                                                                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${item.buyeraddress}`} target=\"_blank\" sx={{ml:1,color:'white',borderRadius:'24px'}}>\n                                                                        <OpenInNewIcon sx={{fontSize:'14px'}} />\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </Typography></TableCell>\n                                                            <TableCell  align=\"right\">\n                                                                <Typography variant=\"body2\">\n                                                                    {convertSolVal(item.offeramount)} <SolCurrencyIcon sx={{fontSize:\"10.5px\"}} />\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                                <Typography variant=\"caption\">\n                                                                    <Tooltip\n                                                                        title={formatBlockTime(item.timestamp, true, true)}\n                                                                    >\n                                                                        <Button size=\"small\">{timeAgo(item.timestamp)}</Button>\n                                                                    </Tooltip>\n                                                                </Typography>\n                                                            </TableCell>\n                                                            <TableCell align=\"right\">\n                                                            \n                                                            <>\n                                                                {publicKey && publicKey.toBase58() === mintOwner && (\n                                                                    <div>\n                                                                    <Button\n                                                                        onClick={() => setAcceptPrompt(convertSolVal(item.offeramount), item.buyeraddress)} //acceptOfferWrapper(convertSolVal(item.offeramount), item.buyeraddress)} //handleAcceptOffer(convertSolVal(item.offeramount), item.buyeraddress)}\n                                                                        className='buyNowButton'\n                                                                        sx={{\n                                                                        }}\n                                                                    >\n                                                                        ACCEPT\n                                                                    </Button>\n                                                                </div>\n                                                                )}\n                                                                \n                                                                {publicKey && publicKey.toBase58() === item.buyeraddress && (\n                                                                    <Button \n                                                                        color=\"error\"\n                                                                        variant=\"text\"\n                                                                        //onClick={() => handleWithdrawOffer(convertSolVal(item.offeramount))}\n                                                                        onClick={() => handleCancelOffer(convertSolVal(item.offeramount))}\n                                                                        sx={{\n                                                                            borderRadius: '10px',\n                                                                        }}\n                                                                    >\n                                                                        <CancelIcon />\n                                                                    </Button>\n                                                                )}\n                                                            </>\n                                                            \n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ):(<></>)}\n                                                </>\n                                            ))}\n                                        </Table>\n                                    </TableContainer>\n                                </Box>\n                            </ListItemText>\n                        </List>\n                    </Collapse>\n                </Box>\n            </>\n        )\n    }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nfunction convertSolVal(sol: any){\n  let sol_precision = 6;\n  return +sol/1000000000;\n}\n\n  export async function submitOffer(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n    const buyerWalletKey = new web3.PublicKey(walletPublicKey);\n    //check if escrow amount already exists to determine if we need to deposit amount to grapevine \n    const escrow = (await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey))[0];\n    const escrow_amount = await getTokenAmount(anchorProgram,escrow,auctionHouseObj.treasuryMint,);\n    const escrowSolAmount = convertSolVal(escrow_amount);\n    //console.log('escrow_amount:',escrowSolAmount, 'offerAmount:', offerAmount);\n    //execute BUY\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n          offerAmount,\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    );\n\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n          tokenSize,\n          mintKey,\n          buyerWalletKey,\n          anchorProgram,\n      ),\n    ); \n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey, \n    );\n\n    const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey);    \n  \n    //const tokenAccountKey: web3.PublicKey = tokenAccount ? new web3.PublicKey(tokenAccount) : results.value[0].address;\n    const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n    const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      buyerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n    const ata = (\n        await getAtaForMint(\n            //@ts-ignore\n            auctionHouseObj.treasuryMint,\n            buyerWalletKey,\n        )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.buy(\n      tradeBump,\n      escrowBump,\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n          accounts: {\n              wallet: buyerWalletKey,\n              paymentAccount: isNative ? buyerWalletKey : ata,\n              transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n              metadata: await getMetadata(mintKey),\n              tokenAccount: tokenAccountKey,\n              escrowPaymentAccount,\n              //@ts-ignore\n              treasuryMint: auctionHouseObj.treasuryMint,\n              //@ts-ignore\n              authority: auctionHouseObj.authority,\n              auctionHouse: auctionHouseKey,\n              //@ts-ignore\n              auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n              buyerTradeState: tradeState,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              systemProgram: web3.SystemProgram.programId,\n              rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n      }\n    );\n    \n    //const instructions = [instruction];\n    const instructions = [\n      ...(isNative\n          ? []\n          : [\n              Token.createApproveInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  transferAuthority.publicKey,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n                  buyPriceAdjusted.toNumber(),\n              ),\n          ]),\n      instruction,\n      ...(isNative\n          ? []\n          : [\n              Token.createRevokeInstruction(\n                  TOKEN_PROGRAM_ID,\n                  ata,\n                  buyerWalletKey, //walletKeyPair.publicKey, \n                  [],\n              ),\n          ]),\n      ];\n    //END BUY\n\n    //CHECK IF DEPOSIT INSTRUCTTION IS NECESSARY\n    if (escrowSolAmount > 0){\n      //calculate how much more to deposit\n      let depositAmount = 0;\n      if (offerAmount < escrowSolAmount){\n          depositAmount = offerAmount;\n      } else {\n          depositAmount = (offerAmount - (offerAmount - escrowSolAmount));\n      }\n      //console.log('depositAmount:', depositAmount);\n      const amountAdjusted = await getPriceWithMantissa(\n        depositAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n      );\n\n      const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n        auctionHouseKey,\n        buyerWalletKey,\n      );\n\n      const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n      const ata = (\n        await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerWalletKey,\n        )\n      )[0];\n\n      const transferAuthority = web3.Keypair.generate();\n      //const signers = isNative ? [] : [transferAuthority];\n\n      const instruction2 = anchorProgram.instruction.deposit(\n        escrowBump,\n        new BN(amountAdjusted),\n        {\n          accounts: {\n            wallet: buyerWalletKey,\n            paymentAccount: isNative ? buyerWalletKey : ata,\n            transferAuthority: isNative\n              ? web3.SystemProgram.programId\n              : transferAuthority.publicKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          },\n        },\n      );\n      instructions.push(instruction2);\n    }\n    // END ADDING DEPOSIT\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    const GRAPE_AH_MEMO = {\n      state:1, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: buyerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: buyerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n  \n\n\n  }","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function acceptOffer(offerAmount: number, mint: string, sellerWalletKey: PublicKey, buyerAddress: any): Promise<InstructionsAndSignersSet> {\n  //START SELL\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted,\n      buyPriceAdjusted,\n  );\n  const [freeTradeState1, freeTradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    sellerWalletKey,\n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    new BN(0),\n  );\n\n  const signers: any[] = [];\n\n  const instruction = anchorProgram.instruction.sell(\n    tradeBump,\n    freeTradeBump,\n    programAsSignerBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n      accounts: {\n        wallet: sellerWalletKey,\n        metadata: await getMetadata(mintKey),\n        tokenAccount: tokenAccountKey,\n        //@ts-ignore\n        authority: auctionHouseObj.authority,\n        auctionHouse: auctionHouseKey,\n        //@ts-ignore\n        auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n        sellerTradeState: tradeState,\n        freeSellerTradeState: freeTradeState1,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        programAsSigner,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers,\n    },\n  ); \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const instructions = [instruction];\n  //END SELL\n  \n  //START EXECUTE SALE\n\n  const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerWalletKey,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [escrowPaymentAccount, bump] = await getAuctionHouseBuyerEscrow(auctionHouseKey, buyerWalletKey,);\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    bump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerWalletKey,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerWalletKey)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:4, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n  \n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getAtaForMint,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\n\nexport async function cancelListing(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any): Promise<InstructionsAndSignersSet> {\n\n    let tokenSize = 1;\n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n    const mintKey = new web3.PublicKey(mint);\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);\n    const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n    const buyPriceAdjusted = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('buyPriceAdjusted:', buyPriceAdjusted);\n    const tokenSizeAdjusted = new BN(\n      await getPriceWithMantissa(\n        tokenSize,\n        mintKey,\n        sellerWalletKey,\n        anchorProgram,\n      ),\n    );\n    //console.log('tokenSizeAdjusted:', tokenSizeAdjusted);\n    const tokenAccountKey = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n    //console.log('tokenAccountKey:', tokenAccountKey.toBase58());\n    const tradeState = (\n          await getAuctionHouseTradeState(\n              auctionHouseKey,\n              sellerWalletKey,\n              tokenAccountKey,\n              //@ts-ignore\n              auctionHouseObj.treasuryMint,\n              mintKey,\n              tokenSizeAdjusted,\n              buyPriceAdjusted,\n          )\n    )[0];  \n    //console.log('tradeState:', tradeState.toBase58());\n    const signers: any[] = [];\n\n    const instruction = anchorProgram.instruction.cancel(\n      buyPriceAdjusted,\n      tokenSizeAdjusted,\n      {\n        accounts: {\n          wallet: sellerWalletKey,\n          tokenAccount: tokenAccountKey,\n          tokenMint: mintKey,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        signers,\n      },\n    );\n    //console.log(\"instruction: \"+JSON.stringify(instruction));\n    const instructions = [instruction];\n\n    let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((sellerWalletKey).toBuffer())], auctionHouseKey);\n    let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n  \n    //is it withdraw here or cancel (we are removing the listing we made)\n    const GRAPE_AH_MEMO = {\n      state:5, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n      ah:auctionHouseKey.toString(), // pk\n      mint:mintKey.toString(), // mint\n      amount:buyPriceAdjusted.toNumber() // price\n    };\n\n    instructions.push(\n      SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedMintPDA[0],\n        lamports: 0,\n      })\n    );\n\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedBuyerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      SystemProgram.transfer({\n          fromPubkey: sellerWalletKey,\n          toPubkey: derivedOwnerPDA[0],\n          lamports: 0,\n      })\n    );\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: sellerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../../utils/grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n    getAuctionHouseProgramAsSigner,\n    getMetadata,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { decodeMetadata, Metadata } from './helpers/schema';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nexport async function buyNowListing(offerAmount: number, mint: string, walletPublicKey: string, buyerAddress: PublicKey): Promise<InstructionsAndSignersSet> {\n  //START BUY\n  let tokenSize = 1;\n  const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);\n  const mintKey = new web3.PublicKey(mint);\n  let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n  const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n  const sellerWalletKey = new web3.PublicKey(walletPublicKey);\n\n  const buyPriceAdjusted = new BN(\n    await getPriceWithMantissa(\n      offerAmount,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const tokenSizeAdjusted = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      buyerAddress, \n      anchorProgram,\n    ),\n  );\n\n  const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n    auctionHouseKey,\n    buyerAddress, \n  );\n\n  const results = await anchorProgram.provider.connection.getTokenLargestAccounts(mintKey); \n\n  const tokenAccountKey: web3.PublicKey = results.value[0].address;\n\n  const [tradeState, tradeBump] = await getAuctionHouseTradeState(\n    auctionHouseKey,\n    buyerAddress, \n    tokenAccountKey,\n    //@ts-ignore\n    auctionHouseObj.treasuryMint,\n    mintKey,\n    tokenSizeAdjusted,\n    buyPriceAdjusted,\n  );\n\n  const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n  const ata = (\n      await getAtaForMint(\n          //@ts-ignore\n          auctionHouseObj.treasuryMint,\n          buyerAddress, \n      )\n  )[0];\n\n  const transferAuthority = web3.Keypair.generate();\n  const signers = isNative ? [] : [transferAuthority];\n\n  const instruction = anchorProgram.instruction.buy(\n    tradeBump,\n    escrowBump,\n    buyPriceAdjusted,\n    tokenSizeAdjusted,\n    {\n        accounts: {\n            wallet: buyerAddress,\n            paymentAccount: isNative ? buyerAddress : ata,\n            transferAuthority: isNative ? web3.SystemProgram.programId : transferAuthority.publicKey,\n            metadata: await getMetadata(mintKey),\n            tokenAccount: tokenAccountKey,\n            escrowPaymentAccount,\n            //@ts-ignore\n            treasuryMint: auctionHouseObj.treasuryMint,\n            //@ts-ignore\n            authority: auctionHouseObj.authority,\n            auctionHouse: auctionHouseKey,\n            //@ts-ignore\n            auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n            buyerTradeState: tradeState,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: web3.SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n    }\n  );\n\n  const instructions = [\n    ...(isNative\n        ? []\n        : [\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                transferAuthority.publicKey,\n                buyerAddress,\n                [],\n                buyPriceAdjusted.toNumber(),\n            ),\n        ]),\n    instruction,\n    ...(isNative\n        ? []\n        : [\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                ata,\n                buyerAddress,\n                [],\n            ),\n        ]),\n  ];\n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  //const instructions = [instruction];\n  //END BUY\n  \n  //START EXECUTE SALE\n  //const buyerWalletKey = new web3.PublicKey(buyerAddress);\n  const buyPriceAdjusted2 = new BN(\n      await getPriceWithMantissa(\n        offerAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        sellerWalletKey, \n        anchorProgram,\n      ),\n  );\n\n  const tokenSizeAdjusted2 = new BN(\n    await getPriceWithMantissa(\n      tokenSize,\n      mintKey,\n      sellerWalletKey, \n      anchorProgram,\n    ),\n  );\n  const tokenAccountKey2 = (await getAtaForMint(mintKey, sellerWalletKey))[0];\n  const buyerTradeState = (\n      await getAuctionHouseTradeState(\n        auctionHouseKey,\n        buyerAddress,\n        tokenAccountKey2,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        mintKey,\n        tokenSizeAdjusted2,\n        buyPriceAdjusted2,\n      )\n  )[0];\n  const sellerTradeState = (\n    await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      buyPriceAdjusted2,\n    )\n  )[0];\n  const [freeTradeState, freeTradeStateBump] =\n  await getAuctionHouseTradeState(\n      auctionHouseKey,\n      sellerWalletKey,\n      tokenAccountKey2,\n      //@ts-ignore\n      auctionHouseObj.treasuryMint,\n      mintKey,\n      tokenSizeAdjusted2,\n      new BN(0),\n  );\n\n  const [programAsSigner, programAsSignerBump] = await getAuctionHouseProgramAsSigner();\n\n  const metadata = await getMetadata(mintKey);\n  const metadataObj = await anchorProgram.provider.connection.getAccountInfo(metadata,);\n  const metadataDecoded: Metadata = decodeMetadata(Buffer.from(metadataObj.data),);\n  \n  const remainingAccounts = [];\n  for (let i = 0; i < metadataDecoded.data.creators.length; i++) {\n    remainingAccounts.push({\n        pubkey: new web3.PublicKey(metadataDecoded.data.creators[i].address),\n        isWritable: true,\n        isSigner: false,\n    });\n    if (!isNative) {\n        remainingAccounts.push({\n            pubkey: (await getAtaForMint(\n                        //@ts-ignore\n                        auctionHouseObj.treasuryMint,\n                        remainingAccounts[remainingAccounts.length - 1].pubkey,\n                        )\n                    )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n    }\n  }\n\n  const tMint: web3.PublicKey = auctionHouseObj.treasuryMint;\n\n  const instruction2 = anchorProgram.instruction.executeSale(\n    escrowBump,\n    freeTradeStateBump,\n    programAsSignerBump,\n    buyPriceAdjusted2,\n    tokenSizeAdjusted2,\n    {\n      accounts: {\n          buyer: buyerAddress,\n          seller: sellerWalletKey,\n          metadata,\n          tokenAccount: tokenAccountKey2,\n          tokenMint: mintKey,\n          escrowPaymentAccount,\n          treasuryMint: tMint,\n          sellerPaymentReceiptAccount: isNative ? sellerWalletKey : (\n              await getAtaForMint(tMint, sellerWalletKey)\n              )[0],\n          buyerReceiptTokenAccount: (\n              await getAtaForMint(mintKey, buyerAddress)\n          )[0],\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          //@ts-ignore\n          auctionHouseTreasury: auctionHouseObj.auctionHouseTreasury,\n          sellerTradeState,\n          buyerTradeState,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          ataProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          programAsSigner,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          freeTradeState,\n      },\n      remainingAccounts,\n      signers,\n    },\n  );    \n\n  if (AUCTION_HOUSE_ADDRESS) {\n    //signers.push(auctionHouseKeypairLoaded);\n    instruction2.keys\n      .filter(k => k.pubkey.equals(new PublicKey(AUCTION_HOUSE_ADDRESS)))\n      .map(k => (k.isSigner = false));\n  }\n\n  const GRAPE_AH_MEMO = {\n    state:3, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel)\n    ah:auctionHouseKey.toString(), // pk\n    mint:mintKey.toString(), // mint\n    amount:buyPriceAdjusted.toNumber() // price\n  };\n\n\n//  let derivedMintPDA = await web3.PublicKey.findProgramAddress([Buffer.from((mintKey).toBuffer())], auctionHouseKey);\n//  let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n//  let derivedOwnerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((new PublicKey(mintOwner)).toBuffer())], auctionHouseKey);\n/*\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: sellerWalletKey,\n      toPubkey: derivedMintPDA[0],\n      lamports: 0,\n    })\n  );\n\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedBuyerPDA[0],\n        lamports: 0,\n    })\n  );\n  instructions.push(\n    SystemProgram.transfer({\n        fromPubkey: sellerWalletKey,\n        toPubkey: derivedOwnerPDA[0],\n        lamports: 0,\n    })\n  );*/\n  instructions.push(instruction2);\n\n  instructions.push(\n    new TransactionInstruction({\n        keys: [{ pubkey: buyerAddress, isSigner: true, isWritable: true }],\n        data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n    })\n  );\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n}","import {\n    ENV_AH,\n    AUCTION_HOUSE_ADDRESS,\n    WRAPPED_SOL_MINT,\n    TOKEN_PROGRAM_ID,\n  } from './helpers/constants';\nimport { PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport { GRAPE_RPC_ENDPOINT, OTHER_MARKETPLACES } from '../grapeTools/constants';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\n\nimport {\n    loadAuctionHouseProgram,\n    getAuctionHouseTradeState,\n    getTokenAmount,\n    getAtaForMint,\n    getAuctionHouseBuyerEscrow,\n  } from './helpers/accounts';\nimport { getPriceWithMantissa } from './helpers/various';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function depositInGrapeVine(escrowAmount: number, buyerWalletKey: PublicKey): Promise<InstructionsAndSignersSet> {\n  \n    const auctionHouseKey = new web3.PublicKey(AUCTION_HOUSE_ADDRESS);  \n\n    let anchorProgram = await loadAuctionHouseProgram(null, ENV_AH, GRAPE_RPC_ENDPOINT);\n    const auctionHouseObj = await anchorProgram.account.auctionHouse.fetch(auctionHouseKey,);    \n\n    const amountAdjusted = await getPriceWithMantissa(\n        escrowAmount,\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n        anchorProgram,\n    );\n\n    const [escrowPaymentAccount, escrowBump] = await getAuctionHouseBuyerEscrow(\n      auctionHouseKey,\n      buyerWalletKey,\n    );\n\n    const isNative = auctionHouseObj.treasuryMint.equals(WRAPPED_SOL_MINT);\n\n    const ata = (\n      await getAtaForMint(\n        //@ts-ignore\n        auctionHouseObj.treasuryMint,\n        buyerWalletKey,\n      )\n    )[0];\n\n    const transferAuthority = web3.Keypair.generate();\n    const signers = isNative ? [] : [transferAuthority];\n\n    const instruction = anchorProgram.instruction.deposit(\n      escrowBump,\n      new BN(amountAdjusted),\n      {\n        accounts: {\n          wallet: buyerWalletKey,\n          paymentAccount: isNative ? buyerWalletKey : ata,\n          transferAuthority: isNative\n            ? web3.SystemProgram.programId\n            : transferAuthority.publicKey,\n          escrowPaymentAccount,\n          //@ts-ignore\n          treasuryMint: auctionHouseObj.treasuryMint,\n          //@ts-ignore\n          authority: auctionHouseObj.authority,\n          auctionHouse: auctionHouseKey,\n          //@ts-ignore\n          auctionHouseFeeAccount: auctionHouseObj.auctionHouseFeeAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n      },\n    );\n\n    const instructions = [instruction];\n  \n    const GRAPE_AH_MEMO = {\n      state:6, // status (0: withdraw, 1: offer, 2: listing, 3: buy/execute (from listing), 4: buy/execute(accept offer), 5: cancel, 6: deposit)\n      ah:auctionHouseKey.toString(), // pk\n      mint:null, // mint\n      amount:amountAdjusted // price\n    };\n      \n    let derivedBuyerPDA = await web3.PublicKey.findProgramAddress([Buffer.from((buyerWalletKey).toBuffer())], auctionHouseKey);\n\n    instructions.push(\n        SystemProgram.transfer({\n            fromPubkey: buyerWalletKey,\n            toPubkey: derivedBuyerPDA[0],\n            lamports: 0,\n        })\n      );\n\n    instructions.push(\n      new TransactionInstruction({\n          keys: [{ pubkey: buyerWalletKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(JSON.stringify(GRAPE_AH_MEMO), 'utf-8'),\n          programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      })\n    );\n\n    return {\n      signers: signers,\n      instructions: instructions\n    }\n\n}","import { PublicKey, SystemProgram, TransactionInstruction, Transaction } from '@solana/web3.js'\nimport { BN, web3 } from '@project-serum/anchor';\nimport {InstructionsAndSignersSet} from \"./helpers/types\";\nimport { \n  getRealms, \n  getVoteRecordsByVoter, \n  getTokenOwnerRecordAddress,\n  getTokenOwnerRecordForRealm, \n  getTokenOwnerRecordsByOwner, \n  getGovernanceAccounts, \n  pubkeyFilter, \n  TokenOwnerRecord, \n  withCreateProposal,\n  VoteType, \n  getGovernanceProgramVersion,\n  serializeInstructionToBase64,\n  createInstructionData,\n  withInsertTransaction,\n  InstructionData,\n  AccountMetaData,\n} from '@solana/spl-governance';\n\nimport { \n  TOKEN_REALM_PROGRAM_ID,\n} from '../grapeTools/constants';\nimport { AnyMxRecord } from 'dns';\n\n// Converts TransactionInstruction to InstructionData format\n/*export const createInstructionData2 = (instruction: TransactionInstruction) => {\n  return new InstructionData({\n    programId: instruction.programId,\n    data: instruction.data,\n    accounts: instruction.keys.map(\n      k =>\n        new AccountMetaData({\n          pubkey: k.pubkey,\n          isSigner: k.isSigner,\n          //isSigner: false,\n          isWritable: k.isWritable,\n          //isWritable: false,\n        }),\n    ),\n  });\n};*/\n\n  export async function createDAOProposal(offerAmount: number, mint: string, walletPublicKey: string, mintOwner: any, weightedScore: any, daoPublicKey: string, connection: any, transactionInstr: InstructionsAndSignersSet, sendTransaction: any): Promise<InstructionsAndSignersSet> {\n    \n    //console.log('inDAOProposal instructionArray before adding DAO Instructions:'+JSON.stringify(transactionInstr));\n    let instructions: TransactionInstruction[] = [];\n    //let initialInstructions: TransactionInstruction[] = [];\n    const signers: any[] = [];\n    // fetch realms information on the dao\n    const voteType = VoteType.SINGLE_CHOICE;\n    const options = ['Approve'];\n    const useDenyOption = true;\n    const programId = new PublicKey(TOKEN_REALM_PROGRAM_ID);\n    const realmPk = new PublicKey('DcR6g5EawaEoTRYcnuBjtD26VSVjWNoi1C1hKJWwvcup');\n    const governancePk = new PublicKey('JAbgQLj9MoJ2Kvie8t8Y6z6as3Epf7rDp87Po3wFwrNK');\n    const name = 'Sale of NFT: '+mint+' for '+offerAmount+'sol on grape.art';\n    const descriptionLink = '';\n    const governingTokenMint = new PublicKey('9Z7SQ1WMiDNaHu2cX823sZxD2SQpscoLGkyeLAHEqy9r');\n    const governanceAuthority = new PublicKey(walletPublicKey);\n    const proposalIndex = 0;\n    const programVersion = await getGovernanceProgramVersion(\n      connection,\n      //new PublicKey(daoPublicKey),\n      programId,\n    );\n    console.log('programVersion:',programVersion);\n\n    const tokenOwnerRecordPk = await getTokenOwnerRecordAddress(\n      programId,\n      realmPk,\n      governingTokenMint,\n      governancePk\n    );\n    console.log('tokenOwnerRecordPK:', tokenOwnerRecordPk.toBase58());\n    const proposalPk = await withCreateProposal(\n      instructions,\n      //new PublicKey(daoPublicKey), \n      programId,\n      programVersion,\n      realmPk,\n      governancePk,\n      tokenOwnerRecordPk,\n      name,\n      descriptionLink,\n      governingTokenMint,\n      governanceAuthority,\n      proposalIndex,\n      voteType,\n      options,\n      useDenyOption,\n      governanceAuthority,\n  );\n  \n  let instructionData: InstructionData[]=[]; //createInstructionData([transactionInstr.instructions]);\n  \n  //to add all 5 instructions from sellNowListing\n  let j = 0;\n  for (var instruction of transactionInstr.instructions){\n    //instructionData.push(instruction);\n    \n    if (j < 2){\n      //instructionData.push(createInstructionData2(instruction));\n      instructionData.push(createInstructionData(instruction));\n      console.log(\"instructionData: \"+JSON.stringify(instructionData));\n    }\n    j++;\n  }\n\n  //console.log('instruction in position 0'+JSON.stringify(instructionData[0]));\n  //const instructionData2 = createInstructionData(instruction);\n  //instructionData.push(instructionData2);\n\n  //just adding the first instruction instead \n  //const instructionData2 = createInstructionData(transactionInstr.instructions[0]);\n  \n\n  const wit = await withInsertTransaction(\n    instructions,\n    //new PublicKey(daoPublicKey),\n    programId,\n    programVersion,\n    governancePk,\n    proposalPk,\n    tokenOwnerRecordPk,\n    governanceAuthority,\n    0,\n    0,\n    0,\n    instructionData,\n    //[instructionData2],\n    governanceAuthority,\n  );\n  \n    //console.log(\"instructions: \"+JSON.stringify(instructions));\n\n  return {\n    signers: signers,\n    instructions: instructions\n  }\n\n}"],"sourceRoot":""}